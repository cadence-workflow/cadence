// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by thriftrw v1.6.0. DO NOT EDIT.
// @generated

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"math"
	"strconv"
	"strings"
)

type ActivityTaskCancelRequestedEventAttributes struct {
	ActivityId                   *string `json:"activityId,omitempty"`
	DecisionTaskCompletedEventId *int64  `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *ActivityTaskCancelRequestedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskCancelRequestedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskCancelRequestedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("ActivityTaskCancelRequestedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I64_EqualsPtr(lhs, rhs *int64) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func (v *ActivityTaskCancelRequestedEventAttributes) Equals(rhs *ActivityTaskCancelRequestedEventAttributes) bool {
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *ActivityTaskCancelRequestedEventAttributes) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

func (v *ActivityTaskCancelRequestedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type ActivityTaskCancelRequestedEventFilter struct{}

func (v *ActivityTaskCancelRequestedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskCancelRequestedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *ActivityTaskCancelRequestedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("ActivityTaskCancelRequestedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskCancelRequestedEventFilter) Equals(rhs *ActivityTaskCancelRequestedEventFilter) bool {
	return true
}

type ActivityTaskCanceledEventAttributes struct {
	Details                      []byte  `json:"details"`
	LatestCancelRequestedEventId *int64  `json:"latestCancelRequestedEventId,omitempty"`
	ScheduledEventId             *int64  `json:"scheduledEventId,omitempty"`
	StartedEventId               *int64  `json:"startedEventId,omitempty"`
	Identity                     *string `json:"identity,omitempty"`
}

func (v *ActivityTaskCanceledEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.LatestCancelRequestedEventId != nil {
		w, err = wire.NewValueI64(*(v.LatestCancelRequestedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskCanceledEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.LatestCancelRequestedEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskCanceledEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.LatestCancelRequestedEventId != nil {
		fields[i] = fmt.Sprintf("LatestCancelRequestedEventId: %v", *(v.LatestCancelRequestedEventId))
		i++
	}
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("ActivityTaskCanceledEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskCanceledEventAttributes) Equals(rhs *ActivityTaskCanceledEventAttributes) bool {
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_I64_EqualsPtr(v.LatestCancelRequestedEventId, rhs.LatestCancelRequestedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *ActivityTaskCanceledEventAttributes) GetLatestCancelRequestedEventId() (o int64) {
	if v.LatestCancelRequestedEventId != nil {
		return *v.LatestCancelRequestedEventId
	}
	return
}

func (v *ActivityTaskCanceledEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *ActivityTaskCanceledEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *ActivityTaskCanceledEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type ActivityTaskCanceledEventFilter struct {
	ActivityType *ActivityType `json:"activityType,omitempty"`
	ActivityId   *string       `json:"activityId,omitempty"`
}

func (v *ActivityTaskCanceledEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ActivityType_Read(w wire.Value) (*ActivityType, error) {
	var v ActivityType
	err := v.FromWire(w)
	return &v, err
}

func (v *ActivityTaskCanceledEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskCanceledEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	return fmt.Sprintf("ActivityTaskCanceledEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskCanceledEventFilter) Equals(rhs *ActivityTaskCanceledEventFilter) bool {
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	return true
}

func (v *ActivityTaskCanceledEventFilter) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

type ActivityTaskCompletedEventAttributes struct {
	Result           []byte  `json:"result"`
	ScheduledEventId *int64  `json:"scheduledEventId,omitempty"`
	StartedEventId   *int64  `json:"startedEventId,omitempty"`
	Identity         *string `json:"identity,omitempty"`
}

func (v *ActivityTaskCompletedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Result != nil {
		w, err = wire.NewValueBinary(v.Result), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskCompletedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.Result, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskCompletedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.Result != nil {
		fields[i] = fmt.Sprintf("Result: %v", v.Result)
		i++
	}
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("ActivityTaskCompletedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskCompletedEventAttributes) Equals(rhs *ActivityTaskCompletedEventAttributes) bool {
	if !((v.Result == nil && rhs.Result == nil) || (v.Result != nil && rhs.Result != nil && bytes.Equal(v.Result, rhs.Result))) {
		return false
	}
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *ActivityTaskCompletedEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *ActivityTaskCompletedEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *ActivityTaskCompletedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type ActivityTaskCompletedEventFilter struct {
	ActivityType *ActivityType `json:"activityType,omitempty"`
	ActivityId   *string       `json:"activityId,omitempty"`
}

func (v *ActivityTaskCompletedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskCompletedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskCompletedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	return fmt.Sprintf("ActivityTaskCompletedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskCompletedEventFilter) Equals(rhs *ActivityTaskCompletedEventFilter) bool {
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	return true
}

func (v *ActivityTaskCompletedEventFilter) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

type ActivityTaskFailedEventAttributes struct {
	Reason           *string `json:"reason,omitempty"`
	Details          []byte  `json:"details"`
	ScheduledEventId *int64  `json:"scheduledEventId,omitempty"`
	StartedEventId   *int64  `json:"startedEventId,omitempty"`
	Identity         *string `json:"identity,omitempty"`
}

func (v *ActivityTaskFailedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Reason != nil {
		w, err = wire.NewValueString(*(v.Reason)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskFailedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Reason = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskFailedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.Reason != nil {
		fields[i] = fmt.Sprintf("Reason: %v", *(v.Reason))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("ActivityTaskFailedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskFailedEventAttributes) Equals(rhs *ActivityTaskFailedEventAttributes) bool {
	if !_String_EqualsPtr(v.Reason, rhs.Reason) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *ActivityTaskFailedEventAttributes) GetReason() (o string) {
	if v.Reason != nil {
		return *v.Reason
	}
	return
}

func (v *ActivityTaskFailedEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *ActivityTaskFailedEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *ActivityTaskFailedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type ActivityTaskFailedEventFilter struct {
	ActivityType *ActivityType `json:"activityType,omitempty"`
	ActivityId   *string       `json:"activityId,omitempty"`
}

func (v *ActivityTaskFailedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskFailedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskFailedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	return fmt.Sprintf("ActivityTaskFailedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskFailedEventFilter) Equals(rhs *ActivityTaskFailedEventFilter) bool {
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	return true
}

func (v *ActivityTaskFailedEventFilter) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

type ActivityTaskScheduledEventAttributes struct {
	ActivityId                    *string       `json:"activityId,omitempty"`
	ActivityType                  *ActivityType `json:"activityType,omitempty"`
	Domain                        *string       `json:"domain,omitempty"`
	TaskList                      *TaskList     `json:"taskList,omitempty"`
	Input                         []byte        `json:"input"`
	ScheduleToCloseTimeoutSeconds *int32        `json:"scheduleToCloseTimeoutSeconds,omitempty"`
	ScheduleToStartTimeoutSeconds *int32        `json:"scheduleToStartTimeoutSeconds,omitempty"`
	StartToCloseTimeoutSeconds    *int32        `json:"startToCloseTimeoutSeconds,omitempty"`
	HeartbeatTimeoutSeconds       *int32        `json:"heartbeatTimeoutSeconds,omitempty"`
	DecisionTaskCompletedEventId  *int64        `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *ActivityTaskScheduledEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [10]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 25, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.ScheduleToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ScheduleToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 45, Value: w}
		i++
	}
	if v.ScheduleToStartTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ScheduleToStartTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.StartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.StartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 55, Value: w}
		i++
	}
	if v.HeartbeatTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.HeartbeatTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _TaskList_Read(w wire.Value) (*TaskList, error) {
	var v TaskList
	err := v.FromWire(w)
	return &v, err
}

func (v *ActivityTaskScheduledEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 25:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 45:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ScheduleToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ScheduleToStartTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 55:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.StartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.HeartbeatTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 90:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskScheduledEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [10]string
	i := 0
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ScheduleToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ScheduleToCloseTimeoutSeconds: %v", *(v.ScheduleToCloseTimeoutSeconds))
		i++
	}
	if v.ScheduleToStartTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ScheduleToStartTimeoutSeconds: %v", *(v.ScheduleToStartTimeoutSeconds))
		i++
	}
	if v.StartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("StartToCloseTimeoutSeconds: %v", *(v.StartToCloseTimeoutSeconds))
		i++
	}
	if v.HeartbeatTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("HeartbeatTimeoutSeconds: %v", *(v.HeartbeatTimeoutSeconds))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("ActivityTaskScheduledEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _I32_EqualsPtr(lhs, rhs *int32) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func (v *ActivityTaskScheduledEventAttributes) Equals(rhs *ActivityTaskScheduledEventAttributes) bool {
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I32_EqualsPtr(v.ScheduleToCloseTimeoutSeconds, rhs.ScheduleToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.ScheduleToStartTimeoutSeconds, rhs.ScheduleToStartTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.StartToCloseTimeoutSeconds, rhs.StartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.HeartbeatTimeoutSeconds, rhs.HeartbeatTimeoutSeconds) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *ActivityTaskScheduledEventAttributes) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

func (v *ActivityTaskScheduledEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ActivityTaskScheduledEventAttributes) GetScheduleToCloseTimeoutSeconds() (o int32) {
	if v.ScheduleToCloseTimeoutSeconds != nil {
		return *v.ScheduleToCloseTimeoutSeconds
	}
	return
}

func (v *ActivityTaskScheduledEventAttributes) GetScheduleToStartTimeoutSeconds() (o int32) {
	if v.ScheduleToStartTimeoutSeconds != nil {
		return *v.ScheduleToStartTimeoutSeconds
	}
	return
}

func (v *ActivityTaskScheduledEventAttributes) GetStartToCloseTimeoutSeconds() (o int32) {
	if v.StartToCloseTimeoutSeconds != nil {
		return *v.StartToCloseTimeoutSeconds
	}
	return
}

func (v *ActivityTaskScheduledEventAttributes) GetHeartbeatTimeoutSeconds() (o int32) {
	if v.HeartbeatTimeoutSeconds != nil {
		return *v.HeartbeatTimeoutSeconds
	}
	return
}

func (v *ActivityTaskScheduledEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type ActivityTaskScheduledEventFilter struct {
	ActivityType *ActivityType `json:"activityType,omitempty"`
	ActivityId   *string       `json:"activityId,omitempty"`
}

func (v *ActivityTaskScheduledEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskScheduledEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskScheduledEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	return fmt.Sprintf("ActivityTaskScheduledEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskScheduledEventFilter) Equals(rhs *ActivityTaskScheduledEventFilter) bool {
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	return true
}

func (v *ActivityTaskScheduledEventFilter) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

type ActivityTaskStartedEventAttributes struct {
	ScheduledEventId *int64  `json:"scheduledEventId,omitempty"`
	Identity         *string `json:"identity,omitempty"`
	RequestId        *string `json:"requestId,omitempty"`
}

func (v *ActivityTaskStartedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.RequestId != nil {
		w, err = wire.NewValueString(*(v.RequestId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskStartedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RequestId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskStartedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	if v.RequestId != nil {
		fields[i] = fmt.Sprintf("RequestId: %v", *(v.RequestId))
		i++
	}
	return fmt.Sprintf("ActivityTaskStartedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskStartedEventAttributes) Equals(rhs *ActivityTaskStartedEventAttributes) bool {
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	if !_String_EqualsPtr(v.RequestId, rhs.RequestId) {
		return false
	}
	return true
}

func (v *ActivityTaskStartedEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *ActivityTaskStartedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

func (v *ActivityTaskStartedEventAttributes) GetRequestId() (o string) {
	if v.RequestId != nil {
		return *v.RequestId
	}
	return
}

type ActivityTaskStartedEventFilter struct {
	ActivityType *ActivityType `json:"activityType,omitempty"`
	ActivityId   *string       `json:"activityId,omitempty"`
}

func (v *ActivityTaskStartedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskStartedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskStartedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	return fmt.Sprintf("ActivityTaskStartedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskStartedEventFilter) Equals(rhs *ActivityTaskStartedEventFilter) bool {
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	return true
}

func (v *ActivityTaskStartedEventFilter) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

type ActivityTaskTimedOutEventAttributes struct {
	Details          []byte       `json:"details"`
	ScheduledEventId *int64       `json:"scheduledEventId,omitempty"`
	StartedEventId   *int64       `json:"startedEventId,omitempty"`
	TimeoutType      *TimeoutType `json:"timeoutType,omitempty"`
}

func (v *ActivityTaskTimedOutEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.TimeoutType != nil {
		w, err = v.TimeoutType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _TimeoutType_Read(w wire.Value) (TimeoutType, error) {
	var v TimeoutType
	err := v.FromWire(w)
	return v, err
}

func (v *ActivityTaskTimedOutEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 5:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI32 {
				var x TimeoutType
				x, err = _TimeoutType_Read(field.Value)
				v.TimeoutType = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskTimedOutEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.TimeoutType != nil {
		fields[i] = fmt.Sprintf("TimeoutType: %v", *(v.TimeoutType))
		i++
	}
	return fmt.Sprintf("ActivityTaskTimedOutEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _TimeoutType_EqualsPtr(lhs, rhs *TimeoutType) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *ActivityTaskTimedOutEventAttributes) Equals(rhs *ActivityTaskTimedOutEventAttributes) bool {
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_TimeoutType_EqualsPtr(v.TimeoutType, rhs.TimeoutType) {
		return false
	}
	return true
}

func (v *ActivityTaskTimedOutEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *ActivityTaskTimedOutEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *ActivityTaskTimedOutEventAttributes) GetTimeoutType() (o TimeoutType) {
	if v.TimeoutType != nil {
		return *v.TimeoutType
	}
	return
}

type ActivityTaskTimedOutEventFilter struct {
	ActivityType *ActivityType `json:"activityType,omitempty"`
	ActivityId   *string       `json:"activityId,omitempty"`
}

func (v *ActivityTaskTimedOutEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityTaskTimedOutEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityTaskTimedOutEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	return fmt.Sprintf("ActivityTaskTimedOutEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityTaskTimedOutEventFilter) Equals(rhs *ActivityTaskTimedOutEventFilter) bool {
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	return true
}

func (v *ActivityTaskTimedOutEventFilter) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

type ActivityType struct {
	Name *string `json:"name,omitempty"`
}

func (v *ActivityType) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ActivityType) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ActivityType) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("ActivityType{%v}", strings.Join(fields[:i], ", "))
}

func (v *ActivityType) Equals(rhs *ActivityType) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	return true
}

func (v *ActivityType) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}

type BadRequestError struct {
	Message string `json:"message,required"`
}

func (v *BadRequestError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *BadRequestError) FromWire(w wire.Value) error {
	var err error
	messageIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}
	if !messageIsSet {
		return errors.New("field Message of BadRequestError is required")
	}
	return nil
}

func (v *BadRequestError) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	return fmt.Sprintf("BadRequestError{%v}", strings.Join(fields[:i], ", "))
}

func (v *BadRequestError) Equals(rhs *BadRequestError) bool {
	if !(v.Message == rhs.Message) {
		return false
	}
	return true
}

func (v *BadRequestError) Error() string {
	return v.String()
}

type CancelExternalWorkflowExecutionFailedCause int32

const (
	CancelExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution CancelExternalWorkflowExecutionFailedCause = 0
)

func CancelExternalWorkflowExecutionFailedCause_Values() []CancelExternalWorkflowExecutionFailedCause {
	return []CancelExternalWorkflowExecutionFailedCause{CancelExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution}
}

func (v *CancelExternalWorkflowExecutionFailedCause) UnmarshalText(value []byte) error {
	switch string(value) {
	case "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION":
		*v = CancelExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "CancelExternalWorkflowExecutionFailedCause")
	}
}

func (v CancelExternalWorkflowExecutionFailedCause) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *CancelExternalWorkflowExecutionFailedCause) FromWire(w wire.Value) error {
	*v = (CancelExternalWorkflowExecutionFailedCause)(w.GetI32())
	return nil
}

func (v CancelExternalWorkflowExecutionFailedCause) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
	}
	return fmt.Sprintf("CancelExternalWorkflowExecutionFailedCause(%d)", w)
}

func (v CancelExternalWorkflowExecutionFailedCause) Equals(rhs CancelExternalWorkflowExecutionFailedCause) bool {
	return v == rhs
}

func (v CancelExternalWorkflowExecutionFailedCause) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *CancelExternalWorkflowExecutionFailedCause) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "CancelExternalWorkflowExecutionFailedCause")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "CancelExternalWorkflowExecutionFailedCause")
		}
		*v = (CancelExternalWorkflowExecutionFailedCause)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "CancelExternalWorkflowExecutionFailedCause")
	}
}

type CancelTimerDecisionAttributes struct {
	TimerId *string `json:"timerId,omitempty"`
}

func (v *CancelTimerDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TimerId != nil {
		w, err = wire.NewValueString(*(v.TimerId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *CancelTimerDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.TimerId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *CancelTimerDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.TimerId != nil {
		fields[i] = fmt.Sprintf("TimerId: %v", *(v.TimerId))
		i++
	}
	return fmt.Sprintf("CancelTimerDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *CancelTimerDecisionAttributes) Equals(rhs *CancelTimerDecisionAttributes) bool {
	if !_String_EqualsPtr(v.TimerId, rhs.TimerId) {
		return false
	}
	return true
}

func (v *CancelTimerDecisionAttributes) GetTimerId() (o string) {
	if v.TimerId != nil {
		return *v.TimerId
	}
	return
}

type CancelTimerFailedEventAttributes struct {
	TimerId                      *string `json:"timerId,omitempty"`
	Cause                        *string `json:"cause,omitempty"`
	DecisionTaskCompletedEventId *int64  `json:"decisionTaskCompletedEventId,omitempty"`
	Identity                     *string `json:"identity,omitempty"`
}

func (v *CancelTimerFailedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TimerId != nil {
		w, err = wire.NewValueString(*(v.TimerId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Cause != nil {
		w, err = wire.NewValueString(*(v.Cause)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *CancelTimerFailedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.TimerId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Cause = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *CancelTimerFailedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.TimerId != nil {
		fields[i] = fmt.Sprintf("TimerId: %v", *(v.TimerId))
		i++
	}
	if v.Cause != nil {
		fields[i] = fmt.Sprintf("Cause: %v", *(v.Cause))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("CancelTimerFailedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *CancelTimerFailedEventAttributes) Equals(rhs *CancelTimerFailedEventAttributes) bool {
	if !_String_EqualsPtr(v.TimerId, rhs.TimerId) {
		return false
	}
	if !_String_EqualsPtr(v.Cause, rhs.Cause) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *CancelTimerFailedEventAttributes) GetTimerId() (o string) {
	if v.TimerId != nil {
		return *v.TimerId
	}
	return
}

func (v *CancelTimerFailedEventAttributes) GetCause() (o string) {
	if v.Cause != nil {
		return *v.Cause
	}
	return
}

func (v *CancelTimerFailedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

func (v *CancelTimerFailedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type CancelTimerFailedEventFilter struct{}

func (v *CancelTimerFailedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *CancelTimerFailedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *CancelTimerFailedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("CancelTimerFailedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *CancelTimerFailedEventFilter) Equals(rhs *CancelTimerFailedEventFilter) bool {
	return true
}

type CancelWorkflowExecutionDecisionAttributes struct {
	Details []byte `json:"details"`
}

func (v *CancelWorkflowExecutionDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *CancelWorkflowExecutionDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *CancelWorkflowExecutionDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	return fmt.Sprintf("CancelWorkflowExecutionDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *CancelWorkflowExecutionDecisionAttributes) Equals(rhs *CancelWorkflowExecutionDecisionAttributes) bool {
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	return true
}

type CancellationAlreadyRequestedError struct {
	Message string `json:"message,required"`
}

func (v *CancellationAlreadyRequestedError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *CancellationAlreadyRequestedError) FromWire(w wire.Value) error {
	var err error
	messageIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}
	if !messageIsSet {
		return errors.New("field Message of CancellationAlreadyRequestedError is required")
	}
	return nil
}

func (v *CancellationAlreadyRequestedError) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	return fmt.Sprintf("CancellationAlreadyRequestedError{%v}", strings.Join(fields[:i], ", "))
}

func (v *CancellationAlreadyRequestedError) Equals(rhs *CancellationAlreadyRequestedError) bool {
	if !(v.Message == rhs.Message) {
		return false
	}
	return true
}

func (v *CancellationAlreadyRequestedError) Error() string {
	return v.String()
}

type ChildPolicy int32

const (
	ChildPolicyTerminate     ChildPolicy = 0
	ChildPolicyRequestCancel ChildPolicy = 1
	ChildPolicyAbandon       ChildPolicy = 2
)

func ChildPolicy_Values() []ChildPolicy {
	return []ChildPolicy{ChildPolicyTerminate, ChildPolicyRequestCancel, ChildPolicyAbandon}
}

func (v *ChildPolicy) UnmarshalText(value []byte) error {
	switch string(value) {
	case "TERMINATE":
		*v = ChildPolicyTerminate
		return nil
	case "REQUEST_CANCEL":
		*v = ChildPolicyRequestCancel
		return nil
	case "ABANDON":
		*v = ChildPolicyAbandon
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "ChildPolicy")
	}
}

func (v ChildPolicy) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *ChildPolicy) FromWire(w wire.Value) error {
	*v = (ChildPolicy)(w.GetI32())
	return nil
}

func (v ChildPolicy) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "TERMINATE"
	case 1:
		return "REQUEST_CANCEL"
	case 2:
		return "ABANDON"
	}
	return fmt.Sprintf("ChildPolicy(%d)", w)
}

func (v ChildPolicy) Equals(rhs ChildPolicy) bool {
	return v == rhs
}

func (v ChildPolicy) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"TERMINATE\""), nil
	case 1:
		return ([]byte)("\"REQUEST_CANCEL\""), nil
	case 2:
		return ([]byte)("\"ABANDON\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *ChildPolicy) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "ChildPolicy")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "ChildPolicy")
		}
		*v = (ChildPolicy)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "ChildPolicy")
	}
}

type ChildWorkflowExecutionCanceledEventAttributes struct {
	Details           []byte             `json:"details"`
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	WorkflowType      *WorkflowType      `json:"workflowType,omitempty"`
	InitiatedEventId  *int64             `json:"initiatedEventId,omitempty"`
	StartedEventId    *int64             `json:"startedEventId,omitempty"`
}

func (v *ChildWorkflowExecutionCanceledEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _WorkflowExecution_Read(w wire.Value) (*WorkflowExecution, error) {
	var v WorkflowExecution
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowType_Read(w wire.Value) (*WorkflowType, error) {
	var v WorkflowType
	err := v.FromWire(w)
	return &v, err
}

func (v *ChildWorkflowExecutionCanceledEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionCanceledEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [6]string
	i := 0
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionCanceledEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionCanceledEventAttributes) Equals(rhs *ChildWorkflowExecutionCanceledEventAttributes) bool {
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionCanceledEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ChildWorkflowExecutionCanceledEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

func (v *ChildWorkflowExecutionCanceledEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

type ChildWorkflowExecutionCanceledEventFilter struct {
	WorkflowType *WorkflowType `json:"workflowType,omitempty"`
	WorkflowId   *string       `json:"workflowId,omitempty"`
}

func (v *ChildWorkflowExecutionCanceledEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionCanceledEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionCanceledEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionCanceledEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionCanceledEventFilter) Equals(rhs *ChildWorkflowExecutionCanceledEventFilter) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionCanceledEventFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type ChildWorkflowExecutionCompletedEventAttributes struct {
	Result            []byte             `json:"result"`
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	WorkflowType      *WorkflowType      `json:"workflowType,omitempty"`
	InitiatedEventId  *int64             `json:"initiatedEventId,omitempty"`
	StartedEventId    *int64             `json:"startedEventId,omitempty"`
}

func (v *ChildWorkflowExecutionCompletedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Result != nil {
		w, err = wire.NewValueBinary(v.Result), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionCompletedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.Result, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionCompletedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [6]string
	i := 0
	if v.Result != nil {
		fields[i] = fmt.Sprintf("Result: %v", v.Result)
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionCompletedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionCompletedEventAttributes) Equals(rhs *ChildWorkflowExecutionCompletedEventAttributes) bool {
	if !((v.Result == nil && rhs.Result == nil) || (v.Result != nil && rhs.Result != nil && bytes.Equal(v.Result, rhs.Result))) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionCompletedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ChildWorkflowExecutionCompletedEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

func (v *ChildWorkflowExecutionCompletedEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

type ChildWorkflowExecutionCompletedEventFilter struct {
	WorkflowType *WorkflowType `json:"workflowType,omitempty"`
	WorkflowId   *string       `json:"workflowId,omitempty"`
}

func (v *ChildWorkflowExecutionCompletedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionCompletedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionCompletedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionCompletedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionCompletedEventFilter) Equals(rhs *ChildWorkflowExecutionCompletedEventFilter) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionCompletedEventFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type ChildWorkflowExecutionFailedCause int32

const (
	ChildWorkflowExecutionFailedCauseWorkflowAlreadyRunning ChildWorkflowExecutionFailedCause = 0
)

func ChildWorkflowExecutionFailedCause_Values() []ChildWorkflowExecutionFailedCause {
	return []ChildWorkflowExecutionFailedCause{ChildWorkflowExecutionFailedCauseWorkflowAlreadyRunning}
}

func (v *ChildWorkflowExecutionFailedCause) UnmarshalText(value []byte) error {
	switch string(value) {
	case "WORKFLOW_ALREADY_RUNNING":
		*v = ChildWorkflowExecutionFailedCauseWorkflowAlreadyRunning
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "ChildWorkflowExecutionFailedCause")
	}
}

func (v ChildWorkflowExecutionFailedCause) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *ChildWorkflowExecutionFailedCause) FromWire(w wire.Value) error {
	*v = (ChildWorkflowExecutionFailedCause)(w.GetI32())
	return nil
}

func (v ChildWorkflowExecutionFailedCause) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "WORKFLOW_ALREADY_RUNNING"
	}
	return fmt.Sprintf("ChildWorkflowExecutionFailedCause(%d)", w)
}

func (v ChildWorkflowExecutionFailedCause) Equals(rhs ChildWorkflowExecutionFailedCause) bool {
	return v == rhs
}

func (v ChildWorkflowExecutionFailedCause) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"WORKFLOW_ALREADY_RUNNING\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *ChildWorkflowExecutionFailedCause) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "ChildWorkflowExecutionFailedCause")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "ChildWorkflowExecutionFailedCause")
		}
		*v = (ChildWorkflowExecutionFailedCause)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "ChildWorkflowExecutionFailedCause")
	}
}

type ChildWorkflowExecutionFailedEventAttributes struct {
	Reason            *string            `json:"reason,omitempty"`
	Details           []byte             `json:"details"`
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	WorkflowType      *WorkflowType      `json:"workflowType,omitempty"`
	InitiatedEventId  *int64             `json:"initiatedEventId,omitempty"`
	StartedEventId    *int64             `json:"startedEventId,omitempty"`
}

func (v *ChildWorkflowExecutionFailedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [7]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Reason != nil {
		w, err = wire.NewValueString(*(v.Reason)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionFailedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Reason = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionFailedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [7]string
	i := 0
	if v.Reason != nil {
		fields[i] = fmt.Sprintf("Reason: %v", *(v.Reason))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionFailedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionFailedEventAttributes) Equals(rhs *ChildWorkflowExecutionFailedEventAttributes) bool {
	if !_String_EqualsPtr(v.Reason, rhs.Reason) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionFailedEventAttributes) GetReason() (o string) {
	if v.Reason != nil {
		return *v.Reason
	}
	return
}

func (v *ChildWorkflowExecutionFailedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ChildWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

func (v *ChildWorkflowExecutionFailedEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

type ChildWorkflowExecutionFailedEventFilter struct {
	WorkflowType *WorkflowType `json:"workflowType,omitempty"`
	WorkflowId   *string       `json:"workflowId,omitempty"`
}

func (v *ChildWorkflowExecutionFailedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionFailedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionFailedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionFailedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionFailedEventFilter) Equals(rhs *ChildWorkflowExecutionFailedEventFilter) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionFailedEventFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type ChildWorkflowExecutionStartedEventAttributes struct {
	Domain            *string            `json:"domain,omitempty"`
	InitiatedEventId  *int64             `json:"initiatedEventId,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	WorkflowType      *WorkflowType      `json:"workflowType,omitempty"`
}

func (v *ChildWorkflowExecutionStartedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionStartedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionStartedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionStartedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionStartedEventAttributes) Equals(rhs *ChildWorkflowExecutionStartedEventAttributes) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionStartedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ChildWorkflowExecutionStartedEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

type ChildWorkflowExecutionStartedEventFilter struct {
	WorkflowType *WorkflowType `json:"workflowType,omitempty"`
	WorkflowId   *string       `json:"workflowId,omitempty"`
}

func (v *ChildWorkflowExecutionStartedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionStartedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionStartedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionStartedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionStartedEventFilter) Equals(rhs *ChildWorkflowExecutionStartedEventFilter) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionStartedEventFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type ChildWorkflowExecutionTerminatedEventAttributes struct {
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	WorkflowType      *WorkflowType      `json:"workflowType,omitempty"`
	InitiatedEventId  *int64             `json:"initiatedEventId,omitempty"`
	StartedEventId    *int64             `json:"startedEventId,omitempty"`
}

func (v *ChildWorkflowExecutionTerminatedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionTerminatedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionTerminatedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionTerminatedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionTerminatedEventAttributes) Equals(rhs *ChildWorkflowExecutionTerminatedEventAttributes) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionTerminatedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ChildWorkflowExecutionTerminatedEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

func (v *ChildWorkflowExecutionTerminatedEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

type ChildWorkflowExecutionTerminatedEventFilter struct {
	WorkflowType *WorkflowType `json:"workflowType,omitempty"`
	WorkflowId   *string       `json:"workflowId,omitempty"`
}

func (v *ChildWorkflowExecutionTerminatedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionTerminatedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionTerminatedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionTerminatedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionTerminatedEventFilter) Equals(rhs *ChildWorkflowExecutionTerminatedEventFilter) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionTerminatedEventFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type ChildWorkflowExecutionTimedOutEventAttributes struct {
	TimeoutType       *TimeoutType       `json:"timeoutType,omitempty"`
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	WorkflowType      *WorkflowType      `json:"workflowType,omitempty"`
	InitiatedEventId  *int64             `json:"initiatedEventId,omitempty"`
	StartedEventId    *int64             `json:"startedEventId,omitempty"`
}

func (v *ChildWorkflowExecutionTimedOutEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TimeoutType != nil {
		w, err = v.TimeoutType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionTimedOutEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x TimeoutType
				x, err = _TimeoutType_Read(field.Value)
				v.TimeoutType = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionTimedOutEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [6]string
	i := 0
	if v.TimeoutType != nil {
		fields[i] = fmt.Sprintf("TimeoutType: %v", *(v.TimeoutType))
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionTimedOutEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionTimedOutEventAttributes) Equals(rhs *ChildWorkflowExecutionTimedOutEventAttributes) bool {
	if !_TimeoutType_EqualsPtr(v.TimeoutType, rhs.TimeoutType) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionTimedOutEventAttributes) GetTimeoutType() (o TimeoutType) {
	if v.TimeoutType != nil {
		return *v.TimeoutType
	}
	return
}

func (v *ChildWorkflowExecutionTimedOutEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ChildWorkflowExecutionTimedOutEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

func (v *ChildWorkflowExecutionTimedOutEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

type ChildWorkflowExecutionTimedOutEventFilter struct {
	WorkflowType *WorkflowType `json:"workflowType,omitempty"`
	WorkflowId   *string       `json:"workflowId,omitempty"`
}

func (v *ChildWorkflowExecutionTimedOutEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ChildWorkflowExecutionTimedOutEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ChildWorkflowExecutionTimedOutEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("ChildWorkflowExecutionTimedOutEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ChildWorkflowExecutionTimedOutEventFilter) Equals(rhs *ChildWorkflowExecutionTimedOutEventFilter) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *ChildWorkflowExecutionTimedOutEventFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type CompleteWorkflowExecutionDecisionAttributes struct {
	Result []byte `json:"result"`
}

func (v *CompleteWorkflowExecutionDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Result != nil {
		w, err = wire.NewValueBinary(v.Result), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *CompleteWorkflowExecutionDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.Result, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *CompleteWorkflowExecutionDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Result != nil {
		fields[i] = fmt.Sprintf("Result: %v", v.Result)
		i++
	}
	return fmt.Sprintf("CompleteWorkflowExecutionDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *CompleteWorkflowExecutionDecisionAttributes) Equals(rhs *CompleteWorkflowExecutionDecisionAttributes) bool {
	if !((v.Result == nil && rhs.Result == nil) || (v.Result != nil && rhs.Result != nil && bytes.Equal(v.Result, rhs.Result))) {
		return false
	}
	return true
}

type ContinueAsNewWorkflowExecutionDecisionAttributes struct {
	WorkflowType                        *WorkflowType `json:"workflowType,omitempty"`
	TaskList                            *TaskList     `json:"taskList,omitempty"`
	Input                               []byte        `json:"input"`
	ExecutionStartToCloseTimeoutSeconds *int32        `json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      *int32        `json:"taskStartToCloseTimeoutSeconds,omitempty"`
}

func (v *ContinueAsNewWorkflowExecutionDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ExecutionStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.TaskStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ContinueAsNewWorkflowExecutionDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ExecutionStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.TaskStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ContinueAsNewWorkflowExecutionDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ExecutionStartToCloseTimeoutSeconds: %v", *(v.ExecutionStartToCloseTimeoutSeconds))
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("TaskStartToCloseTimeoutSeconds: %v", *(v.TaskStartToCloseTimeoutSeconds))
		i++
	}
	return fmt.Sprintf("ContinueAsNewWorkflowExecutionDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ContinueAsNewWorkflowExecutionDecisionAttributes) Equals(rhs *ContinueAsNewWorkflowExecutionDecisionAttributes) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I32_EqualsPtr(v.ExecutionStartToCloseTimeoutSeconds, rhs.ExecutionStartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.TaskStartToCloseTimeoutSeconds, rhs.TaskStartToCloseTimeoutSeconds) {
		return false
	}
	return true
}

func (v *ContinueAsNewWorkflowExecutionDecisionAttributes) GetExecutionStartToCloseTimeoutSeconds() (o int32) {
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		return *v.ExecutionStartToCloseTimeoutSeconds
	}
	return
}

func (v *ContinueAsNewWorkflowExecutionDecisionAttributes) GetTaskStartToCloseTimeoutSeconds() (o int32) {
	if v.TaskStartToCloseTimeoutSeconds != nil {
		return *v.TaskStartToCloseTimeoutSeconds
	}
	return
}

type Decision struct {
	DecisionType                                             *DecisionType                                             `json:"decisionType,omitempty"`
	ScheduleActivityTaskDecisionAttributes                   *ScheduleActivityTaskDecisionAttributes                   `json:"scheduleActivityTaskDecisionAttributes,omitempty"`
	StartTimerDecisionAttributes                             *StartTimerDecisionAttributes                             `json:"startTimerDecisionAttributes,omitempty"`
	CompleteWorkflowExecutionDecisionAttributes              *CompleteWorkflowExecutionDecisionAttributes              `json:"completeWorkflowExecutionDecisionAttributes,omitempty"`
	FailWorkflowExecutionDecisionAttributes                  *FailWorkflowExecutionDecisionAttributes                  `json:"failWorkflowExecutionDecisionAttributes,omitempty"`
	RequestCancelActivityTaskDecisionAttributes              *RequestCancelActivityTaskDecisionAttributes              `json:"requestCancelActivityTaskDecisionAttributes,omitempty"`
	CancelTimerDecisionAttributes                            *CancelTimerDecisionAttributes                            `json:"cancelTimerDecisionAttributes,omitempty"`
	CancelWorkflowExecutionDecisionAttributes                *CancelWorkflowExecutionDecisionAttributes                `json:"cancelWorkflowExecutionDecisionAttributes,omitempty"`
	RequestCancelExternalWorkflowExecutionDecisionAttributes *RequestCancelExternalWorkflowExecutionDecisionAttributes `json:"requestCancelExternalWorkflowExecutionDecisionAttributes,omitempty"`
	RecordMarkerDecisionAttributes                           *RecordMarkerDecisionAttributes                           `json:"recordMarkerDecisionAttributes,omitempty"`
	ContinueAsNewWorkflowExecutionDecisionAttributes         *ContinueAsNewWorkflowExecutionDecisionAttributes         `json:"continueAsNewWorkflowExecutionDecisionAttributes,omitempty"`
	StartChildWorkflowExecutionDecisionAttributes            *StartChildWorkflowExecutionDecisionAttributes            `json:"startChildWorkflowExecutionDecisionAttributes,omitempty"`
}

func (v *Decision) ToWire() (wire.Value, error) {
	var (
		fields [12]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.DecisionType != nil {
		w, err = v.DecisionType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ScheduleActivityTaskDecisionAttributes != nil {
		w, err = v.ScheduleActivityTaskDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.StartTimerDecisionAttributes != nil {
		w, err = v.StartTimerDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 25, Value: w}
		i++
	}
	if v.CompleteWorkflowExecutionDecisionAttributes != nil {
		w, err = v.CompleteWorkflowExecutionDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.FailWorkflowExecutionDecisionAttributes != nil {
		w, err = v.FailWorkflowExecutionDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 35, Value: w}
		i++
	}
	if v.RequestCancelActivityTaskDecisionAttributes != nil {
		w, err = v.RequestCancelActivityTaskDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.CancelTimerDecisionAttributes != nil {
		w, err = v.CancelTimerDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.CancelWorkflowExecutionDecisionAttributes != nil {
		w, err = v.CancelWorkflowExecutionDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionDecisionAttributes != nil {
		w, err = v.RequestCancelExternalWorkflowExecutionDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.RecordMarkerDecisionAttributes != nil {
		w, err = v.RecordMarkerDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.ContinueAsNewWorkflowExecutionDecisionAttributes != nil {
		w, err = v.ContinueAsNewWorkflowExecutionDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	if v.StartChildWorkflowExecutionDecisionAttributes != nil {
		w, err = v.StartChildWorkflowExecutionDecisionAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 100, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _DecisionType_Read(w wire.Value) (DecisionType, error) {
	var v DecisionType
	err := v.FromWire(w)
	return v, err
}

func _ScheduleActivityTaskDecisionAttributes_Read(w wire.Value) (*ScheduleActivityTaskDecisionAttributes, error) {
	var v ScheduleActivityTaskDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _StartTimerDecisionAttributes_Read(w wire.Value) (*StartTimerDecisionAttributes, error) {
	var v StartTimerDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _CompleteWorkflowExecutionDecisionAttributes_Read(w wire.Value) (*CompleteWorkflowExecutionDecisionAttributes, error) {
	var v CompleteWorkflowExecutionDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _FailWorkflowExecutionDecisionAttributes_Read(w wire.Value) (*FailWorkflowExecutionDecisionAttributes, error) {
	var v FailWorkflowExecutionDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _RequestCancelActivityTaskDecisionAttributes_Read(w wire.Value) (*RequestCancelActivityTaskDecisionAttributes, error) {
	var v RequestCancelActivityTaskDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _CancelTimerDecisionAttributes_Read(w wire.Value) (*CancelTimerDecisionAttributes, error) {
	var v CancelTimerDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _CancelWorkflowExecutionDecisionAttributes_Read(w wire.Value) (*CancelWorkflowExecutionDecisionAttributes, error) {
	var v CancelWorkflowExecutionDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _RequestCancelExternalWorkflowExecutionDecisionAttributes_Read(w wire.Value) (*RequestCancelExternalWorkflowExecutionDecisionAttributes, error) {
	var v RequestCancelExternalWorkflowExecutionDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _RecordMarkerDecisionAttributes_Read(w wire.Value) (*RecordMarkerDecisionAttributes, error) {
	var v RecordMarkerDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ContinueAsNewWorkflowExecutionDecisionAttributes_Read(w wire.Value) (*ContinueAsNewWorkflowExecutionDecisionAttributes, error) {
	var v ContinueAsNewWorkflowExecutionDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func _StartChildWorkflowExecutionDecisionAttributes_Read(w wire.Value) (*StartChildWorkflowExecutionDecisionAttributes, error) {
	var v StartChildWorkflowExecutionDecisionAttributes
	err := v.FromWire(w)
	return &v, err
}

func (v *Decision) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x DecisionType
				x, err = _DecisionType_Read(field.Value)
				v.DecisionType = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.ScheduleActivityTaskDecisionAttributes, err = _ScheduleActivityTaskDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 25:
			if field.Value.Type() == wire.TStruct {
				v.StartTimerDecisionAttributes, err = _StartTimerDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.CompleteWorkflowExecutionDecisionAttributes, err = _CompleteWorkflowExecutionDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 35:
			if field.Value.Type() == wire.TStruct {
				v.FailWorkflowExecutionDecisionAttributes, err = _FailWorkflowExecutionDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.RequestCancelActivityTaskDecisionAttributes, err = _RequestCancelActivityTaskDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.CancelTimerDecisionAttributes, err = _CancelTimerDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TStruct {
				v.CancelWorkflowExecutionDecisionAttributes, err = _CancelWorkflowExecutionDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TStruct {
				v.RequestCancelExternalWorkflowExecutionDecisionAttributes, err = _RequestCancelExternalWorkflowExecutionDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 80:
			if field.Value.Type() == wire.TStruct {
				v.RecordMarkerDecisionAttributes, err = _RecordMarkerDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 90:
			if field.Value.Type() == wire.TStruct {
				v.ContinueAsNewWorkflowExecutionDecisionAttributes, err = _ContinueAsNewWorkflowExecutionDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 100:
			if field.Value.Type() == wire.TStruct {
				v.StartChildWorkflowExecutionDecisionAttributes, err = _StartChildWorkflowExecutionDecisionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Decision) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [12]string
	i := 0
	if v.DecisionType != nil {
		fields[i] = fmt.Sprintf("DecisionType: %v", *(v.DecisionType))
		i++
	}
	if v.ScheduleActivityTaskDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("ScheduleActivityTaskDecisionAttributes: %v", v.ScheduleActivityTaskDecisionAttributes)
		i++
	}
	if v.StartTimerDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("StartTimerDecisionAttributes: %v", v.StartTimerDecisionAttributes)
		i++
	}
	if v.CompleteWorkflowExecutionDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("CompleteWorkflowExecutionDecisionAttributes: %v", v.CompleteWorkflowExecutionDecisionAttributes)
		i++
	}
	if v.FailWorkflowExecutionDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("FailWorkflowExecutionDecisionAttributes: %v", v.FailWorkflowExecutionDecisionAttributes)
		i++
	}
	if v.RequestCancelActivityTaskDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("RequestCancelActivityTaskDecisionAttributes: %v", v.RequestCancelActivityTaskDecisionAttributes)
		i++
	}
	if v.CancelTimerDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("CancelTimerDecisionAttributes: %v", v.CancelTimerDecisionAttributes)
		i++
	}
	if v.CancelWorkflowExecutionDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("CancelWorkflowExecutionDecisionAttributes: %v", v.CancelWorkflowExecutionDecisionAttributes)
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("RequestCancelExternalWorkflowExecutionDecisionAttributes: %v", v.RequestCancelExternalWorkflowExecutionDecisionAttributes)
		i++
	}
	if v.RecordMarkerDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("RecordMarkerDecisionAttributes: %v", v.RecordMarkerDecisionAttributes)
		i++
	}
	if v.ContinueAsNewWorkflowExecutionDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("ContinueAsNewWorkflowExecutionDecisionAttributes: %v", v.ContinueAsNewWorkflowExecutionDecisionAttributes)
		i++
	}
	if v.StartChildWorkflowExecutionDecisionAttributes != nil {
		fields[i] = fmt.Sprintf("StartChildWorkflowExecutionDecisionAttributes: %v", v.StartChildWorkflowExecutionDecisionAttributes)
		i++
	}
	return fmt.Sprintf("Decision{%v}", strings.Join(fields[:i], ", "))
}

func _DecisionType_EqualsPtr(lhs, rhs *DecisionType) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *Decision) Equals(rhs *Decision) bool {
	if !_DecisionType_EqualsPtr(v.DecisionType, rhs.DecisionType) {
		return false
	}
	if !((v.ScheduleActivityTaskDecisionAttributes == nil && rhs.ScheduleActivityTaskDecisionAttributes == nil) || (v.ScheduleActivityTaskDecisionAttributes != nil && rhs.ScheduleActivityTaskDecisionAttributes != nil && v.ScheduleActivityTaskDecisionAttributes.Equals(rhs.ScheduleActivityTaskDecisionAttributes))) {
		return false
	}
	if !((v.StartTimerDecisionAttributes == nil && rhs.StartTimerDecisionAttributes == nil) || (v.StartTimerDecisionAttributes != nil && rhs.StartTimerDecisionAttributes != nil && v.StartTimerDecisionAttributes.Equals(rhs.StartTimerDecisionAttributes))) {
		return false
	}
	if !((v.CompleteWorkflowExecutionDecisionAttributes == nil && rhs.CompleteWorkflowExecutionDecisionAttributes == nil) || (v.CompleteWorkflowExecutionDecisionAttributes != nil && rhs.CompleteWorkflowExecutionDecisionAttributes != nil && v.CompleteWorkflowExecutionDecisionAttributes.Equals(rhs.CompleteWorkflowExecutionDecisionAttributes))) {
		return false
	}
	if !((v.FailWorkflowExecutionDecisionAttributes == nil && rhs.FailWorkflowExecutionDecisionAttributes == nil) || (v.FailWorkflowExecutionDecisionAttributes != nil && rhs.FailWorkflowExecutionDecisionAttributes != nil && v.FailWorkflowExecutionDecisionAttributes.Equals(rhs.FailWorkflowExecutionDecisionAttributes))) {
		return false
	}
	if !((v.RequestCancelActivityTaskDecisionAttributes == nil && rhs.RequestCancelActivityTaskDecisionAttributes == nil) || (v.RequestCancelActivityTaskDecisionAttributes != nil && rhs.RequestCancelActivityTaskDecisionAttributes != nil && v.RequestCancelActivityTaskDecisionAttributes.Equals(rhs.RequestCancelActivityTaskDecisionAttributes))) {
		return false
	}
	if !((v.CancelTimerDecisionAttributes == nil && rhs.CancelTimerDecisionAttributes == nil) || (v.CancelTimerDecisionAttributes != nil && rhs.CancelTimerDecisionAttributes != nil && v.CancelTimerDecisionAttributes.Equals(rhs.CancelTimerDecisionAttributes))) {
		return false
	}
	if !((v.CancelWorkflowExecutionDecisionAttributes == nil && rhs.CancelWorkflowExecutionDecisionAttributes == nil) || (v.CancelWorkflowExecutionDecisionAttributes != nil && rhs.CancelWorkflowExecutionDecisionAttributes != nil && v.CancelWorkflowExecutionDecisionAttributes.Equals(rhs.CancelWorkflowExecutionDecisionAttributes))) {
		return false
	}
	if !((v.RequestCancelExternalWorkflowExecutionDecisionAttributes == nil && rhs.RequestCancelExternalWorkflowExecutionDecisionAttributes == nil) || (v.RequestCancelExternalWorkflowExecutionDecisionAttributes != nil && rhs.RequestCancelExternalWorkflowExecutionDecisionAttributes != nil && v.RequestCancelExternalWorkflowExecutionDecisionAttributes.Equals(rhs.RequestCancelExternalWorkflowExecutionDecisionAttributes))) {
		return false
	}
	if !((v.RecordMarkerDecisionAttributes == nil && rhs.RecordMarkerDecisionAttributes == nil) || (v.RecordMarkerDecisionAttributes != nil && rhs.RecordMarkerDecisionAttributes != nil && v.RecordMarkerDecisionAttributes.Equals(rhs.RecordMarkerDecisionAttributes))) {
		return false
	}
	if !((v.ContinueAsNewWorkflowExecutionDecisionAttributes == nil && rhs.ContinueAsNewWorkflowExecutionDecisionAttributes == nil) || (v.ContinueAsNewWorkflowExecutionDecisionAttributes != nil && rhs.ContinueAsNewWorkflowExecutionDecisionAttributes != nil && v.ContinueAsNewWorkflowExecutionDecisionAttributes.Equals(rhs.ContinueAsNewWorkflowExecutionDecisionAttributes))) {
		return false
	}
	if !((v.StartChildWorkflowExecutionDecisionAttributes == nil && rhs.StartChildWorkflowExecutionDecisionAttributes == nil) || (v.StartChildWorkflowExecutionDecisionAttributes != nil && rhs.StartChildWorkflowExecutionDecisionAttributes != nil && v.StartChildWorkflowExecutionDecisionAttributes.Equals(rhs.StartChildWorkflowExecutionDecisionAttributes))) {
		return false
	}
	return true
}

func (v *Decision) GetDecisionType() (o DecisionType) {
	if v.DecisionType != nil {
		return *v.DecisionType
	}
	return
}

type DecisionTaskCompletedEventAttributes struct {
	ExecutionContext []byte  `json:"executionContext"`
	ScheduledEventId *int64  `json:"scheduledEventId,omitempty"`
	StartedEventId   *int64  `json:"startedEventId,omitempty"`
	Identity         *string `json:"identity,omitempty"`
}

func (v *DecisionTaskCompletedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ExecutionContext != nil {
		w, err = wire.NewValueBinary(v.ExecutionContext), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskCompletedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.ExecutionContext, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DecisionTaskCompletedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.ExecutionContext != nil {
		fields[i] = fmt.Sprintf("ExecutionContext: %v", v.ExecutionContext)
		i++
	}
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("DecisionTaskCompletedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskCompletedEventAttributes) Equals(rhs *DecisionTaskCompletedEventAttributes) bool {
	if !((v.ExecutionContext == nil && rhs.ExecutionContext == nil) || (v.ExecutionContext != nil && rhs.ExecutionContext != nil && bytes.Equal(v.ExecutionContext, rhs.ExecutionContext))) {
		return false
	}
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *DecisionTaskCompletedEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *DecisionTaskCompletedEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *DecisionTaskCompletedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type DecisionTaskCompletedEventFilter struct{}

func (v *DecisionTaskCompletedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskCompletedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *DecisionTaskCompletedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("DecisionTaskCompletedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskCompletedEventFilter) Equals(rhs *DecisionTaskCompletedEventFilter) bool {
	return true
}

type DecisionTaskFailedCause int32

const (
	DecisionTaskFailedCauseUnhandledDecision                                   DecisionTaskFailedCause = 0
	DecisionTaskFailedCauseBadScheduleActivityAttributes                       DecisionTaskFailedCause = 1
	DecisionTaskFailedCauseBadRequestCancelActivityAttributes                  DecisionTaskFailedCause = 2
	DecisionTaskFailedCauseBadStartTimerAttributes                             DecisionTaskFailedCause = 3
	DecisionTaskFailedCauseBadCancelTimerAttributes                            DecisionTaskFailedCause = 4
	DecisionTaskFailedCauseBadRecordMarkerAttributes                           DecisionTaskFailedCause = 5
	DecisionTaskFailedCauseBadCompleteWorkflowExecutionAttributes              DecisionTaskFailedCause = 6
	DecisionTaskFailedCauseBadFailWorkflowExecutionAttributes                  DecisionTaskFailedCause = 7
	DecisionTaskFailedCauseBadCancelWorkflowExecutionAttributes                DecisionTaskFailedCause = 8
	DecisionTaskFailedCauseBadRequestCancelExternalWorkflowExecutionAttributes DecisionTaskFailedCause = 9
	DecisionTaskFailedCauseBadContinueAsNewAttributes                          DecisionTaskFailedCause = 10
	DecisionTaskFailedCauseStartTimerDuplicateID                               DecisionTaskFailedCause = 11
	DecisionTaskFailedCauseResetStickyTasklist                                 DecisionTaskFailedCause = 12
	DecisionTaskFailedCauseWorkflowWorkerUnhandledFailure                      DecisionTaskFailedCause = 13
)

func DecisionTaskFailedCause_Values() []DecisionTaskFailedCause {
	return []DecisionTaskFailedCause{DecisionTaskFailedCauseUnhandledDecision, DecisionTaskFailedCauseBadScheduleActivityAttributes, DecisionTaskFailedCauseBadRequestCancelActivityAttributes, DecisionTaskFailedCauseBadStartTimerAttributes, DecisionTaskFailedCauseBadCancelTimerAttributes, DecisionTaskFailedCauseBadRecordMarkerAttributes, DecisionTaskFailedCauseBadCompleteWorkflowExecutionAttributes, DecisionTaskFailedCauseBadFailWorkflowExecutionAttributes, DecisionTaskFailedCauseBadCancelWorkflowExecutionAttributes, DecisionTaskFailedCauseBadRequestCancelExternalWorkflowExecutionAttributes, DecisionTaskFailedCauseBadContinueAsNewAttributes, DecisionTaskFailedCauseStartTimerDuplicateID, DecisionTaskFailedCauseResetStickyTasklist, DecisionTaskFailedCauseWorkflowWorkerUnhandledFailure}
}

func (v *DecisionTaskFailedCause) UnmarshalText(value []byte) error {
	switch string(value) {
	case "UNHANDLED_DECISION":
		*v = DecisionTaskFailedCauseUnhandledDecision
		return nil
	case "BAD_SCHEDULE_ACTIVITY_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadScheduleActivityAttributes
		return nil
	case "BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadRequestCancelActivityAttributes
		return nil
	case "BAD_START_TIMER_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadStartTimerAttributes
		return nil
	case "BAD_CANCEL_TIMER_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadCancelTimerAttributes
		return nil
	case "BAD_RECORD_MARKER_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadRecordMarkerAttributes
		return nil
	case "BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadCompleteWorkflowExecutionAttributes
		return nil
	case "BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadFailWorkflowExecutionAttributes
		return nil
	case "BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadCancelWorkflowExecutionAttributes
		return nil
	case "BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadRequestCancelExternalWorkflowExecutionAttributes
		return nil
	case "BAD_CONTINUE_AS_NEW_ATTRIBUTES":
		*v = DecisionTaskFailedCauseBadContinueAsNewAttributes
		return nil
	case "START_TIMER_DUPLICATE_ID":
		*v = DecisionTaskFailedCauseStartTimerDuplicateID
		return nil
	case "RESET_STICKY_TASKLIST":
		*v = DecisionTaskFailedCauseResetStickyTasklist
		return nil
	case "WORKFLOW_WORKER_UNHANDLED_FAILURE":
		*v = DecisionTaskFailedCauseWorkflowWorkerUnhandledFailure
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "DecisionTaskFailedCause")
	}
}

func (v DecisionTaskFailedCause) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *DecisionTaskFailedCause) FromWire(w wire.Value) error {
	*v = (DecisionTaskFailedCause)(w.GetI32())
	return nil
}

func (v DecisionTaskFailedCause) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "UNHANDLED_DECISION"
	case 1:
		return "BAD_SCHEDULE_ACTIVITY_ATTRIBUTES"
	case 2:
		return "BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES"
	case 3:
		return "BAD_START_TIMER_ATTRIBUTES"
	case 4:
		return "BAD_CANCEL_TIMER_ATTRIBUTES"
	case 5:
		return "BAD_RECORD_MARKER_ATTRIBUTES"
	case 6:
		return "BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES"
	case 7:
		return "BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES"
	case 8:
		return "BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES"
	case 9:
		return "BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES"
	case 10:
		return "BAD_CONTINUE_AS_NEW_ATTRIBUTES"
	case 11:
		return "START_TIMER_DUPLICATE_ID"
	case 12:
		return "RESET_STICKY_TASKLIST"
	case 13:
		return "WORKFLOW_WORKER_UNHANDLED_FAILURE"
	}
	return fmt.Sprintf("DecisionTaskFailedCause(%d)", w)
}

func (v DecisionTaskFailedCause) Equals(rhs DecisionTaskFailedCause) bool {
	return v == rhs
}

func (v DecisionTaskFailedCause) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"UNHANDLED_DECISION\""), nil
	case 1:
		return ([]byte)("\"BAD_SCHEDULE_ACTIVITY_ATTRIBUTES\""), nil
	case 2:
		return ([]byte)("\"BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES\""), nil
	case 3:
		return ([]byte)("\"BAD_START_TIMER_ATTRIBUTES\""), nil
	case 4:
		return ([]byte)("\"BAD_CANCEL_TIMER_ATTRIBUTES\""), nil
	case 5:
		return ([]byte)("\"BAD_RECORD_MARKER_ATTRIBUTES\""), nil
	case 6:
		return ([]byte)("\"BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES\""), nil
	case 7:
		return ([]byte)("\"BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES\""), nil
	case 8:
		return ([]byte)("\"BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES\""), nil
	case 9:
		return ([]byte)("\"BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES\""), nil
	case 10:
		return ([]byte)("\"BAD_CONTINUE_AS_NEW_ATTRIBUTES\""), nil
	case 11:
		return ([]byte)("\"START_TIMER_DUPLICATE_ID\""), nil
	case 12:
		return ([]byte)("\"RESET_STICKY_TASKLIST\""), nil
	case 13:
		return ([]byte)("\"WORKFLOW_WORKER_UNHANDLED_FAILURE\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *DecisionTaskFailedCause) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "DecisionTaskFailedCause")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "DecisionTaskFailedCause")
		}
		*v = (DecisionTaskFailedCause)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "DecisionTaskFailedCause")
	}
}

type DecisionTaskFailedEventAttributes struct {
	ScheduledEventId *int64                   `json:"scheduledEventId,omitempty"`
	StartedEventId   *int64                   `json:"startedEventId,omitempty"`
	Cause            *DecisionTaskFailedCause `json:"cause,omitempty"`
	Details          []byte                   `json:"details"`
	Identity         *string                  `json:"identity,omitempty"`
}

func (v *DecisionTaskFailedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Cause != nil {
		w, err = v.Cause.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 35, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _DecisionTaskFailedCause_Read(w wire.Value) (DecisionTaskFailedCause, error) {
	var v DecisionTaskFailedCause
	err := v.FromWire(w)
	return v, err
}

func (v *DecisionTaskFailedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI32 {
				var x DecisionTaskFailedCause
				x, err = _DecisionTaskFailedCause_Read(field.Value)
				v.Cause = &x
				if err != nil {
					return err
				}
			}
		case 35:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DecisionTaskFailedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.Cause != nil {
		fields[i] = fmt.Sprintf("Cause: %v", *(v.Cause))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("DecisionTaskFailedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _DecisionTaskFailedCause_EqualsPtr(lhs, rhs *DecisionTaskFailedCause) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *DecisionTaskFailedEventAttributes) Equals(rhs *DecisionTaskFailedEventAttributes) bool {
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_DecisionTaskFailedCause_EqualsPtr(v.Cause, rhs.Cause) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *DecisionTaskFailedEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *DecisionTaskFailedEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *DecisionTaskFailedEventAttributes) GetCause() (o DecisionTaskFailedCause) {
	if v.Cause != nil {
		return *v.Cause
	}
	return
}

func (v *DecisionTaskFailedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type DecisionTaskFailedEventFilter struct{}

func (v *DecisionTaskFailedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskFailedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *DecisionTaskFailedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("DecisionTaskFailedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskFailedEventFilter) Equals(rhs *DecisionTaskFailedEventFilter) bool {
	return true
}

type DecisionTaskScheduledEventAttributes struct {
	TaskList                   *TaskList `json:"taskList,omitempty"`
	StartToCloseTimeoutSeconds *int32    `json:"startToCloseTimeoutSeconds,omitempty"`
	Attempt                    *int64    `json:"attempt,omitempty"`
}

func (v *DecisionTaskScheduledEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.StartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Attempt != nil {
		w, err = wire.NewValueI64(*(v.Attempt)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskScheduledEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.StartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Attempt = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DecisionTaskScheduledEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.StartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("StartToCloseTimeoutSeconds: %v", *(v.StartToCloseTimeoutSeconds))
		i++
	}
	if v.Attempt != nil {
		fields[i] = fmt.Sprintf("Attempt: %v", *(v.Attempt))
		i++
	}
	return fmt.Sprintf("DecisionTaskScheduledEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskScheduledEventAttributes) Equals(rhs *DecisionTaskScheduledEventAttributes) bool {
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !_I32_EqualsPtr(v.StartToCloseTimeoutSeconds, rhs.StartToCloseTimeoutSeconds) {
		return false
	}
	if !_I64_EqualsPtr(v.Attempt, rhs.Attempt) {
		return false
	}
	return true
}

func (v *DecisionTaskScheduledEventAttributes) GetStartToCloseTimeoutSeconds() (o int32) {
	if v.StartToCloseTimeoutSeconds != nil {
		return *v.StartToCloseTimeoutSeconds
	}
	return
}

func (v *DecisionTaskScheduledEventAttributes) GetAttempt() (o int64) {
	if v.Attempt != nil {
		return *v.Attempt
	}
	return
}

type DecisionTaskScheduledEventFilter struct{}

func (v *DecisionTaskScheduledEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskScheduledEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *DecisionTaskScheduledEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("DecisionTaskScheduledEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskScheduledEventFilter) Equals(rhs *DecisionTaskScheduledEventFilter) bool {
	return true
}

type DecisionTaskStartedEventAttributes struct {
	ScheduledEventId *int64  `json:"scheduledEventId,omitempty"`
	Identity         *string `json:"identity,omitempty"`
	RequestId        *string `json:"requestId,omitempty"`
}

func (v *DecisionTaskStartedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.RequestId != nil {
		w, err = wire.NewValueString(*(v.RequestId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskStartedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RequestId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DecisionTaskStartedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	if v.RequestId != nil {
		fields[i] = fmt.Sprintf("RequestId: %v", *(v.RequestId))
		i++
	}
	return fmt.Sprintf("DecisionTaskStartedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskStartedEventAttributes) Equals(rhs *DecisionTaskStartedEventAttributes) bool {
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	if !_String_EqualsPtr(v.RequestId, rhs.RequestId) {
		return false
	}
	return true
}

func (v *DecisionTaskStartedEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *DecisionTaskStartedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

func (v *DecisionTaskStartedEventAttributes) GetRequestId() (o string) {
	if v.RequestId != nil {
		return *v.RequestId
	}
	return
}

type DecisionTaskStartedEventFilter struct{}

func (v *DecisionTaskStartedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskStartedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *DecisionTaskStartedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("DecisionTaskStartedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskStartedEventFilter) Equals(rhs *DecisionTaskStartedEventFilter) bool {
	return true
}

type DecisionTaskTimedOutEventAttributes struct {
	ScheduledEventId *int64       `json:"scheduledEventId,omitempty"`
	StartedEventId   *int64       `json:"startedEventId,omitempty"`
	TimeoutType      *TimeoutType `json:"timeoutType,omitempty"`
}

func (v *DecisionTaskTimedOutEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ScheduledEventId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.TimeoutType != nil {
		w, err = v.TimeoutType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskTimedOutEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledEventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI32 {
				var x TimeoutType
				x, err = _TimeoutType_Read(field.Value)
				v.TimeoutType = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DecisionTaskTimedOutEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.ScheduledEventId != nil {
		fields[i] = fmt.Sprintf("ScheduledEventId: %v", *(v.ScheduledEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.TimeoutType != nil {
		fields[i] = fmt.Sprintf("TimeoutType: %v", *(v.TimeoutType))
		i++
	}
	return fmt.Sprintf("DecisionTaskTimedOutEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskTimedOutEventAttributes) Equals(rhs *DecisionTaskTimedOutEventAttributes) bool {
	if !_I64_EqualsPtr(v.ScheduledEventId, rhs.ScheduledEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_TimeoutType_EqualsPtr(v.TimeoutType, rhs.TimeoutType) {
		return false
	}
	return true
}

func (v *DecisionTaskTimedOutEventAttributes) GetScheduledEventId() (o int64) {
	if v.ScheduledEventId != nil {
		return *v.ScheduledEventId
	}
	return
}

func (v *DecisionTaskTimedOutEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *DecisionTaskTimedOutEventAttributes) GetTimeoutType() (o TimeoutType) {
	if v.TimeoutType != nil {
		return *v.TimeoutType
	}
	return
}

type DecisionTaskTimedOutEventFilter struct{}

func (v *DecisionTaskTimedOutEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DecisionTaskTimedOutEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *DecisionTaskTimedOutEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("DecisionTaskTimedOutEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *DecisionTaskTimedOutEventFilter) Equals(rhs *DecisionTaskTimedOutEventFilter) bool {
	return true
}

type DecisionType int32

const (
	DecisionTypeScheduleActivityTask                   DecisionType = 0
	DecisionTypeRequestCancelActivityTask              DecisionType = 1
	DecisionTypeStartTimer                             DecisionType = 2
	DecisionTypeCompleteWorkflowExecution              DecisionType = 3
	DecisionTypeFailWorkflowExecution                  DecisionType = 4
	DecisionTypeCancelTimer                            DecisionType = 5
	DecisionTypeCancelWorkflowExecution                DecisionType = 6
	DecisionTypeRequestCancelExternalWorkflowExecution DecisionType = 7
	DecisionTypeRecordMarker                           DecisionType = 8
	DecisionTypeContinueAsNewWorkflowExecution         DecisionType = 9
	DecisionTypeStartChildWorkflowExecution            DecisionType = 10
)

func DecisionType_Values() []DecisionType {
	return []DecisionType{DecisionTypeScheduleActivityTask, DecisionTypeRequestCancelActivityTask, DecisionTypeStartTimer, DecisionTypeCompleteWorkflowExecution, DecisionTypeFailWorkflowExecution, DecisionTypeCancelTimer, DecisionTypeCancelWorkflowExecution, DecisionTypeRequestCancelExternalWorkflowExecution, DecisionTypeRecordMarker, DecisionTypeContinueAsNewWorkflowExecution, DecisionTypeStartChildWorkflowExecution}
}

func (v *DecisionType) UnmarshalText(value []byte) error {
	switch string(value) {
	case "ScheduleActivityTask":
		*v = DecisionTypeScheduleActivityTask
		return nil
	case "RequestCancelActivityTask":
		*v = DecisionTypeRequestCancelActivityTask
		return nil
	case "StartTimer":
		*v = DecisionTypeStartTimer
		return nil
	case "CompleteWorkflowExecution":
		*v = DecisionTypeCompleteWorkflowExecution
		return nil
	case "FailWorkflowExecution":
		*v = DecisionTypeFailWorkflowExecution
		return nil
	case "CancelTimer":
		*v = DecisionTypeCancelTimer
		return nil
	case "CancelWorkflowExecution":
		*v = DecisionTypeCancelWorkflowExecution
		return nil
	case "RequestCancelExternalWorkflowExecution":
		*v = DecisionTypeRequestCancelExternalWorkflowExecution
		return nil
	case "RecordMarker":
		*v = DecisionTypeRecordMarker
		return nil
	case "ContinueAsNewWorkflowExecution":
		*v = DecisionTypeContinueAsNewWorkflowExecution
		return nil
	case "StartChildWorkflowExecution":
		*v = DecisionTypeStartChildWorkflowExecution
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "DecisionType")
	}
}

func (v DecisionType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *DecisionType) FromWire(w wire.Value) error {
	*v = (DecisionType)(w.GetI32())
	return nil
}

func (v DecisionType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "ScheduleActivityTask"
	case 1:
		return "RequestCancelActivityTask"
	case 2:
		return "StartTimer"
	case 3:
		return "CompleteWorkflowExecution"
	case 4:
		return "FailWorkflowExecution"
	case 5:
		return "CancelTimer"
	case 6:
		return "CancelWorkflowExecution"
	case 7:
		return "RequestCancelExternalWorkflowExecution"
	case 8:
		return "RecordMarker"
	case 9:
		return "ContinueAsNewWorkflowExecution"
	case 10:
		return "StartChildWorkflowExecution"
	}
	return fmt.Sprintf("DecisionType(%d)", w)
}

func (v DecisionType) Equals(rhs DecisionType) bool {
	return v == rhs
}

func (v DecisionType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"ScheduleActivityTask\""), nil
	case 1:
		return ([]byte)("\"RequestCancelActivityTask\""), nil
	case 2:
		return ([]byte)("\"StartTimer\""), nil
	case 3:
		return ([]byte)("\"CompleteWorkflowExecution\""), nil
	case 4:
		return ([]byte)("\"FailWorkflowExecution\""), nil
	case 5:
		return ([]byte)("\"CancelTimer\""), nil
	case 6:
		return ([]byte)("\"CancelWorkflowExecution\""), nil
	case 7:
		return ([]byte)("\"RequestCancelExternalWorkflowExecution\""), nil
	case 8:
		return ([]byte)("\"RecordMarker\""), nil
	case 9:
		return ([]byte)("\"ContinueAsNewWorkflowExecution\""), nil
	case 10:
		return ([]byte)("\"StartChildWorkflowExecution\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *DecisionType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "DecisionType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "DecisionType")
		}
		*v = (DecisionType)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "DecisionType")
	}
}

type DeprecateDomainRequest struct {
	Name *string `json:"name,omitempty"`
}

func (v *DeprecateDomainRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DeprecateDomainRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DeprecateDomainRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("DeprecateDomainRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *DeprecateDomainRequest) Equals(rhs *DeprecateDomainRequest) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	return true
}

func (v *DeprecateDomainRequest) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}

type DescribeDomainRequest struct {
	Name *string `json:"name,omitempty"`
}

func (v *DescribeDomainRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DescribeDomainRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DescribeDomainRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("DescribeDomainRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *DescribeDomainRequest) Equals(rhs *DescribeDomainRequest) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	return true
}

func (v *DescribeDomainRequest) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}

type DescribeDomainResponse struct {
	DomainInfo    *DomainInfo          `json:"domainInfo,omitempty"`
	Configuration *DomainConfiguration `json:"configuration,omitempty"`
}

func (v *DescribeDomainResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.DomainInfo != nil {
		w, err = v.DomainInfo.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Configuration != nil {
		w, err = v.Configuration.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _DomainInfo_Read(w wire.Value) (*DomainInfo, error) {
	var v DomainInfo
	err := v.FromWire(w)
	return &v, err
}

func _DomainConfiguration_Read(w wire.Value) (*DomainConfiguration, error) {
	var v DomainConfiguration
	err := v.FromWire(w)
	return &v, err
}

func (v *DescribeDomainResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.DomainInfo, err = _DomainInfo_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.Configuration, err = _DomainConfiguration_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DescribeDomainResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.DomainInfo != nil {
		fields[i] = fmt.Sprintf("DomainInfo: %v", v.DomainInfo)
		i++
	}
	if v.Configuration != nil {
		fields[i] = fmt.Sprintf("Configuration: %v", v.Configuration)
		i++
	}
	return fmt.Sprintf("DescribeDomainResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *DescribeDomainResponse) Equals(rhs *DescribeDomainResponse) bool {
	if !((v.DomainInfo == nil && rhs.DomainInfo == nil) || (v.DomainInfo != nil && rhs.DomainInfo != nil && v.DomainInfo.Equals(rhs.DomainInfo))) {
		return false
	}
	if !((v.Configuration == nil && rhs.Configuration == nil) || (v.Configuration != nil && rhs.Configuration != nil && v.Configuration.Equals(rhs.Configuration))) {
		return false
	}
	return true
}

type DescribeWorkflowExecutionRequest struct {
	Domain    *string            `json:"domain,omitempty"`
	Execution *WorkflowExecution `json:"execution,omitempty"`
}

func (v *DescribeWorkflowExecutionRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Execution != nil {
		w, err = v.Execution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DescribeWorkflowExecutionRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.Execution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DescribeWorkflowExecutionRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.Execution != nil {
		fields[i] = fmt.Sprintf("Execution: %v", v.Execution)
		i++
	}
	return fmt.Sprintf("DescribeWorkflowExecutionRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *DescribeWorkflowExecutionRequest) Equals(rhs *DescribeWorkflowExecutionRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.Execution == nil && rhs.Execution == nil) || (v.Execution != nil && rhs.Execution != nil && v.Execution.Equals(rhs.Execution))) {
		return false
	}
	return true
}

func (v *DescribeWorkflowExecutionRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

type DescribeWorkflowExecutionResponse struct {
	ExecutionConfiguration *WorkflowExecutionConfiguration `json:"executionConfiguration,omitempty"`
	WorkflowExecutionInfo  *WorkflowExecutionInfo          `json:"workflowExecutionInfo,omitempty"`
}

func (v *DescribeWorkflowExecutionResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ExecutionConfiguration != nil {
		w, err = v.ExecutionConfiguration.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowExecutionInfo != nil {
		w, err = v.WorkflowExecutionInfo.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _WorkflowExecutionConfiguration_Read(w wire.Value) (*WorkflowExecutionConfiguration, error) {
	var v WorkflowExecutionConfiguration
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionInfo_Read(w wire.Value) (*WorkflowExecutionInfo, error) {
	var v WorkflowExecutionInfo
	err := v.FromWire(w)
	return &v, err
}

func (v *DescribeWorkflowExecutionResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.ExecutionConfiguration, err = _WorkflowExecutionConfiguration_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionInfo, err = _WorkflowExecutionInfo_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DescribeWorkflowExecutionResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ExecutionConfiguration != nil {
		fields[i] = fmt.Sprintf("ExecutionConfiguration: %v", v.ExecutionConfiguration)
		i++
	}
	if v.WorkflowExecutionInfo != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionInfo: %v", v.WorkflowExecutionInfo)
		i++
	}
	return fmt.Sprintf("DescribeWorkflowExecutionResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *DescribeWorkflowExecutionResponse) Equals(rhs *DescribeWorkflowExecutionResponse) bool {
	if !((v.ExecutionConfiguration == nil && rhs.ExecutionConfiguration == nil) || (v.ExecutionConfiguration != nil && rhs.ExecutionConfiguration != nil && v.ExecutionConfiguration.Equals(rhs.ExecutionConfiguration))) {
		return false
	}
	if !((v.WorkflowExecutionInfo == nil && rhs.WorkflowExecutionInfo == nil) || (v.WorkflowExecutionInfo != nil && rhs.WorkflowExecutionInfo != nil && v.WorkflowExecutionInfo.Equals(rhs.WorkflowExecutionInfo))) {
		return false
	}
	return true
}

type DomainAlreadyExistsError struct {
	Message string `json:"message,required"`
}

func (v *DomainAlreadyExistsError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DomainAlreadyExistsError) FromWire(w wire.Value) error {
	var err error
	messageIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}
	if !messageIsSet {
		return errors.New("field Message of DomainAlreadyExistsError is required")
	}
	return nil
}

func (v *DomainAlreadyExistsError) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	return fmt.Sprintf("DomainAlreadyExistsError{%v}", strings.Join(fields[:i], ", "))
}

func (v *DomainAlreadyExistsError) Equals(rhs *DomainAlreadyExistsError) bool {
	if !(v.Message == rhs.Message) {
		return false
	}
	return true
}

func (v *DomainAlreadyExistsError) Error() string {
	return v.String()
}

type DomainConfiguration struct {
	WorkflowExecutionRetentionPeriodInDays *int32 `json:"workflowExecutionRetentionPeriodInDays,omitempty"`
	EmitMetric                             *bool  `json:"emitMetric,omitempty"`
}

func (v *DomainConfiguration) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowExecutionRetentionPeriodInDays != nil {
		w, err = wire.NewValueI32(*(v.WorkflowExecutionRetentionPeriodInDays)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.EmitMetric != nil {
		w, err = wire.NewValueBool(*(v.EmitMetric)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DomainConfiguration) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.WorkflowExecutionRetentionPeriodInDays = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.EmitMetric = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DomainConfiguration) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowExecutionRetentionPeriodInDays != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionRetentionPeriodInDays: %v", *(v.WorkflowExecutionRetentionPeriodInDays))
		i++
	}
	if v.EmitMetric != nil {
		fields[i] = fmt.Sprintf("EmitMetric: %v", *(v.EmitMetric))
		i++
	}
	return fmt.Sprintf("DomainConfiguration{%v}", strings.Join(fields[:i], ", "))
}

func _Bool_EqualsPtr(lhs, rhs *bool) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func (v *DomainConfiguration) Equals(rhs *DomainConfiguration) bool {
	if !_I32_EqualsPtr(v.WorkflowExecutionRetentionPeriodInDays, rhs.WorkflowExecutionRetentionPeriodInDays) {
		return false
	}
	if !_Bool_EqualsPtr(v.EmitMetric, rhs.EmitMetric) {
		return false
	}
	return true
}

func (v *DomainConfiguration) GetWorkflowExecutionRetentionPeriodInDays() (o int32) {
	if v.WorkflowExecutionRetentionPeriodInDays != nil {
		return *v.WorkflowExecutionRetentionPeriodInDays
	}
	return
}

func (v *DomainConfiguration) GetEmitMetric() (o bool) {
	if v.EmitMetric != nil {
		return *v.EmitMetric
	}
	return
}

type DomainInfo struct {
	Name        *string       `json:"name,omitempty"`
	Status      *DomainStatus `json:"status,omitempty"`
	Description *string       `json:"description,omitempty"`
	OwnerEmail  *string       `json:"ownerEmail,omitempty"`
}

func (v *DomainInfo) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Status != nil {
		w, err = v.Status.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Description != nil {
		w, err = wire.NewValueString(*(v.Description)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.OwnerEmail != nil {
		w, err = wire.NewValueString(*(v.OwnerEmail)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _DomainStatus_Read(w wire.Value) (DomainStatus, error) {
	var v DomainStatus
	err := v.FromWire(w)
	return v, err
}

func (v *DomainInfo) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI32 {
				var x DomainStatus
				x, err = _DomainStatus_Read(field.Value)
				v.Status = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Description = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.OwnerEmail = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DomainInfo) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Status != nil {
		fields[i] = fmt.Sprintf("Status: %v", *(v.Status))
		i++
	}
	if v.Description != nil {
		fields[i] = fmt.Sprintf("Description: %v", *(v.Description))
		i++
	}
	if v.OwnerEmail != nil {
		fields[i] = fmt.Sprintf("OwnerEmail: %v", *(v.OwnerEmail))
		i++
	}
	return fmt.Sprintf("DomainInfo{%v}", strings.Join(fields[:i], ", "))
}

func _DomainStatus_EqualsPtr(lhs, rhs *DomainStatus) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *DomainInfo) Equals(rhs *DomainInfo) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	if !_DomainStatus_EqualsPtr(v.Status, rhs.Status) {
		return false
	}
	if !_String_EqualsPtr(v.Description, rhs.Description) {
		return false
	}
	if !_String_EqualsPtr(v.OwnerEmail, rhs.OwnerEmail) {
		return false
	}
	return true
}

func (v *DomainInfo) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}

func (v *DomainInfo) GetStatus() (o DomainStatus) {
	if v.Status != nil {
		return *v.Status
	}
	return
}

func (v *DomainInfo) GetDescription() (o string) {
	if v.Description != nil {
		return *v.Description
	}
	return
}

func (v *DomainInfo) GetOwnerEmail() (o string) {
	if v.OwnerEmail != nil {
		return *v.OwnerEmail
	}
	return
}

type DomainStatus int32

const (
	DomainStatusRegistered DomainStatus = 0
	DomainStatusDeprecated DomainStatus = 1
	DomainStatusDeleted    DomainStatus = 2
)

func DomainStatus_Values() []DomainStatus {
	return []DomainStatus{DomainStatusRegistered, DomainStatusDeprecated, DomainStatusDeleted}
}

func (v *DomainStatus) UnmarshalText(value []byte) error {
	switch string(value) {
	case "REGISTERED":
		*v = DomainStatusRegistered
		return nil
	case "DEPRECATED":
		*v = DomainStatusDeprecated
		return nil
	case "DELETED":
		*v = DomainStatusDeleted
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "DomainStatus")
	}
}

func (v DomainStatus) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *DomainStatus) FromWire(w wire.Value) error {
	*v = (DomainStatus)(w.GetI32())
	return nil
}

func (v DomainStatus) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "REGISTERED"
	case 1:
		return "DEPRECATED"
	case 2:
		return "DELETED"
	}
	return fmt.Sprintf("DomainStatus(%d)", w)
}

func (v DomainStatus) Equals(rhs DomainStatus) bool {
	return v == rhs
}

func (v DomainStatus) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"REGISTERED\""), nil
	case 1:
		return ([]byte)("\"DEPRECATED\""), nil
	case 2:
		return ([]byte)("\"DELETED\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *DomainStatus) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "DomainStatus")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "DomainStatus")
		}
		*v = (DomainStatus)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "DomainStatus")
	}
}

type EntityNotExistsError struct {
	Message string `json:"message,required"`
}

func (v *EntityNotExistsError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *EntityNotExistsError) FromWire(w wire.Value) error {
	var err error
	messageIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}
	if !messageIsSet {
		return errors.New("field Message of EntityNotExistsError is required")
	}
	return nil
}

func (v *EntityNotExistsError) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	return fmt.Sprintf("EntityNotExistsError{%v}", strings.Join(fields[:i], ", "))
}

func (v *EntityNotExistsError) Equals(rhs *EntityNotExistsError) bool {
	if !(v.Message == rhs.Message) {
		return false
	}
	return true
}

func (v *EntityNotExistsError) Error() string {
	return v.String()
}

type EventType int32

const (
	EventTypeWorkflowExecutionStarted                        EventType = 0
	EventTypeWorkflowExecutionCompleted                      EventType = 1
	EventTypeWorkflowExecutionFailed                         EventType = 2
	EventTypeWorkflowExecutionTimedOut                       EventType = 3
	EventTypeDecisionTaskScheduled                           EventType = 4
	EventTypeDecisionTaskStarted                             EventType = 5
	EventTypeDecisionTaskCompleted                           EventType = 6
	EventTypeDecisionTaskTimedOut                            EventType = 7
	EventTypeDecisionTaskFailed                              EventType = 8
	EventTypeActivityTaskScheduled                           EventType = 9
	EventTypeActivityTaskStarted                             EventType = 10
	EventTypeActivityTaskCompleted                           EventType = 11
	EventTypeActivityTaskFailed                              EventType = 12
	EventTypeActivityTaskTimedOut                            EventType = 13
	EventTypeActivityTaskCancelRequested                     EventType = 14
	EventTypeRequestCancelActivityTaskFailed                 EventType = 15
	EventTypeActivityTaskCanceled                            EventType = 16
	EventTypeTimerStarted                                    EventType = 17
	EventTypeTimerFired                                      EventType = 18
	EventTypeCancelTimerFailed                               EventType = 19
	EventTypeTimerCanceled                                   EventType = 20
	EventTypeWorkflowExecutionCancelRequested                EventType = 21
	EventTypeWorkflowExecutionCanceled                       EventType = 22
	EventTypeRequestCancelExternalWorkflowExecutionInitiated EventType = 23
	EventTypeRequestCancelExternalWorkflowExecutionFailed    EventType = 24
	EventTypeExternalWorkflowExecutionCancelRequested        EventType = 25
	EventTypeMarkerRecorded                                  EventType = 26
	EventTypeWorkflowExecutionSignaled                       EventType = 27
	EventTypeWorkflowExecutionTerminated                     EventType = 28
	EventTypeWorkflowExecutionContinuedAsNew                 EventType = 29
	EventTypeStartChildWorkflowExecutionInitiated            EventType = 30
	EventTypeStartChildWorkflowExecutionFailed               EventType = 31
	EventTypeChildWorkflowExecutionStarted                   EventType = 32
	EventTypeChildWorkflowExecutionCompleted                 EventType = 33
	EventTypeChildWorkflowExecutionFailed                    EventType = 34
	EventTypeChildWorkflowExecutionCanceled                  EventType = 35
	EventTypeChildWorkflowExecutionTimedOut                  EventType = 36
	EventTypeChildWorkflowExecutionTerminated                EventType = 37
)

func EventType_Values() []EventType {
	return []EventType{EventTypeWorkflowExecutionStarted, EventTypeWorkflowExecutionCompleted, EventTypeWorkflowExecutionFailed, EventTypeWorkflowExecutionTimedOut, EventTypeDecisionTaskScheduled, EventTypeDecisionTaskStarted, EventTypeDecisionTaskCompleted, EventTypeDecisionTaskTimedOut, EventTypeDecisionTaskFailed, EventTypeActivityTaskScheduled, EventTypeActivityTaskStarted, EventTypeActivityTaskCompleted, EventTypeActivityTaskFailed, EventTypeActivityTaskTimedOut, EventTypeActivityTaskCancelRequested, EventTypeRequestCancelActivityTaskFailed, EventTypeActivityTaskCanceled, EventTypeTimerStarted, EventTypeTimerFired, EventTypeCancelTimerFailed, EventTypeTimerCanceled, EventTypeWorkflowExecutionCancelRequested, EventTypeWorkflowExecutionCanceled, EventTypeRequestCancelExternalWorkflowExecutionInitiated, EventTypeRequestCancelExternalWorkflowExecutionFailed, EventTypeExternalWorkflowExecutionCancelRequested, EventTypeMarkerRecorded, EventTypeWorkflowExecutionSignaled, EventTypeWorkflowExecutionTerminated, EventTypeWorkflowExecutionContinuedAsNew, EventTypeStartChildWorkflowExecutionInitiated, EventTypeStartChildWorkflowExecutionFailed, EventTypeChildWorkflowExecutionStarted, EventTypeChildWorkflowExecutionCompleted, EventTypeChildWorkflowExecutionFailed, EventTypeChildWorkflowExecutionCanceled, EventTypeChildWorkflowExecutionTimedOut, EventTypeChildWorkflowExecutionTerminated}
}

func (v *EventType) UnmarshalText(value []byte) error {
	switch string(value) {
	case "WorkflowExecutionStarted":
		*v = EventTypeWorkflowExecutionStarted
		return nil
	case "WorkflowExecutionCompleted":
		*v = EventTypeWorkflowExecutionCompleted
		return nil
	case "WorkflowExecutionFailed":
		*v = EventTypeWorkflowExecutionFailed
		return nil
	case "WorkflowExecutionTimedOut":
		*v = EventTypeWorkflowExecutionTimedOut
		return nil
	case "DecisionTaskScheduled":
		*v = EventTypeDecisionTaskScheduled
		return nil
	case "DecisionTaskStarted":
		*v = EventTypeDecisionTaskStarted
		return nil
	case "DecisionTaskCompleted":
		*v = EventTypeDecisionTaskCompleted
		return nil
	case "DecisionTaskTimedOut":
		*v = EventTypeDecisionTaskTimedOut
		return nil
	case "DecisionTaskFailed":
		*v = EventTypeDecisionTaskFailed
		return nil
	case "ActivityTaskScheduled":
		*v = EventTypeActivityTaskScheduled
		return nil
	case "ActivityTaskStarted":
		*v = EventTypeActivityTaskStarted
		return nil
	case "ActivityTaskCompleted":
		*v = EventTypeActivityTaskCompleted
		return nil
	case "ActivityTaskFailed":
		*v = EventTypeActivityTaskFailed
		return nil
	case "ActivityTaskTimedOut":
		*v = EventTypeActivityTaskTimedOut
		return nil
	case "ActivityTaskCancelRequested":
		*v = EventTypeActivityTaskCancelRequested
		return nil
	case "RequestCancelActivityTaskFailed":
		*v = EventTypeRequestCancelActivityTaskFailed
		return nil
	case "ActivityTaskCanceled":
		*v = EventTypeActivityTaskCanceled
		return nil
	case "TimerStarted":
		*v = EventTypeTimerStarted
		return nil
	case "TimerFired":
		*v = EventTypeTimerFired
		return nil
	case "CancelTimerFailed":
		*v = EventTypeCancelTimerFailed
		return nil
	case "TimerCanceled":
		*v = EventTypeTimerCanceled
		return nil
	case "WorkflowExecutionCancelRequested":
		*v = EventTypeWorkflowExecutionCancelRequested
		return nil
	case "WorkflowExecutionCanceled":
		*v = EventTypeWorkflowExecutionCanceled
		return nil
	case "RequestCancelExternalWorkflowExecutionInitiated":
		*v = EventTypeRequestCancelExternalWorkflowExecutionInitiated
		return nil
	case "RequestCancelExternalWorkflowExecutionFailed":
		*v = EventTypeRequestCancelExternalWorkflowExecutionFailed
		return nil
	case "ExternalWorkflowExecutionCancelRequested":
		*v = EventTypeExternalWorkflowExecutionCancelRequested
		return nil
	case "MarkerRecorded":
		*v = EventTypeMarkerRecorded
		return nil
	case "WorkflowExecutionSignaled":
		*v = EventTypeWorkflowExecutionSignaled
		return nil
	case "WorkflowExecutionTerminated":
		*v = EventTypeWorkflowExecutionTerminated
		return nil
	case "WorkflowExecutionContinuedAsNew":
		*v = EventTypeWorkflowExecutionContinuedAsNew
		return nil
	case "StartChildWorkflowExecutionInitiated":
		*v = EventTypeStartChildWorkflowExecutionInitiated
		return nil
	case "StartChildWorkflowExecutionFailed":
		*v = EventTypeStartChildWorkflowExecutionFailed
		return nil
	case "ChildWorkflowExecutionStarted":
		*v = EventTypeChildWorkflowExecutionStarted
		return nil
	case "ChildWorkflowExecutionCompleted":
		*v = EventTypeChildWorkflowExecutionCompleted
		return nil
	case "ChildWorkflowExecutionFailed":
		*v = EventTypeChildWorkflowExecutionFailed
		return nil
	case "ChildWorkflowExecutionCanceled":
		*v = EventTypeChildWorkflowExecutionCanceled
		return nil
	case "ChildWorkflowExecutionTimedOut":
		*v = EventTypeChildWorkflowExecutionTimedOut
		return nil
	case "ChildWorkflowExecutionTerminated":
		*v = EventTypeChildWorkflowExecutionTerminated
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "EventType")
	}
}

func (v EventType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *EventType) FromWire(w wire.Value) error {
	*v = (EventType)(w.GetI32())
	return nil
}

func (v EventType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "WorkflowExecutionStarted"
	case 1:
		return "WorkflowExecutionCompleted"
	case 2:
		return "WorkflowExecutionFailed"
	case 3:
		return "WorkflowExecutionTimedOut"
	case 4:
		return "DecisionTaskScheduled"
	case 5:
		return "DecisionTaskStarted"
	case 6:
		return "DecisionTaskCompleted"
	case 7:
		return "DecisionTaskTimedOut"
	case 8:
		return "DecisionTaskFailed"
	case 9:
		return "ActivityTaskScheduled"
	case 10:
		return "ActivityTaskStarted"
	case 11:
		return "ActivityTaskCompleted"
	case 12:
		return "ActivityTaskFailed"
	case 13:
		return "ActivityTaskTimedOut"
	case 14:
		return "ActivityTaskCancelRequested"
	case 15:
		return "RequestCancelActivityTaskFailed"
	case 16:
		return "ActivityTaskCanceled"
	case 17:
		return "TimerStarted"
	case 18:
		return "TimerFired"
	case 19:
		return "CancelTimerFailed"
	case 20:
		return "TimerCanceled"
	case 21:
		return "WorkflowExecutionCancelRequested"
	case 22:
		return "WorkflowExecutionCanceled"
	case 23:
		return "RequestCancelExternalWorkflowExecutionInitiated"
	case 24:
		return "RequestCancelExternalWorkflowExecutionFailed"
	case 25:
		return "ExternalWorkflowExecutionCancelRequested"
	case 26:
		return "MarkerRecorded"
	case 27:
		return "WorkflowExecutionSignaled"
	case 28:
		return "WorkflowExecutionTerminated"
	case 29:
		return "WorkflowExecutionContinuedAsNew"
	case 30:
		return "StartChildWorkflowExecutionInitiated"
	case 31:
		return "StartChildWorkflowExecutionFailed"
	case 32:
		return "ChildWorkflowExecutionStarted"
	case 33:
		return "ChildWorkflowExecutionCompleted"
	case 34:
		return "ChildWorkflowExecutionFailed"
	case 35:
		return "ChildWorkflowExecutionCanceled"
	case 36:
		return "ChildWorkflowExecutionTimedOut"
	case 37:
		return "ChildWorkflowExecutionTerminated"
	}
	return fmt.Sprintf("EventType(%d)", w)
}

func (v EventType) Equals(rhs EventType) bool {
	return v == rhs
}

func (v EventType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"WorkflowExecutionStarted\""), nil
	case 1:
		return ([]byte)("\"WorkflowExecutionCompleted\""), nil
	case 2:
		return ([]byte)("\"WorkflowExecutionFailed\""), nil
	case 3:
		return ([]byte)("\"WorkflowExecutionTimedOut\""), nil
	case 4:
		return ([]byte)("\"DecisionTaskScheduled\""), nil
	case 5:
		return ([]byte)("\"DecisionTaskStarted\""), nil
	case 6:
		return ([]byte)("\"DecisionTaskCompleted\""), nil
	case 7:
		return ([]byte)("\"DecisionTaskTimedOut\""), nil
	case 8:
		return ([]byte)("\"DecisionTaskFailed\""), nil
	case 9:
		return ([]byte)("\"ActivityTaskScheduled\""), nil
	case 10:
		return ([]byte)("\"ActivityTaskStarted\""), nil
	case 11:
		return ([]byte)("\"ActivityTaskCompleted\""), nil
	case 12:
		return ([]byte)("\"ActivityTaskFailed\""), nil
	case 13:
		return ([]byte)("\"ActivityTaskTimedOut\""), nil
	case 14:
		return ([]byte)("\"ActivityTaskCancelRequested\""), nil
	case 15:
		return ([]byte)("\"RequestCancelActivityTaskFailed\""), nil
	case 16:
		return ([]byte)("\"ActivityTaskCanceled\""), nil
	case 17:
		return ([]byte)("\"TimerStarted\""), nil
	case 18:
		return ([]byte)("\"TimerFired\""), nil
	case 19:
		return ([]byte)("\"CancelTimerFailed\""), nil
	case 20:
		return ([]byte)("\"TimerCanceled\""), nil
	case 21:
		return ([]byte)("\"WorkflowExecutionCancelRequested\""), nil
	case 22:
		return ([]byte)("\"WorkflowExecutionCanceled\""), nil
	case 23:
		return ([]byte)("\"RequestCancelExternalWorkflowExecutionInitiated\""), nil
	case 24:
		return ([]byte)("\"RequestCancelExternalWorkflowExecutionFailed\""), nil
	case 25:
		return ([]byte)("\"ExternalWorkflowExecutionCancelRequested\""), nil
	case 26:
		return ([]byte)("\"MarkerRecorded\""), nil
	case 27:
		return ([]byte)("\"WorkflowExecutionSignaled\""), nil
	case 28:
		return ([]byte)("\"WorkflowExecutionTerminated\""), nil
	case 29:
		return ([]byte)("\"WorkflowExecutionContinuedAsNew\""), nil
	case 30:
		return ([]byte)("\"StartChildWorkflowExecutionInitiated\""), nil
	case 31:
		return ([]byte)("\"StartChildWorkflowExecutionFailed\""), nil
	case 32:
		return ([]byte)("\"ChildWorkflowExecutionStarted\""), nil
	case 33:
		return ([]byte)("\"ChildWorkflowExecutionCompleted\""), nil
	case 34:
		return ([]byte)("\"ChildWorkflowExecutionFailed\""), nil
	case 35:
		return ([]byte)("\"ChildWorkflowExecutionCanceled\""), nil
	case 36:
		return ([]byte)("\"ChildWorkflowExecutionTimedOut\""), nil
	case 37:
		return ([]byte)("\"ChildWorkflowExecutionTerminated\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *EventType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "EventType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "EventType")
		}
		*v = (EventType)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "EventType")
	}
}

type ExternalWorkflowExecutionCancelRequestedEventAttributes struct {
	InitiatedEventId  *int64             `json:"initiatedEventId,omitempty"`
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
}

func (v *ExternalWorkflowExecutionCancelRequestedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ExternalWorkflowExecutionCancelRequestedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ExternalWorkflowExecutionCancelRequestedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	return fmt.Sprintf("ExternalWorkflowExecutionCancelRequestedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ExternalWorkflowExecutionCancelRequestedEventAttributes) Equals(rhs *ExternalWorkflowExecutionCancelRequestedEventAttributes) bool {
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	return true
}

func (v *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

func (v *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

type ExternalWorkflowExecutionCancelRequestedEventFilter struct{}

func (v *ExternalWorkflowExecutionCancelRequestedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ExternalWorkflowExecutionCancelRequestedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *ExternalWorkflowExecutionCancelRequestedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("ExternalWorkflowExecutionCancelRequestedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *ExternalWorkflowExecutionCancelRequestedEventFilter) Equals(rhs *ExternalWorkflowExecutionCancelRequestedEventFilter) bool {
	return true
}

type FailWorkflowExecutionDecisionAttributes struct {
	Reason  *string `json:"reason,omitempty"`
	Details []byte  `json:"details"`
}

func (v *FailWorkflowExecutionDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Reason != nil {
		w, err = wire.NewValueString(*(v.Reason)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *FailWorkflowExecutionDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Reason = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *FailWorkflowExecutionDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.Reason != nil {
		fields[i] = fmt.Sprintf("Reason: %v", *(v.Reason))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	return fmt.Sprintf("FailWorkflowExecutionDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *FailWorkflowExecutionDecisionAttributes) Equals(rhs *FailWorkflowExecutionDecisionAttributes) bool {
	if !_String_EqualsPtr(v.Reason, rhs.Reason) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	return true
}

func (v *FailWorkflowExecutionDecisionAttributes) GetReason() (o string) {
	if v.Reason != nil {
		return *v.Reason
	}
	return
}

type GetWorkflowExecutionHistoryRequest struct {
	Domain          *string               `json:"domain,omitempty"`
	Execution       *WorkflowExecution    `json:"execution,omitempty"`
	MaximumPageSize *int32                `json:"maximumPageSize,omitempty"`
	NextPageToken   []byte                `json:"nextPageToken"`
	Filters         []*HistoryEventFilter `json:"filters"`
}

type _List_HistoryEventFilter_ValueList []*HistoryEventFilter

func (v _List_HistoryEventFilter_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_HistoryEventFilter_ValueList) Size() int {
	return len(v)
}

func (_List_HistoryEventFilter_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_HistoryEventFilter_ValueList) Close() {
}

func (v *GetWorkflowExecutionHistoryRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Execution != nil {
		w, err = v.Execution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.MaximumPageSize != nil {
		w, err = wire.NewValueI32(*(v.MaximumPageSize)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.NextPageToken != nil {
		w, err = wire.NewValueBinary(v.NextPageToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Filters != nil {
		w, err = wire.NewValueList(_List_HistoryEventFilter_ValueList(v.Filters)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _HistoryEventFilter_Read(w wire.Value) (*HistoryEventFilter, error) {
	var v HistoryEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _List_HistoryEventFilter_Read(l wire.ValueList) ([]*HistoryEventFilter, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*HistoryEventFilter, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _HistoryEventFilter_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *GetWorkflowExecutionHistoryRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.Execution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.MaximumPageSize = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				v.NextPageToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TList {
				v.Filters, err = _List_HistoryEventFilter_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *GetWorkflowExecutionHistoryRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.Execution != nil {
		fields[i] = fmt.Sprintf("Execution: %v", v.Execution)
		i++
	}
	if v.MaximumPageSize != nil {
		fields[i] = fmt.Sprintf("MaximumPageSize: %v", *(v.MaximumPageSize))
		i++
	}
	if v.NextPageToken != nil {
		fields[i] = fmt.Sprintf("NextPageToken: %v", v.NextPageToken)
		i++
	}
	if v.Filters != nil {
		fields[i] = fmt.Sprintf("Filters: %v", v.Filters)
		i++
	}
	return fmt.Sprintf("GetWorkflowExecutionHistoryRequest{%v}", strings.Join(fields[:i], ", "))
}

func _List_HistoryEventFilter_Equals(lhs, rhs []*HistoryEventFilter) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func (v *GetWorkflowExecutionHistoryRequest) Equals(rhs *GetWorkflowExecutionHistoryRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.Execution == nil && rhs.Execution == nil) || (v.Execution != nil && rhs.Execution != nil && v.Execution.Equals(rhs.Execution))) {
		return false
	}
	if !_I32_EqualsPtr(v.MaximumPageSize, rhs.MaximumPageSize) {
		return false
	}
	if !((v.NextPageToken == nil && rhs.NextPageToken == nil) || (v.NextPageToken != nil && rhs.NextPageToken != nil && bytes.Equal(v.NextPageToken, rhs.NextPageToken))) {
		return false
	}
	if !((v.Filters == nil && rhs.Filters == nil) || (v.Filters != nil && rhs.Filters != nil && _List_HistoryEventFilter_Equals(v.Filters, rhs.Filters))) {
		return false
	}
	return true
}

func (v *GetWorkflowExecutionHistoryRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *GetWorkflowExecutionHistoryRequest) GetMaximumPageSize() (o int32) {
	if v.MaximumPageSize != nil {
		return *v.MaximumPageSize
	}
	return
}

type GetWorkflowExecutionHistoryResponse struct {
	History       *History `json:"history,omitempty"`
	NextPageToken []byte   `json:"nextPageToken"`
}

func (v *GetWorkflowExecutionHistoryResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.History != nil {
		w, err = v.History.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.NextPageToken != nil {
		w, err = wire.NewValueBinary(v.NextPageToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _History_Read(w wire.Value) (*History, error) {
	var v History
	err := v.FromWire(w)
	return &v, err
}

func (v *GetWorkflowExecutionHistoryResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.History, err = _History_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.NextPageToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *GetWorkflowExecutionHistoryResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.History != nil {
		fields[i] = fmt.Sprintf("History: %v", v.History)
		i++
	}
	if v.NextPageToken != nil {
		fields[i] = fmt.Sprintf("NextPageToken: %v", v.NextPageToken)
		i++
	}
	return fmt.Sprintf("GetWorkflowExecutionHistoryResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *GetWorkflowExecutionHistoryResponse) Equals(rhs *GetWorkflowExecutionHistoryResponse) bool {
	if !((v.History == nil && rhs.History == nil) || (v.History != nil && rhs.History != nil && v.History.Equals(rhs.History))) {
		return false
	}
	if !((v.NextPageToken == nil && rhs.NextPageToken == nil) || (v.NextPageToken != nil && rhs.NextPageToken != nil && bytes.Equal(v.NextPageToken, rhs.NextPageToken))) {
		return false
	}
	return true
}

type History struct {
	Events []*HistoryEvent `json:"events"`
}

type _List_HistoryEvent_ValueList []*HistoryEvent

func (v _List_HistoryEvent_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_HistoryEvent_ValueList) Size() int {
	return len(v)
}

func (_List_HistoryEvent_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_HistoryEvent_ValueList) Close() {
}

func (v *History) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Events != nil {
		w, err = wire.NewValueList(_List_HistoryEvent_ValueList(v.Events)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _HistoryEvent_Read(w wire.Value) (*HistoryEvent, error) {
	var v HistoryEvent
	err := v.FromWire(w)
	return &v, err
}

func _List_HistoryEvent_Read(l wire.ValueList) ([]*HistoryEvent, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*HistoryEvent, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _HistoryEvent_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *History) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TList {
				v.Events, err = _List_HistoryEvent_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *History) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Events != nil {
		fields[i] = fmt.Sprintf("Events: %v", v.Events)
		i++
	}
	return fmt.Sprintf("History{%v}", strings.Join(fields[:i], ", "))
}

func _List_HistoryEvent_Equals(lhs, rhs []*HistoryEvent) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func (v *History) Equals(rhs *History) bool {
	if !((v.Events == nil && rhs.Events == nil) || (v.Events != nil && rhs.Events != nil && _List_HistoryEvent_Equals(v.Events, rhs.Events))) {
		return false
	}
	return true
}

type HistoryEvent struct {
	EventId                                                        *int64                                                          `json:"eventId,omitempty"`
	Timestamp                                                      *int64                                                          `json:"timestamp,omitempty"`
	EventType                                                      *EventType                                                      `json:"eventType,omitempty"`
	WorkflowExecutionStartedEventAttributes                        *WorkflowExecutionStartedEventAttributes                        `json:"workflowExecutionStartedEventAttributes,omitempty"`
	WorkflowExecutionCompletedEventAttributes                      *WorkflowExecutionCompletedEventAttributes                      `json:"workflowExecutionCompletedEventAttributes,omitempty"`
	WorkflowExecutionFailedEventAttributes                         *WorkflowExecutionFailedEventAttributes                         `json:"workflowExecutionFailedEventAttributes,omitempty"`
	WorkflowExecutionTimedOutEventAttributes                       *WorkflowExecutionTimedOutEventAttributes                       `json:"workflowExecutionTimedOutEventAttributes,omitempty"`
	DecisionTaskScheduledEventAttributes                           *DecisionTaskScheduledEventAttributes                           `json:"decisionTaskScheduledEventAttributes,omitempty"`
	DecisionTaskStartedEventAttributes                             *DecisionTaskStartedEventAttributes                             `json:"decisionTaskStartedEventAttributes,omitempty"`
	DecisionTaskCompletedEventAttributes                           *DecisionTaskCompletedEventAttributes                           `json:"decisionTaskCompletedEventAttributes,omitempty"`
	DecisionTaskTimedOutEventAttributes                            *DecisionTaskTimedOutEventAttributes                            `json:"decisionTaskTimedOutEventAttributes,omitempty"`
	DecisionTaskFailedEventAttributes                              *DecisionTaskFailedEventAttributes                              `json:"decisionTaskFailedEventAttributes,omitempty"`
	ActivityTaskScheduledEventAttributes                           *ActivityTaskScheduledEventAttributes                           `json:"activityTaskScheduledEventAttributes,omitempty"`
	ActivityTaskStartedEventAttributes                             *ActivityTaskStartedEventAttributes                             `json:"activityTaskStartedEventAttributes,omitempty"`
	ActivityTaskCompletedEventAttributes                           *ActivityTaskCompletedEventAttributes                           `json:"activityTaskCompletedEventAttributes,omitempty"`
	ActivityTaskFailedEventAttributes                              *ActivityTaskFailedEventAttributes                              `json:"activityTaskFailedEventAttributes,omitempty"`
	ActivityTaskTimedOutEventAttributes                            *ActivityTaskTimedOutEventAttributes                            `json:"activityTaskTimedOutEventAttributes,omitempty"`
	TimerStartedEventAttributes                                    *TimerStartedEventAttributes                                    `json:"timerStartedEventAttributes,omitempty"`
	TimerFiredEventAttributes                                      *TimerFiredEventAttributes                                      `json:"timerFiredEventAttributes,omitempty"`
	ActivityTaskCancelRequestedEventAttributes                     *ActivityTaskCancelRequestedEventAttributes                     `json:"activityTaskCancelRequestedEventAttributes,omitempty"`
	RequestCancelActivityTaskFailedEventAttributes                 *RequestCancelActivityTaskFailedEventAttributes                 `json:"requestCancelActivityTaskFailedEventAttributes,omitempty"`
	ActivityTaskCanceledEventAttributes                            *ActivityTaskCanceledEventAttributes                            `json:"activityTaskCanceledEventAttributes,omitempty"`
	TimerCanceledEventAttributes                                   *TimerCanceledEventAttributes                                   `json:"timerCanceledEventAttributes,omitempty"`
	CancelTimerFailedEventAttributes                               *CancelTimerFailedEventAttributes                               `json:"cancelTimerFailedEventAttributes,omitempty"`
	MarkerRecordedEventAttributes                                  *MarkerRecordedEventAttributes                                  `json:"markerRecordedEventAttributes,omitempty"`
	WorkflowExecutionSignaledEventAttributes                       *WorkflowExecutionSignaledEventAttributes                       `json:"workflowExecutionSignaledEventAttributes,omitempty"`
	WorkflowExecutionTerminatedEventAttributes                     *WorkflowExecutionTerminatedEventAttributes                     `json:"workflowExecutionTerminatedEventAttributes,omitempty"`
	WorkflowExecutionCancelRequestedEventAttributes                *WorkflowExecutionCancelRequestedEventAttributes                `json:"workflowExecutionCancelRequestedEventAttributes,omitempty"`
	WorkflowExecutionCanceledEventAttributes                       *WorkflowExecutionCanceledEventAttributes                       `json:"workflowExecutionCanceledEventAttributes,omitempty"`
	RequestCancelExternalWorkflowExecutionInitiatedEventAttributes *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes `json:"requestCancelExternalWorkflowExecutionInitiatedEventAttributes,omitempty"`
	RequestCancelExternalWorkflowExecutionFailedEventAttributes    *RequestCancelExternalWorkflowExecutionFailedEventAttributes    `json:"requestCancelExternalWorkflowExecutionFailedEventAttributes,omitempty"`
	ExternalWorkflowExecutionCancelRequestedEventAttributes        *ExternalWorkflowExecutionCancelRequestedEventAttributes        `json:"externalWorkflowExecutionCancelRequestedEventAttributes,omitempty"`
	WorkflowExecutionContinuedAsNewEventAttributes                 *WorkflowExecutionContinuedAsNewEventAttributes                 `json:"workflowExecutionContinuedAsNewEventAttributes,omitempty"`
	StartChildWorkflowExecutionInitiatedEventAttributes            *StartChildWorkflowExecutionInitiatedEventAttributes            `json:"startChildWorkflowExecutionInitiatedEventAttributes,omitempty"`
	StartChildWorkflowExecutionFailedEventAttributes               *StartChildWorkflowExecutionFailedEventAttributes               `json:"startChildWorkflowExecutionFailedEventAttributes,omitempty"`
	ChildWorkflowExecutionStartedEventAttributes                   *ChildWorkflowExecutionStartedEventAttributes                   `json:"childWorkflowExecutionStartedEventAttributes,omitempty"`
	ChildWorkflowExecutionCompletedEventAttributes                 *ChildWorkflowExecutionCompletedEventAttributes                 `json:"childWorkflowExecutionCompletedEventAttributes,omitempty"`
	ChildWorkflowExecutionFailedEventAttributes                    *ChildWorkflowExecutionFailedEventAttributes                    `json:"childWorkflowExecutionFailedEventAttributes,omitempty"`
	ChildWorkflowExecutionCanceledEventAttributes                  *ChildWorkflowExecutionCanceledEventAttributes                  `json:"childWorkflowExecutionCanceledEventAttributes,omitempty"`
	ChildWorkflowExecutionTimedOutEventAttributes                  *ChildWorkflowExecutionTimedOutEventAttributes                  `json:"childWorkflowExecutionTimedOutEventAttributes,omitempty"`
	ChildWorkflowExecutionTerminatedEventAttributes                *ChildWorkflowExecutionTerminatedEventAttributes                `json:"childWorkflowExecutionTerminatedEventAttributes,omitempty"`
}

func (v *HistoryEvent) ToWire() (wire.Value, error) {
	var (
		fields [41]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.EventId != nil {
		w, err = wire.NewValueI64(*(v.EventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Timestamp != nil {
		w, err = wire.NewValueI64(*(v.Timestamp)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.EventType != nil {
		w, err = v.EventType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.WorkflowExecutionStartedEventAttributes != nil {
		w, err = v.WorkflowExecutionStartedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.WorkflowExecutionCompletedEventAttributes != nil {
		w, err = v.WorkflowExecutionCompletedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.WorkflowExecutionFailedEventAttributes != nil {
		w, err = v.WorkflowExecutionFailedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.WorkflowExecutionTimedOutEventAttributes != nil {
		w, err = v.WorkflowExecutionTimedOutEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.DecisionTaskScheduledEventAttributes != nil {
		w, err = v.DecisionTaskScheduledEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.DecisionTaskStartedEventAttributes != nil {
		w, err = v.DecisionTaskStartedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventAttributes != nil {
		w, err = v.DecisionTaskCompletedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 100, Value: w}
		i++
	}
	if v.DecisionTaskTimedOutEventAttributes != nil {
		w, err = v.DecisionTaskTimedOutEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 110, Value: w}
		i++
	}
	if v.DecisionTaskFailedEventAttributes != nil {
		w, err = v.DecisionTaskFailedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 120, Value: w}
		i++
	}
	if v.ActivityTaskScheduledEventAttributes != nil {
		w, err = v.ActivityTaskScheduledEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 130, Value: w}
		i++
	}
	if v.ActivityTaskStartedEventAttributes != nil {
		w, err = v.ActivityTaskStartedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 140, Value: w}
		i++
	}
	if v.ActivityTaskCompletedEventAttributes != nil {
		w, err = v.ActivityTaskCompletedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 150, Value: w}
		i++
	}
	if v.ActivityTaskFailedEventAttributes != nil {
		w, err = v.ActivityTaskFailedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 160, Value: w}
		i++
	}
	if v.ActivityTaskTimedOutEventAttributes != nil {
		w, err = v.ActivityTaskTimedOutEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 170, Value: w}
		i++
	}
	if v.TimerStartedEventAttributes != nil {
		w, err = v.TimerStartedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 180, Value: w}
		i++
	}
	if v.TimerFiredEventAttributes != nil {
		w, err = v.TimerFiredEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 190, Value: w}
		i++
	}
	if v.ActivityTaskCancelRequestedEventAttributes != nil {
		w, err = v.ActivityTaskCancelRequestedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 200, Value: w}
		i++
	}
	if v.RequestCancelActivityTaskFailedEventAttributes != nil {
		w, err = v.RequestCancelActivityTaskFailedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 210, Value: w}
		i++
	}
	if v.ActivityTaskCanceledEventAttributes != nil {
		w, err = v.ActivityTaskCanceledEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 220, Value: w}
		i++
	}
	if v.TimerCanceledEventAttributes != nil {
		w, err = v.TimerCanceledEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 230, Value: w}
		i++
	}
	if v.CancelTimerFailedEventAttributes != nil {
		w, err = v.CancelTimerFailedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 240, Value: w}
		i++
	}
	if v.MarkerRecordedEventAttributes != nil {
		w, err = v.MarkerRecordedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 250, Value: w}
		i++
	}
	if v.WorkflowExecutionSignaledEventAttributes != nil {
		w, err = v.WorkflowExecutionSignaledEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 260, Value: w}
		i++
	}
	if v.WorkflowExecutionTerminatedEventAttributes != nil {
		w, err = v.WorkflowExecutionTerminatedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 270, Value: w}
		i++
	}
	if v.WorkflowExecutionCancelRequestedEventAttributes != nil {
		w, err = v.WorkflowExecutionCancelRequestedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 280, Value: w}
		i++
	}
	if v.WorkflowExecutionCanceledEventAttributes != nil {
		w, err = v.WorkflowExecutionCanceledEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 290, Value: w}
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes != nil {
		w, err = v.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 300, Value: w}
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionFailedEventAttributes != nil {
		w, err = v.RequestCancelExternalWorkflowExecutionFailedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 310, Value: w}
		i++
	}
	if v.ExternalWorkflowExecutionCancelRequestedEventAttributes != nil {
		w, err = v.ExternalWorkflowExecutionCancelRequestedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 320, Value: w}
		i++
	}
	if v.WorkflowExecutionContinuedAsNewEventAttributes != nil {
		w, err = v.WorkflowExecutionContinuedAsNewEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 330, Value: w}
		i++
	}
	if v.StartChildWorkflowExecutionInitiatedEventAttributes != nil {
		w, err = v.StartChildWorkflowExecutionInitiatedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 340, Value: w}
		i++
	}
	if v.StartChildWorkflowExecutionFailedEventAttributes != nil {
		w, err = v.StartChildWorkflowExecutionFailedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 350, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionStartedEventAttributes != nil {
		w, err = v.ChildWorkflowExecutionStartedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 360, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionCompletedEventAttributes != nil {
		w, err = v.ChildWorkflowExecutionCompletedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 370, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionFailedEventAttributes != nil {
		w, err = v.ChildWorkflowExecutionFailedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 380, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionCanceledEventAttributes != nil {
		w, err = v.ChildWorkflowExecutionCanceledEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 390, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionTimedOutEventAttributes != nil {
		w, err = v.ChildWorkflowExecutionTimedOutEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 400, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionTerminatedEventAttributes != nil {
		w, err = v.ChildWorkflowExecutionTerminatedEventAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 410, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _EventType_Read(w wire.Value) (EventType, error) {
	var v EventType
	err := v.FromWire(w)
	return v, err
}

func _WorkflowExecutionStartedEventAttributes_Read(w wire.Value) (*WorkflowExecutionStartedEventAttributes, error) {
	var v WorkflowExecutionStartedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionCompletedEventAttributes_Read(w wire.Value) (*WorkflowExecutionCompletedEventAttributes, error) {
	var v WorkflowExecutionCompletedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionFailedEventAttributes_Read(w wire.Value) (*WorkflowExecutionFailedEventAttributes, error) {
	var v WorkflowExecutionFailedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionTimedOutEventAttributes_Read(w wire.Value) (*WorkflowExecutionTimedOutEventAttributes, error) {
	var v WorkflowExecutionTimedOutEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskScheduledEventAttributes_Read(w wire.Value) (*DecisionTaskScheduledEventAttributes, error) {
	var v DecisionTaskScheduledEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskStartedEventAttributes_Read(w wire.Value) (*DecisionTaskStartedEventAttributes, error) {
	var v DecisionTaskStartedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskCompletedEventAttributes_Read(w wire.Value) (*DecisionTaskCompletedEventAttributes, error) {
	var v DecisionTaskCompletedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskTimedOutEventAttributes_Read(w wire.Value) (*DecisionTaskTimedOutEventAttributes, error) {
	var v DecisionTaskTimedOutEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskFailedEventAttributes_Read(w wire.Value) (*DecisionTaskFailedEventAttributes, error) {
	var v DecisionTaskFailedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskScheduledEventAttributes_Read(w wire.Value) (*ActivityTaskScheduledEventAttributes, error) {
	var v ActivityTaskScheduledEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskStartedEventAttributes_Read(w wire.Value) (*ActivityTaskStartedEventAttributes, error) {
	var v ActivityTaskStartedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskCompletedEventAttributes_Read(w wire.Value) (*ActivityTaskCompletedEventAttributes, error) {
	var v ActivityTaskCompletedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskFailedEventAttributes_Read(w wire.Value) (*ActivityTaskFailedEventAttributes, error) {
	var v ActivityTaskFailedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskTimedOutEventAttributes_Read(w wire.Value) (*ActivityTaskTimedOutEventAttributes, error) {
	var v ActivityTaskTimedOutEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _TimerStartedEventAttributes_Read(w wire.Value) (*TimerStartedEventAttributes, error) {
	var v TimerStartedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _TimerFiredEventAttributes_Read(w wire.Value) (*TimerFiredEventAttributes, error) {
	var v TimerFiredEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskCancelRequestedEventAttributes_Read(w wire.Value) (*ActivityTaskCancelRequestedEventAttributes, error) {
	var v ActivityTaskCancelRequestedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _RequestCancelActivityTaskFailedEventAttributes_Read(w wire.Value) (*RequestCancelActivityTaskFailedEventAttributes, error) {
	var v RequestCancelActivityTaskFailedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskCanceledEventAttributes_Read(w wire.Value) (*ActivityTaskCanceledEventAttributes, error) {
	var v ActivityTaskCanceledEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _TimerCanceledEventAttributes_Read(w wire.Value) (*TimerCanceledEventAttributes, error) {
	var v TimerCanceledEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _CancelTimerFailedEventAttributes_Read(w wire.Value) (*CancelTimerFailedEventAttributes, error) {
	var v CancelTimerFailedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _MarkerRecordedEventAttributes_Read(w wire.Value) (*MarkerRecordedEventAttributes, error) {
	var v MarkerRecordedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionSignaledEventAttributes_Read(w wire.Value) (*WorkflowExecutionSignaledEventAttributes, error) {
	var v WorkflowExecutionSignaledEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionTerminatedEventAttributes_Read(w wire.Value) (*WorkflowExecutionTerminatedEventAttributes, error) {
	var v WorkflowExecutionTerminatedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionCancelRequestedEventAttributes_Read(w wire.Value) (*WorkflowExecutionCancelRequestedEventAttributes, error) {
	var v WorkflowExecutionCancelRequestedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionCanceledEventAttributes_Read(w wire.Value) (*WorkflowExecutionCanceledEventAttributes, error) {
	var v WorkflowExecutionCanceledEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _RequestCancelExternalWorkflowExecutionInitiatedEventAttributes_Read(w wire.Value) (*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes, error) {
	var v RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _RequestCancelExternalWorkflowExecutionFailedEventAttributes_Read(w wire.Value) (*RequestCancelExternalWorkflowExecutionFailedEventAttributes, error) {
	var v RequestCancelExternalWorkflowExecutionFailedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ExternalWorkflowExecutionCancelRequestedEventAttributes_Read(w wire.Value) (*ExternalWorkflowExecutionCancelRequestedEventAttributes, error) {
	var v ExternalWorkflowExecutionCancelRequestedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionContinuedAsNewEventAttributes_Read(w wire.Value) (*WorkflowExecutionContinuedAsNewEventAttributes, error) {
	var v WorkflowExecutionContinuedAsNewEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _StartChildWorkflowExecutionInitiatedEventAttributes_Read(w wire.Value) (*StartChildWorkflowExecutionInitiatedEventAttributes, error) {
	var v StartChildWorkflowExecutionInitiatedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _StartChildWorkflowExecutionFailedEventAttributes_Read(w wire.Value) (*StartChildWorkflowExecutionFailedEventAttributes, error) {
	var v StartChildWorkflowExecutionFailedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionStartedEventAttributes_Read(w wire.Value) (*ChildWorkflowExecutionStartedEventAttributes, error) {
	var v ChildWorkflowExecutionStartedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionCompletedEventAttributes_Read(w wire.Value) (*ChildWorkflowExecutionCompletedEventAttributes, error) {
	var v ChildWorkflowExecutionCompletedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionFailedEventAttributes_Read(w wire.Value) (*ChildWorkflowExecutionFailedEventAttributes, error) {
	var v ChildWorkflowExecutionFailedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionCanceledEventAttributes_Read(w wire.Value) (*ChildWorkflowExecutionCanceledEventAttributes, error) {
	var v ChildWorkflowExecutionCanceledEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionTimedOutEventAttributes_Read(w wire.Value) (*ChildWorkflowExecutionTimedOutEventAttributes, error) {
	var v ChildWorkflowExecutionTimedOutEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionTerminatedEventAttributes_Read(w wire.Value) (*ChildWorkflowExecutionTerminatedEventAttributes, error) {
	var v ChildWorkflowExecutionTerminatedEventAttributes
	err := v.FromWire(w)
	return &v, err
}

func (v *HistoryEvent) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.EventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Timestamp = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI32 {
				var x EventType
				x, err = _EventType_Read(field.Value)
				v.EventType = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionStartedEventAttributes, err = _WorkflowExecutionStartedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionCompletedEventAttributes, err = _WorkflowExecutionCompletedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionFailedEventAttributes, err = _WorkflowExecutionFailedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionTimedOutEventAttributes, err = _WorkflowExecutionTimedOutEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 80:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskScheduledEventAttributes, err = _DecisionTaskScheduledEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 90:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskStartedEventAttributes, err = _DecisionTaskStartedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 100:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskCompletedEventAttributes, err = _DecisionTaskCompletedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 110:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskTimedOutEventAttributes, err = _DecisionTaskTimedOutEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 120:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskFailedEventAttributes, err = _DecisionTaskFailedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 130:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskScheduledEventAttributes, err = _ActivityTaskScheduledEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 140:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskStartedEventAttributes, err = _ActivityTaskStartedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 150:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskCompletedEventAttributes, err = _ActivityTaskCompletedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 160:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskFailedEventAttributes, err = _ActivityTaskFailedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 170:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskTimedOutEventAttributes, err = _ActivityTaskTimedOutEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 180:
			if field.Value.Type() == wire.TStruct {
				v.TimerStartedEventAttributes, err = _TimerStartedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 190:
			if field.Value.Type() == wire.TStruct {
				v.TimerFiredEventAttributes, err = _TimerFiredEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 200:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskCancelRequestedEventAttributes, err = _ActivityTaskCancelRequestedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 210:
			if field.Value.Type() == wire.TStruct {
				v.RequestCancelActivityTaskFailedEventAttributes, err = _RequestCancelActivityTaskFailedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 220:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskCanceledEventAttributes, err = _ActivityTaskCanceledEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 230:
			if field.Value.Type() == wire.TStruct {
				v.TimerCanceledEventAttributes, err = _TimerCanceledEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 240:
			if field.Value.Type() == wire.TStruct {
				v.CancelTimerFailedEventAttributes, err = _CancelTimerFailedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 250:
			if field.Value.Type() == wire.TStruct {
				v.MarkerRecordedEventAttributes, err = _MarkerRecordedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 260:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionSignaledEventAttributes, err = _WorkflowExecutionSignaledEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 270:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionTerminatedEventAttributes, err = _WorkflowExecutionTerminatedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 280:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionCancelRequestedEventAttributes, err = _WorkflowExecutionCancelRequestedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 290:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionCanceledEventAttributes, err = _WorkflowExecutionCanceledEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 300:
			if field.Value.Type() == wire.TStruct {
				v.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes, err = _RequestCancelExternalWorkflowExecutionInitiatedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 310:
			if field.Value.Type() == wire.TStruct {
				v.RequestCancelExternalWorkflowExecutionFailedEventAttributes, err = _RequestCancelExternalWorkflowExecutionFailedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 320:
			if field.Value.Type() == wire.TStruct {
				v.ExternalWorkflowExecutionCancelRequestedEventAttributes, err = _ExternalWorkflowExecutionCancelRequestedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 330:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionContinuedAsNewEventAttributes, err = _WorkflowExecutionContinuedAsNewEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 340:
			if field.Value.Type() == wire.TStruct {
				v.StartChildWorkflowExecutionInitiatedEventAttributes, err = _StartChildWorkflowExecutionInitiatedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 350:
			if field.Value.Type() == wire.TStruct {
				v.StartChildWorkflowExecutionFailedEventAttributes, err = _StartChildWorkflowExecutionFailedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 360:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionStartedEventAttributes, err = _ChildWorkflowExecutionStartedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 370:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionCompletedEventAttributes, err = _ChildWorkflowExecutionCompletedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 380:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionFailedEventAttributes, err = _ChildWorkflowExecutionFailedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 390:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionCanceledEventAttributes, err = _ChildWorkflowExecutionCanceledEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 400:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionTimedOutEventAttributes, err = _ChildWorkflowExecutionTimedOutEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 410:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionTerminatedEventAttributes, err = _ChildWorkflowExecutionTerminatedEventAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *HistoryEvent) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [41]string
	i := 0
	if v.EventId != nil {
		fields[i] = fmt.Sprintf("EventId: %v", *(v.EventId))
		i++
	}
	if v.Timestamp != nil {
		fields[i] = fmt.Sprintf("Timestamp: %v", *(v.Timestamp))
		i++
	}
	if v.EventType != nil {
		fields[i] = fmt.Sprintf("EventType: %v", *(v.EventType))
		i++
	}
	if v.WorkflowExecutionStartedEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionStartedEventAttributes: %v", v.WorkflowExecutionStartedEventAttributes)
		i++
	}
	if v.WorkflowExecutionCompletedEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionCompletedEventAttributes: %v", v.WorkflowExecutionCompletedEventAttributes)
		i++
	}
	if v.WorkflowExecutionFailedEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionFailedEventAttributes: %v", v.WorkflowExecutionFailedEventAttributes)
		i++
	}
	if v.WorkflowExecutionTimedOutEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionTimedOutEventAttributes: %v", v.WorkflowExecutionTimedOutEventAttributes)
		i++
	}
	if v.DecisionTaskScheduledEventAttributes != nil {
		fields[i] = fmt.Sprintf("DecisionTaskScheduledEventAttributes: %v", v.DecisionTaskScheduledEventAttributes)
		i++
	}
	if v.DecisionTaskStartedEventAttributes != nil {
		fields[i] = fmt.Sprintf("DecisionTaskStartedEventAttributes: %v", v.DecisionTaskStartedEventAttributes)
		i++
	}
	if v.DecisionTaskCompletedEventAttributes != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventAttributes: %v", v.DecisionTaskCompletedEventAttributes)
		i++
	}
	if v.DecisionTaskTimedOutEventAttributes != nil {
		fields[i] = fmt.Sprintf("DecisionTaskTimedOutEventAttributes: %v", v.DecisionTaskTimedOutEventAttributes)
		i++
	}
	if v.DecisionTaskFailedEventAttributes != nil {
		fields[i] = fmt.Sprintf("DecisionTaskFailedEventAttributes: %v", v.DecisionTaskFailedEventAttributes)
		i++
	}
	if v.ActivityTaskScheduledEventAttributes != nil {
		fields[i] = fmt.Sprintf("ActivityTaskScheduledEventAttributes: %v", v.ActivityTaskScheduledEventAttributes)
		i++
	}
	if v.ActivityTaskStartedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ActivityTaskStartedEventAttributes: %v", v.ActivityTaskStartedEventAttributes)
		i++
	}
	if v.ActivityTaskCompletedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ActivityTaskCompletedEventAttributes: %v", v.ActivityTaskCompletedEventAttributes)
		i++
	}
	if v.ActivityTaskFailedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ActivityTaskFailedEventAttributes: %v", v.ActivityTaskFailedEventAttributes)
		i++
	}
	if v.ActivityTaskTimedOutEventAttributes != nil {
		fields[i] = fmt.Sprintf("ActivityTaskTimedOutEventAttributes: %v", v.ActivityTaskTimedOutEventAttributes)
		i++
	}
	if v.TimerStartedEventAttributes != nil {
		fields[i] = fmt.Sprintf("TimerStartedEventAttributes: %v", v.TimerStartedEventAttributes)
		i++
	}
	if v.TimerFiredEventAttributes != nil {
		fields[i] = fmt.Sprintf("TimerFiredEventAttributes: %v", v.TimerFiredEventAttributes)
		i++
	}
	if v.ActivityTaskCancelRequestedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ActivityTaskCancelRequestedEventAttributes: %v", v.ActivityTaskCancelRequestedEventAttributes)
		i++
	}
	if v.RequestCancelActivityTaskFailedEventAttributes != nil {
		fields[i] = fmt.Sprintf("RequestCancelActivityTaskFailedEventAttributes: %v", v.RequestCancelActivityTaskFailedEventAttributes)
		i++
	}
	if v.ActivityTaskCanceledEventAttributes != nil {
		fields[i] = fmt.Sprintf("ActivityTaskCanceledEventAttributes: %v", v.ActivityTaskCanceledEventAttributes)
		i++
	}
	if v.TimerCanceledEventAttributes != nil {
		fields[i] = fmt.Sprintf("TimerCanceledEventAttributes: %v", v.TimerCanceledEventAttributes)
		i++
	}
	if v.CancelTimerFailedEventAttributes != nil {
		fields[i] = fmt.Sprintf("CancelTimerFailedEventAttributes: %v", v.CancelTimerFailedEventAttributes)
		i++
	}
	if v.MarkerRecordedEventAttributes != nil {
		fields[i] = fmt.Sprintf("MarkerRecordedEventAttributes: %v", v.MarkerRecordedEventAttributes)
		i++
	}
	if v.WorkflowExecutionSignaledEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionSignaledEventAttributes: %v", v.WorkflowExecutionSignaledEventAttributes)
		i++
	}
	if v.WorkflowExecutionTerminatedEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionTerminatedEventAttributes: %v", v.WorkflowExecutionTerminatedEventAttributes)
		i++
	}
	if v.WorkflowExecutionCancelRequestedEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionCancelRequestedEventAttributes: %v", v.WorkflowExecutionCancelRequestedEventAttributes)
		i++
	}
	if v.WorkflowExecutionCanceledEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionCanceledEventAttributes: %v", v.WorkflowExecutionCanceledEventAttributes)
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes != nil {
		fields[i] = fmt.Sprintf("RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: %v", v.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionFailedEventAttributes != nil {
		fields[i] = fmt.Sprintf("RequestCancelExternalWorkflowExecutionFailedEventAttributes: %v", v.RequestCancelExternalWorkflowExecutionFailedEventAttributes)
		i++
	}
	if v.ExternalWorkflowExecutionCancelRequestedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ExternalWorkflowExecutionCancelRequestedEventAttributes: %v", v.ExternalWorkflowExecutionCancelRequestedEventAttributes)
		i++
	}
	if v.WorkflowExecutionContinuedAsNewEventAttributes != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionContinuedAsNewEventAttributes: %v", v.WorkflowExecutionContinuedAsNewEventAttributes)
		i++
	}
	if v.StartChildWorkflowExecutionInitiatedEventAttributes != nil {
		fields[i] = fmt.Sprintf("StartChildWorkflowExecutionInitiatedEventAttributes: %v", v.StartChildWorkflowExecutionInitiatedEventAttributes)
		i++
	}
	if v.StartChildWorkflowExecutionFailedEventAttributes != nil {
		fields[i] = fmt.Sprintf("StartChildWorkflowExecutionFailedEventAttributes: %v", v.StartChildWorkflowExecutionFailedEventAttributes)
		i++
	}
	if v.ChildWorkflowExecutionStartedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionStartedEventAttributes: %v", v.ChildWorkflowExecutionStartedEventAttributes)
		i++
	}
	if v.ChildWorkflowExecutionCompletedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionCompletedEventAttributes: %v", v.ChildWorkflowExecutionCompletedEventAttributes)
		i++
	}
	if v.ChildWorkflowExecutionFailedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionFailedEventAttributes: %v", v.ChildWorkflowExecutionFailedEventAttributes)
		i++
	}
	if v.ChildWorkflowExecutionCanceledEventAttributes != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionCanceledEventAttributes: %v", v.ChildWorkflowExecutionCanceledEventAttributes)
		i++
	}
	if v.ChildWorkflowExecutionTimedOutEventAttributes != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionTimedOutEventAttributes: %v", v.ChildWorkflowExecutionTimedOutEventAttributes)
		i++
	}
	if v.ChildWorkflowExecutionTerminatedEventAttributes != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionTerminatedEventAttributes: %v", v.ChildWorkflowExecutionTerminatedEventAttributes)
		i++
	}
	return fmt.Sprintf("HistoryEvent{%v}", strings.Join(fields[:i], ", "))
}

func _EventType_EqualsPtr(lhs, rhs *EventType) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *HistoryEvent) Equals(rhs *HistoryEvent) bool {
	if !_I64_EqualsPtr(v.EventId, rhs.EventId) {
		return false
	}
	if !_I64_EqualsPtr(v.Timestamp, rhs.Timestamp) {
		return false
	}
	if !_EventType_EqualsPtr(v.EventType, rhs.EventType) {
		return false
	}
	if !((v.WorkflowExecutionStartedEventAttributes == nil && rhs.WorkflowExecutionStartedEventAttributes == nil) || (v.WorkflowExecutionStartedEventAttributes != nil && rhs.WorkflowExecutionStartedEventAttributes != nil && v.WorkflowExecutionStartedEventAttributes.Equals(rhs.WorkflowExecutionStartedEventAttributes))) {
		return false
	}
	if !((v.WorkflowExecutionCompletedEventAttributes == nil && rhs.WorkflowExecutionCompletedEventAttributes == nil) || (v.WorkflowExecutionCompletedEventAttributes != nil && rhs.WorkflowExecutionCompletedEventAttributes != nil && v.WorkflowExecutionCompletedEventAttributes.Equals(rhs.WorkflowExecutionCompletedEventAttributes))) {
		return false
	}
	if !((v.WorkflowExecutionFailedEventAttributes == nil && rhs.WorkflowExecutionFailedEventAttributes == nil) || (v.WorkflowExecutionFailedEventAttributes != nil && rhs.WorkflowExecutionFailedEventAttributes != nil && v.WorkflowExecutionFailedEventAttributes.Equals(rhs.WorkflowExecutionFailedEventAttributes))) {
		return false
	}
	if !((v.WorkflowExecutionTimedOutEventAttributes == nil && rhs.WorkflowExecutionTimedOutEventAttributes == nil) || (v.WorkflowExecutionTimedOutEventAttributes != nil && rhs.WorkflowExecutionTimedOutEventAttributes != nil && v.WorkflowExecutionTimedOutEventAttributes.Equals(rhs.WorkflowExecutionTimedOutEventAttributes))) {
		return false
	}
	if !((v.DecisionTaskScheduledEventAttributes == nil && rhs.DecisionTaskScheduledEventAttributes == nil) || (v.DecisionTaskScheduledEventAttributes != nil && rhs.DecisionTaskScheduledEventAttributes != nil && v.DecisionTaskScheduledEventAttributes.Equals(rhs.DecisionTaskScheduledEventAttributes))) {
		return false
	}
	if !((v.DecisionTaskStartedEventAttributes == nil && rhs.DecisionTaskStartedEventAttributes == nil) || (v.DecisionTaskStartedEventAttributes != nil && rhs.DecisionTaskStartedEventAttributes != nil && v.DecisionTaskStartedEventAttributes.Equals(rhs.DecisionTaskStartedEventAttributes))) {
		return false
	}
	if !((v.DecisionTaskCompletedEventAttributes == nil && rhs.DecisionTaskCompletedEventAttributes == nil) || (v.DecisionTaskCompletedEventAttributes != nil && rhs.DecisionTaskCompletedEventAttributes != nil && v.DecisionTaskCompletedEventAttributes.Equals(rhs.DecisionTaskCompletedEventAttributes))) {
		return false
	}
	if !((v.DecisionTaskTimedOutEventAttributes == nil && rhs.DecisionTaskTimedOutEventAttributes == nil) || (v.DecisionTaskTimedOutEventAttributes != nil && rhs.DecisionTaskTimedOutEventAttributes != nil && v.DecisionTaskTimedOutEventAttributes.Equals(rhs.DecisionTaskTimedOutEventAttributes))) {
		return false
	}
	if !((v.DecisionTaskFailedEventAttributes == nil && rhs.DecisionTaskFailedEventAttributes == nil) || (v.DecisionTaskFailedEventAttributes != nil && rhs.DecisionTaskFailedEventAttributes != nil && v.DecisionTaskFailedEventAttributes.Equals(rhs.DecisionTaskFailedEventAttributes))) {
		return false
	}
	if !((v.ActivityTaskScheduledEventAttributes == nil && rhs.ActivityTaskScheduledEventAttributes == nil) || (v.ActivityTaskScheduledEventAttributes != nil && rhs.ActivityTaskScheduledEventAttributes != nil && v.ActivityTaskScheduledEventAttributes.Equals(rhs.ActivityTaskScheduledEventAttributes))) {
		return false
	}
	if !((v.ActivityTaskStartedEventAttributes == nil && rhs.ActivityTaskStartedEventAttributes == nil) || (v.ActivityTaskStartedEventAttributes != nil && rhs.ActivityTaskStartedEventAttributes != nil && v.ActivityTaskStartedEventAttributes.Equals(rhs.ActivityTaskStartedEventAttributes))) {
		return false
	}
	if !((v.ActivityTaskCompletedEventAttributes == nil && rhs.ActivityTaskCompletedEventAttributes == nil) || (v.ActivityTaskCompletedEventAttributes != nil && rhs.ActivityTaskCompletedEventAttributes != nil && v.ActivityTaskCompletedEventAttributes.Equals(rhs.ActivityTaskCompletedEventAttributes))) {
		return false
	}
	if !((v.ActivityTaskFailedEventAttributes == nil && rhs.ActivityTaskFailedEventAttributes == nil) || (v.ActivityTaskFailedEventAttributes != nil && rhs.ActivityTaskFailedEventAttributes != nil && v.ActivityTaskFailedEventAttributes.Equals(rhs.ActivityTaskFailedEventAttributes))) {
		return false
	}
	if !((v.ActivityTaskTimedOutEventAttributes == nil && rhs.ActivityTaskTimedOutEventAttributes == nil) || (v.ActivityTaskTimedOutEventAttributes != nil && rhs.ActivityTaskTimedOutEventAttributes != nil && v.ActivityTaskTimedOutEventAttributes.Equals(rhs.ActivityTaskTimedOutEventAttributes))) {
		return false
	}
	if !((v.TimerStartedEventAttributes == nil && rhs.TimerStartedEventAttributes == nil) || (v.TimerStartedEventAttributes != nil && rhs.TimerStartedEventAttributes != nil && v.TimerStartedEventAttributes.Equals(rhs.TimerStartedEventAttributes))) {
		return false
	}
	if !((v.TimerFiredEventAttributes == nil && rhs.TimerFiredEventAttributes == nil) || (v.TimerFiredEventAttributes != nil && rhs.TimerFiredEventAttributes != nil && v.TimerFiredEventAttributes.Equals(rhs.TimerFiredEventAttributes))) {
		return false
	}
	if !((v.ActivityTaskCancelRequestedEventAttributes == nil && rhs.ActivityTaskCancelRequestedEventAttributes == nil) || (v.ActivityTaskCancelRequestedEventAttributes != nil && rhs.ActivityTaskCancelRequestedEventAttributes != nil && v.ActivityTaskCancelRequestedEventAttributes.Equals(rhs.ActivityTaskCancelRequestedEventAttributes))) {
		return false
	}
	if !((v.RequestCancelActivityTaskFailedEventAttributes == nil && rhs.RequestCancelActivityTaskFailedEventAttributes == nil) || (v.RequestCancelActivityTaskFailedEventAttributes != nil && rhs.RequestCancelActivityTaskFailedEventAttributes != nil && v.RequestCancelActivityTaskFailedEventAttributes.Equals(rhs.RequestCancelActivityTaskFailedEventAttributes))) {
		return false
	}
	if !((v.ActivityTaskCanceledEventAttributes == nil && rhs.ActivityTaskCanceledEventAttributes == nil) || (v.ActivityTaskCanceledEventAttributes != nil && rhs.ActivityTaskCanceledEventAttributes != nil && v.ActivityTaskCanceledEventAttributes.Equals(rhs.ActivityTaskCanceledEventAttributes))) {
		return false
	}
	if !((v.TimerCanceledEventAttributes == nil && rhs.TimerCanceledEventAttributes == nil) || (v.TimerCanceledEventAttributes != nil && rhs.TimerCanceledEventAttributes != nil && v.TimerCanceledEventAttributes.Equals(rhs.TimerCanceledEventAttributes))) {
		return false
	}
	if !((v.CancelTimerFailedEventAttributes == nil && rhs.CancelTimerFailedEventAttributes == nil) || (v.CancelTimerFailedEventAttributes != nil && rhs.CancelTimerFailedEventAttributes != nil && v.CancelTimerFailedEventAttributes.Equals(rhs.CancelTimerFailedEventAttributes))) {
		return false
	}
	if !((v.MarkerRecordedEventAttributes == nil && rhs.MarkerRecordedEventAttributes == nil) || (v.MarkerRecordedEventAttributes != nil && rhs.MarkerRecordedEventAttributes != nil && v.MarkerRecordedEventAttributes.Equals(rhs.MarkerRecordedEventAttributes))) {
		return false
	}
	if !((v.WorkflowExecutionSignaledEventAttributes == nil && rhs.WorkflowExecutionSignaledEventAttributes == nil) || (v.WorkflowExecutionSignaledEventAttributes != nil && rhs.WorkflowExecutionSignaledEventAttributes != nil && v.WorkflowExecutionSignaledEventAttributes.Equals(rhs.WorkflowExecutionSignaledEventAttributes))) {
		return false
	}
	if !((v.WorkflowExecutionTerminatedEventAttributes == nil && rhs.WorkflowExecutionTerminatedEventAttributes == nil) || (v.WorkflowExecutionTerminatedEventAttributes != nil && rhs.WorkflowExecutionTerminatedEventAttributes != nil && v.WorkflowExecutionTerminatedEventAttributes.Equals(rhs.WorkflowExecutionTerminatedEventAttributes))) {
		return false
	}
	if !((v.WorkflowExecutionCancelRequestedEventAttributes == nil && rhs.WorkflowExecutionCancelRequestedEventAttributes == nil) || (v.WorkflowExecutionCancelRequestedEventAttributes != nil && rhs.WorkflowExecutionCancelRequestedEventAttributes != nil && v.WorkflowExecutionCancelRequestedEventAttributes.Equals(rhs.WorkflowExecutionCancelRequestedEventAttributes))) {
		return false
	}
	if !((v.WorkflowExecutionCanceledEventAttributes == nil && rhs.WorkflowExecutionCanceledEventAttributes == nil) || (v.WorkflowExecutionCanceledEventAttributes != nil && rhs.WorkflowExecutionCanceledEventAttributes != nil && v.WorkflowExecutionCanceledEventAttributes.Equals(rhs.WorkflowExecutionCanceledEventAttributes))) {
		return false
	}
	if !((v.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes == nil && rhs.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes == nil) || (v.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes != nil && rhs.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes != nil && v.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Equals(rhs.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes))) {
		return false
	}
	if !((v.RequestCancelExternalWorkflowExecutionFailedEventAttributes == nil && rhs.RequestCancelExternalWorkflowExecutionFailedEventAttributes == nil) || (v.RequestCancelExternalWorkflowExecutionFailedEventAttributes != nil && rhs.RequestCancelExternalWorkflowExecutionFailedEventAttributes != nil && v.RequestCancelExternalWorkflowExecutionFailedEventAttributes.Equals(rhs.RequestCancelExternalWorkflowExecutionFailedEventAttributes))) {
		return false
	}
	if !((v.ExternalWorkflowExecutionCancelRequestedEventAttributes == nil && rhs.ExternalWorkflowExecutionCancelRequestedEventAttributes == nil) || (v.ExternalWorkflowExecutionCancelRequestedEventAttributes != nil && rhs.ExternalWorkflowExecutionCancelRequestedEventAttributes != nil && v.ExternalWorkflowExecutionCancelRequestedEventAttributes.Equals(rhs.ExternalWorkflowExecutionCancelRequestedEventAttributes))) {
		return false
	}
	if !((v.WorkflowExecutionContinuedAsNewEventAttributes == nil && rhs.WorkflowExecutionContinuedAsNewEventAttributes == nil) || (v.WorkflowExecutionContinuedAsNewEventAttributes != nil && rhs.WorkflowExecutionContinuedAsNewEventAttributes != nil && v.WorkflowExecutionContinuedAsNewEventAttributes.Equals(rhs.WorkflowExecutionContinuedAsNewEventAttributes))) {
		return false
	}
	if !((v.StartChildWorkflowExecutionInitiatedEventAttributes == nil && rhs.StartChildWorkflowExecutionInitiatedEventAttributes == nil) || (v.StartChildWorkflowExecutionInitiatedEventAttributes != nil && rhs.StartChildWorkflowExecutionInitiatedEventAttributes != nil && v.StartChildWorkflowExecutionInitiatedEventAttributes.Equals(rhs.StartChildWorkflowExecutionInitiatedEventAttributes))) {
		return false
	}
	if !((v.StartChildWorkflowExecutionFailedEventAttributes == nil && rhs.StartChildWorkflowExecutionFailedEventAttributes == nil) || (v.StartChildWorkflowExecutionFailedEventAttributes != nil && rhs.StartChildWorkflowExecutionFailedEventAttributes != nil && v.StartChildWorkflowExecutionFailedEventAttributes.Equals(rhs.StartChildWorkflowExecutionFailedEventAttributes))) {
		return false
	}
	if !((v.ChildWorkflowExecutionStartedEventAttributes == nil && rhs.ChildWorkflowExecutionStartedEventAttributes == nil) || (v.ChildWorkflowExecutionStartedEventAttributes != nil && rhs.ChildWorkflowExecutionStartedEventAttributes != nil && v.ChildWorkflowExecutionStartedEventAttributes.Equals(rhs.ChildWorkflowExecutionStartedEventAttributes))) {
		return false
	}
	if !((v.ChildWorkflowExecutionCompletedEventAttributes == nil && rhs.ChildWorkflowExecutionCompletedEventAttributes == nil) || (v.ChildWorkflowExecutionCompletedEventAttributes != nil && rhs.ChildWorkflowExecutionCompletedEventAttributes != nil && v.ChildWorkflowExecutionCompletedEventAttributes.Equals(rhs.ChildWorkflowExecutionCompletedEventAttributes))) {
		return false
	}
	if !((v.ChildWorkflowExecutionFailedEventAttributes == nil && rhs.ChildWorkflowExecutionFailedEventAttributes == nil) || (v.ChildWorkflowExecutionFailedEventAttributes != nil && rhs.ChildWorkflowExecutionFailedEventAttributes != nil && v.ChildWorkflowExecutionFailedEventAttributes.Equals(rhs.ChildWorkflowExecutionFailedEventAttributes))) {
		return false
	}
	if !((v.ChildWorkflowExecutionCanceledEventAttributes == nil && rhs.ChildWorkflowExecutionCanceledEventAttributes == nil) || (v.ChildWorkflowExecutionCanceledEventAttributes != nil && rhs.ChildWorkflowExecutionCanceledEventAttributes != nil && v.ChildWorkflowExecutionCanceledEventAttributes.Equals(rhs.ChildWorkflowExecutionCanceledEventAttributes))) {
		return false
	}
	if !((v.ChildWorkflowExecutionTimedOutEventAttributes == nil && rhs.ChildWorkflowExecutionTimedOutEventAttributes == nil) || (v.ChildWorkflowExecutionTimedOutEventAttributes != nil && rhs.ChildWorkflowExecutionTimedOutEventAttributes != nil && v.ChildWorkflowExecutionTimedOutEventAttributes.Equals(rhs.ChildWorkflowExecutionTimedOutEventAttributes))) {
		return false
	}
	if !((v.ChildWorkflowExecutionTerminatedEventAttributes == nil && rhs.ChildWorkflowExecutionTerminatedEventAttributes == nil) || (v.ChildWorkflowExecutionTerminatedEventAttributes != nil && rhs.ChildWorkflowExecutionTerminatedEventAttributes != nil && v.ChildWorkflowExecutionTerminatedEventAttributes.Equals(rhs.ChildWorkflowExecutionTerminatedEventAttributes))) {
		return false
	}
	return true
}

func (v *HistoryEvent) GetEventId() (o int64) {
	if v.EventId != nil {
		return *v.EventId
	}
	return
}

func (v *HistoryEvent) GetTimestamp() (o int64) {
	if v.Timestamp != nil {
		return *v.Timestamp
	}
	return
}

func (v *HistoryEvent) GetEventType() (o EventType) {
	if v.EventType != nil {
		return *v.EventType
	}
	return
}

type HistoryEventFilter struct {
	EventType                                                  *EventType                                                  `json:"eventType,omitempty"`
	WorkflowExecutionStartedEventFilter                        *WorkflowExecutionStartedEventFilter                        `json:"workflowExecutionStartedEventFilter,omitempty"`
	WorkflowExecutionCompletedEventFilter                      *WorkflowExecutionCompletedEventFilter                      `json:"workflowExecutionCompletedEventFilter,omitempty"`
	WorkflowExecutionFailedEventFilter                         *WorkflowExecutionFailedEventFilter                         `json:"workflowExecutionFailedEventFilter,omitempty"`
	WorkflowExecutionTimedOutEventFilter                       *WorkflowExecutionTimedOutEventFilter                       `json:"workflowExecutionTimedOutEventFilter,omitempty"`
	DecisionTaskScheduledEventFilter                           *DecisionTaskScheduledEventFilter                           `json:"decisionTaskScheduledEventFilter,omitempty"`
	DecisionTaskStartedEventFilter                             *DecisionTaskStartedEventFilter                             `json:"decisionTaskStartedEventFilter,omitempty"`
	DecisionTaskCompletedEventFilter                           *DecisionTaskCompletedEventFilter                           `json:"decisionTaskCompletedEventFilter,omitempty"`
	DecisionTaskTimedOutEventFilter                            *DecisionTaskTimedOutEventFilter                            `json:"decisionTaskTimedOutEventFilter,omitempty"`
	DecisionTaskFailedEventFilter                              *DecisionTaskFailedEventFilter                              `json:"decisionTaskFailedEventFilter,omitempty"`
	ActivityTaskScheduledEventFilter                           *ActivityTaskScheduledEventFilter                           `json:"activityTaskScheduledEventFilter,omitempty"`
	ActivityTaskStartedEventFilter                             *ActivityTaskStartedEventFilter                             `json:"activityTaskStartedEventFilter,omitempty"`
	ActivityTaskCompletedEventFilter                           *ActivityTaskCompletedEventFilter                           `json:"activityTaskCompletedEventFilter,omitempty"`
	ActivityTaskFailedEventFilter                              *ActivityTaskFailedEventFilter                              `json:"activityTaskFailedEventFilter,omitempty"`
	ActivityTaskTimedOutEventFilter                            *ActivityTaskTimedOutEventFilter                            `json:"activityTaskTimedOutEventFilter,omitempty"`
	TimerStartedEventFilter                                    *TimerStartedEventFilter                                    `json:"timerStartedEventFilter,omitempty"`
	TimerFiredEventFilter                                      *TimerFiredEventFilter                                      `json:"timerFiredEventFilter,omitempty"`
	ActivityTaskCancelRequestedEventFilter                     *ActivityTaskCancelRequestedEventFilter                     `json:"activityTaskCancelRequestedEventFilter,omitempty"`
	RequestCancelActivityTaskFailedEventFilter                 *RequestCancelActivityTaskFailedEventFilter                 `json:"requestCancelActivityTaskFailedEventFilter,omitempty"`
	ActivityTaskCanceledEventFilter                            *ActivityTaskCanceledEventFilter                            `json:"activityTaskCanceledEventFilter,omitempty"`
	TimerCanceledEventFilter                                   *TimerCanceledEventFilter                                   `json:"timerCanceledEventFilter,omitempty"`
	CancelTimerFailedEventFilter                               *CancelTimerFailedEventFilter                               `json:"cancelTimerFailedEventFilter,omitempty"`
	MarkerRecordedEventFilter                                  *MarkerRecordedEventFilter                                  `json:"markerRecordedEventFilter,omitempty"`
	WorkflowExecutionSignaledEventFilter                       *WorkflowExecutionSignaledEventFilter                       `json:"workflowExecutionSignaledEventFilter,omitempty"`
	WorkflowExecutionTerminatedEventFilter                     *WorkflowExecutionTerminatedEventFilter                     `json:"workflowExecutionTerminatedEventFilter,omitempty"`
	WorkflowExecutionCancelRequestedEventFilter                *WorkflowExecutionCancelRequestedEventFilter                `json:"workflowExecutionCancelRequestedEventFilter,omitempty"`
	WorkflowExecutionCanceledEventFilter                       *WorkflowExecutionCanceledEventFilter                       `json:"workflowExecutionCanceledEventFilter,omitempty"`
	RequestCancelExternalWorkflowExecutionInitiatedEventFilter *RequestCancelExternalWorkflowExecutionInitiatedEventFilter `json:"requestCancelExternalWorkflowExecutionInitiatedEventFilter,omitempty"`
	RequestCancelExternalWorkflowExecutionFailedEventFilter    *RequestCancelExternalWorkflowExecutionFailedEventFilter    `json:"requestCancelExternalWorkflowExecutionFailedEventFilter,omitempty"`
	ExternalWorkflowExecutionCancelRequestedEventFilter        *ExternalWorkflowExecutionCancelRequestedEventFilter        `json:"externalWorkflowExecutionCancelRequestedEventFilter,omitempty"`
	WorkflowExecutionContinuedAsNewEventFilter                 *WorkflowExecutionContinuedAsNewEventFilter                 `json:"workflowExecutionContinuedAsNewEventFilter,omitempty"`
	StartChildWorkflowExecutionInitiatedEventFilter            *StartChildWorkflowExecutionInitiatedEventFilter            `json:"startChildWorkflowExecutionInitiatedEventFilter,omitempty"`
	StartChildWorkflowExecutionFailedEventFilter               *StartChildWorkflowExecutionFailedEventFilter               `json:"startChildWorkflowExecutionFailedEventFilter,omitempty"`
	ChildWorkflowExecutionStartedEventFilter                   *ChildWorkflowExecutionStartedEventFilter                   `json:"childWorkflowExecutionStartedEventFilter,omitempty"`
	ChildWorkflowExecutionCompletedEventFilter                 *ChildWorkflowExecutionCompletedEventFilter                 `json:"childWorkflowExecutionCompletedEventFilter,omitempty"`
	ChildWorkflowExecutionFailedEventFilter                    *ChildWorkflowExecutionFailedEventFilter                    `json:"childWorkflowExecutionFailedEventFilter,omitempty"`
	ChildWorkflowExecutionCanceledEventFilter                  *ChildWorkflowExecutionCanceledEventFilter                  `json:"childWorkflowExecutionCanceledEventFilter,omitempty"`
	ChildWorkflowExecutionTimedOutEventFilter                  *ChildWorkflowExecutionTimedOutEventFilter                  `json:"childWorkflowExecutionTimedOutEventFilter,omitempty"`
	ChildWorkflowExecutionTerminatedEventFilter                *ChildWorkflowExecutionTerminatedEventFilter                `json:"childWorkflowExecutionTerminatedEventFilter,omitempty"`
}

func (v *HistoryEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [39]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.EventType != nil {
		w, err = v.EventType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowExecutionStartedEventFilter != nil {
		w, err = v.WorkflowExecutionStartedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.WorkflowExecutionCompletedEventFilter != nil {
		w, err = v.WorkflowExecutionCompletedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.WorkflowExecutionFailedEventFilter != nil {
		w, err = v.WorkflowExecutionFailedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.WorkflowExecutionTimedOutEventFilter != nil {
		w, err = v.WorkflowExecutionTimedOutEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.DecisionTaskScheduledEventFilter != nil {
		w, err = v.DecisionTaskScheduledEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.DecisionTaskStartedEventFilter != nil {
		w, err = v.DecisionTaskStartedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventFilter != nil {
		w, err = v.DecisionTaskCompletedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 100, Value: w}
		i++
	}
	if v.DecisionTaskTimedOutEventFilter != nil {
		w, err = v.DecisionTaskTimedOutEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 110, Value: w}
		i++
	}
	if v.DecisionTaskFailedEventFilter != nil {
		w, err = v.DecisionTaskFailedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 120, Value: w}
		i++
	}
	if v.ActivityTaskScheduledEventFilter != nil {
		w, err = v.ActivityTaskScheduledEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 130, Value: w}
		i++
	}
	if v.ActivityTaskStartedEventFilter != nil {
		w, err = v.ActivityTaskStartedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 140, Value: w}
		i++
	}
	if v.ActivityTaskCompletedEventFilter != nil {
		w, err = v.ActivityTaskCompletedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 150, Value: w}
		i++
	}
	if v.ActivityTaskFailedEventFilter != nil {
		w, err = v.ActivityTaskFailedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 160, Value: w}
		i++
	}
	if v.ActivityTaskTimedOutEventFilter != nil {
		w, err = v.ActivityTaskTimedOutEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 170, Value: w}
		i++
	}
	if v.TimerStartedEventFilter != nil {
		w, err = v.TimerStartedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 180, Value: w}
		i++
	}
	if v.TimerFiredEventFilter != nil {
		w, err = v.TimerFiredEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 190, Value: w}
		i++
	}
	if v.ActivityTaskCancelRequestedEventFilter != nil {
		w, err = v.ActivityTaskCancelRequestedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 200, Value: w}
		i++
	}
	if v.RequestCancelActivityTaskFailedEventFilter != nil {
		w, err = v.RequestCancelActivityTaskFailedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 210, Value: w}
		i++
	}
	if v.ActivityTaskCanceledEventFilter != nil {
		w, err = v.ActivityTaskCanceledEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 220, Value: w}
		i++
	}
	if v.TimerCanceledEventFilter != nil {
		w, err = v.TimerCanceledEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 230, Value: w}
		i++
	}
	if v.CancelTimerFailedEventFilter != nil {
		w, err = v.CancelTimerFailedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 240, Value: w}
		i++
	}
	if v.MarkerRecordedEventFilter != nil {
		w, err = v.MarkerRecordedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 250, Value: w}
		i++
	}
	if v.WorkflowExecutionSignaledEventFilter != nil {
		w, err = v.WorkflowExecutionSignaledEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 260, Value: w}
		i++
	}
	if v.WorkflowExecutionTerminatedEventFilter != nil {
		w, err = v.WorkflowExecutionTerminatedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 270, Value: w}
		i++
	}
	if v.WorkflowExecutionCancelRequestedEventFilter != nil {
		w, err = v.WorkflowExecutionCancelRequestedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 280, Value: w}
		i++
	}
	if v.WorkflowExecutionCanceledEventFilter != nil {
		w, err = v.WorkflowExecutionCanceledEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 290, Value: w}
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionInitiatedEventFilter != nil {
		w, err = v.RequestCancelExternalWorkflowExecutionInitiatedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 300, Value: w}
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionFailedEventFilter != nil {
		w, err = v.RequestCancelExternalWorkflowExecutionFailedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 310, Value: w}
		i++
	}
	if v.ExternalWorkflowExecutionCancelRequestedEventFilter != nil {
		w, err = v.ExternalWorkflowExecutionCancelRequestedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 320, Value: w}
		i++
	}
	if v.WorkflowExecutionContinuedAsNewEventFilter != nil {
		w, err = v.WorkflowExecutionContinuedAsNewEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 330, Value: w}
		i++
	}
	if v.StartChildWorkflowExecutionInitiatedEventFilter != nil {
		w, err = v.StartChildWorkflowExecutionInitiatedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 340, Value: w}
		i++
	}
	if v.StartChildWorkflowExecutionFailedEventFilter != nil {
		w, err = v.StartChildWorkflowExecutionFailedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 350, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionStartedEventFilter != nil {
		w, err = v.ChildWorkflowExecutionStartedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 360, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionCompletedEventFilter != nil {
		w, err = v.ChildWorkflowExecutionCompletedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 370, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionFailedEventFilter != nil {
		w, err = v.ChildWorkflowExecutionFailedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 380, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionCanceledEventFilter != nil {
		w, err = v.ChildWorkflowExecutionCanceledEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 390, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionTimedOutEventFilter != nil {
		w, err = v.ChildWorkflowExecutionTimedOutEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 400, Value: w}
		i++
	}
	if v.ChildWorkflowExecutionTerminatedEventFilter != nil {
		w, err = v.ChildWorkflowExecutionTerminatedEventFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 410, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _WorkflowExecutionStartedEventFilter_Read(w wire.Value) (*WorkflowExecutionStartedEventFilter, error) {
	var v WorkflowExecutionStartedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionCompletedEventFilter_Read(w wire.Value) (*WorkflowExecutionCompletedEventFilter, error) {
	var v WorkflowExecutionCompletedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionFailedEventFilter_Read(w wire.Value) (*WorkflowExecutionFailedEventFilter, error) {
	var v WorkflowExecutionFailedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionTimedOutEventFilter_Read(w wire.Value) (*WorkflowExecutionTimedOutEventFilter, error) {
	var v WorkflowExecutionTimedOutEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskScheduledEventFilter_Read(w wire.Value) (*DecisionTaskScheduledEventFilter, error) {
	var v DecisionTaskScheduledEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskStartedEventFilter_Read(w wire.Value) (*DecisionTaskStartedEventFilter, error) {
	var v DecisionTaskStartedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskCompletedEventFilter_Read(w wire.Value) (*DecisionTaskCompletedEventFilter, error) {
	var v DecisionTaskCompletedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskTimedOutEventFilter_Read(w wire.Value) (*DecisionTaskTimedOutEventFilter, error) {
	var v DecisionTaskTimedOutEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _DecisionTaskFailedEventFilter_Read(w wire.Value) (*DecisionTaskFailedEventFilter, error) {
	var v DecisionTaskFailedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskScheduledEventFilter_Read(w wire.Value) (*ActivityTaskScheduledEventFilter, error) {
	var v ActivityTaskScheduledEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskStartedEventFilter_Read(w wire.Value) (*ActivityTaskStartedEventFilter, error) {
	var v ActivityTaskStartedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskCompletedEventFilter_Read(w wire.Value) (*ActivityTaskCompletedEventFilter, error) {
	var v ActivityTaskCompletedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskFailedEventFilter_Read(w wire.Value) (*ActivityTaskFailedEventFilter, error) {
	var v ActivityTaskFailedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskTimedOutEventFilter_Read(w wire.Value) (*ActivityTaskTimedOutEventFilter, error) {
	var v ActivityTaskTimedOutEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _TimerStartedEventFilter_Read(w wire.Value) (*TimerStartedEventFilter, error) {
	var v TimerStartedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _TimerFiredEventFilter_Read(w wire.Value) (*TimerFiredEventFilter, error) {
	var v TimerFiredEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskCancelRequestedEventFilter_Read(w wire.Value) (*ActivityTaskCancelRequestedEventFilter, error) {
	var v ActivityTaskCancelRequestedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _RequestCancelActivityTaskFailedEventFilter_Read(w wire.Value) (*RequestCancelActivityTaskFailedEventFilter, error) {
	var v RequestCancelActivityTaskFailedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ActivityTaskCanceledEventFilter_Read(w wire.Value) (*ActivityTaskCanceledEventFilter, error) {
	var v ActivityTaskCanceledEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _TimerCanceledEventFilter_Read(w wire.Value) (*TimerCanceledEventFilter, error) {
	var v TimerCanceledEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _CancelTimerFailedEventFilter_Read(w wire.Value) (*CancelTimerFailedEventFilter, error) {
	var v CancelTimerFailedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _MarkerRecordedEventFilter_Read(w wire.Value) (*MarkerRecordedEventFilter, error) {
	var v MarkerRecordedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionSignaledEventFilter_Read(w wire.Value) (*WorkflowExecutionSignaledEventFilter, error) {
	var v WorkflowExecutionSignaledEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionTerminatedEventFilter_Read(w wire.Value) (*WorkflowExecutionTerminatedEventFilter, error) {
	var v WorkflowExecutionTerminatedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionCancelRequestedEventFilter_Read(w wire.Value) (*WorkflowExecutionCancelRequestedEventFilter, error) {
	var v WorkflowExecutionCancelRequestedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionCanceledEventFilter_Read(w wire.Value) (*WorkflowExecutionCanceledEventFilter, error) {
	var v WorkflowExecutionCanceledEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _RequestCancelExternalWorkflowExecutionInitiatedEventFilter_Read(w wire.Value) (*RequestCancelExternalWorkflowExecutionInitiatedEventFilter, error) {
	var v RequestCancelExternalWorkflowExecutionInitiatedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _RequestCancelExternalWorkflowExecutionFailedEventFilter_Read(w wire.Value) (*RequestCancelExternalWorkflowExecutionFailedEventFilter, error) {
	var v RequestCancelExternalWorkflowExecutionFailedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ExternalWorkflowExecutionCancelRequestedEventFilter_Read(w wire.Value) (*ExternalWorkflowExecutionCancelRequestedEventFilter, error) {
	var v ExternalWorkflowExecutionCancelRequestedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionContinuedAsNewEventFilter_Read(w wire.Value) (*WorkflowExecutionContinuedAsNewEventFilter, error) {
	var v WorkflowExecutionContinuedAsNewEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _StartChildWorkflowExecutionInitiatedEventFilter_Read(w wire.Value) (*StartChildWorkflowExecutionInitiatedEventFilter, error) {
	var v StartChildWorkflowExecutionInitiatedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _StartChildWorkflowExecutionFailedEventFilter_Read(w wire.Value) (*StartChildWorkflowExecutionFailedEventFilter, error) {
	var v StartChildWorkflowExecutionFailedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionStartedEventFilter_Read(w wire.Value) (*ChildWorkflowExecutionStartedEventFilter, error) {
	var v ChildWorkflowExecutionStartedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionCompletedEventFilter_Read(w wire.Value) (*ChildWorkflowExecutionCompletedEventFilter, error) {
	var v ChildWorkflowExecutionCompletedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionFailedEventFilter_Read(w wire.Value) (*ChildWorkflowExecutionFailedEventFilter, error) {
	var v ChildWorkflowExecutionFailedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionCanceledEventFilter_Read(w wire.Value) (*ChildWorkflowExecutionCanceledEventFilter, error) {
	var v ChildWorkflowExecutionCanceledEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionTimedOutEventFilter_Read(w wire.Value) (*ChildWorkflowExecutionTimedOutEventFilter, error) {
	var v ChildWorkflowExecutionTimedOutEventFilter
	err := v.FromWire(w)
	return &v, err
}

func _ChildWorkflowExecutionTerminatedEventFilter_Read(w wire.Value) (*ChildWorkflowExecutionTerminatedEventFilter, error) {
	var v ChildWorkflowExecutionTerminatedEventFilter
	err := v.FromWire(w)
	return &v, err
}

func (v *HistoryEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x EventType
				x, err = _EventType_Read(field.Value)
				v.EventType = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionStartedEventFilter, err = _WorkflowExecutionStartedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionCompletedEventFilter, err = _WorkflowExecutionCompletedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionFailedEventFilter, err = _WorkflowExecutionFailedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionTimedOutEventFilter, err = _WorkflowExecutionTimedOutEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 80:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskScheduledEventFilter, err = _DecisionTaskScheduledEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 90:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskStartedEventFilter, err = _DecisionTaskStartedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 100:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskCompletedEventFilter, err = _DecisionTaskCompletedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 110:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskTimedOutEventFilter, err = _DecisionTaskTimedOutEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 120:
			if field.Value.Type() == wire.TStruct {
				v.DecisionTaskFailedEventFilter, err = _DecisionTaskFailedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 130:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskScheduledEventFilter, err = _ActivityTaskScheduledEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 140:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskStartedEventFilter, err = _ActivityTaskStartedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 150:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskCompletedEventFilter, err = _ActivityTaskCompletedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 160:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskFailedEventFilter, err = _ActivityTaskFailedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 170:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskTimedOutEventFilter, err = _ActivityTaskTimedOutEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 180:
			if field.Value.Type() == wire.TStruct {
				v.TimerStartedEventFilter, err = _TimerStartedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 190:
			if field.Value.Type() == wire.TStruct {
				v.TimerFiredEventFilter, err = _TimerFiredEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 200:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskCancelRequestedEventFilter, err = _ActivityTaskCancelRequestedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 210:
			if field.Value.Type() == wire.TStruct {
				v.RequestCancelActivityTaskFailedEventFilter, err = _RequestCancelActivityTaskFailedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 220:
			if field.Value.Type() == wire.TStruct {
				v.ActivityTaskCanceledEventFilter, err = _ActivityTaskCanceledEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 230:
			if field.Value.Type() == wire.TStruct {
				v.TimerCanceledEventFilter, err = _TimerCanceledEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 240:
			if field.Value.Type() == wire.TStruct {
				v.CancelTimerFailedEventFilter, err = _CancelTimerFailedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 250:
			if field.Value.Type() == wire.TStruct {
				v.MarkerRecordedEventFilter, err = _MarkerRecordedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 260:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionSignaledEventFilter, err = _WorkflowExecutionSignaledEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 270:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionTerminatedEventFilter, err = _WorkflowExecutionTerminatedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 280:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionCancelRequestedEventFilter, err = _WorkflowExecutionCancelRequestedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 290:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionCanceledEventFilter, err = _WorkflowExecutionCanceledEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 300:
			if field.Value.Type() == wire.TStruct {
				v.RequestCancelExternalWorkflowExecutionInitiatedEventFilter, err = _RequestCancelExternalWorkflowExecutionInitiatedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 310:
			if field.Value.Type() == wire.TStruct {
				v.RequestCancelExternalWorkflowExecutionFailedEventFilter, err = _RequestCancelExternalWorkflowExecutionFailedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 320:
			if field.Value.Type() == wire.TStruct {
				v.ExternalWorkflowExecutionCancelRequestedEventFilter, err = _ExternalWorkflowExecutionCancelRequestedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 330:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecutionContinuedAsNewEventFilter, err = _WorkflowExecutionContinuedAsNewEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 340:
			if field.Value.Type() == wire.TStruct {
				v.StartChildWorkflowExecutionInitiatedEventFilter, err = _StartChildWorkflowExecutionInitiatedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 350:
			if field.Value.Type() == wire.TStruct {
				v.StartChildWorkflowExecutionFailedEventFilter, err = _StartChildWorkflowExecutionFailedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 360:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionStartedEventFilter, err = _ChildWorkflowExecutionStartedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 370:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionCompletedEventFilter, err = _ChildWorkflowExecutionCompletedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 380:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionFailedEventFilter, err = _ChildWorkflowExecutionFailedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 390:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionCanceledEventFilter, err = _ChildWorkflowExecutionCanceledEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 400:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionTimedOutEventFilter, err = _ChildWorkflowExecutionTimedOutEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 410:
			if field.Value.Type() == wire.TStruct {
				v.ChildWorkflowExecutionTerminatedEventFilter, err = _ChildWorkflowExecutionTerminatedEventFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *HistoryEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [39]string
	i := 0
	if v.EventType != nil {
		fields[i] = fmt.Sprintf("EventType: %v", *(v.EventType))
		i++
	}
	if v.WorkflowExecutionStartedEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionStartedEventFilter: %v", v.WorkflowExecutionStartedEventFilter)
		i++
	}
	if v.WorkflowExecutionCompletedEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionCompletedEventFilter: %v", v.WorkflowExecutionCompletedEventFilter)
		i++
	}
	if v.WorkflowExecutionFailedEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionFailedEventFilter: %v", v.WorkflowExecutionFailedEventFilter)
		i++
	}
	if v.WorkflowExecutionTimedOutEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionTimedOutEventFilter: %v", v.WorkflowExecutionTimedOutEventFilter)
		i++
	}
	if v.DecisionTaskScheduledEventFilter != nil {
		fields[i] = fmt.Sprintf("DecisionTaskScheduledEventFilter: %v", v.DecisionTaskScheduledEventFilter)
		i++
	}
	if v.DecisionTaskStartedEventFilter != nil {
		fields[i] = fmt.Sprintf("DecisionTaskStartedEventFilter: %v", v.DecisionTaskStartedEventFilter)
		i++
	}
	if v.DecisionTaskCompletedEventFilter != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventFilter: %v", v.DecisionTaskCompletedEventFilter)
		i++
	}
	if v.DecisionTaskTimedOutEventFilter != nil {
		fields[i] = fmt.Sprintf("DecisionTaskTimedOutEventFilter: %v", v.DecisionTaskTimedOutEventFilter)
		i++
	}
	if v.DecisionTaskFailedEventFilter != nil {
		fields[i] = fmt.Sprintf("DecisionTaskFailedEventFilter: %v", v.DecisionTaskFailedEventFilter)
		i++
	}
	if v.ActivityTaskScheduledEventFilter != nil {
		fields[i] = fmt.Sprintf("ActivityTaskScheduledEventFilter: %v", v.ActivityTaskScheduledEventFilter)
		i++
	}
	if v.ActivityTaskStartedEventFilter != nil {
		fields[i] = fmt.Sprintf("ActivityTaskStartedEventFilter: %v", v.ActivityTaskStartedEventFilter)
		i++
	}
	if v.ActivityTaskCompletedEventFilter != nil {
		fields[i] = fmt.Sprintf("ActivityTaskCompletedEventFilter: %v", v.ActivityTaskCompletedEventFilter)
		i++
	}
	if v.ActivityTaskFailedEventFilter != nil {
		fields[i] = fmt.Sprintf("ActivityTaskFailedEventFilter: %v", v.ActivityTaskFailedEventFilter)
		i++
	}
	if v.ActivityTaskTimedOutEventFilter != nil {
		fields[i] = fmt.Sprintf("ActivityTaskTimedOutEventFilter: %v", v.ActivityTaskTimedOutEventFilter)
		i++
	}
	if v.TimerStartedEventFilter != nil {
		fields[i] = fmt.Sprintf("TimerStartedEventFilter: %v", v.TimerStartedEventFilter)
		i++
	}
	if v.TimerFiredEventFilter != nil {
		fields[i] = fmt.Sprintf("TimerFiredEventFilter: %v", v.TimerFiredEventFilter)
		i++
	}
	if v.ActivityTaskCancelRequestedEventFilter != nil {
		fields[i] = fmt.Sprintf("ActivityTaskCancelRequestedEventFilter: %v", v.ActivityTaskCancelRequestedEventFilter)
		i++
	}
	if v.RequestCancelActivityTaskFailedEventFilter != nil {
		fields[i] = fmt.Sprintf("RequestCancelActivityTaskFailedEventFilter: %v", v.RequestCancelActivityTaskFailedEventFilter)
		i++
	}
	if v.ActivityTaskCanceledEventFilter != nil {
		fields[i] = fmt.Sprintf("ActivityTaskCanceledEventFilter: %v", v.ActivityTaskCanceledEventFilter)
		i++
	}
	if v.TimerCanceledEventFilter != nil {
		fields[i] = fmt.Sprintf("TimerCanceledEventFilter: %v", v.TimerCanceledEventFilter)
		i++
	}
	if v.CancelTimerFailedEventFilter != nil {
		fields[i] = fmt.Sprintf("CancelTimerFailedEventFilter: %v", v.CancelTimerFailedEventFilter)
		i++
	}
	if v.MarkerRecordedEventFilter != nil {
		fields[i] = fmt.Sprintf("MarkerRecordedEventFilter: %v", v.MarkerRecordedEventFilter)
		i++
	}
	if v.WorkflowExecutionSignaledEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionSignaledEventFilter: %v", v.WorkflowExecutionSignaledEventFilter)
		i++
	}
	if v.WorkflowExecutionTerminatedEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionTerminatedEventFilter: %v", v.WorkflowExecutionTerminatedEventFilter)
		i++
	}
	if v.WorkflowExecutionCancelRequestedEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionCancelRequestedEventFilter: %v", v.WorkflowExecutionCancelRequestedEventFilter)
		i++
	}
	if v.WorkflowExecutionCanceledEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionCanceledEventFilter: %v", v.WorkflowExecutionCanceledEventFilter)
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionInitiatedEventFilter != nil {
		fields[i] = fmt.Sprintf("RequestCancelExternalWorkflowExecutionInitiatedEventFilter: %v", v.RequestCancelExternalWorkflowExecutionInitiatedEventFilter)
		i++
	}
	if v.RequestCancelExternalWorkflowExecutionFailedEventFilter != nil {
		fields[i] = fmt.Sprintf("RequestCancelExternalWorkflowExecutionFailedEventFilter: %v", v.RequestCancelExternalWorkflowExecutionFailedEventFilter)
		i++
	}
	if v.ExternalWorkflowExecutionCancelRequestedEventFilter != nil {
		fields[i] = fmt.Sprintf("ExternalWorkflowExecutionCancelRequestedEventFilter: %v", v.ExternalWorkflowExecutionCancelRequestedEventFilter)
		i++
	}
	if v.WorkflowExecutionContinuedAsNewEventFilter != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionContinuedAsNewEventFilter: %v", v.WorkflowExecutionContinuedAsNewEventFilter)
		i++
	}
	if v.StartChildWorkflowExecutionInitiatedEventFilter != nil {
		fields[i] = fmt.Sprintf("StartChildWorkflowExecutionInitiatedEventFilter: %v", v.StartChildWorkflowExecutionInitiatedEventFilter)
		i++
	}
	if v.StartChildWorkflowExecutionFailedEventFilter != nil {
		fields[i] = fmt.Sprintf("StartChildWorkflowExecutionFailedEventFilter: %v", v.StartChildWorkflowExecutionFailedEventFilter)
		i++
	}
	if v.ChildWorkflowExecutionStartedEventFilter != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionStartedEventFilter: %v", v.ChildWorkflowExecutionStartedEventFilter)
		i++
	}
	if v.ChildWorkflowExecutionCompletedEventFilter != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionCompletedEventFilter: %v", v.ChildWorkflowExecutionCompletedEventFilter)
		i++
	}
	if v.ChildWorkflowExecutionFailedEventFilter != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionFailedEventFilter: %v", v.ChildWorkflowExecutionFailedEventFilter)
		i++
	}
	if v.ChildWorkflowExecutionCanceledEventFilter != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionCanceledEventFilter: %v", v.ChildWorkflowExecutionCanceledEventFilter)
		i++
	}
	if v.ChildWorkflowExecutionTimedOutEventFilter != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionTimedOutEventFilter: %v", v.ChildWorkflowExecutionTimedOutEventFilter)
		i++
	}
	if v.ChildWorkflowExecutionTerminatedEventFilter != nil {
		fields[i] = fmt.Sprintf("ChildWorkflowExecutionTerminatedEventFilter: %v", v.ChildWorkflowExecutionTerminatedEventFilter)
		i++
	}
	return fmt.Sprintf("HistoryEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *HistoryEventFilter) Equals(rhs *HistoryEventFilter) bool {
	if !_EventType_EqualsPtr(v.EventType, rhs.EventType) {
		return false
	}
	if !((v.WorkflowExecutionStartedEventFilter == nil && rhs.WorkflowExecutionStartedEventFilter == nil) || (v.WorkflowExecutionStartedEventFilter != nil && rhs.WorkflowExecutionStartedEventFilter != nil && v.WorkflowExecutionStartedEventFilter.Equals(rhs.WorkflowExecutionStartedEventFilter))) {
		return false
	}
	if !((v.WorkflowExecutionCompletedEventFilter == nil && rhs.WorkflowExecutionCompletedEventFilter == nil) || (v.WorkflowExecutionCompletedEventFilter != nil && rhs.WorkflowExecutionCompletedEventFilter != nil && v.WorkflowExecutionCompletedEventFilter.Equals(rhs.WorkflowExecutionCompletedEventFilter))) {
		return false
	}
	if !((v.WorkflowExecutionFailedEventFilter == nil && rhs.WorkflowExecutionFailedEventFilter == nil) || (v.WorkflowExecutionFailedEventFilter != nil && rhs.WorkflowExecutionFailedEventFilter != nil && v.WorkflowExecutionFailedEventFilter.Equals(rhs.WorkflowExecutionFailedEventFilter))) {
		return false
	}
	if !((v.WorkflowExecutionTimedOutEventFilter == nil && rhs.WorkflowExecutionTimedOutEventFilter == nil) || (v.WorkflowExecutionTimedOutEventFilter != nil && rhs.WorkflowExecutionTimedOutEventFilter != nil && v.WorkflowExecutionTimedOutEventFilter.Equals(rhs.WorkflowExecutionTimedOutEventFilter))) {
		return false
	}
	if !((v.DecisionTaskScheduledEventFilter == nil && rhs.DecisionTaskScheduledEventFilter == nil) || (v.DecisionTaskScheduledEventFilter != nil && rhs.DecisionTaskScheduledEventFilter != nil && v.DecisionTaskScheduledEventFilter.Equals(rhs.DecisionTaskScheduledEventFilter))) {
		return false
	}
	if !((v.DecisionTaskStartedEventFilter == nil && rhs.DecisionTaskStartedEventFilter == nil) || (v.DecisionTaskStartedEventFilter != nil && rhs.DecisionTaskStartedEventFilter != nil && v.DecisionTaskStartedEventFilter.Equals(rhs.DecisionTaskStartedEventFilter))) {
		return false
	}
	if !((v.DecisionTaskCompletedEventFilter == nil && rhs.DecisionTaskCompletedEventFilter == nil) || (v.DecisionTaskCompletedEventFilter != nil && rhs.DecisionTaskCompletedEventFilter != nil && v.DecisionTaskCompletedEventFilter.Equals(rhs.DecisionTaskCompletedEventFilter))) {
		return false
	}
	if !((v.DecisionTaskTimedOutEventFilter == nil && rhs.DecisionTaskTimedOutEventFilter == nil) || (v.DecisionTaskTimedOutEventFilter != nil && rhs.DecisionTaskTimedOutEventFilter != nil && v.DecisionTaskTimedOutEventFilter.Equals(rhs.DecisionTaskTimedOutEventFilter))) {
		return false
	}
	if !((v.DecisionTaskFailedEventFilter == nil && rhs.DecisionTaskFailedEventFilter == nil) || (v.DecisionTaskFailedEventFilter != nil && rhs.DecisionTaskFailedEventFilter != nil && v.DecisionTaskFailedEventFilter.Equals(rhs.DecisionTaskFailedEventFilter))) {
		return false
	}
	if !((v.ActivityTaskScheduledEventFilter == nil && rhs.ActivityTaskScheduledEventFilter == nil) || (v.ActivityTaskScheduledEventFilter != nil && rhs.ActivityTaskScheduledEventFilter != nil && v.ActivityTaskScheduledEventFilter.Equals(rhs.ActivityTaskScheduledEventFilter))) {
		return false
	}
	if !((v.ActivityTaskStartedEventFilter == nil && rhs.ActivityTaskStartedEventFilter == nil) || (v.ActivityTaskStartedEventFilter != nil && rhs.ActivityTaskStartedEventFilter != nil && v.ActivityTaskStartedEventFilter.Equals(rhs.ActivityTaskStartedEventFilter))) {
		return false
	}
	if !((v.ActivityTaskCompletedEventFilter == nil && rhs.ActivityTaskCompletedEventFilter == nil) || (v.ActivityTaskCompletedEventFilter != nil && rhs.ActivityTaskCompletedEventFilter != nil && v.ActivityTaskCompletedEventFilter.Equals(rhs.ActivityTaskCompletedEventFilter))) {
		return false
	}
	if !((v.ActivityTaskFailedEventFilter == nil && rhs.ActivityTaskFailedEventFilter == nil) || (v.ActivityTaskFailedEventFilter != nil && rhs.ActivityTaskFailedEventFilter != nil && v.ActivityTaskFailedEventFilter.Equals(rhs.ActivityTaskFailedEventFilter))) {
		return false
	}
	if !((v.ActivityTaskTimedOutEventFilter == nil && rhs.ActivityTaskTimedOutEventFilter == nil) || (v.ActivityTaskTimedOutEventFilter != nil && rhs.ActivityTaskTimedOutEventFilter != nil && v.ActivityTaskTimedOutEventFilter.Equals(rhs.ActivityTaskTimedOutEventFilter))) {
		return false
	}
	if !((v.TimerStartedEventFilter == nil && rhs.TimerStartedEventFilter == nil) || (v.TimerStartedEventFilter != nil && rhs.TimerStartedEventFilter != nil && v.TimerStartedEventFilter.Equals(rhs.TimerStartedEventFilter))) {
		return false
	}
	if !((v.TimerFiredEventFilter == nil && rhs.TimerFiredEventFilter == nil) || (v.TimerFiredEventFilter != nil && rhs.TimerFiredEventFilter != nil && v.TimerFiredEventFilter.Equals(rhs.TimerFiredEventFilter))) {
		return false
	}
	if !((v.ActivityTaskCancelRequestedEventFilter == nil && rhs.ActivityTaskCancelRequestedEventFilter == nil) || (v.ActivityTaskCancelRequestedEventFilter != nil && rhs.ActivityTaskCancelRequestedEventFilter != nil && v.ActivityTaskCancelRequestedEventFilter.Equals(rhs.ActivityTaskCancelRequestedEventFilter))) {
		return false
	}
	if !((v.RequestCancelActivityTaskFailedEventFilter == nil && rhs.RequestCancelActivityTaskFailedEventFilter == nil) || (v.RequestCancelActivityTaskFailedEventFilter != nil && rhs.RequestCancelActivityTaskFailedEventFilter != nil && v.RequestCancelActivityTaskFailedEventFilter.Equals(rhs.RequestCancelActivityTaskFailedEventFilter))) {
		return false
	}
	if !((v.ActivityTaskCanceledEventFilter == nil && rhs.ActivityTaskCanceledEventFilter == nil) || (v.ActivityTaskCanceledEventFilter != nil && rhs.ActivityTaskCanceledEventFilter != nil && v.ActivityTaskCanceledEventFilter.Equals(rhs.ActivityTaskCanceledEventFilter))) {
		return false
	}
	if !((v.TimerCanceledEventFilter == nil && rhs.TimerCanceledEventFilter == nil) || (v.TimerCanceledEventFilter != nil && rhs.TimerCanceledEventFilter != nil && v.TimerCanceledEventFilter.Equals(rhs.TimerCanceledEventFilter))) {
		return false
	}
	if !((v.CancelTimerFailedEventFilter == nil && rhs.CancelTimerFailedEventFilter == nil) || (v.CancelTimerFailedEventFilter != nil && rhs.CancelTimerFailedEventFilter != nil && v.CancelTimerFailedEventFilter.Equals(rhs.CancelTimerFailedEventFilter))) {
		return false
	}
	if !((v.MarkerRecordedEventFilter == nil && rhs.MarkerRecordedEventFilter == nil) || (v.MarkerRecordedEventFilter != nil && rhs.MarkerRecordedEventFilter != nil && v.MarkerRecordedEventFilter.Equals(rhs.MarkerRecordedEventFilter))) {
		return false
	}
	if !((v.WorkflowExecutionSignaledEventFilter == nil && rhs.WorkflowExecutionSignaledEventFilter == nil) || (v.WorkflowExecutionSignaledEventFilter != nil && rhs.WorkflowExecutionSignaledEventFilter != nil && v.WorkflowExecutionSignaledEventFilter.Equals(rhs.WorkflowExecutionSignaledEventFilter))) {
		return false
	}
	if !((v.WorkflowExecutionTerminatedEventFilter == nil && rhs.WorkflowExecutionTerminatedEventFilter == nil) || (v.WorkflowExecutionTerminatedEventFilter != nil && rhs.WorkflowExecutionTerminatedEventFilter != nil && v.WorkflowExecutionTerminatedEventFilter.Equals(rhs.WorkflowExecutionTerminatedEventFilter))) {
		return false
	}
	if !((v.WorkflowExecutionCancelRequestedEventFilter == nil && rhs.WorkflowExecutionCancelRequestedEventFilter == nil) || (v.WorkflowExecutionCancelRequestedEventFilter != nil && rhs.WorkflowExecutionCancelRequestedEventFilter != nil && v.WorkflowExecutionCancelRequestedEventFilter.Equals(rhs.WorkflowExecutionCancelRequestedEventFilter))) {
		return false
	}
	if !((v.WorkflowExecutionCanceledEventFilter == nil && rhs.WorkflowExecutionCanceledEventFilter == nil) || (v.WorkflowExecutionCanceledEventFilter != nil && rhs.WorkflowExecutionCanceledEventFilter != nil && v.WorkflowExecutionCanceledEventFilter.Equals(rhs.WorkflowExecutionCanceledEventFilter))) {
		return false
	}
	if !((v.RequestCancelExternalWorkflowExecutionInitiatedEventFilter == nil && rhs.RequestCancelExternalWorkflowExecutionInitiatedEventFilter == nil) || (v.RequestCancelExternalWorkflowExecutionInitiatedEventFilter != nil && rhs.RequestCancelExternalWorkflowExecutionInitiatedEventFilter != nil && v.RequestCancelExternalWorkflowExecutionInitiatedEventFilter.Equals(rhs.RequestCancelExternalWorkflowExecutionInitiatedEventFilter))) {
		return false
	}
	if !((v.RequestCancelExternalWorkflowExecutionFailedEventFilter == nil && rhs.RequestCancelExternalWorkflowExecutionFailedEventFilter == nil) || (v.RequestCancelExternalWorkflowExecutionFailedEventFilter != nil && rhs.RequestCancelExternalWorkflowExecutionFailedEventFilter != nil && v.RequestCancelExternalWorkflowExecutionFailedEventFilter.Equals(rhs.RequestCancelExternalWorkflowExecutionFailedEventFilter))) {
		return false
	}
	if !((v.ExternalWorkflowExecutionCancelRequestedEventFilter == nil && rhs.ExternalWorkflowExecutionCancelRequestedEventFilter == nil) || (v.ExternalWorkflowExecutionCancelRequestedEventFilter != nil && rhs.ExternalWorkflowExecutionCancelRequestedEventFilter != nil && v.ExternalWorkflowExecutionCancelRequestedEventFilter.Equals(rhs.ExternalWorkflowExecutionCancelRequestedEventFilter))) {
		return false
	}
	if !((v.WorkflowExecutionContinuedAsNewEventFilter == nil && rhs.WorkflowExecutionContinuedAsNewEventFilter == nil) || (v.WorkflowExecutionContinuedAsNewEventFilter != nil && rhs.WorkflowExecutionContinuedAsNewEventFilter != nil && v.WorkflowExecutionContinuedAsNewEventFilter.Equals(rhs.WorkflowExecutionContinuedAsNewEventFilter))) {
		return false
	}
	if !((v.StartChildWorkflowExecutionInitiatedEventFilter == nil && rhs.StartChildWorkflowExecutionInitiatedEventFilter == nil) || (v.StartChildWorkflowExecutionInitiatedEventFilter != nil && rhs.StartChildWorkflowExecutionInitiatedEventFilter != nil && v.StartChildWorkflowExecutionInitiatedEventFilter.Equals(rhs.StartChildWorkflowExecutionInitiatedEventFilter))) {
		return false
	}
	if !((v.StartChildWorkflowExecutionFailedEventFilter == nil && rhs.StartChildWorkflowExecutionFailedEventFilter == nil) || (v.StartChildWorkflowExecutionFailedEventFilter != nil && rhs.StartChildWorkflowExecutionFailedEventFilter != nil && v.StartChildWorkflowExecutionFailedEventFilter.Equals(rhs.StartChildWorkflowExecutionFailedEventFilter))) {
		return false
	}
	if !((v.ChildWorkflowExecutionStartedEventFilter == nil && rhs.ChildWorkflowExecutionStartedEventFilter == nil) || (v.ChildWorkflowExecutionStartedEventFilter != nil && rhs.ChildWorkflowExecutionStartedEventFilter != nil && v.ChildWorkflowExecutionStartedEventFilter.Equals(rhs.ChildWorkflowExecutionStartedEventFilter))) {
		return false
	}
	if !((v.ChildWorkflowExecutionCompletedEventFilter == nil && rhs.ChildWorkflowExecutionCompletedEventFilter == nil) || (v.ChildWorkflowExecutionCompletedEventFilter != nil && rhs.ChildWorkflowExecutionCompletedEventFilter != nil && v.ChildWorkflowExecutionCompletedEventFilter.Equals(rhs.ChildWorkflowExecutionCompletedEventFilter))) {
		return false
	}
	if !((v.ChildWorkflowExecutionFailedEventFilter == nil && rhs.ChildWorkflowExecutionFailedEventFilter == nil) || (v.ChildWorkflowExecutionFailedEventFilter != nil && rhs.ChildWorkflowExecutionFailedEventFilter != nil && v.ChildWorkflowExecutionFailedEventFilter.Equals(rhs.ChildWorkflowExecutionFailedEventFilter))) {
		return false
	}
	if !((v.ChildWorkflowExecutionCanceledEventFilter == nil && rhs.ChildWorkflowExecutionCanceledEventFilter == nil) || (v.ChildWorkflowExecutionCanceledEventFilter != nil && rhs.ChildWorkflowExecutionCanceledEventFilter != nil && v.ChildWorkflowExecutionCanceledEventFilter.Equals(rhs.ChildWorkflowExecutionCanceledEventFilter))) {
		return false
	}
	if !((v.ChildWorkflowExecutionTimedOutEventFilter == nil && rhs.ChildWorkflowExecutionTimedOutEventFilter == nil) || (v.ChildWorkflowExecutionTimedOutEventFilter != nil && rhs.ChildWorkflowExecutionTimedOutEventFilter != nil && v.ChildWorkflowExecutionTimedOutEventFilter.Equals(rhs.ChildWorkflowExecutionTimedOutEventFilter))) {
		return false
	}
	if !((v.ChildWorkflowExecutionTerminatedEventFilter == nil && rhs.ChildWorkflowExecutionTerminatedEventFilter == nil) || (v.ChildWorkflowExecutionTerminatedEventFilter != nil && rhs.ChildWorkflowExecutionTerminatedEventFilter != nil && v.ChildWorkflowExecutionTerminatedEventFilter.Equals(rhs.ChildWorkflowExecutionTerminatedEventFilter))) {
		return false
	}
	return true
}

func (v *HistoryEventFilter) GetEventType() (o EventType) {
	if v.EventType != nil {
		return *v.EventType
	}
	return
}

type InternalServiceError struct {
	Message string `json:"message,required"`
}

func (v *InternalServiceError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *InternalServiceError) FromWire(w wire.Value) error {
	var err error
	messageIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}
	if !messageIsSet {
		return errors.New("field Message of InternalServiceError is required")
	}
	return nil
}

func (v *InternalServiceError) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	return fmt.Sprintf("InternalServiceError{%v}", strings.Join(fields[:i], ", "))
}

func (v *InternalServiceError) Equals(rhs *InternalServiceError) bool {
	if !(v.Message == rhs.Message) {
		return false
	}
	return true
}

func (v *InternalServiceError) Error() string {
	return v.String()
}

type ListClosedWorkflowExecutionsRequest struct {
	Domain          *string                       `json:"domain,omitempty"`
	MaximumPageSize *int32                        `json:"maximumPageSize,omitempty"`
	NextPageToken   []byte                        `json:"nextPageToken"`
	StartTimeFilter *StartTimeFilter              `json:"StartTimeFilter,omitempty"`
	ExecutionFilter *WorkflowExecutionFilter      `json:"executionFilter,omitempty"`
	TypeFilter      *WorkflowTypeFilter           `json:"typeFilter,omitempty"`
	StatusFilter    *WorkflowExecutionCloseStatus `json:"statusFilter,omitempty"`
}

func (v *ListClosedWorkflowExecutionsRequest) ToWire() (wire.Value, error) {
	var (
		fields [7]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.MaximumPageSize != nil {
		w, err = wire.NewValueI32(*(v.MaximumPageSize)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.NextPageToken != nil {
		w, err = wire.NewValueBinary(v.NextPageToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.StartTimeFilter != nil {
		w, err = v.StartTimeFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.ExecutionFilter != nil {
		w, err = v.ExecutionFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.TypeFilter != nil {
		w, err = v.TypeFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.StatusFilter != nil {
		w, err = v.StatusFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _StartTimeFilter_Read(w wire.Value) (*StartTimeFilter, error) {
	var v StartTimeFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionFilter_Read(w wire.Value) (*WorkflowExecutionFilter, error) {
	var v WorkflowExecutionFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowTypeFilter_Read(w wire.Value) (*WorkflowTypeFilter, error) {
	var v WorkflowTypeFilter
	err := v.FromWire(w)
	return &v, err
}

func _WorkflowExecutionCloseStatus_Read(w wire.Value) (WorkflowExecutionCloseStatus, error) {
	var v WorkflowExecutionCloseStatus
	err := v.FromWire(w)
	return v, err
}

func (v *ListClosedWorkflowExecutionsRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.MaximumPageSize = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				v.NextPageToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.StartTimeFilter, err = _StartTimeFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.ExecutionFilter, err = _WorkflowExecutionFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TStruct {
				v.TypeFilter, err = _WorkflowTypeFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TI32 {
				var x WorkflowExecutionCloseStatus
				x, err = _WorkflowExecutionCloseStatus_Read(field.Value)
				v.StatusFilter = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ListClosedWorkflowExecutionsRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [7]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.MaximumPageSize != nil {
		fields[i] = fmt.Sprintf("MaximumPageSize: %v", *(v.MaximumPageSize))
		i++
	}
	if v.NextPageToken != nil {
		fields[i] = fmt.Sprintf("NextPageToken: %v", v.NextPageToken)
		i++
	}
	if v.StartTimeFilter != nil {
		fields[i] = fmt.Sprintf("StartTimeFilter: %v", v.StartTimeFilter)
		i++
	}
	if v.ExecutionFilter != nil {
		fields[i] = fmt.Sprintf("ExecutionFilter: %v", v.ExecutionFilter)
		i++
	}
	if v.TypeFilter != nil {
		fields[i] = fmt.Sprintf("TypeFilter: %v", v.TypeFilter)
		i++
	}
	if v.StatusFilter != nil {
		fields[i] = fmt.Sprintf("StatusFilter: %v", *(v.StatusFilter))
		i++
	}
	return fmt.Sprintf("ListClosedWorkflowExecutionsRequest{%v}", strings.Join(fields[:i], ", "))
}

func _WorkflowExecutionCloseStatus_EqualsPtr(lhs, rhs *WorkflowExecutionCloseStatus) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *ListClosedWorkflowExecutionsRequest) Equals(rhs *ListClosedWorkflowExecutionsRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !_I32_EqualsPtr(v.MaximumPageSize, rhs.MaximumPageSize) {
		return false
	}
	if !((v.NextPageToken == nil && rhs.NextPageToken == nil) || (v.NextPageToken != nil && rhs.NextPageToken != nil && bytes.Equal(v.NextPageToken, rhs.NextPageToken))) {
		return false
	}
	if !((v.StartTimeFilter == nil && rhs.StartTimeFilter == nil) || (v.StartTimeFilter != nil && rhs.StartTimeFilter != nil && v.StartTimeFilter.Equals(rhs.StartTimeFilter))) {
		return false
	}
	if !((v.ExecutionFilter == nil && rhs.ExecutionFilter == nil) || (v.ExecutionFilter != nil && rhs.ExecutionFilter != nil && v.ExecutionFilter.Equals(rhs.ExecutionFilter))) {
		return false
	}
	if !((v.TypeFilter == nil && rhs.TypeFilter == nil) || (v.TypeFilter != nil && rhs.TypeFilter != nil && v.TypeFilter.Equals(rhs.TypeFilter))) {
		return false
	}
	if !_WorkflowExecutionCloseStatus_EqualsPtr(v.StatusFilter, rhs.StatusFilter) {
		return false
	}
	return true
}

func (v *ListClosedWorkflowExecutionsRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ListClosedWorkflowExecutionsRequest) GetMaximumPageSize() (o int32) {
	if v.MaximumPageSize != nil {
		return *v.MaximumPageSize
	}
	return
}

func (v *ListClosedWorkflowExecutionsRequest) GetStatusFilter() (o WorkflowExecutionCloseStatus) {
	if v.StatusFilter != nil {
		return *v.StatusFilter
	}
	return
}

type ListClosedWorkflowExecutionsResponse struct {
	Executions    []*WorkflowExecutionInfo `json:"executions"`
	NextPageToken []byte                   `json:"nextPageToken"`
}

type _List_WorkflowExecutionInfo_ValueList []*WorkflowExecutionInfo

func (v _List_WorkflowExecutionInfo_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_WorkflowExecutionInfo_ValueList) Size() int {
	return len(v)
}

func (_List_WorkflowExecutionInfo_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_WorkflowExecutionInfo_ValueList) Close() {
}

func (v *ListClosedWorkflowExecutionsResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Executions != nil {
		w, err = wire.NewValueList(_List_WorkflowExecutionInfo_ValueList(v.Executions)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.NextPageToken != nil {
		w, err = wire.NewValueBinary(v.NextPageToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_WorkflowExecutionInfo_Read(l wire.ValueList) ([]*WorkflowExecutionInfo, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*WorkflowExecutionInfo, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _WorkflowExecutionInfo_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *ListClosedWorkflowExecutionsResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TList {
				v.Executions, err = _List_WorkflowExecutionInfo_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.NextPageToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ListClosedWorkflowExecutionsResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.Executions != nil {
		fields[i] = fmt.Sprintf("Executions: %v", v.Executions)
		i++
	}
	if v.NextPageToken != nil {
		fields[i] = fmt.Sprintf("NextPageToken: %v", v.NextPageToken)
		i++
	}
	return fmt.Sprintf("ListClosedWorkflowExecutionsResponse{%v}", strings.Join(fields[:i], ", "))
}

func _List_WorkflowExecutionInfo_Equals(lhs, rhs []*WorkflowExecutionInfo) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func (v *ListClosedWorkflowExecutionsResponse) Equals(rhs *ListClosedWorkflowExecutionsResponse) bool {
	if !((v.Executions == nil && rhs.Executions == nil) || (v.Executions != nil && rhs.Executions != nil && _List_WorkflowExecutionInfo_Equals(v.Executions, rhs.Executions))) {
		return false
	}
	if !((v.NextPageToken == nil && rhs.NextPageToken == nil) || (v.NextPageToken != nil && rhs.NextPageToken != nil && bytes.Equal(v.NextPageToken, rhs.NextPageToken))) {
		return false
	}
	return true
}

type ListOpenWorkflowExecutionsRequest struct {
	Domain          *string                  `json:"domain,omitempty"`
	MaximumPageSize *int32                   `json:"maximumPageSize,omitempty"`
	NextPageToken   []byte                   `json:"nextPageToken"`
	StartTimeFilter *StartTimeFilter         `json:"StartTimeFilter,omitempty"`
	ExecutionFilter *WorkflowExecutionFilter `json:"executionFilter,omitempty"`
	TypeFilter      *WorkflowTypeFilter      `json:"typeFilter,omitempty"`
}

func (v *ListOpenWorkflowExecutionsRequest) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.MaximumPageSize != nil {
		w, err = wire.NewValueI32(*(v.MaximumPageSize)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.NextPageToken != nil {
		w, err = wire.NewValueBinary(v.NextPageToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.StartTimeFilter != nil {
		w, err = v.StartTimeFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.ExecutionFilter != nil {
		w, err = v.ExecutionFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.TypeFilter != nil {
		w, err = v.TypeFilter.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ListOpenWorkflowExecutionsRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.MaximumPageSize = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				v.NextPageToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.StartTimeFilter, err = _StartTimeFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.ExecutionFilter, err = _WorkflowExecutionFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TStruct {
				v.TypeFilter, err = _WorkflowTypeFilter_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ListOpenWorkflowExecutionsRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [6]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.MaximumPageSize != nil {
		fields[i] = fmt.Sprintf("MaximumPageSize: %v", *(v.MaximumPageSize))
		i++
	}
	if v.NextPageToken != nil {
		fields[i] = fmt.Sprintf("NextPageToken: %v", v.NextPageToken)
		i++
	}
	if v.StartTimeFilter != nil {
		fields[i] = fmt.Sprintf("StartTimeFilter: %v", v.StartTimeFilter)
		i++
	}
	if v.ExecutionFilter != nil {
		fields[i] = fmt.Sprintf("ExecutionFilter: %v", v.ExecutionFilter)
		i++
	}
	if v.TypeFilter != nil {
		fields[i] = fmt.Sprintf("TypeFilter: %v", v.TypeFilter)
		i++
	}
	return fmt.Sprintf("ListOpenWorkflowExecutionsRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *ListOpenWorkflowExecutionsRequest) Equals(rhs *ListOpenWorkflowExecutionsRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !_I32_EqualsPtr(v.MaximumPageSize, rhs.MaximumPageSize) {
		return false
	}
	if !((v.NextPageToken == nil && rhs.NextPageToken == nil) || (v.NextPageToken != nil && rhs.NextPageToken != nil && bytes.Equal(v.NextPageToken, rhs.NextPageToken))) {
		return false
	}
	if !((v.StartTimeFilter == nil && rhs.StartTimeFilter == nil) || (v.StartTimeFilter != nil && rhs.StartTimeFilter != nil && v.StartTimeFilter.Equals(rhs.StartTimeFilter))) {
		return false
	}
	if !((v.ExecutionFilter == nil && rhs.ExecutionFilter == nil) || (v.ExecutionFilter != nil && rhs.ExecutionFilter != nil && v.ExecutionFilter.Equals(rhs.ExecutionFilter))) {
		return false
	}
	if !((v.TypeFilter == nil && rhs.TypeFilter == nil) || (v.TypeFilter != nil && rhs.TypeFilter != nil && v.TypeFilter.Equals(rhs.TypeFilter))) {
		return false
	}
	return true
}

func (v *ListOpenWorkflowExecutionsRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ListOpenWorkflowExecutionsRequest) GetMaximumPageSize() (o int32) {
	if v.MaximumPageSize != nil {
		return *v.MaximumPageSize
	}
	return
}

type ListOpenWorkflowExecutionsResponse struct {
	Executions    []*WorkflowExecutionInfo `json:"executions"`
	NextPageToken []byte                   `json:"nextPageToken"`
}

func (v *ListOpenWorkflowExecutionsResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Executions != nil {
		w, err = wire.NewValueList(_List_WorkflowExecutionInfo_ValueList(v.Executions)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.NextPageToken != nil {
		w, err = wire.NewValueBinary(v.NextPageToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ListOpenWorkflowExecutionsResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TList {
				v.Executions, err = _List_WorkflowExecutionInfo_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.NextPageToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ListOpenWorkflowExecutionsResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.Executions != nil {
		fields[i] = fmt.Sprintf("Executions: %v", v.Executions)
		i++
	}
	if v.NextPageToken != nil {
		fields[i] = fmt.Sprintf("NextPageToken: %v", v.NextPageToken)
		i++
	}
	return fmt.Sprintf("ListOpenWorkflowExecutionsResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *ListOpenWorkflowExecutionsResponse) Equals(rhs *ListOpenWorkflowExecutionsResponse) bool {
	if !((v.Executions == nil && rhs.Executions == nil) || (v.Executions != nil && rhs.Executions != nil && _List_WorkflowExecutionInfo_Equals(v.Executions, rhs.Executions))) {
		return false
	}
	if !((v.NextPageToken == nil && rhs.NextPageToken == nil) || (v.NextPageToken != nil && rhs.NextPageToken != nil && bytes.Equal(v.NextPageToken, rhs.NextPageToken))) {
		return false
	}
	return true
}

type MarkerRecordedEventAttributes struct {
	MarkerName                   *string `json:"markerName,omitempty"`
	Details                      []byte  `json:"details"`
	DecisionTaskCompletedEventId *int64  `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *MarkerRecordedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.MarkerName != nil {
		w, err = wire.NewValueString(*(v.MarkerName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *MarkerRecordedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.MarkerName = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *MarkerRecordedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.MarkerName != nil {
		fields[i] = fmt.Sprintf("MarkerName: %v", *(v.MarkerName))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("MarkerRecordedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *MarkerRecordedEventAttributes) Equals(rhs *MarkerRecordedEventAttributes) bool {
	if !_String_EqualsPtr(v.MarkerName, rhs.MarkerName) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *MarkerRecordedEventAttributes) GetMarkerName() (o string) {
	if v.MarkerName != nil {
		return *v.MarkerName
	}
	return
}

func (v *MarkerRecordedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type MarkerRecordedEventFilter struct {
	MarkerName *string `json:"markerName,omitempty"`
}

func (v *MarkerRecordedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.MarkerName != nil {
		w, err = wire.NewValueString(*(v.MarkerName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *MarkerRecordedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.MarkerName = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *MarkerRecordedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.MarkerName != nil {
		fields[i] = fmt.Sprintf("MarkerName: %v", *(v.MarkerName))
		i++
	}
	return fmt.Sprintf("MarkerRecordedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *MarkerRecordedEventFilter) Equals(rhs *MarkerRecordedEventFilter) bool {
	if !_String_EqualsPtr(v.MarkerName, rhs.MarkerName) {
		return false
	}
	return true
}

func (v *MarkerRecordedEventFilter) GetMarkerName() (o string) {
	if v.MarkerName != nil {
		return *v.MarkerName
	}
	return
}

type PollForActivityTaskRequest struct {
	Domain           *string           `json:"domain,omitempty"`
	TaskList         *TaskList         `json:"taskList,omitempty"`
	Identity         *string           `json:"identity,omitempty"`
	TaskListMetadata *TaskListMetadata `json:"taskListMetadata,omitempty"`
}

func (v *PollForActivityTaskRequest) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.TaskListMetadata != nil {
		w, err = v.TaskListMetadata.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _TaskListMetadata_Read(w wire.Value) (*TaskListMetadata, error) {
	var v TaskListMetadata
	err := v.FromWire(w)
	return &v, err
}

func (v *PollForActivityTaskRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.TaskListMetadata, err = _TaskListMetadata_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PollForActivityTaskRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	if v.TaskListMetadata != nil {
		fields[i] = fmt.Sprintf("TaskListMetadata: %v", v.TaskListMetadata)
		i++
	}
	return fmt.Sprintf("PollForActivityTaskRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *PollForActivityTaskRequest) Equals(rhs *PollForActivityTaskRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	if !((v.TaskListMetadata == nil && rhs.TaskListMetadata == nil) || (v.TaskListMetadata != nil && rhs.TaskListMetadata != nil && v.TaskListMetadata.Equals(rhs.TaskListMetadata))) {
		return false
	}
	return true
}

func (v *PollForActivityTaskRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *PollForActivityTaskRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type PollForActivityTaskResponse struct {
	TaskToken                     []byte             `json:"taskToken"`
	WorkflowExecution             *WorkflowExecution `json:"workflowExecution,omitempty"`
	ActivityId                    *string            `json:"activityId,omitempty"`
	ActivityType                  *ActivityType      `json:"activityType,omitempty"`
	Input                         []byte             `json:"input"`
	ScheduledTimestamp            *int64             `json:"scheduledTimestamp,omitempty"`
	ScheduleToCloseTimeoutSeconds *int32             `json:"scheduleToCloseTimeoutSeconds,omitempty"`
	StartedTimestamp              *int64             `json:"startedTimestamp,omitempty"`
	StartToCloseTimeoutSeconds    *int32             `json:"startToCloseTimeoutSeconds,omitempty"`
	HeartbeatTimeoutSeconds       *int32             `json:"heartbeatTimeoutSeconds,omitempty"`
}

func (v *PollForActivityTaskResponse) ToWire() (wire.Value, error) {
	var (
		fields [10]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.ScheduledTimestamp != nil {
		w, err = wire.NewValueI64(*(v.ScheduledTimestamp)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.ScheduleToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ScheduleToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.StartedTimestamp != nil {
		w, err = wire.NewValueI64(*(v.StartedTimestamp)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	if v.StartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.StartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 100, Value: w}
		i++
	}
	if v.HeartbeatTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.HeartbeatTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 110, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *PollForActivityTaskResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledTimestamp = &x
				if err != nil {
					return err
				}
			}
		case 80:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ScheduleToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 90:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedTimestamp = &x
				if err != nil {
					return err
				}
			}
		case 100:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.StartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 110:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.HeartbeatTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PollForActivityTaskResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [10]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ScheduledTimestamp != nil {
		fields[i] = fmt.Sprintf("ScheduledTimestamp: %v", *(v.ScheduledTimestamp))
		i++
	}
	if v.ScheduleToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ScheduleToCloseTimeoutSeconds: %v", *(v.ScheduleToCloseTimeoutSeconds))
		i++
	}
	if v.StartedTimestamp != nil {
		fields[i] = fmt.Sprintf("StartedTimestamp: %v", *(v.StartedTimestamp))
		i++
	}
	if v.StartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("StartToCloseTimeoutSeconds: %v", *(v.StartToCloseTimeoutSeconds))
		i++
	}
	if v.HeartbeatTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("HeartbeatTimeoutSeconds: %v", *(v.HeartbeatTimeoutSeconds))
		i++
	}
	return fmt.Sprintf("PollForActivityTaskResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *PollForActivityTaskResponse) Equals(rhs *PollForActivityTaskResponse) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I64_EqualsPtr(v.ScheduledTimestamp, rhs.ScheduledTimestamp) {
		return false
	}
	if !_I32_EqualsPtr(v.ScheduleToCloseTimeoutSeconds, rhs.ScheduleToCloseTimeoutSeconds) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedTimestamp, rhs.StartedTimestamp) {
		return false
	}
	if !_I32_EqualsPtr(v.StartToCloseTimeoutSeconds, rhs.StartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.HeartbeatTimeoutSeconds, rhs.HeartbeatTimeoutSeconds) {
		return false
	}
	return true
}

func (v *PollForActivityTaskResponse) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

func (v *PollForActivityTaskResponse) GetScheduledTimestamp() (o int64) {
	if v.ScheduledTimestamp != nil {
		return *v.ScheduledTimestamp
	}
	return
}

func (v *PollForActivityTaskResponse) GetScheduleToCloseTimeoutSeconds() (o int32) {
	if v.ScheduleToCloseTimeoutSeconds != nil {
		return *v.ScheduleToCloseTimeoutSeconds
	}
	return
}

func (v *PollForActivityTaskResponse) GetStartedTimestamp() (o int64) {
	if v.StartedTimestamp != nil {
		return *v.StartedTimestamp
	}
	return
}

func (v *PollForActivityTaskResponse) GetStartToCloseTimeoutSeconds() (o int32) {
	if v.StartToCloseTimeoutSeconds != nil {
		return *v.StartToCloseTimeoutSeconds
	}
	return
}

func (v *PollForActivityTaskResponse) GetHeartbeatTimeoutSeconds() (o int32) {
	if v.HeartbeatTimeoutSeconds != nil {
		return *v.HeartbeatTimeoutSeconds
	}
	return
}

type PollForDecisionTaskRequest struct {
	Domain   *string   `json:"domain,omitempty"`
	TaskList *TaskList `json:"taskList,omitempty"`
	Identity *string   `json:"identity,omitempty"`
}

func (v *PollForDecisionTaskRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *PollForDecisionTaskRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PollForDecisionTaskRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("PollForDecisionTaskRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *PollForDecisionTaskRequest) Equals(rhs *PollForDecisionTaskRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *PollForDecisionTaskRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *PollForDecisionTaskRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type PollForDecisionTaskResponse struct {
	TaskToken              []byte             `json:"taskToken"`
	WorkflowExecution      *WorkflowExecution `json:"workflowExecution,omitempty"`
	WorkflowType           *WorkflowType      `json:"workflowType,omitempty"`
	PreviousStartedEventId *int64             `json:"previousStartedEventId,omitempty"`
	StartedEventId         *int64             `json:"startedEventId,omitempty"`
	BacklogCountHint       *int64             `json:"backlogCountHint,omitempty"`
	History                *History           `json:"history,omitempty"`
	NextPageToken          []byte             `json:"nextPageToken"`
	Query                  *WorkflowQuery     `json:"query,omitempty"`
}

func (v *PollForDecisionTaskResponse) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.PreviousStartedEventId != nil {
		w, err = wire.NewValueI64(*(v.PreviousStartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.BacklogCountHint != nil {
		w, err = wire.NewValueI64(*(v.BacklogCountHint)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 54, Value: w}
		i++
	}
	if v.History != nil {
		w, err = v.History.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.NextPageToken != nil {
		w, err = wire.NewValueBinary(v.NextPageToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.Query != nil {
		w, err = v.Query.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _WorkflowQuery_Read(w wire.Value) (*WorkflowQuery, error) {
	var v WorkflowQuery
	err := v.FromWire(w)
	return &v, err
}

func (v *PollForDecisionTaskResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.PreviousStartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 54:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.BacklogCountHint = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TStruct {
				v.History, err = _History_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TBinary {
				v.NextPageToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 80:
			if field.Value.Type() == wire.TStruct {
				v.Query, err = _WorkflowQuery_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PollForDecisionTaskResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.PreviousStartedEventId != nil {
		fields[i] = fmt.Sprintf("PreviousStartedEventId: %v", *(v.PreviousStartedEventId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.BacklogCountHint != nil {
		fields[i] = fmt.Sprintf("BacklogCountHint: %v", *(v.BacklogCountHint))
		i++
	}
	if v.History != nil {
		fields[i] = fmt.Sprintf("History: %v", v.History)
		i++
	}
	if v.NextPageToken != nil {
		fields[i] = fmt.Sprintf("NextPageToken: %v", v.NextPageToken)
		i++
	}
	if v.Query != nil {
		fields[i] = fmt.Sprintf("Query: %v", v.Query)
		i++
	}
	return fmt.Sprintf("PollForDecisionTaskResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *PollForDecisionTaskResponse) Equals(rhs *PollForDecisionTaskResponse) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_I64_EqualsPtr(v.PreviousStartedEventId, rhs.PreviousStartedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.BacklogCountHint, rhs.BacklogCountHint) {
		return false
	}
	if !((v.History == nil && rhs.History == nil) || (v.History != nil && rhs.History != nil && v.History.Equals(rhs.History))) {
		return false
	}
	if !((v.NextPageToken == nil && rhs.NextPageToken == nil) || (v.NextPageToken != nil && rhs.NextPageToken != nil && bytes.Equal(v.NextPageToken, rhs.NextPageToken))) {
		return false
	}
	if !((v.Query == nil && rhs.Query == nil) || (v.Query != nil && rhs.Query != nil && v.Query.Equals(rhs.Query))) {
		return false
	}
	return true
}

func (v *PollForDecisionTaskResponse) GetPreviousStartedEventId() (o int64) {
	if v.PreviousStartedEventId != nil {
		return *v.PreviousStartedEventId
	}
	return
}

func (v *PollForDecisionTaskResponse) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *PollForDecisionTaskResponse) GetBacklogCountHint() (o int64) {
	if v.BacklogCountHint != nil {
		return *v.BacklogCountHint
	}
	return
}

type QueryFailedError struct {
	Message string `json:"message,required"`
}

func (v *QueryFailedError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *QueryFailedError) FromWire(w wire.Value) error {
	var err error
	messageIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}
	if !messageIsSet {
		return errors.New("field Message of QueryFailedError is required")
	}
	return nil
}

func (v *QueryFailedError) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	return fmt.Sprintf("QueryFailedError{%v}", strings.Join(fields[:i], ", "))
}

func (v *QueryFailedError) Equals(rhs *QueryFailedError) bool {
	if !(v.Message == rhs.Message) {
		return false
	}
	return true
}

func (v *QueryFailedError) Error() string {
	return v.String()
}

type QueryTaskCompletedType int32

const (
	QueryTaskCompletedTypeCompleted QueryTaskCompletedType = 0
	QueryTaskCompletedTypeFailed    QueryTaskCompletedType = 1
)

func QueryTaskCompletedType_Values() []QueryTaskCompletedType {
	return []QueryTaskCompletedType{QueryTaskCompletedTypeCompleted, QueryTaskCompletedTypeFailed}
}

func (v *QueryTaskCompletedType) UnmarshalText(value []byte) error {
	switch string(value) {
	case "COMPLETED":
		*v = QueryTaskCompletedTypeCompleted
		return nil
	case "FAILED":
		*v = QueryTaskCompletedTypeFailed
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "QueryTaskCompletedType")
	}
}

func (v QueryTaskCompletedType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *QueryTaskCompletedType) FromWire(w wire.Value) error {
	*v = (QueryTaskCompletedType)(w.GetI32())
	return nil
}

func (v QueryTaskCompletedType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "COMPLETED"
	case 1:
		return "FAILED"
	}
	return fmt.Sprintf("QueryTaskCompletedType(%d)", w)
}

func (v QueryTaskCompletedType) Equals(rhs QueryTaskCompletedType) bool {
	return v == rhs
}

func (v QueryTaskCompletedType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"COMPLETED\""), nil
	case 1:
		return ([]byte)("\"FAILED\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *QueryTaskCompletedType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "QueryTaskCompletedType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "QueryTaskCompletedType")
		}
		*v = (QueryTaskCompletedType)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "QueryTaskCompletedType")
	}
}

type QueryWorkflowRequest struct {
	Domain    *string            `json:"domain,omitempty"`
	Execution *WorkflowExecution `json:"execution,omitempty"`
	Query     *WorkflowQuery     `json:"query,omitempty"`
}

func (v *QueryWorkflowRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Execution != nil {
		w, err = v.Execution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Query != nil {
		w, err = v.Query.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *QueryWorkflowRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.Execution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.Query, err = _WorkflowQuery_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *QueryWorkflowRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.Execution != nil {
		fields[i] = fmt.Sprintf("Execution: %v", v.Execution)
		i++
	}
	if v.Query != nil {
		fields[i] = fmt.Sprintf("Query: %v", v.Query)
		i++
	}
	return fmt.Sprintf("QueryWorkflowRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *QueryWorkflowRequest) Equals(rhs *QueryWorkflowRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.Execution == nil && rhs.Execution == nil) || (v.Execution != nil && rhs.Execution != nil && v.Execution.Equals(rhs.Execution))) {
		return false
	}
	if !((v.Query == nil && rhs.Query == nil) || (v.Query != nil && rhs.Query != nil && v.Query.Equals(rhs.Query))) {
		return false
	}
	return true
}

func (v *QueryWorkflowRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

type QueryWorkflowResponse struct {
	QueryResult []byte `json:"queryResult"`
}

func (v *QueryWorkflowResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.QueryResult != nil {
		w, err = wire.NewValueBinary(v.QueryResult), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *QueryWorkflowResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.QueryResult, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *QueryWorkflowResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.QueryResult != nil {
		fields[i] = fmt.Sprintf("QueryResult: %v", v.QueryResult)
		i++
	}
	return fmt.Sprintf("QueryWorkflowResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *QueryWorkflowResponse) Equals(rhs *QueryWorkflowResponse) bool {
	if !((v.QueryResult == nil && rhs.QueryResult == nil) || (v.QueryResult != nil && rhs.QueryResult != nil && bytes.Equal(v.QueryResult, rhs.QueryResult))) {
		return false
	}
	return true
}

type RecordActivityTaskHeartbeatRequest struct {
	TaskToken []byte  `json:"taskToken"`
	Details   []byte  `json:"details"`
	Identity  *string `json:"identity,omitempty"`
}

func (v *RecordActivityTaskHeartbeatRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RecordActivityTaskHeartbeatRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RecordActivityTaskHeartbeatRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("RecordActivityTaskHeartbeatRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *RecordActivityTaskHeartbeatRequest) Equals(rhs *RecordActivityTaskHeartbeatRequest) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *RecordActivityTaskHeartbeatRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type RecordActivityTaskHeartbeatResponse struct {
	CancelRequested *bool `json:"cancelRequested,omitempty"`
}

func (v *RecordActivityTaskHeartbeatResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.CancelRequested != nil {
		w, err = wire.NewValueBool(*(v.CancelRequested)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RecordActivityTaskHeartbeatResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.CancelRequested = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RecordActivityTaskHeartbeatResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.CancelRequested != nil {
		fields[i] = fmt.Sprintf("CancelRequested: %v", *(v.CancelRequested))
		i++
	}
	return fmt.Sprintf("RecordActivityTaskHeartbeatResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *RecordActivityTaskHeartbeatResponse) Equals(rhs *RecordActivityTaskHeartbeatResponse) bool {
	if !_Bool_EqualsPtr(v.CancelRequested, rhs.CancelRequested) {
		return false
	}
	return true
}

func (v *RecordActivityTaskHeartbeatResponse) GetCancelRequested() (o bool) {
	if v.CancelRequested != nil {
		return *v.CancelRequested
	}
	return
}

type RecordMarkerDecisionAttributes struct {
	MarkerName *string `json:"markerName,omitempty"`
	Details    []byte  `json:"details"`
}

func (v *RecordMarkerDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.MarkerName != nil {
		w, err = wire.NewValueString(*(v.MarkerName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RecordMarkerDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.MarkerName = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RecordMarkerDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.MarkerName != nil {
		fields[i] = fmt.Sprintf("MarkerName: %v", *(v.MarkerName))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	return fmt.Sprintf("RecordMarkerDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *RecordMarkerDecisionAttributes) Equals(rhs *RecordMarkerDecisionAttributes) bool {
	if !_String_EqualsPtr(v.MarkerName, rhs.MarkerName) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	return true
}

func (v *RecordMarkerDecisionAttributes) GetMarkerName() (o string) {
	if v.MarkerName != nil {
		return *v.MarkerName
	}
	return
}

type RegisterDomainRequest struct {
	Name                                   *string `json:"name,omitempty"`
	Description                            *string `json:"description,omitempty"`
	OwnerEmail                             *string `json:"ownerEmail,omitempty"`
	WorkflowExecutionRetentionPeriodInDays *int32  `json:"workflowExecutionRetentionPeriodInDays,omitempty"`
	EmitMetric                             *bool   `json:"emitMetric,omitempty"`
}

func (v *RegisterDomainRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Description != nil {
		w, err = wire.NewValueString(*(v.Description)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.OwnerEmail != nil {
		w, err = wire.NewValueString(*(v.OwnerEmail)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.WorkflowExecutionRetentionPeriodInDays != nil {
		w, err = wire.NewValueI32(*(v.WorkflowExecutionRetentionPeriodInDays)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.EmitMetric != nil {
		w, err = wire.NewValueBool(*(v.EmitMetric)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RegisterDomainRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Description = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.OwnerEmail = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.WorkflowExecutionRetentionPeriodInDays = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.EmitMetric = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RegisterDomainRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Description != nil {
		fields[i] = fmt.Sprintf("Description: %v", *(v.Description))
		i++
	}
	if v.OwnerEmail != nil {
		fields[i] = fmt.Sprintf("OwnerEmail: %v", *(v.OwnerEmail))
		i++
	}
	if v.WorkflowExecutionRetentionPeriodInDays != nil {
		fields[i] = fmt.Sprintf("WorkflowExecutionRetentionPeriodInDays: %v", *(v.WorkflowExecutionRetentionPeriodInDays))
		i++
	}
	if v.EmitMetric != nil {
		fields[i] = fmt.Sprintf("EmitMetric: %v", *(v.EmitMetric))
		i++
	}
	return fmt.Sprintf("RegisterDomainRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *RegisterDomainRequest) Equals(rhs *RegisterDomainRequest) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	if !_String_EqualsPtr(v.Description, rhs.Description) {
		return false
	}
	if !_String_EqualsPtr(v.OwnerEmail, rhs.OwnerEmail) {
		return false
	}
	if !_I32_EqualsPtr(v.WorkflowExecutionRetentionPeriodInDays, rhs.WorkflowExecutionRetentionPeriodInDays) {
		return false
	}
	if !_Bool_EqualsPtr(v.EmitMetric, rhs.EmitMetric) {
		return false
	}
	return true
}

func (v *RegisterDomainRequest) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}

func (v *RegisterDomainRequest) GetDescription() (o string) {
	if v.Description != nil {
		return *v.Description
	}
	return
}

func (v *RegisterDomainRequest) GetOwnerEmail() (o string) {
	if v.OwnerEmail != nil {
		return *v.OwnerEmail
	}
	return
}

func (v *RegisterDomainRequest) GetWorkflowExecutionRetentionPeriodInDays() (o int32) {
	if v.WorkflowExecutionRetentionPeriodInDays != nil {
		return *v.WorkflowExecutionRetentionPeriodInDays
	}
	return
}

func (v *RegisterDomainRequest) GetEmitMetric() (o bool) {
	if v.EmitMetric != nil {
		return *v.EmitMetric
	}
	return
}

type RequestCancelActivityTaskDecisionAttributes struct {
	ActivityId *string `json:"activityId,omitempty"`
}

func (v *RequestCancelActivityTaskDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequestCancelActivityTaskDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RequestCancelActivityTaskDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	return fmt.Sprintf("RequestCancelActivityTaskDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequestCancelActivityTaskDecisionAttributes) Equals(rhs *RequestCancelActivityTaskDecisionAttributes) bool {
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	return true
}

func (v *RequestCancelActivityTaskDecisionAttributes) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

type RequestCancelActivityTaskFailedEventAttributes struct {
	ActivityId                   *string `json:"activityId,omitempty"`
	Cause                        *string `json:"cause,omitempty"`
	DecisionTaskCompletedEventId *int64  `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *RequestCancelActivityTaskFailedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Cause != nil {
		w, err = wire.NewValueString(*(v.Cause)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequestCancelActivityTaskFailedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Cause = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RequestCancelActivityTaskFailedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	if v.Cause != nil {
		fields[i] = fmt.Sprintf("Cause: %v", *(v.Cause))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("RequestCancelActivityTaskFailedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequestCancelActivityTaskFailedEventAttributes) Equals(rhs *RequestCancelActivityTaskFailedEventAttributes) bool {
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	if !_String_EqualsPtr(v.Cause, rhs.Cause) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *RequestCancelActivityTaskFailedEventAttributes) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

func (v *RequestCancelActivityTaskFailedEventAttributes) GetCause() (o string) {
	if v.Cause != nil {
		return *v.Cause
	}
	return
}

func (v *RequestCancelActivityTaskFailedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type RequestCancelActivityTaskFailedEventFilter struct{}

func (v *RequestCancelActivityTaskFailedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequestCancelActivityTaskFailedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *RequestCancelActivityTaskFailedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("RequestCancelActivityTaskFailedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequestCancelActivityTaskFailedEventFilter) Equals(rhs *RequestCancelActivityTaskFailedEventFilter) bool {
	return true
}

type RequestCancelExternalWorkflowExecutionDecisionAttributes struct {
	Domain     *string `json:"domain,omitempty"`
	WorkflowId *string `json:"workflowId,omitempty"`
	RunId      *string `json:"runId,omitempty"`
	Control    []byte  `json:"control"`
}

func (v *RequestCancelExternalWorkflowExecutionDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.RunId != nil {
		w, err = wire.NewValueString(*(v.RunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Control != nil {
		w, err = wire.NewValueBinary(v.Control), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequestCancelExternalWorkflowExecutionDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunId = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				v.Control, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RequestCancelExternalWorkflowExecutionDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.RunId != nil {
		fields[i] = fmt.Sprintf("RunId: %v", *(v.RunId))
		i++
	}
	if v.Control != nil {
		fields[i] = fmt.Sprintf("Control: %v", v.Control)
		i++
	}
	return fmt.Sprintf("RequestCancelExternalWorkflowExecutionDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequestCancelExternalWorkflowExecutionDecisionAttributes) Equals(rhs *RequestCancelExternalWorkflowExecutionDecisionAttributes) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !_String_EqualsPtr(v.RunId, rhs.RunId) {
		return false
	}
	if !((v.Control == nil && rhs.Control == nil) || (v.Control != nil && rhs.Control != nil && bytes.Equal(v.Control, rhs.Control))) {
		return false
	}
	return true
}

func (v *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

func (v *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetRunId() (o string) {
	if v.RunId != nil {
		return *v.RunId
	}
	return
}

type RequestCancelExternalWorkflowExecutionFailedEventAttributes struct {
	Cause                        *CancelExternalWorkflowExecutionFailedCause `json:"cause,omitempty"`
	DecisionTaskCompletedEventId *int64                                      `json:"decisionTaskCompletedEventId,omitempty"`
	Domain                       *string                                     `json:"domain,omitempty"`
	WorkflowExecution            *WorkflowExecution                          `json:"workflowExecution,omitempty"`
	InitiatedEventId             *int64                                      `json:"initiatedEventId,omitempty"`
	Control                      []byte                                      `json:"control"`
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Cause != nil {
		w, err = v.Cause.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.Control != nil {
		w, err = wire.NewValueBinary(v.Control), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _CancelExternalWorkflowExecutionFailedCause_Read(w wire.Value) (CancelExternalWorkflowExecutionFailedCause, error) {
	var v CancelExternalWorkflowExecutionFailedCause
	err := v.FromWire(w)
	return v, err
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x CancelExternalWorkflowExecutionFailedCause
				x, err = _CancelExternalWorkflowExecutionFailedCause_Read(field.Value)
				v.Cause = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TBinary {
				v.Control, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [6]string
	i := 0
	if v.Cause != nil {
		fields[i] = fmt.Sprintf("Cause: %v", *(v.Cause))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.Control != nil {
		fields[i] = fmt.Sprintf("Control: %v", v.Control)
		i++
	}
	return fmt.Sprintf("RequestCancelExternalWorkflowExecutionFailedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _CancelExternalWorkflowExecutionFailedCause_EqualsPtr(lhs, rhs *CancelExternalWorkflowExecutionFailedCause) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Equals(rhs *RequestCancelExternalWorkflowExecutionFailedEventAttributes) bool {
	if !_CancelExternalWorkflowExecutionFailedCause_EqualsPtr(v.Cause, rhs.Cause) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !((v.Control == nil && rhs.Control == nil) || (v.Control != nil && rhs.Control != nil && bytes.Equal(v.Control, rhs.Control))) {
		return false
	}
	return true
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetCause() (o CancelExternalWorkflowExecutionFailedCause) {
	if v.Cause != nil {
		return *v.Cause
	}
	return
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

type RequestCancelExternalWorkflowExecutionFailedEventFilter struct{}

func (v *RequestCancelExternalWorkflowExecutionFailedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("RequestCancelExternalWorkflowExecutionFailedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequestCancelExternalWorkflowExecutionFailedEventFilter) Equals(rhs *RequestCancelExternalWorkflowExecutionFailedEventFilter) bool {
	return true
}

type RequestCancelExternalWorkflowExecutionInitiatedEventAttributes struct {
	DecisionTaskCompletedEventId *int64             `json:"decisionTaskCompletedEventId,omitempty"`
	Domain                       *string            `json:"domain,omitempty"`
	WorkflowExecution            *WorkflowExecution `json:"workflowExecution,omitempty"`
	Control                      []byte             `json:"control"`
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Control != nil {
		w, err = wire.NewValueBinary(v.Control), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				v.Control, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.Control != nil {
		fields[i] = fmt.Sprintf("Control: %v", v.Control)
		i++
	}
	return fmt.Sprintf("RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Equals(rhs *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) bool {
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !((v.Control == nil && rhs.Control == nil) || (v.Control != nil && rhs.Control != nil && bytes.Equal(v.Control, rhs.Control))) {
		return false
	}
	return true
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

type RequestCancelExternalWorkflowExecutionInitiatedEventFilter struct{}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("RequestCancelExternalWorkflowExecutionInitiatedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequestCancelExternalWorkflowExecutionInitiatedEventFilter) Equals(rhs *RequestCancelExternalWorkflowExecutionInitiatedEventFilter) bool {
	return true
}

type RequestCancelWorkflowExecutionRequest struct {
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	Identity          *string            `json:"identity,omitempty"`
	RequestId         *string            `json:"requestId,omitempty"`
}

func (v *RequestCancelWorkflowExecutionRequest) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.RequestId != nil {
		w, err = wire.NewValueString(*(v.RequestId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequestCancelWorkflowExecutionRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RequestId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RequestCancelWorkflowExecutionRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	if v.RequestId != nil {
		fields[i] = fmt.Sprintf("RequestId: %v", *(v.RequestId))
		i++
	}
	return fmt.Sprintf("RequestCancelWorkflowExecutionRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequestCancelWorkflowExecutionRequest) Equals(rhs *RequestCancelWorkflowExecutionRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	if !_String_EqualsPtr(v.RequestId, rhs.RequestId) {
		return false
	}
	return true
}

func (v *RequestCancelWorkflowExecutionRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *RequestCancelWorkflowExecutionRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

func (v *RequestCancelWorkflowExecutionRequest) GetRequestId() (o string) {
	if v.RequestId != nil {
		return *v.RequestId
	}
	return
}

type RespondActivityTaskCanceledRequest struct {
	TaskToken []byte  `json:"taskToken"`
	Details   []byte  `json:"details"`
	Identity  *string `json:"identity,omitempty"`
}

func (v *RespondActivityTaskCanceledRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RespondActivityTaskCanceledRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RespondActivityTaskCanceledRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("RespondActivityTaskCanceledRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *RespondActivityTaskCanceledRequest) Equals(rhs *RespondActivityTaskCanceledRequest) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *RespondActivityTaskCanceledRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type RespondActivityTaskCompletedRequest struct {
	TaskToken []byte  `json:"taskToken"`
	Result    []byte  `json:"result"`
	Identity  *string `json:"identity,omitempty"`
}

func (v *RespondActivityTaskCompletedRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Result != nil {
		w, err = wire.NewValueBinary(v.Result), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RespondActivityTaskCompletedRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Result, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RespondActivityTaskCompletedRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.Result != nil {
		fields[i] = fmt.Sprintf("Result: %v", v.Result)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("RespondActivityTaskCompletedRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *RespondActivityTaskCompletedRequest) Equals(rhs *RespondActivityTaskCompletedRequest) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !((v.Result == nil && rhs.Result == nil) || (v.Result != nil && rhs.Result != nil && bytes.Equal(v.Result, rhs.Result))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *RespondActivityTaskCompletedRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type RespondActivityTaskFailedRequest struct {
	TaskToken []byte  `json:"taskToken"`
	Reason    *string `json:"reason,omitempty"`
	Details   []byte  `json:"details"`
	Identity  *string `json:"identity,omitempty"`
}

func (v *RespondActivityTaskFailedRequest) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Reason != nil {
		w, err = wire.NewValueString(*(v.Reason)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RespondActivityTaskFailedRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Reason = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RespondActivityTaskFailedRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.Reason != nil {
		fields[i] = fmt.Sprintf("Reason: %v", *(v.Reason))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("RespondActivityTaskFailedRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *RespondActivityTaskFailedRequest) Equals(rhs *RespondActivityTaskFailedRequest) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !_String_EqualsPtr(v.Reason, rhs.Reason) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *RespondActivityTaskFailedRequest) GetReason() (o string) {
	if v.Reason != nil {
		return *v.Reason
	}
	return
}

func (v *RespondActivityTaskFailedRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type RespondDecisionTaskCompletedRequest struct {
	TaskToken        []byte                     `json:"taskToken"`
	Decisions        []*Decision                `json:"decisions"`
	ExecutionContext []byte                     `json:"executionContext"`
	Identity         *string                    `json:"identity,omitempty"`
	StickyAttributes *StickyExecutionAttributes `json:"stickyAttributes,omitempty"`
}

type _List_Decision_ValueList []*Decision

func (v _List_Decision_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Decision_ValueList) Size() int {
	return len(v)
}

func (_List_Decision_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_Decision_ValueList) Close() {
}

func (v *RespondDecisionTaskCompletedRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Decisions != nil {
		w, err = wire.NewValueList(_List_Decision_ValueList(v.Decisions)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.ExecutionContext != nil {
		w, err = wire.NewValueBinary(v.ExecutionContext), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.StickyAttributes != nil {
		w, err = v.StickyAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Decision_Read(w wire.Value) (*Decision, error) {
	var v Decision
	err := v.FromWire(w)
	return &v, err
}

func _List_Decision_Read(l wire.ValueList) ([]*Decision, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*Decision, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Decision_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _StickyExecutionAttributes_Read(w wire.Value) (*StickyExecutionAttributes, error) {
	var v StickyExecutionAttributes
	err := v.FromWire(w)
	return &v, err
}

func (v *RespondDecisionTaskCompletedRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TList {
				v.Decisions, err = _List_Decision_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				v.ExecutionContext, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.StickyAttributes, err = _StickyExecutionAttributes_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RespondDecisionTaskCompletedRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.Decisions != nil {
		fields[i] = fmt.Sprintf("Decisions: %v", v.Decisions)
		i++
	}
	if v.ExecutionContext != nil {
		fields[i] = fmt.Sprintf("ExecutionContext: %v", v.ExecutionContext)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	if v.StickyAttributes != nil {
		fields[i] = fmt.Sprintf("StickyAttributes: %v", v.StickyAttributes)
		i++
	}
	return fmt.Sprintf("RespondDecisionTaskCompletedRequest{%v}", strings.Join(fields[:i], ", "))
}

func _List_Decision_Equals(lhs, rhs []*Decision) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func (v *RespondDecisionTaskCompletedRequest) Equals(rhs *RespondDecisionTaskCompletedRequest) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !((v.Decisions == nil && rhs.Decisions == nil) || (v.Decisions != nil && rhs.Decisions != nil && _List_Decision_Equals(v.Decisions, rhs.Decisions))) {
		return false
	}
	if !((v.ExecutionContext == nil && rhs.ExecutionContext == nil) || (v.ExecutionContext != nil && rhs.ExecutionContext != nil && bytes.Equal(v.ExecutionContext, rhs.ExecutionContext))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	if !((v.StickyAttributes == nil && rhs.StickyAttributes == nil) || (v.StickyAttributes != nil && rhs.StickyAttributes != nil && v.StickyAttributes.Equals(rhs.StickyAttributes))) {
		return false
	}
	return true
}

func (v *RespondDecisionTaskCompletedRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type RespondDecisionTaskFailedRequest struct {
	TaskToken []byte                   `json:"taskToken"`
	Cause     *DecisionTaskFailedCause `json:"cause,omitempty"`
	Details   []byte                   `json:"details"`
	Identity  *string                  `json:"identity,omitempty"`
}

func (v *RespondDecisionTaskFailedRequest) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Cause != nil {
		w, err = v.Cause.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RespondDecisionTaskFailedRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI32 {
				var x DecisionTaskFailedCause
				x, err = _DecisionTaskFailedCause_Read(field.Value)
				v.Cause = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RespondDecisionTaskFailedRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.Cause != nil {
		fields[i] = fmt.Sprintf("Cause: %v", *(v.Cause))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("RespondDecisionTaskFailedRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *RespondDecisionTaskFailedRequest) Equals(rhs *RespondDecisionTaskFailedRequest) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !_DecisionTaskFailedCause_EqualsPtr(v.Cause, rhs.Cause) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *RespondDecisionTaskFailedRequest) GetCause() (o DecisionTaskFailedCause) {
	if v.Cause != nil {
		return *v.Cause
	}
	return
}

func (v *RespondDecisionTaskFailedRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type RespondQueryTaskCompletedRequest struct {
	TaskToken     []byte                  `json:"taskToken"`
	CompletedType *QueryTaskCompletedType `json:"completedType,omitempty"`
	QueryResult   []byte                  `json:"queryResult"`
	ErrorMessage  *string                 `json:"errorMessage,omitempty"`
}

func (v *RespondQueryTaskCompletedRequest) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskToken != nil {
		w, err = wire.NewValueBinary(v.TaskToken), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.CompletedType != nil {
		w, err = v.CompletedType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.QueryResult != nil {
		w, err = wire.NewValueBinary(v.QueryResult), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.ErrorMessage != nil {
		w, err = wire.NewValueString(*(v.ErrorMessage)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _QueryTaskCompletedType_Read(w wire.Value) (QueryTaskCompletedType, error) {
	var v QueryTaskCompletedType
	err := v.FromWire(w)
	return v, err
}

func (v *RespondQueryTaskCompletedRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.TaskToken, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI32 {
				var x QueryTaskCompletedType
				x, err = _QueryTaskCompletedType_Read(field.Value)
				v.CompletedType = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				v.QueryResult, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ErrorMessage = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RespondQueryTaskCompletedRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.TaskToken != nil {
		fields[i] = fmt.Sprintf("TaskToken: %v", v.TaskToken)
		i++
	}
	if v.CompletedType != nil {
		fields[i] = fmt.Sprintf("CompletedType: %v", *(v.CompletedType))
		i++
	}
	if v.QueryResult != nil {
		fields[i] = fmt.Sprintf("QueryResult: %v", v.QueryResult)
		i++
	}
	if v.ErrorMessage != nil {
		fields[i] = fmt.Sprintf("ErrorMessage: %v", *(v.ErrorMessage))
		i++
	}
	return fmt.Sprintf("RespondQueryTaskCompletedRequest{%v}", strings.Join(fields[:i], ", "))
}

func _QueryTaskCompletedType_EqualsPtr(lhs, rhs *QueryTaskCompletedType) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *RespondQueryTaskCompletedRequest) Equals(rhs *RespondQueryTaskCompletedRequest) bool {
	if !((v.TaskToken == nil && rhs.TaskToken == nil) || (v.TaskToken != nil && rhs.TaskToken != nil && bytes.Equal(v.TaskToken, rhs.TaskToken))) {
		return false
	}
	if !_QueryTaskCompletedType_EqualsPtr(v.CompletedType, rhs.CompletedType) {
		return false
	}
	if !((v.QueryResult == nil && rhs.QueryResult == nil) || (v.QueryResult != nil && rhs.QueryResult != nil && bytes.Equal(v.QueryResult, rhs.QueryResult))) {
		return false
	}
	if !_String_EqualsPtr(v.ErrorMessage, rhs.ErrorMessage) {
		return false
	}
	return true
}

func (v *RespondQueryTaskCompletedRequest) GetCompletedType() (o QueryTaskCompletedType) {
	if v.CompletedType != nil {
		return *v.CompletedType
	}
	return
}

func (v *RespondQueryTaskCompletedRequest) GetErrorMessage() (o string) {
	if v.ErrorMessage != nil {
		return *v.ErrorMessage
	}
	return
}

type ScheduleActivityTaskDecisionAttributes struct {
	ActivityId                    *string       `json:"activityId,omitempty"`
	ActivityType                  *ActivityType `json:"activityType,omitempty"`
	Domain                        *string       `json:"domain,omitempty"`
	TaskList                      *TaskList     `json:"taskList,omitempty"`
	Input                         []byte        `json:"input"`
	ScheduleToCloseTimeoutSeconds *int32        `json:"scheduleToCloseTimeoutSeconds,omitempty"`
	ScheduleToStartTimeoutSeconds *int32        `json:"scheduleToStartTimeoutSeconds,omitempty"`
	StartToCloseTimeoutSeconds    *int32        `json:"startToCloseTimeoutSeconds,omitempty"`
	HeartbeatTimeoutSeconds       *int32        `json:"heartbeatTimeoutSeconds,omitempty"`
}

func (v *ScheduleActivityTaskDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ActivityId != nil {
		w, err = wire.NewValueString(*(v.ActivityId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ActivityType != nil {
		w, err = v.ActivityType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 25, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.ScheduleToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ScheduleToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 45, Value: w}
		i++
	}
	if v.ScheduleToStartTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ScheduleToStartTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.StartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.StartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 55, Value: w}
		i++
	}
	if v.HeartbeatTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.HeartbeatTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ScheduleActivityTaskDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ActivityId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.ActivityType, err = _ActivityType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 25:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 45:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ScheduleToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ScheduleToStartTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 55:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.StartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.HeartbeatTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ScheduleActivityTaskDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	if v.ActivityId != nil {
		fields[i] = fmt.Sprintf("ActivityId: %v", *(v.ActivityId))
		i++
	}
	if v.ActivityType != nil {
		fields[i] = fmt.Sprintf("ActivityType: %v", v.ActivityType)
		i++
	}
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ScheduleToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ScheduleToCloseTimeoutSeconds: %v", *(v.ScheduleToCloseTimeoutSeconds))
		i++
	}
	if v.ScheduleToStartTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ScheduleToStartTimeoutSeconds: %v", *(v.ScheduleToStartTimeoutSeconds))
		i++
	}
	if v.StartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("StartToCloseTimeoutSeconds: %v", *(v.StartToCloseTimeoutSeconds))
		i++
	}
	if v.HeartbeatTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("HeartbeatTimeoutSeconds: %v", *(v.HeartbeatTimeoutSeconds))
		i++
	}
	return fmt.Sprintf("ScheduleActivityTaskDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *ScheduleActivityTaskDecisionAttributes) Equals(rhs *ScheduleActivityTaskDecisionAttributes) bool {
	if !_String_EqualsPtr(v.ActivityId, rhs.ActivityId) {
		return false
	}
	if !((v.ActivityType == nil && rhs.ActivityType == nil) || (v.ActivityType != nil && rhs.ActivityType != nil && v.ActivityType.Equals(rhs.ActivityType))) {
		return false
	}
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I32_EqualsPtr(v.ScheduleToCloseTimeoutSeconds, rhs.ScheduleToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.ScheduleToStartTimeoutSeconds, rhs.ScheduleToStartTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.StartToCloseTimeoutSeconds, rhs.StartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.HeartbeatTimeoutSeconds, rhs.HeartbeatTimeoutSeconds) {
		return false
	}
	return true
}

func (v *ScheduleActivityTaskDecisionAttributes) GetActivityId() (o string) {
	if v.ActivityId != nil {
		return *v.ActivityId
	}
	return
}

func (v *ScheduleActivityTaskDecisionAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *ScheduleActivityTaskDecisionAttributes) GetScheduleToCloseTimeoutSeconds() (o int32) {
	if v.ScheduleToCloseTimeoutSeconds != nil {
		return *v.ScheduleToCloseTimeoutSeconds
	}
	return
}

func (v *ScheduleActivityTaskDecisionAttributes) GetScheduleToStartTimeoutSeconds() (o int32) {
	if v.ScheduleToStartTimeoutSeconds != nil {
		return *v.ScheduleToStartTimeoutSeconds
	}
	return
}

func (v *ScheduleActivityTaskDecisionAttributes) GetStartToCloseTimeoutSeconds() (o int32) {
	if v.StartToCloseTimeoutSeconds != nil {
		return *v.StartToCloseTimeoutSeconds
	}
	return
}

func (v *ScheduleActivityTaskDecisionAttributes) GetHeartbeatTimeoutSeconds() (o int32) {
	if v.HeartbeatTimeoutSeconds != nil {
		return *v.HeartbeatTimeoutSeconds
	}
	return
}

type ServiceBusyError struct {
	Message string `json:"message,required"`
}

func (v *ServiceBusyError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ServiceBusyError) FromWire(w wire.Value) error {
	var err error
	messageIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		}
	}
	if !messageIsSet {
		return errors.New("field Message of ServiceBusyError is required")
	}
	return nil
}

func (v *ServiceBusyError) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	return fmt.Sprintf("ServiceBusyError{%v}", strings.Join(fields[:i], ", "))
}

func (v *ServiceBusyError) Equals(rhs *ServiceBusyError) bool {
	if !(v.Message == rhs.Message) {
		return false
	}
	return true
}

func (v *ServiceBusyError) Error() string {
	return v.String()
}

type SignalWorkflowExecutionRequest struct {
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	SignalName        *string            `json:"signalName,omitempty"`
	Input             []byte             `json:"input"`
	Identity          *string            `json:"identity,omitempty"`
}

func (v *SignalWorkflowExecutionRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.SignalName != nil {
		w, err = wire.NewValueString(*(v.SignalName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *SignalWorkflowExecutionRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.SignalName = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *SignalWorkflowExecutionRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.SignalName != nil {
		fields[i] = fmt.Sprintf("SignalName: %v", *(v.SignalName))
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("SignalWorkflowExecutionRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *SignalWorkflowExecutionRequest) Equals(rhs *SignalWorkflowExecutionRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !_String_EqualsPtr(v.SignalName, rhs.SignalName) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *SignalWorkflowExecutionRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *SignalWorkflowExecutionRequest) GetSignalName() (o string) {
	if v.SignalName != nil {
		return *v.SignalName
	}
	return
}

func (v *SignalWorkflowExecutionRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type StartChildWorkflowExecutionDecisionAttributes struct {
	Domain                              *string       `json:"domain,omitempty"`
	WorkflowId                          *string       `json:"workflowId,omitempty"`
	WorkflowType                        *WorkflowType `json:"workflowType,omitempty"`
	TaskList                            *TaskList     `json:"taskList,omitempty"`
	Input                               []byte        `json:"input"`
	ExecutionStartToCloseTimeoutSeconds *int32        `json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      *int32        `json:"taskStartToCloseTimeoutSeconds,omitempty"`
	ChildPolicy                         *ChildPolicy  `json:"childPolicy,omitempty"`
	Control                             []byte        `json:"control"`
}

func (v *StartChildWorkflowExecutionDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ExecutionStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.TaskStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.ChildPolicy != nil {
		w, err = v.ChildPolicy.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.Control != nil {
		w, err = wire.NewValueBinary(v.Control), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ChildPolicy_Read(w wire.Value) (ChildPolicy, error) {
	var v ChildPolicy
	err := v.FromWire(w)
	return v, err
}

func (v *StartChildWorkflowExecutionDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ExecutionStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.TaskStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 80:
			if field.Value.Type() == wire.TI32 {
				var x ChildPolicy
				x, err = _ChildPolicy_Read(field.Value)
				v.ChildPolicy = &x
				if err != nil {
					return err
				}
			}
		case 90:
			if field.Value.Type() == wire.TBinary {
				v.Control, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartChildWorkflowExecutionDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ExecutionStartToCloseTimeoutSeconds: %v", *(v.ExecutionStartToCloseTimeoutSeconds))
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("TaskStartToCloseTimeoutSeconds: %v", *(v.TaskStartToCloseTimeoutSeconds))
		i++
	}
	if v.ChildPolicy != nil {
		fields[i] = fmt.Sprintf("ChildPolicy: %v", *(v.ChildPolicy))
		i++
	}
	if v.Control != nil {
		fields[i] = fmt.Sprintf("Control: %v", v.Control)
		i++
	}
	return fmt.Sprintf("StartChildWorkflowExecutionDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _ChildPolicy_EqualsPtr(lhs, rhs *ChildPolicy) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *StartChildWorkflowExecutionDecisionAttributes) Equals(rhs *StartChildWorkflowExecutionDecisionAttributes) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I32_EqualsPtr(v.ExecutionStartToCloseTimeoutSeconds, rhs.ExecutionStartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.TaskStartToCloseTimeoutSeconds, rhs.TaskStartToCloseTimeoutSeconds) {
		return false
	}
	if !_ChildPolicy_EqualsPtr(v.ChildPolicy, rhs.ChildPolicy) {
		return false
	}
	if !((v.Control == nil && rhs.Control == nil) || (v.Control != nil && rhs.Control != nil && bytes.Equal(v.Control, rhs.Control))) {
		return false
	}
	return true
}

func (v *StartChildWorkflowExecutionDecisionAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

func (v *StartChildWorkflowExecutionDecisionAttributes) GetExecutionStartToCloseTimeoutSeconds() (o int32) {
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		return *v.ExecutionStartToCloseTimeoutSeconds
	}
	return
}

func (v *StartChildWorkflowExecutionDecisionAttributes) GetTaskStartToCloseTimeoutSeconds() (o int32) {
	if v.TaskStartToCloseTimeoutSeconds != nil {
		return *v.TaskStartToCloseTimeoutSeconds
	}
	return
}

func (v *StartChildWorkflowExecutionDecisionAttributes) GetChildPolicy() (o ChildPolicy) {
	if v.ChildPolicy != nil {
		return *v.ChildPolicy
	}
	return
}

type StartChildWorkflowExecutionFailedEventAttributes struct {
	Domain                       *string                            `json:"domain,omitempty"`
	WorkflowId                   *string                            `json:"workflowId,omitempty"`
	WorkflowType                 *WorkflowType                      `json:"workflowType,omitempty"`
	Cause                        *ChildWorkflowExecutionFailedCause `json:"cause,omitempty"`
	Control                      []byte                             `json:"control"`
	InitiatedEventId             *int64                             `json:"initiatedEventId,omitempty"`
	DecisionTaskCompletedEventId *int64                             `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [7]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Cause != nil {
		w, err = v.Cause.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Control != nil {
		w, err = wire.NewValueBinary(v.Control), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.InitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.InitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ChildWorkflowExecutionFailedCause_Read(w wire.Value) (ChildWorkflowExecutionFailedCause, error) {
	var v ChildWorkflowExecutionFailedCause
	err := v.FromWire(w)
	return v, err
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI32 {
				var x ChildWorkflowExecutionFailedCause
				x, err = _ChildWorkflowExecutionFailedCause_Read(field.Value)
				v.Cause = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				v.Control, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.InitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [7]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.Cause != nil {
		fields[i] = fmt.Sprintf("Cause: %v", *(v.Cause))
		i++
	}
	if v.Control != nil {
		fields[i] = fmt.Sprintf("Control: %v", v.Control)
		i++
	}
	if v.InitiatedEventId != nil {
		fields[i] = fmt.Sprintf("InitiatedEventId: %v", *(v.InitiatedEventId))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("StartChildWorkflowExecutionFailedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _ChildWorkflowExecutionFailedCause_EqualsPtr(lhs, rhs *ChildWorkflowExecutionFailedCause) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) Equals(rhs *StartChildWorkflowExecutionFailedEventAttributes) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_ChildWorkflowExecutionFailedCause_EqualsPtr(v.Cause, rhs.Cause) {
		return false
	}
	if !((v.Control == nil && rhs.Control == nil) || (v.Control != nil && rhs.Control != nil && bytes.Equal(v.Control, rhs.Control))) {
		return false
	}
	if !_I64_EqualsPtr(v.InitiatedEventId, rhs.InitiatedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) GetCause() (o ChildWorkflowExecutionFailedCause) {
	if v.Cause != nil {
		return *v.Cause
	}
	return
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() (o int64) {
	if v.InitiatedEventId != nil {
		return *v.InitiatedEventId
	}
	return
}

func (v *StartChildWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type StartChildWorkflowExecutionFailedEventFilter struct {
	WorkflowType *WorkflowType `json:"workflowType,omitempty"`
	WorkflowId   *string       `json:"workflowId,omitempty"`
}

func (v *StartChildWorkflowExecutionFailedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *StartChildWorkflowExecutionFailedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartChildWorkflowExecutionFailedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("StartChildWorkflowExecutionFailedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *StartChildWorkflowExecutionFailedEventFilter) Equals(rhs *StartChildWorkflowExecutionFailedEventFilter) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *StartChildWorkflowExecutionFailedEventFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type StartChildWorkflowExecutionInitiatedEventAttributes struct {
	Domain                              *string       `json:"domain,omitempty"`
	WorkflowId                          *string       `json:"workflowId,omitempty"`
	WorkflowType                        *WorkflowType `json:"workflowType,omitempty"`
	TaskList                            *TaskList     `json:"taskList,omitempty"`
	Input                               []byte        `json:"input"`
	ExecutionStartToCloseTimeoutSeconds *int32        `json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      *int32        `json:"taskStartToCloseTimeoutSeconds,omitempty"`
	ChildPolicy                         *ChildPolicy  `json:"childPolicy,omitempty"`
	Control                             []byte        `json:"control"`
	DecisionTaskCompletedEventId        *int64        `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [10]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ExecutionStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.TaskStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.ChildPolicy != nil {
		w, err = v.ChildPolicy.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.Control != nil {
		w, err = wire.NewValueBinary(v.Control), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 100, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ExecutionStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.TaskStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 80:
			if field.Value.Type() == wire.TI32 {
				var x ChildPolicy
				x, err = _ChildPolicy_Read(field.Value)
				v.ChildPolicy = &x
				if err != nil {
					return err
				}
			}
		case 90:
			if field.Value.Type() == wire.TBinary {
				v.Control, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 100:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [10]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ExecutionStartToCloseTimeoutSeconds: %v", *(v.ExecutionStartToCloseTimeoutSeconds))
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("TaskStartToCloseTimeoutSeconds: %v", *(v.TaskStartToCloseTimeoutSeconds))
		i++
	}
	if v.ChildPolicy != nil {
		fields[i] = fmt.Sprintf("ChildPolicy: %v", *(v.ChildPolicy))
		i++
	}
	if v.Control != nil {
		fields[i] = fmt.Sprintf("Control: %v", v.Control)
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("StartChildWorkflowExecutionInitiatedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) Equals(rhs *StartChildWorkflowExecutionInitiatedEventAttributes) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I32_EqualsPtr(v.ExecutionStartToCloseTimeoutSeconds, rhs.ExecutionStartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.TaskStartToCloseTimeoutSeconds, rhs.TaskStartToCloseTimeoutSeconds) {
		return false
	}
	if !_ChildPolicy_EqualsPtr(v.ChildPolicy, rhs.ChildPolicy) {
		return false
	}
	if !((v.Control == nil && rhs.Control == nil) || (v.Control != nil && rhs.Control != nil && bytes.Equal(v.Control, rhs.Control))) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) GetExecutionStartToCloseTimeoutSeconds() (o int32) {
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		return *v.ExecutionStartToCloseTimeoutSeconds
	}
	return
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) GetTaskStartToCloseTimeoutSeconds() (o int32) {
	if v.TaskStartToCloseTimeoutSeconds != nil {
		return *v.TaskStartToCloseTimeoutSeconds
	}
	return
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) GetChildPolicy() (o ChildPolicy) {
	if v.ChildPolicy != nil {
		return *v.ChildPolicy
	}
	return
}

func (v *StartChildWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type StartChildWorkflowExecutionInitiatedEventFilter struct {
	WorkflowType *WorkflowType `json:"workflowType,omitempty"`
	WorkflowId   *string       `json:"workflowId,omitempty"`
}

func (v *StartChildWorkflowExecutionInitiatedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *StartChildWorkflowExecutionInitiatedEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartChildWorkflowExecutionInitiatedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("StartChildWorkflowExecutionInitiatedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *StartChildWorkflowExecutionInitiatedEventFilter) Equals(rhs *StartChildWorkflowExecutionInitiatedEventFilter) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *StartChildWorkflowExecutionInitiatedEventFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type StartTimeFilter struct {
	EarliestTime *int64 `json:"earliestTime,omitempty"`
	LatestTime   *int64 `json:"latestTime,omitempty"`
}

func (v *StartTimeFilter) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.EarliestTime != nil {
		w, err = wire.NewValueI64(*(v.EarliestTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.LatestTime != nil {
		w, err = wire.NewValueI64(*(v.LatestTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *StartTimeFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.EarliestTime = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.LatestTime = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartTimeFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.EarliestTime != nil {
		fields[i] = fmt.Sprintf("EarliestTime: %v", *(v.EarliestTime))
		i++
	}
	if v.LatestTime != nil {
		fields[i] = fmt.Sprintf("LatestTime: %v", *(v.LatestTime))
		i++
	}
	return fmt.Sprintf("StartTimeFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *StartTimeFilter) Equals(rhs *StartTimeFilter) bool {
	if !_I64_EqualsPtr(v.EarliestTime, rhs.EarliestTime) {
		return false
	}
	if !_I64_EqualsPtr(v.LatestTime, rhs.LatestTime) {
		return false
	}
	return true
}

func (v *StartTimeFilter) GetEarliestTime() (o int64) {
	if v.EarliestTime != nil {
		return *v.EarliestTime
	}
	return
}

func (v *StartTimeFilter) GetLatestTime() (o int64) {
	if v.LatestTime != nil {
		return *v.LatestTime
	}
	return
}

type StartTimerDecisionAttributes struct {
	TimerId                   *string `json:"timerId,omitempty"`
	StartToFireTimeoutSeconds *int64  `json:"startToFireTimeoutSeconds,omitempty"`
}

func (v *StartTimerDecisionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TimerId != nil {
		w, err = wire.NewValueString(*(v.TimerId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartToFireTimeoutSeconds != nil {
		w, err = wire.NewValueI64(*(v.StartToFireTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *StartTimerDecisionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.TimerId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartToFireTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartTimerDecisionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.TimerId != nil {
		fields[i] = fmt.Sprintf("TimerId: %v", *(v.TimerId))
		i++
	}
	if v.StartToFireTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("StartToFireTimeoutSeconds: %v", *(v.StartToFireTimeoutSeconds))
		i++
	}
	return fmt.Sprintf("StartTimerDecisionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *StartTimerDecisionAttributes) Equals(rhs *StartTimerDecisionAttributes) bool {
	if !_String_EqualsPtr(v.TimerId, rhs.TimerId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartToFireTimeoutSeconds, rhs.StartToFireTimeoutSeconds) {
		return false
	}
	return true
}

func (v *StartTimerDecisionAttributes) GetTimerId() (o string) {
	if v.TimerId != nil {
		return *v.TimerId
	}
	return
}

func (v *StartTimerDecisionAttributes) GetStartToFireTimeoutSeconds() (o int64) {
	if v.StartToFireTimeoutSeconds != nil {
		return *v.StartToFireTimeoutSeconds
	}
	return
}

type StartWorkflowExecutionRequest struct {
	Domain                              *string       `json:"domain,omitempty"`
	WorkflowId                          *string       `json:"workflowId,omitempty"`
	WorkflowType                        *WorkflowType `json:"workflowType,omitempty"`
	TaskList                            *TaskList     `json:"taskList,omitempty"`
	Input                               []byte        `json:"input"`
	ExecutionStartToCloseTimeoutSeconds *int32        `json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      *int32        `json:"taskStartToCloseTimeoutSeconds,omitempty"`
	Identity                            *string       `json:"identity,omitempty"`
	RequestId                           *string       `json:"requestId,omitempty"`
}

func (v *StartWorkflowExecutionRequest) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ExecutionStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.TaskStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.RequestId != nil {
		w, err = wire.NewValueString(*(v.RequestId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *StartWorkflowExecutionRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ExecutionStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.TaskStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 80:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		case 90:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RequestId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartWorkflowExecutionRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ExecutionStartToCloseTimeoutSeconds: %v", *(v.ExecutionStartToCloseTimeoutSeconds))
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("TaskStartToCloseTimeoutSeconds: %v", *(v.TaskStartToCloseTimeoutSeconds))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	if v.RequestId != nil {
		fields[i] = fmt.Sprintf("RequestId: %v", *(v.RequestId))
		i++
	}
	return fmt.Sprintf("StartWorkflowExecutionRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *StartWorkflowExecutionRequest) Equals(rhs *StartWorkflowExecutionRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I32_EqualsPtr(v.ExecutionStartToCloseTimeoutSeconds, rhs.ExecutionStartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.TaskStartToCloseTimeoutSeconds, rhs.TaskStartToCloseTimeoutSeconds) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	if !_String_EqualsPtr(v.RequestId, rhs.RequestId) {
		return false
	}
	return true
}

func (v *StartWorkflowExecutionRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *StartWorkflowExecutionRequest) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

func (v *StartWorkflowExecutionRequest) GetExecutionStartToCloseTimeoutSeconds() (o int32) {
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		return *v.ExecutionStartToCloseTimeoutSeconds
	}
	return
}

func (v *StartWorkflowExecutionRequest) GetTaskStartToCloseTimeoutSeconds() (o int32) {
	if v.TaskStartToCloseTimeoutSeconds != nil {
		return *v.TaskStartToCloseTimeoutSeconds
	}
	return
}

func (v *StartWorkflowExecutionRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

func (v *StartWorkflowExecutionRequest) GetRequestId() (o string) {
	if v.RequestId != nil {
		return *v.RequestId
	}
	return
}

type StartWorkflowExecutionResponse struct {
	RunId *string `json:"runId,omitempty"`
}

func (v *StartWorkflowExecutionResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.RunId != nil {
		w, err = wire.NewValueString(*(v.RunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *StartWorkflowExecutionResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StartWorkflowExecutionResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.RunId != nil {
		fields[i] = fmt.Sprintf("RunId: %v", *(v.RunId))
		i++
	}
	return fmt.Sprintf("StartWorkflowExecutionResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *StartWorkflowExecutionResponse) Equals(rhs *StartWorkflowExecutionResponse) bool {
	if !_String_EqualsPtr(v.RunId, rhs.RunId) {
		return false
	}
	return true
}

func (v *StartWorkflowExecutionResponse) GetRunId() (o string) {
	if v.RunId != nil {
		return *v.RunId
	}
	return
}

type StickyExecutionAttributes struct {
	WorkerTaskList                *TaskList `json:"workerTaskList,omitempty"`
	ScheduleToStartTimeoutSeconds *int32    `json:"scheduleToStartTimeoutSeconds,omitempty"`
}

func (v *StickyExecutionAttributes) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkerTaskList != nil {
		w, err = v.WorkerTaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ScheduleToStartTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ScheduleToStartTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *StickyExecutionAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkerTaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ScheduleToStartTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *StickyExecutionAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkerTaskList != nil {
		fields[i] = fmt.Sprintf("WorkerTaskList: %v", v.WorkerTaskList)
		i++
	}
	if v.ScheduleToStartTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ScheduleToStartTimeoutSeconds: %v", *(v.ScheduleToStartTimeoutSeconds))
		i++
	}
	return fmt.Sprintf("StickyExecutionAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *StickyExecutionAttributes) Equals(rhs *StickyExecutionAttributes) bool {
	if !((v.WorkerTaskList == nil && rhs.WorkerTaskList == nil) || (v.WorkerTaskList != nil && rhs.WorkerTaskList != nil && v.WorkerTaskList.Equals(rhs.WorkerTaskList))) {
		return false
	}
	if !_I32_EqualsPtr(v.ScheduleToStartTimeoutSeconds, rhs.ScheduleToStartTimeoutSeconds) {
		return false
	}
	return true
}

func (v *StickyExecutionAttributes) GetScheduleToStartTimeoutSeconds() (o int32) {
	if v.ScheduleToStartTimeoutSeconds != nil {
		return *v.ScheduleToStartTimeoutSeconds
	}
	return
}

type TaskList struct {
	Name *string `json:"name,omitempty"`
}

func (v *TaskList) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TaskList) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TaskList) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("TaskList{%v}", strings.Join(fields[:i], ", "))
}

func (v *TaskList) Equals(rhs *TaskList) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	return true
}

func (v *TaskList) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}

type TaskListMetadata struct {
	MaxTasksPerSecond *float64 `json:"maxTasksPerSecond,omitempty"`
}

func (v *TaskListMetadata) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.MaxTasksPerSecond != nil {
		w, err = wire.NewValueDouble(*(v.MaxTasksPerSecond)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TaskListMetadata) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.MaxTasksPerSecond = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TaskListMetadata) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.MaxTasksPerSecond != nil {
		fields[i] = fmt.Sprintf("MaxTasksPerSecond: %v", *(v.MaxTasksPerSecond))
		i++
	}
	return fmt.Sprintf("TaskListMetadata{%v}", strings.Join(fields[:i], ", "))
}

func _Double_EqualsPtr(lhs, rhs *float64) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func (v *TaskListMetadata) Equals(rhs *TaskListMetadata) bool {
	if !_Double_EqualsPtr(v.MaxTasksPerSecond, rhs.MaxTasksPerSecond) {
		return false
	}
	return true
}

func (v *TaskListMetadata) GetMaxTasksPerSecond() (o float64) {
	if v.MaxTasksPerSecond != nil {
		return *v.MaxTasksPerSecond
	}
	return
}

type TerminateWorkflowExecutionRequest struct {
	Domain            *string            `json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `json:"workflowExecution,omitempty"`
	Reason            *string            `json:"reason,omitempty"`
	Details           []byte             `json:"details"`
	Identity          *string            `json:"identity,omitempty"`
}

func (v *TerminateWorkflowExecutionRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Domain != nil {
		w, err = wire.NewValueString(*(v.Domain)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowExecution != nil {
		w, err = v.WorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Reason != nil {
		w, err = wire.NewValueString(*(v.Reason)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TerminateWorkflowExecutionRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Domain = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Reason = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TerminateWorkflowExecutionRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [5]string
	i := 0
	if v.Domain != nil {
		fields[i] = fmt.Sprintf("Domain: %v", *(v.Domain))
		i++
	}
	if v.WorkflowExecution != nil {
		fields[i] = fmt.Sprintf("WorkflowExecution: %v", v.WorkflowExecution)
		i++
	}
	if v.Reason != nil {
		fields[i] = fmt.Sprintf("Reason: %v", *(v.Reason))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("TerminateWorkflowExecutionRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *TerminateWorkflowExecutionRequest) Equals(rhs *TerminateWorkflowExecutionRequest) bool {
	if !_String_EqualsPtr(v.Domain, rhs.Domain) {
		return false
	}
	if !((v.WorkflowExecution == nil && rhs.WorkflowExecution == nil) || (v.WorkflowExecution != nil && rhs.WorkflowExecution != nil && v.WorkflowExecution.Equals(rhs.WorkflowExecution))) {
		return false
	}
	if !_String_EqualsPtr(v.Reason, rhs.Reason) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *TerminateWorkflowExecutionRequest) GetDomain() (o string) {
	if v.Domain != nil {
		return *v.Domain
	}
	return
}

func (v *TerminateWorkflowExecutionRequest) GetReason() (o string) {
	if v.Reason != nil {
		return *v.Reason
	}
	return
}

func (v *TerminateWorkflowExecutionRequest) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type TimeoutType int32

const (
	TimeoutTypeStartToClose    TimeoutType = 0
	TimeoutTypeScheduleToStart TimeoutType = 1
	TimeoutTypeScheduleToClose TimeoutType = 2
	TimeoutTypeHeartbeat       TimeoutType = 3
)

func TimeoutType_Values() []TimeoutType {
	return []TimeoutType{TimeoutTypeStartToClose, TimeoutTypeScheduleToStart, TimeoutTypeScheduleToClose, TimeoutTypeHeartbeat}
}

func (v *TimeoutType) UnmarshalText(value []byte) error {
	switch string(value) {
	case "START_TO_CLOSE":
		*v = TimeoutTypeStartToClose
		return nil
	case "SCHEDULE_TO_START":
		*v = TimeoutTypeScheduleToStart
		return nil
	case "SCHEDULE_TO_CLOSE":
		*v = TimeoutTypeScheduleToClose
		return nil
	case "HEARTBEAT":
		*v = TimeoutTypeHeartbeat
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "TimeoutType")
	}
}

func (v TimeoutType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *TimeoutType) FromWire(w wire.Value) error {
	*v = (TimeoutType)(w.GetI32())
	return nil
}

func (v TimeoutType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "START_TO_CLOSE"
	case 1:
		return "SCHEDULE_TO_START"
	case 2:
		return "SCHEDULE_TO_CLOSE"
	case 3:
		return "HEARTBEAT"
	}
	return fmt.Sprintf("TimeoutType(%d)", w)
}

func (v TimeoutType) Equals(rhs TimeoutType) bool {
	return v == rhs
}

func (v TimeoutType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"START_TO_CLOSE\""), nil
	case 1:
		return ([]byte)("\"SCHEDULE_TO_START\""), nil
	case 2:
		return ([]byte)("\"SCHEDULE_TO_CLOSE\""), nil
	case 3:
		return ([]byte)("\"HEARTBEAT\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *TimeoutType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "TimeoutType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "TimeoutType")
		}
		*v = (TimeoutType)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "TimeoutType")
	}
}

type TimerCanceledEventAttributes struct {
	TimerId                      *string `json:"timerId,omitempty"`
	StartedEventId               *int64  `json:"startedEventId,omitempty"`
	DecisionTaskCompletedEventId *int64  `json:"decisionTaskCompletedEventId,omitempty"`
	Identity                     *string `json:"identity,omitempty"`
}

func (v *TimerCanceledEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TimerId != nil {
		w, err = wire.NewValueString(*(v.TimerId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TimerCanceledEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.TimerId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TimerCanceledEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.TimerId != nil {
		fields[i] = fmt.Sprintf("TimerId: %v", *(v.TimerId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("TimerCanceledEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *TimerCanceledEventAttributes) Equals(rhs *TimerCanceledEventAttributes) bool {
	if !_String_EqualsPtr(v.TimerId, rhs.TimerId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *TimerCanceledEventAttributes) GetTimerId() (o string) {
	if v.TimerId != nil {
		return *v.TimerId
	}
	return
}

func (v *TimerCanceledEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

func (v *TimerCanceledEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

func (v *TimerCanceledEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type TimerCanceledEventFilter struct{}

func (v *TimerCanceledEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TimerCanceledEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *TimerCanceledEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("TimerCanceledEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *TimerCanceledEventFilter) Equals(rhs *TimerCanceledEventFilter) bool {
	return true
}

type TimerFiredEventAttributes struct {
	TimerId        *string `json:"timerId,omitempty"`
	StartedEventId *int64  `json:"startedEventId,omitempty"`
}

func (v *TimerFiredEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TimerId != nil {
		w, err = wire.NewValueString(*(v.TimerId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartedEventId != nil {
		w, err = wire.NewValueI64(*(v.StartedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TimerFiredEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.TimerId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TimerFiredEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.TimerId != nil {
		fields[i] = fmt.Sprintf("TimerId: %v", *(v.TimerId))
		i++
	}
	if v.StartedEventId != nil {
		fields[i] = fmt.Sprintf("StartedEventId: %v", *(v.StartedEventId))
		i++
	}
	return fmt.Sprintf("TimerFiredEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *TimerFiredEventAttributes) Equals(rhs *TimerFiredEventAttributes) bool {
	if !_String_EqualsPtr(v.TimerId, rhs.TimerId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedEventId, rhs.StartedEventId) {
		return false
	}
	return true
}

func (v *TimerFiredEventAttributes) GetTimerId() (o string) {
	if v.TimerId != nil {
		return *v.TimerId
	}
	return
}

func (v *TimerFiredEventAttributes) GetStartedEventId() (o int64) {
	if v.StartedEventId != nil {
		return *v.StartedEventId
	}
	return
}

type TimerFiredEventFilter struct{}

func (v *TimerFiredEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TimerFiredEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *TimerFiredEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("TimerFiredEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *TimerFiredEventFilter) Equals(rhs *TimerFiredEventFilter) bool {
	return true
}

type TimerStartedEventAttributes struct {
	TimerId                      *string `json:"timerId,omitempty"`
	StartToFireTimeoutSeconds    *int64  `json:"startToFireTimeoutSeconds,omitempty"`
	DecisionTaskCompletedEventId *int64  `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *TimerStartedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TimerId != nil {
		w, err = wire.NewValueString(*(v.TimerId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartToFireTimeoutSeconds != nil {
		w, err = wire.NewValueI64(*(v.StartToFireTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TimerStartedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.TimerId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartToFireTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TimerStartedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.TimerId != nil {
		fields[i] = fmt.Sprintf("TimerId: %v", *(v.TimerId))
		i++
	}
	if v.StartToFireTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("StartToFireTimeoutSeconds: %v", *(v.StartToFireTimeoutSeconds))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("TimerStartedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *TimerStartedEventAttributes) Equals(rhs *TimerStartedEventAttributes) bool {
	if !_String_EqualsPtr(v.TimerId, rhs.TimerId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartToFireTimeoutSeconds, rhs.StartToFireTimeoutSeconds) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *TimerStartedEventAttributes) GetTimerId() (o string) {
	if v.TimerId != nil {
		return *v.TimerId
	}
	return
}

func (v *TimerStartedEventAttributes) GetStartToFireTimeoutSeconds() (o int64) {
	if v.StartToFireTimeoutSeconds != nil {
		return *v.StartToFireTimeoutSeconds
	}
	return
}

func (v *TimerStartedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type TimerStartedEventFilter struct{}

func (v *TimerStartedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TimerStartedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *TimerStartedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("TimerStartedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *TimerStartedEventFilter) Equals(rhs *TimerStartedEventFilter) bool {
	return true
}

type TransientDecisionInfo struct {
	ScheduledEvent *HistoryEvent `json:"scheduledEvent,omitempty"`
	StartedEvent   *HistoryEvent `json:"startedEvent,omitempty"`
}

func (v *TransientDecisionInfo) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ScheduledEvent != nil {
		w, err = v.ScheduledEvent.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartedEvent != nil {
		w, err = v.StartedEvent.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TransientDecisionInfo) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.ScheduledEvent, err = _HistoryEvent_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.StartedEvent, err = _HistoryEvent_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TransientDecisionInfo) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.ScheduledEvent != nil {
		fields[i] = fmt.Sprintf("ScheduledEvent: %v", v.ScheduledEvent)
		i++
	}
	if v.StartedEvent != nil {
		fields[i] = fmt.Sprintf("StartedEvent: %v", v.StartedEvent)
		i++
	}
	return fmt.Sprintf("TransientDecisionInfo{%v}", strings.Join(fields[:i], ", "))
}

func (v *TransientDecisionInfo) Equals(rhs *TransientDecisionInfo) bool {
	if !((v.ScheduledEvent == nil && rhs.ScheduledEvent == nil) || (v.ScheduledEvent != nil && rhs.ScheduledEvent != nil && v.ScheduledEvent.Equals(rhs.ScheduledEvent))) {
		return false
	}
	if !((v.StartedEvent == nil && rhs.StartedEvent == nil) || (v.StartedEvent != nil && rhs.StartedEvent != nil && v.StartedEvent.Equals(rhs.StartedEvent))) {
		return false
	}
	return true
}

type UpdateDomainInfo struct {
	Description *string `json:"description,omitempty"`
	OwnerEmail  *string `json:"ownerEmail,omitempty"`
}

func (v *UpdateDomainInfo) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Description != nil {
		w, err = wire.NewValueString(*(v.Description)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.OwnerEmail != nil {
		w, err = wire.NewValueString(*(v.OwnerEmail)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *UpdateDomainInfo) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Description = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.OwnerEmail = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *UpdateDomainInfo) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.Description != nil {
		fields[i] = fmt.Sprintf("Description: %v", *(v.Description))
		i++
	}
	if v.OwnerEmail != nil {
		fields[i] = fmt.Sprintf("OwnerEmail: %v", *(v.OwnerEmail))
		i++
	}
	return fmt.Sprintf("UpdateDomainInfo{%v}", strings.Join(fields[:i], ", "))
}

func (v *UpdateDomainInfo) Equals(rhs *UpdateDomainInfo) bool {
	if !_String_EqualsPtr(v.Description, rhs.Description) {
		return false
	}
	if !_String_EqualsPtr(v.OwnerEmail, rhs.OwnerEmail) {
		return false
	}
	return true
}

func (v *UpdateDomainInfo) GetDescription() (o string) {
	if v.Description != nil {
		return *v.Description
	}
	return
}

func (v *UpdateDomainInfo) GetOwnerEmail() (o string) {
	if v.OwnerEmail != nil {
		return *v.OwnerEmail
	}
	return
}

type UpdateDomainRequest struct {
	Name          *string              `json:"name,omitempty"`
	UpdatedInfo   *UpdateDomainInfo    `json:"updatedInfo,omitempty"`
	Configuration *DomainConfiguration `json:"configuration,omitempty"`
}

func (v *UpdateDomainRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.UpdatedInfo != nil {
		w, err = v.UpdatedInfo.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Configuration != nil {
		w, err = v.Configuration.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _UpdateDomainInfo_Read(w wire.Value) (*UpdateDomainInfo, error) {
	var v UpdateDomainInfo
	err := v.FromWire(w)
	return &v, err
}

func (v *UpdateDomainRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.UpdatedInfo, err = _UpdateDomainInfo_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.Configuration, err = _DomainConfiguration_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *UpdateDomainRequest) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.UpdatedInfo != nil {
		fields[i] = fmt.Sprintf("UpdatedInfo: %v", v.UpdatedInfo)
		i++
	}
	if v.Configuration != nil {
		fields[i] = fmt.Sprintf("Configuration: %v", v.Configuration)
		i++
	}
	return fmt.Sprintf("UpdateDomainRequest{%v}", strings.Join(fields[:i], ", "))
}

func (v *UpdateDomainRequest) Equals(rhs *UpdateDomainRequest) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	if !((v.UpdatedInfo == nil && rhs.UpdatedInfo == nil) || (v.UpdatedInfo != nil && rhs.UpdatedInfo != nil && v.UpdatedInfo.Equals(rhs.UpdatedInfo))) {
		return false
	}
	if !((v.Configuration == nil && rhs.Configuration == nil) || (v.Configuration != nil && rhs.Configuration != nil && v.Configuration.Equals(rhs.Configuration))) {
		return false
	}
	return true
}

func (v *UpdateDomainRequest) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}

type UpdateDomainResponse struct {
	DomainInfo    *DomainInfo          `json:"domainInfo,omitempty"`
	Configuration *DomainConfiguration `json:"configuration,omitempty"`
}

func (v *UpdateDomainResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.DomainInfo != nil {
		w, err = v.DomainInfo.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Configuration != nil {
		w, err = v.Configuration.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *UpdateDomainResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.DomainInfo, err = _DomainInfo_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.Configuration, err = _DomainConfiguration_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *UpdateDomainResponse) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.DomainInfo != nil {
		fields[i] = fmt.Sprintf("DomainInfo: %v", v.DomainInfo)
		i++
	}
	if v.Configuration != nil {
		fields[i] = fmt.Sprintf("Configuration: %v", v.Configuration)
		i++
	}
	return fmt.Sprintf("UpdateDomainResponse{%v}", strings.Join(fields[:i], ", "))
}

func (v *UpdateDomainResponse) Equals(rhs *UpdateDomainResponse) bool {
	if !((v.DomainInfo == nil && rhs.DomainInfo == nil) || (v.DomainInfo != nil && rhs.DomainInfo != nil && v.DomainInfo.Equals(rhs.DomainInfo))) {
		return false
	}
	if !((v.Configuration == nil && rhs.Configuration == nil) || (v.Configuration != nil && rhs.Configuration != nil && v.Configuration.Equals(rhs.Configuration))) {
		return false
	}
	return true
}

type WorkflowExecution struct {
	WorkflowId *string `json:"workflowId,omitempty"`
	RunId      *string `json:"runId,omitempty"`
}

func (v *WorkflowExecution) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.RunId != nil {
		w, err = wire.NewValueString(*(v.RunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecution) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecution) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.RunId != nil {
		fields[i] = fmt.Sprintf("RunId: %v", *(v.RunId))
		i++
	}
	return fmt.Sprintf("WorkflowExecution{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecution) Equals(rhs *WorkflowExecution) bool {
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !_String_EqualsPtr(v.RunId, rhs.RunId) {
		return false
	}
	return true
}

func (v *WorkflowExecution) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

func (v *WorkflowExecution) GetRunId() (o string) {
	if v.RunId != nil {
		return *v.RunId
	}
	return
}

type WorkflowExecutionAlreadyStartedError struct {
	Message        *string `json:"message,omitempty"`
	StartRequestId *string `json:"startRequestId,omitempty"`
	RunId          *string `json:"runId,omitempty"`
}

func (v *WorkflowExecutionAlreadyStartedError) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.StartRequestId != nil {
		w, err = wire.NewValueString(*(v.StartRequestId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.RunId != nil {
		w, err = wire.NewValueString(*(v.RunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionAlreadyStartedError) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.StartRequestId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionAlreadyStartedError) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}
	if v.StartRequestId != nil {
		fields[i] = fmt.Sprintf("StartRequestId: %v", *(v.StartRequestId))
		i++
	}
	if v.RunId != nil {
		fields[i] = fmt.Sprintf("RunId: %v", *(v.RunId))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionAlreadyStartedError{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionAlreadyStartedError) Equals(rhs *WorkflowExecutionAlreadyStartedError) bool {
	if !_String_EqualsPtr(v.Message, rhs.Message) {
		return false
	}
	if !_String_EqualsPtr(v.StartRequestId, rhs.StartRequestId) {
		return false
	}
	if !_String_EqualsPtr(v.RunId, rhs.RunId) {
		return false
	}
	return true
}

func (v *WorkflowExecutionAlreadyStartedError) GetMessage() (o string) {
	if v.Message != nil {
		return *v.Message
	}
	return
}

func (v *WorkflowExecutionAlreadyStartedError) GetStartRequestId() (o string) {
	if v.StartRequestId != nil {
		return *v.StartRequestId
	}
	return
}

func (v *WorkflowExecutionAlreadyStartedError) GetRunId() (o string) {
	if v.RunId != nil {
		return *v.RunId
	}
	return
}

func (v *WorkflowExecutionAlreadyStartedError) Error() string {
	return v.String()
}

type WorkflowExecutionCancelRequestedEventAttributes struct {
	Cause                     *string            `json:"cause,omitempty"`
	ExternalInitiatedEventId  *int64             `json:"externalInitiatedEventId,omitempty"`
	ExternalWorkflowExecution *WorkflowExecution `json:"externalWorkflowExecution,omitempty"`
	Identity                  *string            `json:"identity,omitempty"`
}

func (v *WorkflowExecutionCancelRequestedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Cause != nil {
		w, err = wire.NewValueString(*(v.Cause)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ExternalInitiatedEventId != nil {
		w, err = wire.NewValueI64(*(v.ExternalInitiatedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.ExternalWorkflowExecution != nil {
		w, err = v.ExternalWorkflowExecution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionCancelRequestedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Cause = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ExternalInitiatedEventId = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.ExternalWorkflowExecution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionCancelRequestedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.Cause != nil {
		fields[i] = fmt.Sprintf("Cause: %v", *(v.Cause))
		i++
	}
	if v.ExternalInitiatedEventId != nil {
		fields[i] = fmt.Sprintf("ExternalInitiatedEventId: %v", *(v.ExternalInitiatedEventId))
		i++
	}
	if v.ExternalWorkflowExecution != nil {
		fields[i] = fmt.Sprintf("ExternalWorkflowExecution: %v", v.ExternalWorkflowExecution)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionCancelRequestedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionCancelRequestedEventAttributes) Equals(rhs *WorkflowExecutionCancelRequestedEventAttributes) bool {
	if !_String_EqualsPtr(v.Cause, rhs.Cause) {
		return false
	}
	if !_I64_EqualsPtr(v.ExternalInitiatedEventId, rhs.ExternalInitiatedEventId) {
		return false
	}
	if !((v.ExternalWorkflowExecution == nil && rhs.ExternalWorkflowExecution == nil) || (v.ExternalWorkflowExecution != nil && rhs.ExternalWorkflowExecution != nil && v.ExternalWorkflowExecution.Equals(rhs.ExternalWorkflowExecution))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *WorkflowExecutionCancelRequestedEventAttributes) GetCause() (o string) {
	if v.Cause != nil {
		return *v.Cause
	}
	return
}

func (v *WorkflowExecutionCancelRequestedEventAttributes) GetExternalInitiatedEventId() (o int64) {
	if v.ExternalInitiatedEventId != nil {
		return *v.ExternalInitiatedEventId
	}
	return
}

func (v *WorkflowExecutionCancelRequestedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type WorkflowExecutionCancelRequestedEventFilter struct{}

func (v *WorkflowExecutionCancelRequestedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionCancelRequestedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionCancelRequestedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionCancelRequestedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionCancelRequestedEventFilter) Equals(rhs *WorkflowExecutionCancelRequestedEventFilter) bool {
	return true
}

type WorkflowExecutionCanceledEventAttributes struct {
	DecisionTaskCompletedEventId *int64 `json:"decisionTaskCompletedEventId,omitempty"`
	Details                      []byte `json:"details"`
}

func (v *WorkflowExecutionCanceledEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionCanceledEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionCanceledEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	return fmt.Sprintf("WorkflowExecutionCanceledEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionCanceledEventAttributes) Equals(rhs *WorkflowExecutionCanceledEventAttributes) bool {
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	return true
}

func (v *WorkflowExecutionCanceledEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type WorkflowExecutionCanceledEventFilter struct{}

func (v *WorkflowExecutionCanceledEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionCanceledEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionCanceledEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionCanceledEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionCanceledEventFilter) Equals(rhs *WorkflowExecutionCanceledEventFilter) bool {
	return true
}

type WorkflowExecutionCloseStatus int32

const (
	WorkflowExecutionCloseStatusCompleted      WorkflowExecutionCloseStatus = 0
	WorkflowExecutionCloseStatusFailed         WorkflowExecutionCloseStatus = 1
	WorkflowExecutionCloseStatusCanceled       WorkflowExecutionCloseStatus = 2
	WorkflowExecutionCloseStatusTerminated     WorkflowExecutionCloseStatus = 3
	WorkflowExecutionCloseStatusContinuedAsNew WorkflowExecutionCloseStatus = 4
	WorkflowExecutionCloseStatusTimedOut       WorkflowExecutionCloseStatus = 5
)

func WorkflowExecutionCloseStatus_Values() []WorkflowExecutionCloseStatus {
	return []WorkflowExecutionCloseStatus{WorkflowExecutionCloseStatusCompleted, WorkflowExecutionCloseStatusFailed, WorkflowExecutionCloseStatusCanceled, WorkflowExecutionCloseStatusTerminated, WorkflowExecutionCloseStatusContinuedAsNew, WorkflowExecutionCloseStatusTimedOut}
}

func (v *WorkflowExecutionCloseStatus) UnmarshalText(value []byte) error {
	switch string(value) {
	case "COMPLETED":
		*v = WorkflowExecutionCloseStatusCompleted
		return nil
	case "FAILED":
		*v = WorkflowExecutionCloseStatusFailed
		return nil
	case "CANCELED":
		*v = WorkflowExecutionCloseStatusCanceled
		return nil
	case "TERMINATED":
		*v = WorkflowExecutionCloseStatusTerminated
		return nil
	case "CONTINUED_AS_NEW":
		*v = WorkflowExecutionCloseStatusContinuedAsNew
		return nil
	case "TIMED_OUT":
		*v = WorkflowExecutionCloseStatusTimedOut
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "WorkflowExecutionCloseStatus")
	}
}

func (v WorkflowExecutionCloseStatus) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *WorkflowExecutionCloseStatus) FromWire(w wire.Value) error {
	*v = (WorkflowExecutionCloseStatus)(w.GetI32())
	return nil
}

func (v WorkflowExecutionCloseStatus) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "COMPLETED"
	case 1:
		return "FAILED"
	case 2:
		return "CANCELED"
	case 3:
		return "TERMINATED"
	case 4:
		return "CONTINUED_AS_NEW"
	case 5:
		return "TIMED_OUT"
	}
	return fmt.Sprintf("WorkflowExecutionCloseStatus(%d)", w)
}

func (v WorkflowExecutionCloseStatus) Equals(rhs WorkflowExecutionCloseStatus) bool {
	return v == rhs
}

func (v WorkflowExecutionCloseStatus) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"COMPLETED\""), nil
	case 1:
		return ([]byte)("\"FAILED\""), nil
	case 2:
		return ([]byte)("\"CANCELED\""), nil
	case 3:
		return ([]byte)("\"TERMINATED\""), nil
	case 4:
		return ([]byte)("\"CONTINUED_AS_NEW\""), nil
	case 5:
		return ([]byte)("\"TIMED_OUT\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *WorkflowExecutionCloseStatus) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "WorkflowExecutionCloseStatus")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "WorkflowExecutionCloseStatus")
		}
		*v = (WorkflowExecutionCloseStatus)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "WorkflowExecutionCloseStatus")
	}
}

type WorkflowExecutionCompletedEventAttributes struct {
	Result                       []byte `json:"result"`
	DecisionTaskCompletedEventId *int64 `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *WorkflowExecutionCompletedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Result != nil {
		w, err = wire.NewValueBinary(v.Result), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionCompletedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				v.Result, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionCompletedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.Result != nil {
		fields[i] = fmt.Sprintf("Result: %v", v.Result)
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionCompletedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionCompletedEventAttributes) Equals(rhs *WorkflowExecutionCompletedEventAttributes) bool {
	if !((v.Result == nil && rhs.Result == nil) || (v.Result != nil && rhs.Result != nil && bytes.Equal(v.Result, rhs.Result))) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *WorkflowExecutionCompletedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type WorkflowExecutionCompletedEventFilter struct{}

func (v *WorkflowExecutionCompletedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionCompletedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionCompletedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionCompletedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionCompletedEventFilter) Equals(rhs *WorkflowExecutionCompletedEventFilter) bool {
	return true
}

type WorkflowExecutionConfiguration struct {
	TaskList                            *TaskList    `json:"taskList,omitempty"`
	ExecutionStartToCloseTimeoutSeconds *int32       `json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      *int32       `json:"taskStartToCloseTimeoutSeconds,omitempty"`
	ChildPolicy                         *ChildPolicy `json:"childPolicy,omitempty"`
}

func (v *WorkflowExecutionConfiguration) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ExecutionStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.TaskStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.ChildPolicy != nil {
		w, err = v.ChildPolicy.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionConfiguration) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ExecutionStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.TaskStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI32 {
				var x ChildPolicy
				x, err = _ChildPolicy_Read(field.Value)
				v.ChildPolicy = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionConfiguration) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [4]string
	i := 0
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ExecutionStartToCloseTimeoutSeconds: %v", *(v.ExecutionStartToCloseTimeoutSeconds))
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("TaskStartToCloseTimeoutSeconds: %v", *(v.TaskStartToCloseTimeoutSeconds))
		i++
	}
	if v.ChildPolicy != nil {
		fields[i] = fmt.Sprintf("ChildPolicy: %v", *(v.ChildPolicy))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionConfiguration{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionConfiguration) Equals(rhs *WorkflowExecutionConfiguration) bool {
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !_I32_EqualsPtr(v.ExecutionStartToCloseTimeoutSeconds, rhs.ExecutionStartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.TaskStartToCloseTimeoutSeconds, rhs.TaskStartToCloseTimeoutSeconds) {
		return false
	}
	if !_ChildPolicy_EqualsPtr(v.ChildPolicy, rhs.ChildPolicy) {
		return false
	}
	return true
}

func (v *WorkflowExecutionConfiguration) GetExecutionStartToCloseTimeoutSeconds() (o int32) {
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		return *v.ExecutionStartToCloseTimeoutSeconds
	}
	return
}

func (v *WorkflowExecutionConfiguration) GetTaskStartToCloseTimeoutSeconds() (o int32) {
	if v.TaskStartToCloseTimeoutSeconds != nil {
		return *v.TaskStartToCloseTimeoutSeconds
	}
	return
}

func (v *WorkflowExecutionConfiguration) GetChildPolicy() (o ChildPolicy) {
	if v.ChildPolicy != nil {
		return *v.ChildPolicy
	}
	return
}

type WorkflowExecutionContinuedAsNew struct{}

func (v *WorkflowExecutionContinuedAsNew) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionContinuedAsNew) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionContinuedAsNew) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionContinuedAsNew{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionContinuedAsNew) Equals(rhs *WorkflowExecutionContinuedAsNew) bool {
	return true
}

type WorkflowExecutionContinuedAsNewEventAttributes struct {
	NewExecutionRunId                   *string       `json:"newExecutionRunId,omitempty"`
	WorkflowType                        *WorkflowType `json:"workflowType,omitempty"`
	TaskList                            *TaskList     `json:"taskList,omitempty"`
	Input                               []byte        `json:"input"`
	ExecutionStartToCloseTimeoutSeconds *int32        `json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      *int32        `json:"taskStartToCloseTimeoutSeconds,omitempty"`
	DecisionTaskCompletedEventId        *int64        `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *WorkflowExecutionContinuedAsNewEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [7]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.NewExecutionRunId != nil {
		w, err = wire.NewValueString(*(v.NewExecutionRunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ExecutionStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.TaskStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionContinuedAsNewEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.NewExecutionRunId = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ExecutionStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.TaskStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 70:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionContinuedAsNewEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [7]string
	i := 0
	if v.NewExecutionRunId != nil {
		fields[i] = fmt.Sprintf("NewExecutionRunId: %v", *(v.NewExecutionRunId))
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ExecutionStartToCloseTimeoutSeconds: %v", *(v.ExecutionStartToCloseTimeoutSeconds))
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("TaskStartToCloseTimeoutSeconds: %v", *(v.TaskStartToCloseTimeoutSeconds))
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionContinuedAsNewEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionContinuedAsNewEventAttributes) Equals(rhs *WorkflowExecutionContinuedAsNewEventAttributes) bool {
	if !_String_EqualsPtr(v.NewExecutionRunId, rhs.NewExecutionRunId) {
		return false
	}
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I32_EqualsPtr(v.ExecutionStartToCloseTimeoutSeconds, rhs.ExecutionStartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.TaskStartToCloseTimeoutSeconds, rhs.TaskStartToCloseTimeoutSeconds) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *WorkflowExecutionContinuedAsNewEventAttributes) GetNewExecutionRunId() (o string) {
	if v.NewExecutionRunId != nil {
		return *v.NewExecutionRunId
	}
	return
}

func (v *WorkflowExecutionContinuedAsNewEventAttributes) GetExecutionStartToCloseTimeoutSeconds() (o int32) {
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		return *v.ExecutionStartToCloseTimeoutSeconds
	}
	return
}

func (v *WorkflowExecutionContinuedAsNewEventAttributes) GetTaskStartToCloseTimeoutSeconds() (o int32) {
	if v.TaskStartToCloseTimeoutSeconds != nil {
		return *v.TaskStartToCloseTimeoutSeconds
	}
	return
}

func (v *WorkflowExecutionContinuedAsNewEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type WorkflowExecutionContinuedAsNewEventFilter struct{}

func (v *WorkflowExecutionContinuedAsNewEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionContinuedAsNewEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionContinuedAsNewEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionContinuedAsNewEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionContinuedAsNewEventFilter) Equals(rhs *WorkflowExecutionContinuedAsNewEventFilter) bool {
	return true
}

type WorkflowExecutionFailedEventAttributes struct {
	Reason                       *string `json:"reason,omitempty"`
	Details                      []byte  `json:"details"`
	DecisionTaskCompletedEventId *int64  `json:"decisionTaskCompletedEventId,omitempty"`
}

func (v *WorkflowExecutionFailedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Reason != nil {
		w, err = wire.NewValueString(*(v.Reason)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		w, err = wire.NewValueI64(*(v.DecisionTaskCompletedEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionFailedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Reason = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DecisionTaskCompletedEventId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionFailedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.Reason != nil {
		fields[i] = fmt.Sprintf("Reason: %v", *(v.Reason))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.DecisionTaskCompletedEventId != nil {
		fields[i] = fmt.Sprintf("DecisionTaskCompletedEventId: %v", *(v.DecisionTaskCompletedEventId))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionFailedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionFailedEventAttributes) Equals(rhs *WorkflowExecutionFailedEventAttributes) bool {
	if !_String_EqualsPtr(v.Reason, rhs.Reason) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_I64_EqualsPtr(v.DecisionTaskCompletedEventId, rhs.DecisionTaskCompletedEventId) {
		return false
	}
	return true
}

func (v *WorkflowExecutionFailedEventAttributes) GetReason() (o string) {
	if v.Reason != nil {
		return *v.Reason
	}
	return
}

func (v *WorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() (o int64) {
	if v.DecisionTaskCompletedEventId != nil {
		return *v.DecisionTaskCompletedEventId
	}
	return
}

type WorkflowExecutionFailedEventFilter struct{}

func (v *WorkflowExecutionFailedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionFailedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionFailedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionFailedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionFailedEventFilter) Equals(rhs *WorkflowExecutionFailedEventFilter) bool {
	return true
}

type WorkflowExecutionFilter struct {
	WorkflowId *string `json:"workflowId,omitempty"`
}

func (v *WorkflowExecutionFilter) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionFilter) Equals(rhs *WorkflowExecutionFilter) bool {
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	return true
}

func (v *WorkflowExecutionFilter) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}
	return
}

type WorkflowExecutionInfo struct {
	Execution     *WorkflowExecution            `json:"execution,omitempty"`
	Type          *WorkflowType                 `json:"type,omitempty"`
	StartTime     *int64                        `json:"startTime,omitempty"`
	CloseTime     *int64                        `json:"closeTime,omitempty"`
	CloseStatus   *WorkflowExecutionCloseStatus `json:"closeStatus,omitempty"`
	HistoryLength *int64                        `json:"historyLength,omitempty"`
}

func (v *WorkflowExecutionInfo) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Execution != nil {
		w, err = v.Execution.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Type != nil {
		w, err = v.Type.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.StartTime != nil {
		w, err = wire.NewValueI64(*(v.StartTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.CloseTime != nil {
		w, err = wire.NewValueI64(*(v.CloseTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.CloseStatus != nil {
		w, err = v.CloseStatus.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.HistoryLength != nil {
		w, err = wire.NewValueI64(*(v.HistoryLength)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionInfo) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.Execution, err = _WorkflowExecution_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.Type, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartTime = &x
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.CloseTime = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI32 {
				var x WorkflowExecutionCloseStatus
				x, err = _WorkflowExecutionCloseStatus_Read(field.Value)
				v.CloseStatus = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.HistoryLength = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionInfo) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [6]string
	i := 0
	if v.Execution != nil {
		fields[i] = fmt.Sprintf("Execution: %v", v.Execution)
		i++
	}
	if v.Type != nil {
		fields[i] = fmt.Sprintf("Type: %v", v.Type)
		i++
	}
	if v.StartTime != nil {
		fields[i] = fmt.Sprintf("StartTime: %v", *(v.StartTime))
		i++
	}
	if v.CloseTime != nil {
		fields[i] = fmt.Sprintf("CloseTime: %v", *(v.CloseTime))
		i++
	}
	if v.CloseStatus != nil {
		fields[i] = fmt.Sprintf("CloseStatus: %v", *(v.CloseStatus))
		i++
	}
	if v.HistoryLength != nil {
		fields[i] = fmt.Sprintf("HistoryLength: %v", *(v.HistoryLength))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionInfo{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionInfo) Equals(rhs *WorkflowExecutionInfo) bool {
	if !((v.Execution == nil && rhs.Execution == nil) || (v.Execution != nil && rhs.Execution != nil && v.Execution.Equals(rhs.Execution))) {
		return false
	}
	if !((v.Type == nil && rhs.Type == nil) || (v.Type != nil && rhs.Type != nil && v.Type.Equals(rhs.Type))) {
		return false
	}
	if !_I64_EqualsPtr(v.StartTime, rhs.StartTime) {
		return false
	}
	if !_I64_EqualsPtr(v.CloseTime, rhs.CloseTime) {
		return false
	}
	if !_WorkflowExecutionCloseStatus_EqualsPtr(v.CloseStatus, rhs.CloseStatus) {
		return false
	}
	if !_I64_EqualsPtr(v.HistoryLength, rhs.HistoryLength) {
		return false
	}
	return true
}

func (v *WorkflowExecutionInfo) GetStartTime() (o int64) {
	if v.StartTime != nil {
		return *v.StartTime
	}
	return
}

func (v *WorkflowExecutionInfo) GetCloseTime() (o int64) {
	if v.CloseTime != nil {
		return *v.CloseTime
	}
	return
}

func (v *WorkflowExecutionInfo) GetCloseStatus() (o WorkflowExecutionCloseStatus) {
	if v.CloseStatus != nil {
		return *v.CloseStatus
	}
	return
}

func (v *WorkflowExecutionInfo) GetHistoryLength() (o int64) {
	if v.HistoryLength != nil {
		return *v.HistoryLength
	}
	return
}

type WorkflowExecutionSignaledEventAttributes struct {
	SignalName *string `json:"signalName,omitempty"`
	Input      []byte  `json:"input"`
	Identity   *string `json:"identity,omitempty"`
}

func (v *WorkflowExecutionSignaledEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SignalName != nil {
		w, err = wire.NewValueString(*(v.SignalName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionSignaledEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.SignalName = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionSignaledEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.SignalName != nil {
		fields[i] = fmt.Sprintf("SignalName: %v", *(v.SignalName))
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionSignaledEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionSignaledEventAttributes) Equals(rhs *WorkflowExecutionSignaledEventAttributes) bool {
	if !_String_EqualsPtr(v.SignalName, rhs.SignalName) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *WorkflowExecutionSignaledEventAttributes) GetSignalName() (o string) {
	if v.SignalName != nil {
		return *v.SignalName
	}
	return
}

func (v *WorkflowExecutionSignaledEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type WorkflowExecutionSignaledEventFilter struct {
	SignalName *string `json:"signalName,omitempty"`
}

func (v *WorkflowExecutionSignaledEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SignalName != nil {
		w, err = wire.NewValueString(*(v.SignalName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionSignaledEventFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.SignalName = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionSignaledEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.SignalName != nil {
		fields[i] = fmt.Sprintf("SignalName: %v", *(v.SignalName))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionSignaledEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionSignaledEventFilter) Equals(rhs *WorkflowExecutionSignaledEventFilter) bool {
	if !_String_EqualsPtr(v.SignalName, rhs.SignalName) {
		return false
	}
	return true
}

func (v *WorkflowExecutionSignaledEventFilter) GetSignalName() (o string) {
	if v.SignalName != nil {
		return *v.SignalName
	}
	return
}

type WorkflowExecutionStartedEventAttributes struct {
	WorkflowType                        *WorkflowType `json:"workflowType,omitempty"`
	TaskList                            *TaskList     `json:"taskList,omitempty"`
	Input                               []byte        `json:"input"`
	ExecutionStartToCloseTimeoutSeconds *int32        `json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      *int32        `json:"taskStartToCloseTimeoutSeconds,omitempty"`
	Identity                            *string       `json:"identity,omitempty"`
}

func (v *WorkflowExecutionStartedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.WorkflowType != nil {
		w, err = v.WorkflowType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Input != nil {
		w, err = wire.NewValueBinary(v.Input), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.ExecutionStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		w, err = wire.NewValueI32(*(v.TaskStartToCloseTimeoutSeconds)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionStartedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.WorkflowType, err = _WorkflowType_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				v.Input, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 40:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ExecutionStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 50:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.TaskStartToCloseTimeoutSeconds = &x
				if err != nil {
					return err
				}
			}
		case 60:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionStartedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [6]string
	i := 0
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", v.WorkflowType)
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.Input != nil {
		fields[i] = fmt.Sprintf("Input: %v", v.Input)
		i++
	}
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("ExecutionStartToCloseTimeoutSeconds: %v", *(v.ExecutionStartToCloseTimeoutSeconds))
		i++
	}
	if v.TaskStartToCloseTimeoutSeconds != nil {
		fields[i] = fmt.Sprintf("TaskStartToCloseTimeoutSeconds: %v", *(v.TaskStartToCloseTimeoutSeconds))
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionStartedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionStartedEventAttributes) Equals(rhs *WorkflowExecutionStartedEventAttributes) bool {
	if !((v.WorkflowType == nil && rhs.WorkflowType == nil) || (v.WorkflowType != nil && rhs.WorkflowType != nil && v.WorkflowType.Equals(rhs.WorkflowType))) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !((v.Input == nil && rhs.Input == nil) || (v.Input != nil && rhs.Input != nil && bytes.Equal(v.Input, rhs.Input))) {
		return false
	}
	if !_I32_EqualsPtr(v.ExecutionStartToCloseTimeoutSeconds, rhs.ExecutionStartToCloseTimeoutSeconds) {
		return false
	}
	if !_I32_EqualsPtr(v.TaskStartToCloseTimeoutSeconds, rhs.TaskStartToCloseTimeoutSeconds) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *WorkflowExecutionStartedEventAttributes) GetExecutionStartToCloseTimeoutSeconds() (o int32) {
	if v.ExecutionStartToCloseTimeoutSeconds != nil {
		return *v.ExecutionStartToCloseTimeoutSeconds
	}
	return
}

func (v *WorkflowExecutionStartedEventAttributes) GetTaskStartToCloseTimeoutSeconds() (o int32) {
	if v.TaskStartToCloseTimeoutSeconds != nil {
		return *v.TaskStartToCloseTimeoutSeconds
	}
	return
}

func (v *WorkflowExecutionStartedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type WorkflowExecutionStartedEventFilter struct{}

func (v *WorkflowExecutionStartedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionStartedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionStartedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionStartedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionStartedEventFilter) Equals(rhs *WorkflowExecutionStartedEventFilter) bool {
	return true
}

type WorkflowExecutionTerminatedEventAttributes struct {
	Reason   *string `json:"reason,omitempty"`
	Details  []byte  `json:"details"`
	Identity *string `json:"identity,omitempty"`
}

func (v *WorkflowExecutionTerminatedEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Reason != nil {
		w, err = wire.NewValueString(*(v.Reason)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Identity != nil {
		w, err = wire.NewValueString(*(v.Identity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionTerminatedEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Reason = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identity = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionTerminatedEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [3]string
	i := 0
	if v.Reason != nil {
		fields[i] = fmt.Sprintf("Reason: %v", *(v.Reason))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Identity != nil {
		fields[i] = fmt.Sprintf("Identity: %v", *(v.Identity))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionTerminatedEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionTerminatedEventAttributes) Equals(rhs *WorkflowExecutionTerminatedEventAttributes) bool {
	if !_String_EqualsPtr(v.Reason, rhs.Reason) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_String_EqualsPtr(v.Identity, rhs.Identity) {
		return false
	}
	return true
}

func (v *WorkflowExecutionTerminatedEventAttributes) GetReason() (o string) {
	if v.Reason != nil {
		return *v.Reason
	}
	return
}

func (v *WorkflowExecutionTerminatedEventAttributes) GetIdentity() (o string) {
	if v.Identity != nil {
		return *v.Identity
	}
	return
}

type WorkflowExecutionTerminatedEventFilter struct{}

func (v *WorkflowExecutionTerminatedEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionTerminatedEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionTerminatedEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionTerminatedEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionTerminatedEventFilter) Equals(rhs *WorkflowExecutionTerminatedEventFilter) bool {
	return true
}

type WorkflowExecutionTimedOutEventAttributes struct {
	TimeoutType *TimeoutType `json:"timeoutType,omitempty"`
}

func (v *WorkflowExecutionTimedOutEventAttributes) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.TimeoutType != nil {
		w, err = v.TimeoutType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionTimedOutEventAttributes) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x TimeoutType
				x, err = _TimeoutType_Read(field.Value)
				v.TimeoutType = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowExecutionTimedOutEventAttributes) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.TimeoutType != nil {
		fields[i] = fmt.Sprintf("TimeoutType: %v", *(v.TimeoutType))
		i++
	}
	return fmt.Sprintf("WorkflowExecutionTimedOutEventAttributes{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionTimedOutEventAttributes) Equals(rhs *WorkflowExecutionTimedOutEventAttributes) bool {
	if !_TimeoutType_EqualsPtr(v.TimeoutType, rhs.TimeoutType) {
		return false
	}
	return true
}

func (v *WorkflowExecutionTimedOutEventAttributes) GetTimeoutType() (o TimeoutType) {
	if v.TimeoutType != nil {
		return *v.TimeoutType
	}
	return
}

type WorkflowExecutionTimedOutEventFilter struct{}

func (v *WorkflowExecutionTimedOutEventFilter) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowExecutionTimedOutEventFilter) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *WorkflowExecutionTimedOutEventFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("WorkflowExecutionTimedOutEventFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowExecutionTimedOutEventFilter) Equals(rhs *WorkflowExecutionTimedOutEventFilter) bool {
	return true
}

type WorkflowQuery struct {
	QueryType *string `json:"queryType,omitempty"`
	QueryArgs []byte  `json:"queryArgs"`
}

func (v *WorkflowQuery) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.QueryType != nil {
		w, err = wire.NewValueString(*(v.QueryType)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.QueryArgs != nil {
		w, err = wire.NewValueBinary(v.QueryArgs), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowQuery) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.QueryType = &x
				if err != nil {
					return err
				}
			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				v.QueryArgs, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowQuery) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.QueryType != nil {
		fields[i] = fmt.Sprintf("QueryType: %v", *(v.QueryType))
		i++
	}
	if v.QueryArgs != nil {
		fields[i] = fmt.Sprintf("QueryArgs: %v", v.QueryArgs)
		i++
	}
	return fmt.Sprintf("WorkflowQuery{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowQuery) Equals(rhs *WorkflowQuery) bool {
	if !_String_EqualsPtr(v.QueryType, rhs.QueryType) {
		return false
	}
	if !((v.QueryArgs == nil && rhs.QueryArgs == nil) || (v.QueryArgs != nil && rhs.QueryArgs != nil && bytes.Equal(v.QueryArgs, rhs.QueryArgs))) {
		return false
	}
	return true
}

func (v *WorkflowQuery) GetQueryType() (o string) {
	if v.QueryType != nil {
		return *v.QueryType
	}
	return
}

type WorkflowType struct {
	Name *string `json:"name,omitempty"`
}

func (v *WorkflowType) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowType) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowType) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("WorkflowType{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowType) Equals(rhs *WorkflowType) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	return true
}

func (v *WorkflowType) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}

type WorkflowTypeFilter struct {
	Name *string `json:"name,omitempty"`
}

func (v *WorkflowTypeFilter) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *WorkflowTypeFilter) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *WorkflowTypeFilter) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("WorkflowTypeFilter{%v}", strings.Join(fields[:i], ", "))
}

func (v *WorkflowTypeFilter) Equals(rhs *WorkflowTypeFilter) bool {
	if !_String_EqualsPtr(v.Name, rhs.Name) {
		return false
	}
	return true
}

func (v *WorkflowTypeFilter) GetName() (o string) {
	if v.Name != nil {
		return *v.Name
	}
	return
}
