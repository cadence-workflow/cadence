package grpc

// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/grpc.tmpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"

	"go.uber.org/yarpc"

	"github.com/uber/cadence/common/types"
	"github.com/uber/cadence/common/types/mapper/proto"
)

func (g sharddistributorexecutorClient) AssignShard(ctx context.Context, ep1 *types.ExecutorAssignShardRequest, p1 ...yarpc.CallOption) (ep2 *types.ExecutorAssignShardResponse, err error) {
	response, err := g.c.AssignShard(ctx, proto.FromShardDistributorExecutorAssignShardRequest(ep1), p1...)
	return proto.ToShardDistributorExecutorAssignShardResponse(response), proto.ToError(err)
}

func (g sharddistributorexecutorClient) Heartbeat(ctx context.Context, ep1 *types.ExecutorHeartbeatRequest, p1 ...yarpc.CallOption) (ep2 *types.ExecutorHeartbeatResponse, err error) {
	response, err := g.c.Heartbeat(ctx, proto.FromShardDistributorExecutorHeartbeatRequest(ep1), p1...)
	return proto.ToShardDistributorExecutorHeartbeatResponse(response), proto.ToError(err)
}
