// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewGenericBulkableRequest creates a new instance of GenericBulkableRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericBulkableRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericBulkableRequest {
	mock := &GenericBulkableRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GenericBulkableRequest is an autogenerated mock type for the GenericBulkableRequest type
type GenericBulkableRequest struct {
	mock.Mock
}

type GenericBulkableRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *GenericBulkableRequest) EXPECT() *GenericBulkableRequest_Expecter {
	return &GenericBulkableRequest_Expecter{mock: &_m.Mock}
}

// Source provides a mock function for the type GenericBulkableRequest
func (_mock *GenericBulkableRequest) Source() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Source")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GenericBulkableRequest_Source_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Source'
type GenericBulkableRequest_Source_Call struct {
	*mock.Call
}

// Source is a helper method to define mock.On call
func (_e *GenericBulkableRequest_Expecter) Source() *GenericBulkableRequest_Source_Call {
	return &GenericBulkableRequest_Source_Call{Call: _e.mock.On("Source")}
}

func (_c *GenericBulkableRequest_Source_Call) Run(run func()) *GenericBulkableRequest_Source_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericBulkableRequest_Source_Call) Return(strings []string, err error) *GenericBulkableRequest_Source_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *GenericBulkableRequest_Source_Call) RunAndReturn(run func() ([]string, error)) *GenericBulkableRequest_Source_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type GenericBulkableRequest
func (_mock *GenericBulkableRequest) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// GenericBulkableRequest_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type GenericBulkableRequest_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *GenericBulkableRequest_Expecter) String() *GenericBulkableRequest_String_Call {
	return &GenericBulkableRequest_String_Call{Call: _e.mock.On("String")}
}

func (_c *GenericBulkableRequest_String_Call) Run(run func()) *GenericBulkableRequest_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericBulkableRequest_String_Call) Return(s string) *GenericBulkableRequest_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *GenericBulkableRequest_String_Call) RunAndReturn(run func() string) *GenericBulkableRequest_String_Call {
	_c.Call.Return(run)
	return _c
}
