-- guide for types mapping https://www.redbooks.ibm.com/redbooks/pdfs/sg247093.pdf

CREATE TABLE cadence.domains(
  shard_id INT NOT NULL DEFAULT 54321,
  id CHAR(16) NOT NULL,
  name VARCHAR(255) UNIQUE NOT NULL,
  --
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  is_global SMALLINT NOT NULL,
  PRIMARY KEY(shard_id, id)
);

CREATE TABLE cadence.domain_metadata (
  notification_version BIGINT NOT NULL
);

INSERT INTO cadence.domain_metadata (notification_version) VALUES (1);

CREATE TABLE cadence.shards (
  shard_id INT NOT NULL,
  --
  range_id BIGINT NOT NULL,
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (shard_id)
);

CREATE TABLE cadence.transfer_tasks(
  shard_id INT NOT NULL,
  task_id BIGINT NOT NULL,
  --
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (shard_id, task_id)
);

CREATE TABLE cadence.executions(
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  --
  next_event_id BIGINT NOT NULL,
  last_write_version BIGINT NOT NULL,
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (shard_id, domain_id, workflow_id, run_id)
);

CREATE TABLE cadence.current_executions(
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  --
  run_id CHAR(16) NOT NULL,
  create_request_id VARCHAR(64) NOT NULL,
  state INT NOT NULL,
  close_status INT NOT NULL,
  start_version BIGINT NOT NULL,
  last_write_version BIGINT NOT NULL,
  PRIMARY KEY (shard_id, domain_id, workflow_id)
);

CREATE TABLE cadence.buffered_events (
  id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  --
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (id)
);

CREATE INDEX cadence.buffered_events_by_events_ids ON cadence.buffered_events(shard_id, domain_id, workflow_id, run_id);

CREATE TABLE cadence.tasks (
  domain_id CHAR(16) NOT NULL,
  task_list_name VARCHAR(255) NOT NULL,
  task_type SMALLINT NOT NULL, -- {Activity, Decision}
  task_id BIGINT NOT NULL,
  --
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (domain_id, task_list_name, task_type, task_id)
);

CREATE TABLE cadence.task_lists (
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  name VARCHAR(255) NOT NULL,
  task_type SMALLINT NOT NULL, -- {Activity, Decision}
  --
  range_id BIGINT NOT NULL,
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (shard_id, domain_id, name, task_type)
);

CREATE TABLE cadence.replication_tasks (
  shard_id INT NOT NULL,
  task_id BIGINT NOT NULL,
  --
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (shard_id, task_id)
);

CREATE TABLE cadence.replication_tasks_dlq (
  source_cluster_name VARCHAR(255) NOT NULL,
  shard_id INT NOT NULL,
  task_id BIGINT NOT NULL,
  --
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (source_cluster_name, shard_id, task_id)
);

CREATE TABLE cadence.timer_tasks (
  shard_id INT NOT NULL,
  visibility_timestamp TIMESTAMP NOT NULL,
  task_id BIGINT NOT NULL,
  --
  data BLOB NOT NULL,
  data_encoding VARCHAR(16) NOT NULL,
  PRIMARY KEY (shard_id, visibility_timestamp, task_id)
);

CREATE TABLE cadence.activity_info_maps (
-- each row corresponds to one key of one map<string, ActivityInfo>
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  schedule_id BIGINT NOT NULL,
--
  data BLOB NOT NULL,
  data_encoding VARCHAR(16),
  last_heartbeat_details BLOB,
  last_heartbeat_updated_time TIMESTAMP NOT NULL,
  PRIMARY KEY (shard_id, domain_id, workflow_id, run_id, schedule_id)
);

CREATE TABLE cadence.timer_info_maps (
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  timer_id VARCHAR(255) NOT NULL,
--
  data BLOB NOT NULL,
  data_encoding VARCHAR(16),
  PRIMARY KEY (shard_id, domain_id, workflow_id, run_id, timer_id)
);

CREATE TABLE cadence.child_execution_info_maps (
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  initiated_id BIGINT NOT NULL,
--
  data BLOB NOT NULL,
  data_encoding VARCHAR(16),
  PRIMARY KEY (shard_id, domain_id, workflow_id, run_id, initiated_id)
);

CREATE TABLE cadence.request_cancel_info_maps (
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  initiated_id BIGINT NOT NULL,
--
  data BLOB NOT NULL,
  data_encoding VARCHAR(16),
  PRIMARY KEY (shard_id, domain_id, workflow_id, run_id, initiated_id)
);

CREATE TABLE cadence.signal_info_maps (
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  initiated_id BIGINT NOT NULL,
--
  data BLOB NOT NULL,
  data_encoding VARCHAR(16),
  PRIMARY KEY (shard_id, domain_id, workflow_id, run_id, initiated_id)
);

CREATE TABLE cadence.buffered_replication_task_maps (
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  first_event_id BIGINT NOT NULL,
--
  version BIGINT NOT NULL,
  next_event_id BIGINT NOT NULL,
  history BLOB,
  history_encoding VARCHAR(16) NOT NULL,
  new_run_history BLOB,
  new_run_history_encoding VARCHAR(16) NOT NULL DEFAULT 'json',
  event_store_version          INT NOT NULL, -- indiciates which version of event store to query
  new_run_event_store_version  INT NOT NULL, -- indiciates which version of event store to query for new run(continueAsNew)
  PRIMARY KEY (shard_id, domain_id, workflow_id, run_id, first_event_id)
);

CREATE TABLE cadence.signals_requested_sets (
  shard_id INT NOT NULL,
  domain_id CHAR(16) NOT NULL,
  workflow_id VARCHAR(255) NOT NULL,
  run_id CHAR(16) NOT NULL,
  signal_id VARCHAR(64) NOT NULL,
  --
  PRIMARY KEY (shard_id, domain_id, workflow_id, run_id, signal_id)
);

-- history eventsV2: history_node stores history event data
CREATE TABLE cadence.history_node (
  shard_id       INT NOT NULL,
  tree_id        CHAR(16) NOT NULL,
  branch_id      CHAR(16) NOT NULL,
  node_id        BIGINT NOT NULL,
  txn_id         BIGINT NOT NULL,
  --
  data           BLOB NOT NULL,
  data_encoding  VARCHAR(16) NOT NULL,
  PRIMARY KEY (shard_id, tree_id, branch_id, node_id, txn_id)
);

-- history eventsV2: history_tree stores branch metadata
CREATE TABLE cadence.history_tree (
  shard_id       INT NOT NULL,
  tree_id        CHAR(16) NOT NULL,
  branch_id      CHAR(16) NOT NULL,
  --
  data           BLOB NOT NULL,
  data_encoding  VARCHAR(16) NOT NULL,
  PRIMARY KEY (shard_id, tree_id, branch_id)
);

CREATE TABLE cadence.queue (
  queue_type INT NOT NULL,
  message_id BIGINT NOT NULL,
  message_payload BLOB NOT NULL,
  PRIMARY KEY(queue_type, message_id)
);

CREATE TABLE cadence.queue_metadata (
  queue_type INT NOT NULL,
  data BLOB NOT NULL,
  PRIMARY KEY(queue_type)
);
