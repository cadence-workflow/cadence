// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/service_worker.proto

package apiv1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PollForDecisionTaskRequest struct {
	Domain         string    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList       *TaskList `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Identity       string    `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum string    `protobuf:"bytes,4,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
}

func (m *PollForDecisionTaskRequest) Reset()      { *m = PollForDecisionTaskRequest{} }
func (*PollForDecisionTaskRequest) ProtoMessage() {}
func (*PollForDecisionTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{0}
}
func (m *PollForDecisionTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForDecisionTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForDecisionTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForDecisionTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForDecisionTaskRequest.Merge(m, src)
}
func (m *PollForDecisionTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollForDecisionTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForDecisionTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollForDecisionTaskRequest proto.InternalMessageInfo

func (m *PollForDecisionTaskRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *PollForDecisionTaskRequest) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *PollForDecisionTaskRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollForDecisionTaskRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type PollForDecisionTaskResponse struct {
	TaskToken                 []byte                    `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution         *WorkflowExecution        `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType              *WorkflowType             `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	PreviousStartedEventId    int64                     `protobuf:"varint,4,opt,name=previous_started_event_id,json=previousStartedEventId,proto3" json:"previous_started_event_id,omitempty"`
	StartedEventId            int64                     `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Attempt                   int64                     `protobuf:"varint,6,opt,name=attempt,proto3" json:"attempt,omitempty"`
	BacklogCountHint          int64                     `protobuf:"varint,7,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	History                   *History                  `protobuf:"bytes,8,opt,name=history,proto3" json:"history,omitempty"`
	NextPageToken             []byte                    `protobuf:"bytes,9,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query                     *WorkflowQuery            `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	WorkflowExecutionTaskList *TaskList                 `protobuf:"bytes,11,opt,name=workflow_execution_task_list,json=workflowExecutionTaskList,proto3" json:"workflow_execution_task_list,omitempty"`
	ScheduledTime             *time.Time                `protobuf:"bytes,12,opt,name=scheduled_time,json=scheduledTime,proto3,stdtime" json:"scheduled_time,omitempty"`
	StartedTime               *time.Time                `protobuf:"bytes,13,opt,name=started_time,json=startedTime,proto3,stdtime" json:"started_time,omitempty"`
	Queries                   map[string]*WorkflowQuery `protobuf:"bytes,14,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PollForDecisionTaskResponse) Reset()      { *m = PollForDecisionTaskResponse{} }
func (*PollForDecisionTaskResponse) ProtoMessage() {}
func (*PollForDecisionTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{1}
}
func (m *PollForDecisionTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForDecisionTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForDecisionTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForDecisionTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForDecisionTaskResponse.Merge(m, src)
}
func (m *PollForDecisionTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollForDecisionTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForDecisionTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollForDecisionTaskResponse proto.InternalMessageInfo

func (m *PollForDecisionTaskResponse) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowType() *WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetPreviousStartedEventId() int64 {
	if m != nil {
		return m.PreviousStartedEventId
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetAttempt() int64 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetBacklogCountHint() int64 {
	if m != nil {
		return m.BacklogCountHint
	}
	return 0
}

func (m *PollForDecisionTaskResponse) GetHistory() *History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetQuery() *WorkflowQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetWorkflowExecutionTaskList() *TaskList {
	if m != nil {
		return m.WorkflowExecutionTaskList
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetScheduledTime() *time.Time {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetStartedTime() *time.Time {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *PollForDecisionTaskResponse) GetQueries() map[string]*WorkflowQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

type RespondDecisionTaskCompletedRequest struct {
	TaskToken                  []byte                          `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Decisions                  []*Decision                     `protobuf:"bytes,2,rep,name=decisions,proto3" json:"decisions,omitempty"`
	ExecutionContext           []byte                          `protobuf:"bytes,3,opt,name=execution_context,json=executionContext,proto3" json:"execution_context,omitempty"`
	Identity                   string                          `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	StickyAttributes           *StickyExecutionAttributes      `protobuf:"bytes,5,opt,name=sticky_attributes,json=stickyAttributes,proto3" json:"sticky_attributes,omitempty"`
	ReturnNewDecisionTask      bool                            `protobuf:"varint,6,opt,name=return_new_decision_task,json=returnNewDecisionTask,proto3" json:"return_new_decision_task,omitempty"`
	ForceCreateNewDecisionTask bool                            `protobuf:"varint,7,opt,name=force_create_new_decision_task,json=forceCreateNewDecisionTask,proto3" json:"force_create_new_decision_task,omitempty"`
	BinaryChecksum             string                          `protobuf:"bytes,8,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	QueryResults               map[string]*WorkflowQueryResult `protobuf:"bytes,9,rep,name=query_results,json=queryResults,proto3" json:"query_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RespondDecisionTaskCompletedRequest) Reset()      { *m = RespondDecisionTaskCompletedRequest{} }
func (*RespondDecisionTaskCompletedRequest) ProtoMessage() {}
func (*RespondDecisionTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{2}
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskCompletedRequest.Merge(m, src)
}
func (m *RespondDecisionTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondDecisionTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetDecisions() []*Decision {
	if m != nil {
		return m.Decisions
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetExecutionContext() []byte {
	if m != nil {
		return m.ExecutionContext
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RespondDecisionTaskCompletedRequest) GetStickyAttributes() *StickyExecutionAttributes {
	if m != nil {
		return m.StickyAttributes
	}
	return nil
}

func (m *RespondDecisionTaskCompletedRequest) GetReturnNewDecisionTask() bool {
	if m != nil {
		return m.ReturnNewDecisionTask
	}
	return false
}

func (m *RespondDecisionTaskCompletedRequest) GetForceCreateNewDecisionTask() bool {
	if m != nil {
		return m.ForceCreateNewDecisionTask
	}
	return false
}

func (m *RespondDecisionTaskCompletedRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

func (m *RespondDecisionTaskCompletedRequest) GetQueryResults() map[string]*WorkflowQueryResult {
	if m != nil {
		return m.QueryResults
	}
	return nil
}

type RespondDecisionTaskCompletedResponse struct {
	DecisionTask                *PollForDecisionTaskResponse          `protobuf:"bytes,1,opt,name=decision_task,json=decisionTask,proto3" json:"decision_task,omitempty"`
	ActivitiesToDispatchLocally map[string]*ActivityLocalDispatchInfo `protobuf:"bytes,2,rep,name=activities_to_dispatch_locally,json=activitiesToDispatchLocally,proto3" json:"activities_to_dispatch_locally,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RespondDecisionTaskCompletedResponse) Reset()      { *m = RespondDecisionTaskCompletedResponse{} }
func (*RespondDecisionTaskCompletedResponse) ProtoMessage() {}
func (*RespondDecisionTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{3}
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskCompletedResponse.Merge(m, src)
}
func (m *RespondDecisionTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskCompletedResponse proto.InternalMessageInfo

func (m *RespondDecisionTaskCompletedResponse) GetDecisionTask() *PollForDecisionTaskResponse {
	if m != nil {
		return m.DecisionTask
	}
	return nil
}

func (m *RespondDecisionTaskCompletedResponse) GetActivitiesToDispatchLocally() map[string]*ActivityLocalDispatchInfo {
	if m != nil {
		return m.ActivitiesToDispatchLocally
	}
	return nil
}

type RespondDecisionTaskFailedRequest struct {
	TaskToken      []byte                  `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Cause          DecisionTaskFailedCause `protobuf:"varint,2,opt,name=cause,proto3,enum=uber.cadence.api.v1.DecisionTaskFailedCause" json:"cause,omitempty"`
	Details        *Payload                `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	Identity       string                  `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum string                  `protobuf:"bytes,5,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
}

func (m *RespondDecisionTaskFailedRequest) Reset()      { *m = RespondDecisionTaskFailedRequest{} }
func (*RespondDecisionTaskFailedRequest) ProtoMessage() {}
func (*RespondDecisionTaskFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{4}
}
func (m *RespondDecisionTaskFailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskFailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskFailedRequest.Merge(m, src)
}
func (m *RespondDecisionTaskFailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskFailedRequest proto.InternalMessageInfo

func (m *RespondDecisionTaskFailedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondDecisionTaskFailedRequest) GetCause() DecisionTaskFailedCause {
	if m != nil {
		return m.Cause
	}
	return DECISION_TASK_FAILED_CAUSE_INVALID
}

func (m *RespondDecisionTaskFailedRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondDecisionTaskFailedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RespondDecisionTaskFailedRequest) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type RespondDecisionTaskFailedResponse struct {
}

func (m *RespondDecisionTaskFailedResponse) Reset()      { *m = RespondDecisionTaskFailedResponse{} }
func (*RespondDecisionTaskFailedResponse) ProtoMessage() {}
func (*RespondDecisionTaskFailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{5}
}
func (m *RespondDecisionTaskFailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondDecisionTaskFailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondDecisionTaskFailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondDecisionTaskFailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondDecisionTaskFailedResponse.Merge(m, src)
}
func (m *RespondDecisionTaskFailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondDecisionTaskFailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondDecisionTaskFailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondDecisionTaskFailedResponse proto.InternalMessageInfo

type PollForActivityTaskRequest struct {
	Domain           string            `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	TaskList         *TaskList         `protobuf:"bytes,2,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	Identity         string            `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	TaskListMetadata *TaskListMetadata `protobuf:"bytes,4,opt,name=task_list_metadata,json=taskListMetadata,proto3" json:"task_list_metadata,omitempty"`
}

func (m *PollForActivityTaskRequest) Reset()      { *m = PollForActivityTaskRequest{} }
func (*PollForActivityTaskRequest) ProtoMessage() {}
func (*PollForActivityTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{6}
}
func (m *PollForActivityTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForActivityTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForActivityTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForActivityTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForActivityTaskRequest.Merge(m, src)
}
func (m *PollForActivityTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollForActivityTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForActivityTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollForActivityTaskRequest proto.InternalMessageInfo

func (m *PollForActivityTaskRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *PollForActivityTaskRequest) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *PollForActivityTaskRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollForActivityTaskRequest) GetTaskListMetadata() *TaskListMetadata {
	if m != nil {
		return m.TaskListMetadata
	}
	return nil
}

type PollForActivityTaskResponse struct {
	TaskToken                       []byte             `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution               *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId                      string             `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType                    *ActivityType      `protobuf:"bytes,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Input                           *Payload           `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ScheduledTimestamp              *time.Time         `protobuf:"bytes,6,opt,name=scheduled_timestamp,json=scheduledTimestamp,proto3,stdtime" json:"scheduled_timestamp,omitempty"`
	StartedTimestamp                *time.Time         `protobuf:"bytes,7,opt,name=started_timestamp,json=startedTimestamp,proto3,stdtime" json:"started_timestamp,omitempty"`
	ScheduleToCloseTimeout          *time.Duration     `protobuf:"bytes,8,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3,stdduration" json:"schedule_to_close_timeout,omitempty"`
	StartToCloseTimeout             *time.Duration     `protobuf:"bytes,9,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3,stdduration" json:"start_to_close_timeout,omitempty"`
	HeartbeatTimeout                *time.Duration     `protobuf:"bytes,10,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3,stdduration" json:"heartbeat_timeout,omitempty"`
	Attempt                         int32              `protobuf:"varint,11,opt,name=attempt,proto3" json:"attempt,omitempty"`
	ScheduledTimestampOfThisAttempt *time.Time         `protobuf:"bytes,12,opt,name=scheduled_timestamp_of_this_attempt,json=scheduledTimestampOfThisAttempt,proto3,stdtime" json:"scheduled_timestamp_of_this_attempt,omitempty"`
	HeartbeatDetails                *Payload           `protobuf:"bytes,13,opt,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	WorkflowType                    *WorkflowType      `protobuf:"bytes,14,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	WorkflowDomain                  string             `protobuf:"bytes,15,opt,name=workflow_domain,json=workflowDomain,proto3" json:"workflow_domain,omitempty"`
	Header                          *Header            `protobuf:"bytes,16,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *PollForActivityTaskResponse) Reset()      { *m = PollForActivityTaskResponse{} }
func (*PollForActivityTaskResponse) ProtoMessage() {}
func (*PollForActivityTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{7}
}
func (m *PollForActivityTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollForActivityTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollForActivityTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollForActivityTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollForActivityTaskResponse.Merge(m, src)
}
func (m *PollForActivityTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollForActivityTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollForActivityTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollForActivityTaskResponse proto.InternalMessageInfo

func (m *PollForActivityTaskResponse) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *PollForActivityTaskResponse) GetActivityType() *ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetInput() *Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetScheduledTimestamp() *time.Time {
	if m != nil {
		return m.ScheduledTimestamp
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetStartedTimestamp() *time.Time {
	if m != nil {
		return m.StartedTimestamp
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetScheduleToCloseTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToCloseTimeout
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.StartToCloseTimeout
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetHeartbeatTimeout() *time.Duration {
	if m != nil {
		return m.HeartbeatTimeout
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PollForActivityTaskResponse) GetScheduledTimestampOfThisAttempt() *time.Time {
	if m != nil {
		return m.ScheduledTimestampOfThisAttempt
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetHeartbeatDetails() *Payload {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowType() *WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *PollForActivityTaskResponse) GetWorkflowDomain() string {
	if m != nil {
		return m.WorkflowDomain
	}
	return ""
}

func (m *PollForActivityTaskResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type RespondActivityTaskCompletedRequest struct {
	TaskToken []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Result    *Payload `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Identity  string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskCompletedRequest) Reset()      { *m = RespondActivityTaskCompletedRequest{} }
func (*RespondActivityTaskCompletedRequest) ProtoMessage() {}
func (*RespondActivityTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{8}
}
func (m *RespondActivityTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedRequest.Merge(m, src)
}
func (m *RespondActivityTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskCompletedRequest) GetResult() *Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RespondActivityTaskCompletedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCompletedResponse struct {
}

func (m *RespondActivityTaskCompletedResponse) Reset()      { *m = RespondActivityTaskCompletedResponse{} }
func (*RespondActivityTaskCompletedResponse) ProtoMessage() {}
func (*RespondActivityTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{9}
}
func (m *RespondActivityTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedResponse.Merge(m, src)
}
func (m *RespondActivityTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedResponse proto.InternalMessageInfo

type RespondActivityTaskCompletedByIDRequest struct {
	Domain     string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId string   `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string   `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ActivityId string   `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Result     *Payload `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	Identity   string   `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskCompletedByIDRequest) Reset() {
	*m = RespondActivityTaskCompletedByIDRequest{}
}
func (*RespondActivityTaskCompletedByIDRequest) ProtoMessage() {}
func (*RespondActivityTaskCompletedByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{10}
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCompletedByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RespondActivityTaskCompletedByIDRequest) GetResult() *Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RespondActivityTaskCompletedByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCompletedByIDResponse struct {
}

func (m *RespondActivityTaskCompletedByIDResponse) Reset() {
	*m = RespondActivityTaskCompletedByIDResponse{}
}
func (*RespondActivityTaskCompletedByIDResponse) ProtoMessage() {}
func (*RespondActivityTaskCompletedByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{11}
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCompletedByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCompletedByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCompletedByIDResponse proto.InternalMessageInfo

type RespondActivityTaskFailedRequest struct {
	TaskToken []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Failure   *Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	Identity  string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskFailedRequest) Reset()      { *m = RespondActivityTaskFailedRequest{} }
func (*RespondActivityTaskFailedRequest) ProtoMessage() {}
func (*RespondActivityTaskFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{12}
}
func (m *RespondActivityTaskFailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedRequest.Merge(m, src)
}
func (m *RespondActivityTaskFailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedRequest proto.InternalMessageInfo

func (m *RespondActivityTaskFailedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskFailedRequest) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *RespondActivityTaskFailedRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskFailedResponse struct {
}

func (m *RespondActivityTaskFailedResponse) Reset()      { *m = RespondActivityTaskFailedResponse{} }
func (*RespondActivityTaskFailedResponse) ProtoMessage() {}
func (*RespondActivityTaskFailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{13}
}
func (m *RespondActivityTaskFailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedResponse.Merge(m, src)
}
func (m *RespondActivityTaskFailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedResponse proto.InternalMessageInfo

type RespondActivityTaskFailedByIDRequest struct {
	Domain     string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId string   `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string   `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ActivityId string   `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Failure    *Failure `protobuf:"bytes,5,opt,name=failure,proto3" json:"failure,omitempty"`
	Identity   string   `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskFailedByIDRequest) Reset()      { *m = RespondActivityTaskFailedByIDRequest{} }
func (*RespondActivityTaskFailedByIDRequest) ProtoMessage() {}
func (*RespondActivityTaskFailedByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{14}
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskFailedByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RespondActivityTaskFailedByIDRequest) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *RespondActivityTaskFailedByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskFailedByIDResponse struct {
}

func (m *RespondActivityTaskFailedByIDResponse) Reset()      { *m = RespondActivityTaskFailedByIDResponse{} }
func (*RespondActivityTaskFailedByIDResponse) ProtoMessage() {}
func (*RespondActivityTaskFailedByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{15}
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskFailedByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskFailedByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskFailedByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskFailedByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskFailedByIDResponse proto.InternalMessageInfo

type RespondActivityTaskCanceledRequest struct {
	TaskToken []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Details   *Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity  string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskCanceledRequest) Reset()      { *m = RespondActivityTaskCanceledRequest{} }
func (*RespondActivityTaskCanceledRequest) ProtoMessage() {}
func (*RespondActivityTaskCanceledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{16}
}
func (m *RespondActivityTaskCanceledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledRequest.Merge(m, src)
}
func (m *RespondActivityTaskCanceledRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCanceledRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondActivityTaskCanceledRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondActivityTaskCanceledRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCanceledResponse struct {
}

func (m *RespondActivityTaskCanceledResponse) Reset()      { *m = RespondActivityTaskCanceledResponse{} }
func (*RespondActivityTaskCanceledResponse) ProtoMessage() {}
func (*RespondActivityTaskCanceledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{17}
}
func (m *RespondActivityTaskCanceledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledResponse.Merge(m, src)
}
func (m *RespondActivityTaskCanceledResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledResponse proto.InternalMessageInfo

type RespondActivityTaskCanceledByIDRequest struct {
	Domain     string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId string   `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string   `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ActivityId string   `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Details    *Payload `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	Identity   string   `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RespondActivityTaskCanceledByIDRequest) Reset() {
	*m = RespondActivityTaskCanceledByIDRequest{}
}
func (*RespondActivityTaskCanceledByIDRequest) ProtoMessage() {}
func (*RespondActivityTaskCanceledByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{18}
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.Merge(m, src)
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledByIDRequest proto.InternalMessageInfo

func (m *RespondActivityTaskCanceledByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RespondActivityTaskCanceledByIDRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RespondActivityTaskCanceledByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RespondActivityTaskCanceledByIDResponse struct {
}

func (m *RespondActivityTaskCanceledByIDResponse) Reset() {
	*m = RespondActivityTaskCanceledByIDResponse{}
}
func (*RespondActivityTaskCanceledByIDResponse) ProtoMessage() {}
func (*RespondActivityTaskCanceledByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{19}
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.Merge(m, src)
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondActivityTaskCanceledByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondActivityTaskCanceledByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondActivityTaskCanceledByIDResponse proto.InternalMessageInfo

type RecordActivityTaskHeartbeatRequest struct {
	TaskToken []byte   `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Details   *Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity  string   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RecordActivityTaskHeartbeatRequest) Reset()      { *m = RecordActivityTaskHeartbeatRequest{} }
func (*RecordActivityTaskHeartbeatRequest) ProtoMessage() {}
func (*RecordActivityTaskHeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{20}
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatRequest.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatRequest proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatResponse struct {
	CancelRequested bool `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
}

func (m *RecordActivityTaskHeartbeatResponse) Reset()      { *m = RecordActivityTaskHeartbeatResponse{} }
func (*RecordActivityTaskHeartbeatResponse) ProtoMessage() {}
func (*RecordActivityTaskHeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{21}
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatResponse.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatResponse proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatResponse) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

type RecordActivityTaskHeartbeatByIDRequest struct {
	Domain     string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowId string   `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string   `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ActivityId string   `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Details    *Payload `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	Identity   string   `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Reset() {
	*m = RecordActivityTaskHeartbeatByIDRequest{}
}
func (*RecordActivityTaskHeartbeatByIDRequest) ProtoMessage() {}
func (*RecordActivityTaskHeartbeatByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{22}
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatByIDRequest proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatByIDRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetDetails() *Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatByIDResponse struct {
	CancelRequested bool `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Reset() {
	*m = RecordActivityTaskHeartbeatByIDResponse{}
}
func (*RecordActivityTaskHeartbeatByIDResponse) ProtoMessage() {}
func (*RecordActivityTaskHeartbeatByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{23}
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.Merge(m, src)
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityTaskHeartbeatByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityTaskHeartbeatByIDResponse proto.InternalMessageInfo

func (m *RecordActivityTaskHeartbeatByIDResponse) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

type RespondQueryTaskCompletedRequest struct {
	TaskToken         []byte               `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	Result            *WorkflowQueryResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	WorkerVersionInfo *WorkerVersionInfo   `protobuf:"bytes,3,opt,name=worker_version_info,json=workerVersionInfo,proto3" json:"worker_version_info,omitempty"`
}

func (m *RespondQueryTaskCompletedRequest) Reset()      { *m = RespondQueryTaskCompletedRequest{} }
func (*RespondQueryTaskCompletedRequest) ProtoMessage() {}
func (*RespondQueryTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{24}
}
func (m *RespondQueryTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondQueryTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondQueryTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondQueryTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondQueryTaskCompletedRequest.Merge(m, src)
}
func (m *RespondQueryTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondQueryTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondQueryTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondQueryTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondQueryTaskCompletedRequest) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *RespondQueryTaskCompletedRequest) GetResult() *WorkflowQueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RespondQueryTaskCompletedRequest) GetWorkerVersionInfo() *WorkerVersionInfo {
	if m != nil {
		return m.WorkerVersionInfo
	}
	return nil
}

type RespondQueryTaskCompletedResponse struct {
}

func (m *RespondQueryTaskCompletedResponse) Reset()      { *m = RespondQueryTaskCompletedResponse{} }
func (*RespondQueryTaskCompletedResponse) ProtoMessage() {}
func (*RespondQueryTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{25}
}
func (m *RespondQueryTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondQueryTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondQueryTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondQueryTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondQueryTaskCompletedResponse.Merge(m, src)
}
func (m *RespondQueryTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondQueryTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondQueryTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondQueryTaskCompletedResponse proto.InternalMessageInfo

type RequestCancelWorkflowExecutionRequest struct {
	Domain            string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	WorkflowExecution *WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Identity          string             `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId         string             `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *RequestCancelWorkflowExecutionRequest) Reset()      { *m = RequestCancelWorkflowExecutionRequest{} }
func (*RequestCancelWorkflowExecutionRequest) ProtoMessage() {}
func (*RequestCancelWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{26}
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelWorkflowExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelWorkflowExecutionRequest.Merge(m, src)
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelWorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelWorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelWorkflowExecutionRequest proto.InternalMessageInfo

func (m *RequestCancelWorkflowExecutionRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RequestCancelWorkflowExecutionRequest) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelWorkflowExecutionRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RequestCancelWorkflowExecutionRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type RequestCancelWorkflowExecutionResponse struct {
}

func (m *RequestCancelWorkflowExecutionResponse) Reset() {
	*m = RequestCancelWorkflowExecutionResponse{}
}
func (*RequestCancelWorkflowExecutionResponse) ProtoMessage() {}
func (*RequestCancelWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00684e887839a48c, []int{27}
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelWorkflowExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelWorkflowExecutionResponse.Merge(m, src)
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelWorkflowExecutionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PollForDecisionTaskRequest)(nil), "uber.cadence.api.v1.PollForDecisionTaskRequest")
	proto.RegisterType((*PollForDecisionTaskResponse)(nil), "uber.cadence.api.v1.PollForDecisionTaskResponse")
	proto.RegisterMapType((map[string]*WorkflowQuery)(nil), "uber.cadence.api.v1.PollForDecisionTaskResponse.QueriesEntry")
	proto.RegisterType((*RespondDecisionTaskCompletedRequest)(nil), "uber.cadence.api.v1.RespondDecisionTaskCompletedRequest")
	proto.RegisterMapType((map[string]*WorkflowQueryResult)(nil), "uber.cadence.api.v1.RespondDecisionTaskCompletedRequest.QueryResultsEntry")
	proto.RegisterType((*RespondDecisionTaskCompletedResponse)(nil), "uber.cadence.api.v1.RespondDecisionTaskCompletedResponse")
	proto.RegisterMapType((map[string]*ActivityLocalDispatchInfo)(nil), "uber.cadence.api.v1.RespondDecisionTaskCompletedResponse.ActivitiesToDispatchLocallyEntry")
	proto.RegisterType((*RespondDecisionTaskFailedRequest)(nil), "uber.cadence.api.v1.RespondDecisionTaskFailedRequest")
	proto.RegisterType((*RespondDecisionTaskFailedResponse)(nil), "uber.cadence.api.v1.RespondDecisionTaskFailedResponse")
	proto.RegisterType((*PollForActivityTaskRequest)(nil), "uber.cadence.api.v1.PollForActivityTaskRequest")
	proto.RegisterType((*PollForActivityTaskResponse)(nil), "uber.cadence.api.v1.PollForActivityTaskResponse")
	proto.RegisterType((*RespondActivityTaskCompletedRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskCompletedRequest")
	proto.RegisterType((*RespondActivityTaskCompletedResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskCompletedResponse")
	proto.RegisterType((*RespondActivityTaskCompletedByIDRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskCompletedByIDRequest")
	proto.RegisterType((*RespondActivityTaskCompletedByIDResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskCompletedByIDResponse")
	proto.RegisterType((*RespondActivityTaskFailedRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskFailedRequest")
	proto.RegisterType((*RespondActivityTaskFailedResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskFailedResponse")
	proto.RegisterType((*RespondActivityTaskFailedByIDRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskFailedByIDRequest")
	proto.RegisterType((*RespondActivityTaskFailedByIDResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskFailedByIDResponse")
	proto.RegisterType((*RespondActivityTaskCanceledRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskCanceledRequest")
	proto.RegisterType((*RespondActivityTaskCanceledResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskCanceledResponse")
	proto.RegisterType((*RespondActivityTaskCanceledByIDRequest)(nil), "uber.cadence.api.v1.RespondActivityTaskCanceledByIDRequest")
	proto.RegisterType((*RespondActivityTaskCanceledByIDResponse)(nil), "uber.cadence.api.v1.RespondActivityTaskCanceledByIDResponse")
	proto.RegisterType((*RecordActivityTaskHeartbeatRequest)(nil), "uber.cadence.api.v1.RecordActivityTaskHeartbeatRequest")
	proto.RegisterType((*RecordActivityTaskHeartbeatResponse)(nil), "uber.cadence.api.v1.RecordActivityTaskHeartbeatResponse")
	proto.RegisterType((*RecordActivityTaskHeartbeatByIDRequest)(nil), "uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDRequest")
	proto.RegisterType((*RecordActivityTaskHeartbeatByIDResponse)(nil), "uber.cadence.api.v1.RecordActivityTaskHeartbeatByIDResponse")
	proto.RegisterType((*RespondQueryTaskCompletedRequest)(nil), "uber.cadence.api.v1.RespondQueryTaskCompletedRequest")
	proto.RegisterType((*RespondQueryTaskCompletedResponse)(nil), "uber.cadence.api.v1.RespondQueryTaskCompletedResponse")
	proto.RegisterType((*RequestCancelWorkflowExecutionRequest)(nil), "uber.cadence.api.v1.RequestCancelWorkflowExecutionRequest")
	proto.RegisterType((*RequestCancelWorkflowExecutionResponse)(nil), "uber.cadence.api.v1.RequestCancelWorkflowExecutionResponse")
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/api/v1/service_worker.proto", fileDescriptor_00684e887839a48c)
}

var fileDescriptor_00684e887839a48c = []byte{
	// 2080 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x5b, 0x6f, 0x1c, 0x49,
	0x15, 0x76, 0xdb, 0x1e, 0x5f, 0x8e, 0x6f, 0xe3, 0xb2, 0x36, 0x8c, 0x27, 0xc9, 0xd8, 0x99, 0x90,
	0xc4, 0x0b, 0xab, 0x31, 0xf1, 0x42, 0x36, 0x97, 0x5d, 0x84, 0x2f, 0x09, 0x31, 0xca, 0x82, 0xd3,
	0x99, 0xdd, 0x95, 0x82, 0xb4, 0x4d, 0xb9, 0xbb, 0x6c, 0x97, 0x3c, 0xd3, 0x35, 0xe9, 0xae, 0xb6,
	0x33, 0x2f, 0x08, 0xf1, 0x88, 0x84, 0x14, 0x09, 0xb1, 0x80, 0x84, 0x94, 0x57, 0xf8, 0x01, 0xfc,
	0x07, 0x78, 0x40, 0x0a, 0x6f, 0x2b, 0xf1, 0x00, 0x71, 0x5e, 0x90, 0x00, 0x29, 0x3f, 0x01, 0x75,
	0x55, 0x75, 0x4f, 0xcf, 0x4c, 0x4d, 0x4f, 0xcf, 0x48, 0xc8, 0xd2, 0xbe, 0x4d, 0x57, 0x9d, 0xf3,
	0xd5, 0xb9, 0xd5, 0xa9, 0xaf, 0x6a, 0x60, 0x2d, 0xd8, 0x27, 0xde, 0xba, 0x8d, 0x1d, 0xe2, 0xda,
	0x64, 0x1d, 0x37, 0xe8, 0xfa, 0xc9, 0xcd, 0x75, 0x9f, 0x78, 0x27, 0xd4, 0x26, 0xd6, 0x29, 0xf3,
	0x8e, 0x89, 0x57, 0x69, 0x78, 0x8c, 0x33, 0xb4, 0x14, 0x4a, 0x56, 0x94, 0x64, 0x05, 0x37, 0x68,
	0xe5, 0xe4, 0x66, 0xb1, 0x74, 0xc8, 0xd8, 0x61, 0x8d, 0xac, 0x0b, 0x91, 0xfd, 0xe0, 0x60, 0xdd,
	0x09, 0x3c, 0xcc, 0x29, 0x73, 0xa5, 0x52, 0x71, 0xa5, 0x73, 0x9e, 0xd3, 0x3a, 0xf1, 0x39, 0xae,
	0x37, 0x94, 0xc0, 0x25, 0x87, 0x34, 0x88, 0x1b, 0x62, 0x52, 0xe2, 0xaf, 0x1f, 0xb2, 0x43, 0x26,
	0xc6, 0xd5, 0xec, 0xaa, 0xce, 0x3a, 0x9b, 0xd5, 0xeb, 0xf1, 0x02, 0x65, 0x9d, 0x84, 0x43, 0x6c,
	0xea, 0xb7, 0x8c, 0xb8, 0xa2, 0x93, 0x39, 0xa2, 0x3e, 0x67, 0x5e, 0x33, 0xb2, 0x53, 0x27, 0xf2,
	0x2c, 0x20, 0xb1, 0x80, 0x76, 0x1d, 0x8e, 0xfd, 0xe3, 0x1a, 0xf5, 0x79, 0x9a, 0x4c, 0x18, 0xc3,
	0x83, 0x1a, 0x3b, 0x95, 0x32, 0xe5, 0x3f, 0x19, 0x50, 0xdc, 0x63, 0xb5, 0xda, 0x03, 0xe6, 0xed,
	0x28, 0x2b, 0xab, 0xd8, 0x3f, 0x36, 0xc9, 0xb3, 0x80, 0xf8, 0x1c, 0x5d, 0x80, 0x09, 0x87, 0xd5,
	0x31, 0x75, 0x0b, 0xc6, 0xaa, 0xb1, 0x36, 0x6d, 0xaa, 0x2f, 0x74, 0x17, 0xa6, 0xc3, 0xc5, 0xac,
	0x70, 0xb5, 0xc2, 0xe8, 0xaa, 0xb1, 0x36, 0xb3, 0x71, 0xb9, 0xa2, 0x49, 0x48, 0x25, 0x04, 0x7b,
	0x44, 0x7d, 0x6e, 0x4e, 0x71, 0xf5, 0x0b, 0x15, 0x61, 0x8a, 0x3a, 0xc4, 0xe5, 0x94, 0x37, 0x0b,
	0x63, 0x02, 0x35, 0xfe, 0x46, 0x37, 0x60, 0x61, 0x9f, 0xba, 0xd8, 0x6b, 0x5a, 0xf6, 0x11, 0xb1,
	0x8f, 0xfd, 0xa0, 0x5e, 0x18, 0x17, 0x22, 0xf3, 0x72, 0x78, 0x5b, 0x8d, 0x96, 0xff, 0x32, 0x09,
	0x17, 0xb5, 0x76, 0xfb, 0x0d, 0xe6, 0xfa, 0x04, 0x5d, 0x06, 0x10, 0x06, 0x72, 0x76, 0x4c, 0xa4,
	0xf1, 0xb3, 0xa6, 0x30, 0xb9, 0x1a, 0x0e, 0xa0, 0x4f, 0x00, 0x45, 0x81, 0xb0, 0xc8, 0x73, 0x62,
	0x07, 0x61, 0x8d, 0x28, 0x47, 0xae, 0x6b, 0x1d, 0xf9, 0x4c, 0x89, 0xdf, 0x8f, 0xa4, 0xcd, 0xc5,
	0xd3, 0xce, 0x21, 0xf4, 0x00, 0xe6, 0x62, 0x58, 0xde, 0x6c, 0x10, 0xe1, 0xdf, 0xcc, 0xc6, 0x95,
	0x54, 0xc4, 0x6a, 0xb3, 0x41, 0xcc, 0xd9, 0xd3, 0xc4, 0x17, 0xba, 0x03, 0xcb, 0x0d, 0x8f, 0x9c,
	0x50, 0x16, 0xf8, 0x96, 0xcf, 0xb1, 0xc7, 0x89, 0x63, 0x91, 0x13, 0xe2, 0x72, 0x8b, 0x3a, 0x22,
	0x20, 0x63, 0xe6, 0x85, 0x48, 0xe0, 0x89, 0x9c, 0xbf, 0x1f, 0x4e, 0xef, 0x3a, 0x68, 0x0d, 0xf2,
	0x5d, 0x1a, 0x39, 0xa1, 0x31, 0xef, 0xb7, 0x4b, 0x16, 0x60, 0x12, 0x73, 0x4e, 0xea, 0x0d, 0x5e,
	0x98, 0x10, 0x02, 0xd1, 0x27, 0x7a, 0x0f, 0xd0, 0x3e, 0xb6, 0x8f, 0x6b, 0xec, 0xd0, 0xb2, 0x59,
	0xe0, 0x72, 0xeb, 0x88, 0xba, 0xbc, 0x30, 0x29, 0x84, 0xf2, 0x6a, 0x66, 0x3b, 0x9c, 0x78, 0x48,
	0x5d, 0x8e, 0x6e, 0xc1, 0xa4, 0x2a, 0xde, 0xc2, 0x94, 0x70, 0xf7, 0x92, 0xd6, 0xdd, 0x87, 0x52,
	0xc6, 0x8c, 0x84, 0xd1, 0x75, 0x58, 0x70, 0xc9, 0x73, 0x6e, 0x35, 0xf0, 0x21, 0x51, 0x79, 0x9a,
	0x16, 0x79, 0x9a, 0x0b, 0x87, 0xf7, 0xf0, 0x21, 0x91, 0xb9, 0xba, 0x0d, 0x39, 0x51, 0xf9, 0x05,
	0x10, 0xe8, 0xe5, 0xd4, 0x60, 0x3e, 0x0e, 0x25, 0x4d, 0xa9, 0x80, 0x3e, 0x87, 0x4b, 0xdd, 0x59,
	0xb6, 0x5a, 0x85, 0x3b, 0x93, 0xa5, 0x70, 0x97, 0xbb, 0xd2, 0x1c, 0x4d, 0xa1, 0xef, 0xc3, 0xbc,
	0x6f, 0x1f, 0x11, 0x27, 0xa8, 0x11, 0xc7, 0x0a, 0x3b, 0x49, 0x61, 0x56, 0x20, 0x16, 0x2b, 0xb2,
	0xcd, 0x54, 0xa2, 0x36, 0x53, 0xa9, 0x46, 0x6d, 0x66, 0x6b, 0xfc, 0xc5, 0x3f, 0x56, 0x0c, 0x73,
	0x2e, 0xd6, 0x0b, 0x67, 0xd0, 0x36, 0xcc, 0x46, 0x49, 0x13, 0x30, 0x73, 0x19, 0x61, 0x66, 0x94,
	0x96, 0x00, 0xf9, 0x0c, 0x26, 0x43, 0xb7, 0x29, 0xf1, 0x0b, 0xf3, 0xab, 0x63, 0x6b, 0x33, 0x1b,
	0x1f, 0x69, 0x1d, 0x4b, 0xd9, 0x35, 0x95, 0xc7, 0x52, 0xff, 0xbe, 0xcb, 0xc3, 0x44, 0x29, 0xb4,
	0xe2, 0xe7, 0x30, 0x9b, 0x9c, 0x40, 0x79, 0x18, 0x3b, 0x26, 0x4d, 0xd5, 0x11, 0xc2, 0x9f, 0x61,
	0x8a, 0x4e, 0x70, 0x2d, 0x20, 0x6a, 0x07, 0x65, 0x4a, 0x91, 0x50, 0xb8, 0x3b, 0x7a, 0xdb, 0x28,
	0xff, 0x31, 0x07, 0x57, 0xa5, 0x09, 0x4e, 0xd2, 0xaa, 0x6d, 0x56, 0x6f, 0xd4, 0x08, 0x27, 0x4e,
	0xd4, 0x8c, 0xfa, 0xec, 0xe9, 0x7b, 0x30, 0x1d, 0x35, 0x5a, 0xbf, 0x30, 0x2a, 0x22, 0xa0, 0x4f,
	0x6d, 0xb4, 0x88, 0xd9, 0x92, 0x47, 0xdf, 0x84, 0xc5, 0x56, 0x85, 0xd8, 0xcc, 0xe5, 0xe4, 0x39,
	0x17, 0xbb, 0x77, 0xd6, 0xcc, 0xc7, 0x13, 0xdb, 0x72, 0xbc, 0xad, 0x83, 0x8d, 0x77, 0x74, 0xb0,
	0x1f, 0xc3, 0xa2, 0xcf, 0xa9, 0x7d, 0xdc, 0xb4, 0x30, 0xe7, 0x1e, 0xdd, 0x0f, 0x38, 0xf1, 0xc5,
	0x06, 0x9c, 0xd9, 0xa8, 0x68, 0xad, 0x79, 0x22, 0xa4, 0xe3, 0xe2, 0xda, 0x8c, 0xb5, 0xcc, 0xbc,
	0x04, 0x6a, 0x8d, 0xa0, 0x0f, 0xa0, 0xe0, 0x11, 0x1e, 0x78, 0xae, 0xe5, 0x92, 0x53, 0x2b, 0xb2,
	0x5e, 0x54, 0xb4, 0xd8, 0xc3, 0x53, 0xe6, 0x3b, 0x72, 0xfe, 0x87, 0xe4, 0x34, 0x19, 0x4a, 0xb4,
	0x05, 0xa5, 0x03, 0xe6, 0xd9, 0xc4, 0xb2, 0x3d, 0x82, 0x39, 0xd1, 0xa8, 0x4f, 0x0a, 0xf5, 0xa2,
	0x90, 0xda, 0x16, 0x42, 0x9d, 0x18, 0x9a, 0xde, 0x3c, 0xa5, 0xeb, 0xcd, 0x88, 0xc1, 0x9c, 0xd8,
	0x7f, 0x96, 0x47, 0xfc, 0xa0, 0xc6, 0xfd, 0xc2, 0xb4, 0x48, 0xc6, 0x0f, 0xb4, 0xee, 0x67, 0x48,
	0x7c, 0x45, 0x56, 0x8c, 0x04, 0x93, 0xb5, 0x39, 0xfb, 0x2c, 0x31, 0x54, 0xa4, 0xb0, 0xd8, 0x25,
	0xa2, 0xa9, 0xd2, 0xef, 0xb6, 0x57, 0xe9, 0x5a, 0x86, 0x2a, 0x15, 0x80, 0xc9, 0x5a, 0x7d, 0x39,
	0x06, 0x5f, 0x4f, 0x37, 0x59, 0x1d, 0x40, 0x9f, 0xc0, 0x5c, 0x7b, 0x80, 0x0d, 0xb1, 0xe8, 0xb7,
	0x06, 0xdd, 0x93, 0xe6, 0xac, 0x93, 0x4c, 0xc2, 0x4b, 0x03, 0x4a, 0xd8, 0xe6, 0xf4, 0x84, 0x72,
	0x4a, 0x7c, 0x8b, 0x33, 0xcb, 0xa1, 0x7e, 0x03, 0x73, 0xfb, 0xc8, 0xaa, 0x31, 0x1b, 0xd7, 0x6a,
	0x4d, 0x55, 0xfa, 0x4f, 0x87, 0x88, 0xb6, 0xea, 0x02, 0x9b, 0x31, 0x7e, 0x95, 0xed, 0x28, 0xf4,
	0x47, 0x12, 0x5c, 0x46, 0xff, 0x22, 0xee, 0x2d, 0x51, 0xfc, 0x29, 0xac, 0xf6, 0x03, 0xd0, 0xe4,
	0x66, 0xa7, 0x3d, 0x37, 0xfa, 0xad, 0xa2, 0x70, 0x9b, 0x02, 0x2b, 0x02, 0xde, 0x75, 0x0f, 0x58,
	0x32, 0x43, 0x3f, 0x1f, 0x85, 0x55, 0x8d, 0x9b, 0x0f, 0x30, 0xad, 0x65, 0x6e, 0x25, 0x5b, 0x90,
	0xb3, 0x71, 0xe0, 0x4b, 0x6b, 0xe6, 0x37, 0xde, 0x4b, 0x6d, 0x23, 0x2d, 0xf4, 0xed, 0x50, 0xc7,
	0x94, 0xaa, 0xe1, 0xb1, 0xe8, 0x10, 0x8e, 0x69, 0xcd, 0x57, 0x2c, 0x40, 0x7f, 0x2c, 0xee, 0xe1,
	0x66, 0x8d, 0x61, 0xc7, 0x8c, 0x84, 0x53, 0x9b, 0x8b, 0x66, 0x0b, 0xe6, 0xb4, 0xf4, 0xe8, 0x2a,
	0x5c, 0x49, 0x89, 0x81, 0xcc, 0x73, 0xf9, 0x75, 0x8b, 0xfb, 0x45, 0x91, 0x3d, 0x4f, 0xee, 0xf7,
	0x04, 0x50, 0x8c, 0x6b, 0xd5, 0x09, 0xc7, 0x0e, 0xe6, 0x58, 0x84, 0x60, 0x66, 0xe3, 0x5a, 0xea,
	0x02, 0x1f, 0x2b, 0x61, 0x33, 0xcf, 0x3b, 0x46, 0xca, 0x7f, 0x9d, 0x8a, 0x79, 0x62, 0xbb, 0x8f,
	0xe7, 0xca, 0x13, 0x57, 0x60, 0x46, 0x6d, 0xa1, 0x66, 0xc8, 0xcf, 0x64, 0x24, 0x20, 0x1a, 0xda,
	0x75, 0x42, 0x22, 0x19, 0x0b, 0x08, 0x22, 0x39, 0x9e, 0x42, 0x24, 0x63, 0xc7, 0x04, 0x91, 0xc4,
	0x89, 0x2f, 0xb4, 0x01, 0x39, 0xea, 0x36, 0x02, 0xae, 0x4e, 0xa0, 0xf4, 0x12, 0x94, 0xa2, 0xe8,
	0x31, 0x2c, 0xb5, 0xb3, 0x1a, 0xc1, 0x38, 0xc4, 0xf9, 0x92, 0x85, 0x93, 0xa0, 0x36, 0x6a, 0x23,
	0x66, 0xd0, 0xc7, 0xe1, 0xa1, 0xd8, 0xe2, 0x37, 0x12, 0x70, 0x32, 0x23, 0x60, 0x3e, 0x41, 0x72,
	0x24, 0xdc, 0x53, 0x58, 0x8e, 0x16, 0x09, 0x3b, 0xa0, 0x5d, 0x63, 0x3e, 0x11, 0xc0, 0x2c, 0xe0,
	0x8a, 0x83, 0x2e, 0x77, 0xc1, 0xee, 0xa8, 0x9b, 0xe0, 0xd6, 0xf8, 0x6f, 0x43, 0xd4, 0x0b, 0x11,
	0x42, 0x95, 0x6d, 0x87, 0xfa, 0x55, 0xa9, 0x8e, 0xaa, 0x70, 0x41, 0xac, 0xd7, 0x0d, 0x3c, 0x9d,
	0x0d, 0x78, 0x49, 0xa8, 0x77, 0xa0, 0x3e, 0x82, 0xc5, 0x23, 0x82, 0x3d, 0xbe, 0x4f, 0x30, 0x8f,
	0x01, 0x21, 0x1b, 0x60, 0x3e, 0xd6, 0x8c, 0xd0, 0x12, 0xcc, 0x3d, 0xa4, 0xb0, 0xb9, 0x16, 0x73,
	0x77, 0xe1, 0xaa, 0x26, 0x77, 0x16, 0x3b, 0xb0, 0xf8, 0x11, 0xf5, 0xad, 0x48, 0x2b, 0x2b, 0x4d,
	0x5d, 0xe9, 0xce, 0xe5, 0x8f, 0x0e, 0xaa, 0x47, 0xd4, 0xdf, 0x54, 0xeb, 0xed, 0x26, 0xfd, 0x8a,
	0xda, 0xdd, 0x5c, 0x86, 0x5a, 0x6b, 0x39, 0xb5, 0xa3, 0xfa, 0x5e, 0xd7, 0xdd, 0x69, 0x7e, 0xb8,
	0xbb, 0xd3, 0x0d, 0x58, 0x88, 0x71, 0x54, 0xff, 0x5a, 0x90, 0x3d, 0x32, 0x1a, 0xde, 0x91, 0x7d,
	0xec, 0x7d, 0x98, 0x38, 0x22, 0xd8, 0x21, 0x5e, 0x21, 0x2f, 0x56, 0xba, 0xa8, 0xbf, 0xb6, 0x08,
	0x11, 0x53, 0x89, 0x96, 0xbf, 0x30, 0x62, 0xae, 0x9a, 0xec, 0x27, 0x83, 0x72, 0xd5, 0x6f, 0xc3,
	0x84, 0x24, 0x47, 0xaa, 0x97, 0xa4, 0x07, 0x4b, 0xc9, 0xa6, 0x75, 0xcf, 0xf2, 0xf5, 0x98, 0x97,
	0xf4, 0xb0, 0x4b, 0x35, 0xfd, 0xff, 0x18, 0x70, 0x23, 0x4d, 0x70, 0xab, 0xb9, 0xbb, 0xd3, 0xef,
	0x04, 0x58, 0x81, 0x99, 0x38, 0xc4, 0xd4, 0x11, 0x2e, 0x4c, 0x9b, 0x10, 0x0d, 0xed, 0x3a, 0xe8,
	0x1d, 0x98, 0xf0, 0x02, 0xb7, 0xd5, 0xda, 0x72, 0x5e, 0xe0, 0xee, 0x3a, 0x9d, 0x6d, 0x6f, 0xbc,
	0xab, 0xed, 0xb5, 0xc2, 0x92, 0x1b, 0x32, 0x2c, 0x13, 0x1d, 0x61, 0xf9, 0x06, 0xac, 0xf5, 0xf7,
	0x56, 0x85, 0xe6, 0xd7, 0x46, 0xcc, 0x1c, 0x92, 0xc2, 0x03, 0x31, 0x87, 0x5b, 0x30, 0x79, 0x80,
	0x69, 0x2d, 0xf0, 0x48, 0x6a, 0x66, 0x1f, 0x48, 0x19, 0x33, 0x12, 0x4e, 0x4d, 0x6d, 0xeb, 0x30,
	0xd7, 0x99, 0xa5, 0x8c, 0xff, 0xb7, 0xa1, 0x2d, 0x00, 0x29, 0x75, 0xae, 0x49, 0x4d, 0x84, 0x24,
	0x37, 0x6c, 0x48, 0x3a, 0xd3, 0x7a, 0x03, 0xae, 0xf5, 0x71, 0x56, 0x85, 0xe5, 0x37, 0x06, 0x94,
	0x75, 0x05, 0x80, 0x5d, 0x9b, 0x0c, 0x94, 0xd5, 0xa8, 0xb9, 0x8d, 0x0e, 0xcb, 0xe5, 0x3a, 0xb3,
	0x7a, 0x4d, 0xdf, 0x48, 0x62, 0xc3, 0x94, 0x03, 0xff, 0x35, 0xe0, 0x7a, 0x8a, 0xdc, 0x79, 0x67,
	0x36, 0x0a, 0x4b, 0x6e, 0xd8, 0xb0, 0x74, 0x66, 0xf6, 0x5d, 0x7d, 0x7b, 0x6a, 0x73, 0xb7, 0x2d,
	0xb7, 0x36, 0xf3, 0xda, 0x44, 0x1f, 0x46, 0x07, 0xcb, 0x39, 0xe6, 0x76, 0x2f, 0xcc, 0x6d, 0x8a,
	0x61, 0x8a, 0x7c, 0xbe, 0x0b, 0x79, 0x5b, 0x38, 0x66, 0x79, 0xd2, 0x56, 0xe2, 0x08, 0xfb, 0xa6,
	0xcc, 0x05, 0x39, 0x6e, 0x46, 0xc3, 0xaa, 0x0c, 0x7a, 0x42, 0x7e, 0xe5, 0xca, 0xa0, 0x1a, 0x96,
	0x41, 0x1f, 0x77, 0x07, 0x8f, 0xe2, 0xdf, 0x5b, 0x1d, 0x5e, 0xdc, 0xef, 0x87, 0x39, 0xba, 0xbf,
	0xd7, 0x71, 0x74, 0x67, 0x7f, 0x46, 0x88, 0xce, 0xab, 0x4f, 0x61, 0x49, 0xfe, 0x93, 0x61, 0x9d,
	0x10, 0x4f, 0x3c, 0x10, 0x50, 0xf7, 0x80, 0xa9, 0x5b, 0x62, 0xef, 0x5b, 0x05, 0xf1, 0x3e, 0x95,
	0xe2, 0xe2, 0xc6, 0xbb, 0x78, 0xda, 0x39, 0x94, 0x38, 0x27, 0x74, 0xce, 0xa9, 0x4d, 0xf3, 0x37,
	0x23, 0x6c, 0x9d, 0xc2, 0x53, 0xb9, 0xa9, 0xba, 0x2f, 0x2c, 0x7d, 0xea, 0xe8, 0xff, 0x74, 0x27,
	0x4a, 0xbb, 0x1a, 0x5e, 0x06, 0x50, 0xb9, 0x6d, 0x55, 0xe0, 0xb4, 0x1a, 0xd9, 0x75, 0xca, 0x6b,
	0xe1, 0xde, 0x48, 0x77, 0x49, 0x7a, 0xbf, 0xf1, 0xcb, 0x3c, 0x4c, 0xcb, 0x58, 0x6e, 0xee, 0xed,
	0xa2, 0xe7, 0xb0, 0xa4, 0x79, 0x79, 0x41, 0xeb, 0xd9, 0xdf, 0x68, 0xc4, 0xa2, 0xc5, 0x81, 0x1f,
	0x75, 0xd0, 0xaf, 0x0c, 0xb8, 0x94, 0xf6, 0x16, 0x83, 0x6e, 0x0f, 0xfb, 0x58, 0x56, 0xbc, 0x33,
	0xf4, 0xc3, 0x0f, 0xfa, 0x85, 0x01, 0xcb, 0x3d, 0x9f, 0x0d, 0xd0, 0x77, 0xb2, 0x02, 0xb7, 0x11,
	0xa6, 0xe2, 0xad, 0x41, 0xd5, 0x94, 0x31, 0xad, 0xe4, 0x24, 0x5b, 0x40, 0x7a, 0x72, 0x34, 0xcf,
	0x18, 0xe9, 0xc9, 0xd1, 0xbe, 0x09, 0x24, 0x92, 0xa3, 0x25, 0x8d, 0xe9, 0xc9, 0x49, 0xbb, 0x16,
	0xa4, 0x27, 0x27, 0x95, 0xb8, 0xa3, 0x97, 0x7a, 0x76, 0xda, 0x46, 0x65, 0xd1, 0x87, 0x03, 0xe3,
	0x27, 0x4e, 0x8e, 0xe2, 0x47, 0x43, 0x6a, 0x77, 0x97, 0x4f, 0x37, 0x2b, 0x4b, 0x2f, 0x9f, 0x9e,
	0x7c, 0x3b, 0xbd, 0x7c, 0x7a, 0xf3, 0x61, 0xf4, 0x85, 0x01, 0x97, 0x53, 0x29, 0x22, 0xba, 0x33,
	0x18, 0x72, 0x32, 0x50, 0x77, 0x87, 0x51, 0x55, 0x86, 0xbd, 0x30, 0xe0, 0x62, 0x0a, 0xc3, 0x41,
	0x1f, 0x64, 0x4e, 0x42, 0x3b, 0x87, 0x2d, 0xde, 0x1e, 0x5c, 0x51, 0x99, 0xf4, 0x7b, 0x03, 0x56,
	0xfa, 0x90, 0x2e, 0x74, 0x6f, 0x50, 0xf4, 0x64, 0xbc, 0x3e, 0x1c, 0x4e, 0xb9, 0x2d, 0x62, 0x3d,
	0xc9, 0x40, 0xcf, 0x88, 0xf5, 0x63, 0x86, 0x3d, 0x23, 0xd6, 0x9f, 0xb9, 0xc9, 0x88, 0xa5, 0xf2,
	0x93, 0x9e, 0x11, 0xcb, 0x42, 0xe2, 0x7a, 0x46, 0x2c, 0x1b, 0x25, 0x4a, 0xec, 0xc4, 0x6e, 0x2a,
	0x90, 0xbe, 0x13, 0x7b, 0xf2, 0xa2, 0xf4, 0x9d, 0xd8, 0x9b, 0x71, 0xa0, 0xdf, 0x19, 0x50, 0x4a,
	0x3f, 0x9e, 0x51, 0xaf, 0xfd, 0x94, 0x81, 0xa6, 0x14, 0xef, 0x0d, 0xa5, 0x2b, 0x6d, 0xdb, 0xfa,
	0xc9, 0xab, 0xd7, 0xa5, 0x91, 0x2f, 0x5f, 0x97, 0x46, 0xde, 0xbe, 0x2e, 0x19, 0x3f, 0x3b, 0x2b,
	0x19, 0x7f, 0x38, 0x2b, 0x19, 0x7f, 0x3e, 0x2b, 0x19, 0xaf, 0xce, 0x4a, 0xc6, 0x3f, 0xcf, 0x4a,
	0xc6, 0xbf, 0xce, 0x4a, 0x23, 0x6f, 0xcf, 0x4a, 0xc6, 0x8b, 0x37, 0xa5, 0x91, 0x57, 0x6f, 0x4a,
	0x23, 0x5f, 0xbe, 0x29, 0x8d, 0xc0, 0xd7, 0x6c, 0x56, 0xd7, 0xad, 0xba, 0x35, 0xb5, 0xd9, 0xa0,
	0x7b, 0x1e, 0xe3, 0x6c, 0xcf, 0x78, 0x9a, 0xc3, 0x0d, 0x7a, 0x72, 0x73, 0x7f, 0x42, 0x3c, 0xae,
	0xbd, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x36, 0x19, 0x86, 0xd9, 0x22, 0x00, 0x00,
}

func (this *PollForDecisionTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollForDecisionTaskRequest)
	if !ok {
		that2, ok := that.(PollForDecisionTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	return true
}
func (this *PollForDecisionTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollForDecisionTaskResponse)
	if !ok {
		that2, ok := that.(PollForDecisionTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.PreviousStartedEventId != that1.PreviousStartedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.BacklogCountHint != that1.BacklogCountHint {
		return false
	}
	if !this.History.Equal(that1.History) {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if !this.WorkflowExecutionTaskList.Equal(that1.WorkflowExecutionTaskList) {
		return false
	}
	if that1.ScheduledTime == nil {
		if this.ScheduledTime != nil {
			return false
		}
	} else if !this.ScheduledTime.Equal(*that1.ScheduledTime) {
		return false
	}
	if that1.StartedTime == nil {
		if this.StartedTime != nil {
			return false
		}
	} else if !this.StartedTime.Equal(*that1.StartedTime) {
		return false
	}
	if len(this.Queries) != len(that1.Queries) {
		return false
	}
	for i := range this.Queries {
		if !this.Queries[i].Equal(that1.Queries[i]) {
			return false
		}
	}
	return true
}
func (this *RespondDecisionTaskCompletedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondDecisionTaskCompletedRequest)
	if !ok {
		that2, ok := that.(RespondDecisionTaskCompletedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if len(this.Decisions) != len(that1.Decisions) {
		return false
	}
	for i := range this.Decisions {
		if !this.Decisions[i].Equal(that1.Decisions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.ExecutionContext, that1.ExecutionContext) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if !this.StickyAttributes.Equal(that1.StickyAttributes) {
		return false
	}
	if this.ReturnNewDecisionTask != that1.ReturnNewDecisionTask {
		return false
	}
	if this.ForceCreateNewDecisionTask != that1.ForceCreateNewDecisionTask {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	if len(this.QueryResults) != len(that1.QueryResults) {
		return false
	}
	for i := range this.QueryResults {
		if !this.QueryResults[i].Equal(that1.QueryResults[i]) {
			return false
		}
	}
	return true
}
func (this *RespondDecisionTaskCompletedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondDecisionTaskCompletedResponse)
	if !ok {
		that2, ok := that.(RespondDecisionTaskCompletedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DecisionTask.Equal(that1.DecisionTask) {
		return false
	}
	if len(this.ActivitiesToDispatchLocally) != len(that1.ActivitiesToDispatchLocally) {
		return false
	}
	for i := range this.ActivitiesToDispatchLocally {
		if !this.ActivitiesToDispatchLocally[i].Equal(that1.ActivitiesToDispatchLocally[i]) {
			return false
		}
	}
	return true
}
func (this *RespondDecisionTaskFailedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondDecisionTaskFailedRequest)
	if !ok {
		that2, ok := that.(RespondDecisionTaskFailedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	return true
}
func (this *RespondDecisionTaskFailedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondDecisionTaskFailedResponse)
	if !ok {
		that2, ok := that.(RespondDecisionTaskFailedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PollForActivityTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollForActivityTaskRequest)
	if !ok {
		that2, ok := that.(PollForActivityTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if !this.TaskListMetadata.Equal(that1.TaskListMetadata) {
		return false
	}
	return true
}
func (this *PollForActivityTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollForActivityTaskResponse)
	if !ok {
		that2, ok := that.(PollForActivityTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if that1.ScheduledTimestamp == nil {
		if this.ScheduledTimestamp != nil {
			return false
		}
	} else if !this.ScheduledTimestamp.Equal(*that1.ScheduledTimestamp) {
		return false
	}
	if that1.StartedTimestamp == nil {
		if this.StartedTimestamp != nil {
			return false
		}
	} else if !this.StartedTimestamp.Equal(*that1.StartedTimestamp) {
		return false
	}
	if this.ScheduleToCloseTimeout != nil && that1.ScheduleToCloseTimeout != nil {
		if *this.ScheduleToCloseTimeout != *that1.ScheduleToCloseTimeout {
			return false
		}
	} else if this.ScheduleToCloseTimeout != nil {
		return false
	} else if that1.ScheduleToCloseTimeout != nil {
		return false
	}
	if this.StartToCloseTimeout != nil && that1.StartToCloseTimeout != nil {
		if *this.StartToCloseTimeout != *that1.StartToCloseTimeout {
			return false
		}
	} else if this.StartToCloseTimeout != nil {
		return false
	} else if that1.StartToCloseTimeout != nil {
		return false
	}
	if this.HeartbeatTimeout != nil && that1.HeartbeatTimeout != nil {
		if *this.HeartbeatTimeout != *that1.HeartbeatTimeout {
			return false
		}
	} else if this.HeartbeatTimeout != nil {
		return false
	} else if that1.HeartbeatTimeout != nil {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if that1.ScheduledTimestampOfThisAttempt == nil {
		if this.ScheduledTimestampOfThisAttempt != nil {
			return false
		}
	} else if !this.ScheduledTimestampOfThisAttempt.Equal(*that1.ScheduledTimestampOfThisAttempt) {
		return false
	}
	if !this.HeartbeatDetails.Equal(that1.HeartbeatDetails) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.WorkflowDomain != that1.WorkflowDomain {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *RespondActivityTaskCompletedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCompletedRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskCompletedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskCompletedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCompletedResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskCompletedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskCompletedByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCompletedByIDRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskCompletedByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskCompletedByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCompletedByIDResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskCompletedByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskFailedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskFailedRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskFailedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskFailedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskFailedResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskFailedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskFailedByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskFailedByIDRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskFailedByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskFailedByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskFailedByIDResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskFailedByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskCanceledRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCanceledRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskCanceledRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskCanceledResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCanceledResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskCanceledResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondActivityTaskCanceledByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCanceledByIDRequest)
	if !ok {
		that2, ok := that.(RespondActivityTaskCanceledByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RespondActivityTaskCanceledByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondActivityTaskCanceledByIDResponse)
	if !ok {
		that2, ok := that.(RespondActivityTaskCanceledByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RecordActivityTaskHeartbeatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityTaskHeartbeatRequest)
	if !ok {
		that2, ok := that.(RecordActivityTaskHeartbeatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RecordActivityTaskHeartbeatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityTaskHeartbeatResponse)
	if !ok {
		that2, ok := that.(RecordActivityTaskHeartbeatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CancelRequested != that1.CancelRequested {
		return false
	}
	return true
}
func (this *RecordActivityTaskHeartbeatByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityTaskHeartbeatByIDRequest)
	if !ok {
		that2, ok := that.(RecordActivityTaskHeartbeatByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *RecordActivityTaskHeartbeatByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityTaskHeartbeatByIDResponse)
	if !ok {
		that2, ok := that.(RecordActivityTaskHeartbeatByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CancelRequested != that1.CancelRequested {
		return false
	}
	return true
}
func (this *RespondQueryTaskCompletedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondQueryTaskCompletedRequest)
	if !ok {
		that2, ok := that.(RespondQueryTaskCompletedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if !this.WorkerVersionInfo.Equal(that1.WorkerVersionInfo) {
		return false
	}
	return true
}
func (this *RespondQueryTaskCompletedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondQueryTaskCompletedResponse)
	if !ok {
		that2, ok := that.(RespondQueryTaskCompletedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestCancelWorkflowExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelWorkflowExecutionRequest)
	if !ok {
		that2, ok := that.(RequestCancelWorkflowExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *RequestCancelWorkflowExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelWorkflowExecutionResponse)
	if !ok {
		that2, ok := that.(RequestCancelWorkflowExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PollForDecisionTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&apiv1.PollForDecisionTaskRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollForDecisionTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&apiv1.PollForDecisionTaskResponse{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "PreviousStartedEventId: "+fmt.Sprintf("%#v", this.PreviousStartedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "BacklogCountHint: "+fmt.Sprintf("%#v", this.BacklogCountHint)+",\n")
	if this.History != nil {
		s = append(s, "History: "+fmt.Sprintf("%#v", this.History)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	if this.WorkflowExecutionTaskList != nil {
		s = append(s, "WorkflowExecutionTaskList: "+fmt.Sprintf("%#v", this.WorkflowExecutionTaskList)+",\n")
	}
	s = append(s, "ScheduledTime: "+fmt.Sprintf("%#v", this.ScheduledTime)+",\n")
	s = append(s, "StartedTime: "+fmt.Sprintf("%#v", this.StartedTime)+",\n")
	keysForQueries := make([]string, 0, len(this.Queries))
	for k, _ := range this.Queries {
		keysForQueries = append(keysForQueries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueries)
	mapStringForQueries := "map[string]*WorkflowQuery{"
	for _, k := range keysForQueries {
		mapStringForQueries += fmt.Sprintf("%#v: %#v,", k, this.Queries[k])
	}
	mapStringForQueries += "}"
	if this.Queries != nil {
		s = append(s, "Queries: "+mapStringForQueries+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondDecisionTaskCompletedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&apiv1.RespondDecisionTaskCompletedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.Decisions != nil {
		s = append(s, "Decisions: "+fmt.Sprintf("%#v", this.Decisions)+",\n")
	}
	s = append(s, "ExecutionContext: "+fmt.Sprintf("%#v", this.ExecutionContext)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	if this.StickyAttributes != nil {
		s = append(s, "StickyAttributes: "+fmt.Sprintf("%#v", this.StickyAttributes)+",\n")
	}
	s = append(s, "ReturnNewDecisionTask: "+fmt.Sprintf("%#v", this.ReturnNewDecisionTask)+",\n")
	s = append(s, "ForceCreateNewDecisionTask: "+fmt.Sprintf("%#v", this.ForceCreateNewDecisionTask)+",\n")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	keysForQueryResults := make([]string, 0, len(this.QueryResults))
	for k, _ := range this.QueryResults {
		keysForQueryResults = append(keysForQueryResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueryResults)
	mapStringForQueryResults := "map[string]*WorkflowQueryResult{"
	for _, k := range keysForQueryResults {
		mapStringForQueryResults += fmt.Sprintf("%#v: %#v,", k, this.QueryResults[k])
	}
	mapStringForQueryResults += "}"
	if this.QueryResults != nil {
		s = append(s, "QueryResults: "+mapStringForQueryResults+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondDecisionTaskCompletedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.RespondDecisionTaskCompletedResponse{")
	if this.DecisionTask != nil {
		s = append(s, "DecisionTask: "+fmt.Sprintf("%#v", this.DecisionTask)+",\n")
	}
	keysForActivitiesToDispatchLocally := make([]string, 0, len(this.ActivitiesToDispatchLocally))
	for k, _ := range this.ActivitiesToDispatchLocally {
		keysForActivitiesToDispatchLocally = append(keysForActivitiesToDispatchLocally, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForActivitiesToDispatchLocally)
	mapStringForActivitiesToDispatchLocally := "map[string]*ActivityLocalDispatchInfo{"
	for _, k := range keysForActivitiesToDispatchLocally {
		mapStringForActivitiesToDispatchLocally += fmt.Sprintf("%#v: %#v,", k, this.ActivitiesToDispatchLocally[k])
	}
	mapStringForActivitiesToDispatchLocally += "}"
	if this.ActivitiesToDispatchLocally != nil {
		s = append(s, "ActivitiesToDispatchLocally: "+mapStringForActivitiesToDispatchLocally+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondDecisionTaskFailedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&apiv1.RespondDecisionTaskFailedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondDecisionTaskFailedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RespondDecisionTaskFailedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollForActivityTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&apiv1.PollForActivityTaskRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	if this.TaskListMetadata != nil {
		s = append(s, "TaskListMetadata: "+fmt.Sprintf("%#v", this.TaskListMetadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollForActivityTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&apiv1.PollForActivityTaskResponse{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "ScheduledTimestamp: "+fmt.Sprintf("%#v", this.ScheduledTimestamp)+",\n")
	s = append(s, "StartedTimestamp: "+fmt.Sprintf("%#v", this.StartedTimestamp)+",\n")
	s = append(s, "ScheduleToCloseTimeout: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeout)+",\n")
	s = append(s, "StartToCloseTimeout: "+fmt.Sprintf("%#v", this.StartToCloseTimeout)+",\n")
	s = append(s, "HeartbeatTimeout: "+fmt.Sprintf("%#v", this.HeartbeatTimeout)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "ScheduledTimestampOfThisAttempt: "+fmt.Sprintf("%#v", this.ScheduledTimestampOfThisAttempt)+",\n")
	if this.HeartbeatDetails != nil {
		s = append(s, "HeartbeatDetails: "+fmt.Sprintf("%#v", this.HeartbeatDetails)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "WorkflowDomain: "+fmt.Sprintf("%#v", this.WorkflowDomain)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCompletedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.RespondActivityTaskCompletedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCompletedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RespondActivityTaskCompletedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCompletedByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&apiv1.RespondActivityTaskCompletedByIDRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCompletedByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RespondActivityTaskCompletedByIDResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskFailedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.RespondActivityTaskFailedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskFailedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RespondActivityTaskFailedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskFailedByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&apiv1.RespondActivityTaskFailedByIDRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskFailedByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RespondActivityTaskFailedByIDResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCanceledRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.RespondActivityTaskCanceledRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCanceledResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RespondActivityTaskCanceledResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCanceledByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&apiv1.RespondActivityTaskCanceledByIDRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondActivityTaskCanceledByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RespondActivityTaskCanceledByIDResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityTaskHeartbeatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.RecordActivityTaskHeartbeatRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityTaskHeartbeatResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.RecordActivityTaskHeartbeatResponse{")
	s = append(s, "CancelRequested: "+fmt.Sprintf("%#v", this.CancelRequested)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityTaskHeartbeatByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&apiv1.RecordActivityTaskHeartbeatByIDRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityTaskHeartbeatByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.RecordActivityTaskHeartbeatByIDResponse{")
	s = append(s, "CancelRequested: "+fmt.Sprintf("%#v", this.CancelRequested)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondQueryTaskCompletedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.RespondQueryTaskCompletedRequest{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	if this.WorkerVersionInfo != nil {
		s = append(s, "WorkerVersionInfo: "+fmt.Sprintf("%#v", this.WorkerVersionInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondQueryTaskCompletedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RespondQueryTaskCompletedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelWorkflowExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&apiv1.RequestCancelWorkflowExecutionRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelWorkflowExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RequestCancelWorkflowExecutionResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringServiceWorker(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkerAPIClient is the client API for WorkerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerAPIClient interface {
	// PollForDecisionTask is called by application worker to process DecisionTask from a specific taskList.
	// A DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
	// Application is then expected to call 'RespondDecisionTaskCompleted' API when it is done processing the DecisionTask.
	// It will also create a 'DecisionTaskStarted' event in the history for that session before handing off DecisionTask to
	// application worker.
	PollForDecisionTask(ctx context.Context, in *PollForDecisionTaskRequest, opts ...grpc.CallOption) (*PollForDecisionTaskResponse, error)
	// RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
	// 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
	// potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
	// event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
	// for completing the DecisionTask.
	// The response could contain a new decision task if there is one or if the request asking for one.
	RespondDecisionTaskCompleted(ctx context.Context, in *RespondDecisionTaskCompletedRequest, opts ...grpc.CallOption) (*RespondDecisionTaskCompletedResponse, error)
	// RespondDecisionTaskFailed is called by application worker to indicate failure.  This results in
	// DecisionTaskFailedEvent written to the history and a new DecisionTask created.  This API can be used by client to
	// either clear sticky tasklist or report any panics during DecisionTask processing.  Cadence will only append first
	// DecisionTaskFailed event to the history of workflow execution for consecutive failures.
	RespondDecisionTaskFailed(ctx context.Context, in *RespondDecisionTaskFailedRequest, opts ...grpc.CallOption) (*RespondDecisionTaskFailedResponse, error)
	// PollForActivityTask is called by application worker to process ActivityTask from a specific taskList.  ActivityTask
	// is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
	// Application is expected to call 'RespondActivityTaskCompleted' or 'RespondActivityTaskFailed' once it is done
	// processing the task.
	// Application also needs to call 'RecordActivityTaskHeartbeat' API within 'heartbeatTimeoutSeconds' interval to
	// prevent the task from getting timed out.  An event 'ActivityTaskStarted' event is also written to workflow execution
	// history before the ActivityTask is dispatched to application worker.
	PollForActivityTask(ctx context.Context, in *PollForActivityTaskRequest, opts ...grpc.CallOption) (*PollForActivityTaskResponse, error)
	// RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
	// result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
	// created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	RespondActivityTaskCompleted(ctx context.Context, in *RespondActivityTaskCompletedRequest, opts ...grpc.CallOption) (*RespondActivityTaskCompletedResponse, error)
	// RespondActivityTaskCompletedByID is called by application worker when it is done processing an ActivityTask.
	// It will result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
	// created for the workflow so new decisions could be made.  Similar to RespondActivityTaskCompleted but use Domain,
	// WorkflowID and ActivityID instead of 'taskToken' for completion. It fails with 'EntityNotExistsError'
	// if the these IDs are not valid anymore due to activity timeout.
	RespondActivityTaskCompletedByID(ctx context.Context, in *RespondActivityTaskCompletedByIDRequest, opts ...grpc.CallOption) (*RespondActivityTaskCompletedByIDResponse, error)
	// RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
	// result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	RespondActivityTaskFailed(ctx context.Context, in *RespondActivityTaskFailedRequest, opts ...grpc.CallOption) (*RespondActivityTaskFailedResponse, error)
	// RespondActivityTaskFailedByID is called by application worker when it is done processing an ActivityTask.
	// It will result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Similar to RespondActivityTaskFailed but use
	// Domain, WorkflowID and ActivityID instead of 'taskToken' for completion. It fails with 'EntityNotExistsError'
	// if the these IDs are not valid anymore due to activity timeout.
	RespondActivityTaskFailedByID(ctx context.Context, in *RespondActivityTaskFailedByIDRequest, opts ...grpc.CallOption) (*RespondActivityTaskFailedByIDResponse, error)
	// RespondActivityTaskCanceled is called by application worker when it is successfully canceled an ActivityTask.
	// It will result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	RespondActivityTaskCanceled(ctx context.Context, in *RespondActivityTaskCanceledRequest, opts ...grpc.CallOption) (*RespondActivityTaskCanceledResponse, error)
	// RespondActivityTaskCanceledByID is called by application worker when it is successfully canceled an ActivityTask.
	// It will result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Similar to RespondActivityTaskCanceled but use
	// Domain, WorkflowID and ActivityID instead of 'taskToken' for completion. It fails with 'EntityNotExistsError'
	// if the these IDs are not valid anymore due to activity timeout.
	RespondActivityTaskCanceledByID(ctx context.Context, in *RespondActivityTaskCanceledByIDRequest, opts ...grpc.CallOption) (*RespondActivityTaskCanceledByIDResponse, error)
	// RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
	// to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
	// 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
	// fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for heartbeating.
	RecordActivityTaskHeartbeat(ctx context.Context, in *RecordActivityTaskHeartbeatRequest, opts ...grpc.CallOption) (*RecordActivityTaskHeartbeatResponse, error)
	// RecordActivityTaskHeartbeatByID is called by application worker while it is processing an ActivityTask.  If worker
	// fails to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as
	// timed out and 'ActivityTaskTimedOut' event will be written to the workflow history.
	// Calling 'RecordActivityTaskHeartbeatByID' will fail with 'EntityNotExistsError' in such situations.  Instead of
	// using 'taskToken' like in RecordActivityTaskHeartbeat, use Domain, WorkflowID and ActivityID.
	RecordActivityTaskHeartbeatByID(ctx context.Context, in *RecordActivityTaskHeartbeatByIDRequest, opts ...grpc.CallOption) (*RecordActivityTaskHeartbeatByIDResponse, error)
	// RespondQueryTaskCompleted is called by application worker to complete a QueryTask (which is a DecisionTask for query)
	// as a result of 'PollForDecisionTask' API call. Completing a QueryTask will unblock the client call to 'QueryWorkflow'
	// API and return the query result to client as a response to 'QueryWorkflow' API call.
	RespondQueryTaskCompleted(ctx context.Context, in *RespondQueryTaskCompletedRequest, opts ...grpc.CallOption) (*RespondQueryTaskCompletedResponse, error)
	// RequestCancelWorkflowExecution is called by application worker when it wants to request cancellation of a workflow
	// instance. It will result in a new 'WorkflowExecutionCancelRequested' event being written to the workflow history
	// and a new DecisionTask created for the workflow instance so new decisions could be made. It fails with
	// 'EntityNotExistsError' if the workflow is not valid anymore due to completion or doesn't exist.
	RequestCancelWorkflowExecution(ctx context.Context, in *RequestCancelWorkflowExecutionRequest, opts ...grpc.CallOption) (*RequestCancelWorkflowExecutionResponse, error)
}

type workerAPIClient struct {
	cc *grpc.ClientConn
}

func NewWorkerAPIClient(cc *grpc.ClientConn) WorkerAPIClient {
	return &workerAPIClient{cc}
}

func (c *workerAPIClient) PollForDecisionTask(ctx context.Context, in *PollForDecisionTaskRequest, opts ...grpc.CallOption) (*PollForDecisionTaskResponse, error) {
	out := new(PollForDecisionTaskResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/PollForDecisionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondDecisionTaskCompleted(ctx context.Context, in *RespondDecisionTaskCompletedRequest, opts ...grpc.CallOption) (*RespondDecisionTaskCompletedResponse, error) {
	out := new(RespondDecisionTaskCompletedResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondDecisionTaskCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondDecisionTaskFailed(ctx context.Context, in *RespondDecisionTaskFailedRequest, opts ...grpc.CallOption) (*RespondDecisionTaskFailedResponse, error) {
	out := new(RespondDecisionTaskFailedResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondDecisionTaskFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) PollForActivityTask(ctx context.Context, in *PollForActivityTaskRequest, opts ...grpc.CallOption) (*PollForActivityTaskResponse, error) {
	out := new(PollForActivityTaskResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/PollForActivityTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondActivityTaskCompleted(ctx context.Context, in *RespondActivityTaskCompletedRequest, opts ...grpc.CallOption) (*RespondActivityTaskCompletedResponse, error) {
	out := new(RespondActivityTaskCompletedResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondActivityTaskCompletedByID(ctx context.Context, in *RespondActivityTaskCompletedByIDRequest, opts ...grpc.CallOption) (*RespondActivityTaskCompletedByIDResponse, error) {
	out := new(RespondActivityTaskCompletedByIDResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskCompletedByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondActivityTaskFailed(ctx context.Context, in *RespondActivityTaskFailedRequest, opts ...grpc.CallOption) (*RespondActivityTaskFailedResponse, error) {
	out := new(RespondActivityTaskFailedResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondActivityTaskFailedByID(ctx context.Context, in *RespondActivityTaskFailedByIDRequest, opts ...grpc.CallOption) (*RespondActivityTaskFailedByIDResponse, error) {
	out := new(RespondActivityTaskFailedByIDResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskFailedByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondActivityTaskCanceled(ctx context.Context, in *RespondActivityTaskCanceledRequest, opts ...grpc.CallOption) (*RespondActivityTaskCanceledResponse, error) {
	out := new(RespondActivityTaskCanceledResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskCanceled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondActivityTaskCanceledByID(ctx context.Context, in *RespondActivityTaskCanceledByIDRequest, opts ...grpc.CallOption) (*RespondActivityTaskCanceledByIDResponse, error) {
	out := new(RespondActivityTaskCanceledByIDResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskCanceledByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RecordActivityTaskHeartbeat(ctx context.Context, in *RecordActivityTaskHeartbeatRequest, opts ...grpc.CallOption) (*RecordActivityTaskHeartbeatResponse, error) {
	out := new(RecordActivityTaskHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RecordActivityTaskHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RecordActivityTaskHeartbeatByID(ctx context.Context, in *RecordActivityTaskHeartbeatByIDRequest, opts ...grpc.CallOption) (*RecordActivityTaskHeartbeatByIDResponse, error) {
	out := new(RecordActivityTaskHeartbeatByIDResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RecordActivityTaskHeartbeatByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RespondQueryTaskCompleted(ctx context.Context, in *RespondQueryTaskCompletedRequest, opts ...grpc.CallOption) (*RespondQueryTaskCompletedResponse, error) {
	out := new(RespondQueryTaskCompletedResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RespondQueryTaskCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerAPIClient) RequestCancelWorkflowExecution(ctx context.Context, in *RequestCancelWorkflowExecutionRequest, opts ...grpc.CallOption) (*RequestCancelWorkflowExecutionResponse, error) {
	out := new(RequestCancelWorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.WorkerAPI/RequestCancelWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerAPIServer is the server API for WorkerAPI service.
type WorkerAPIServer interface {
	// PollForDecisionTask is called by application worker to process DecisionTask from a specific taskList.
	// A DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
	// Application is then expected to call 'RespondDecisionTaskCompleted' API when it is done processing the DecisionTask.
	// It will also create a 'DecisionTaskStarted' event in the history for that session before handing off DecisionTask to
	// application worker.
	PollForDecisionTask(context.Context, *PollForDecisionTaskRequest) (*PollForDecisionTaskResponse, error)
	// RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
	// 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
	// potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
	// event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
	// for completing the DecisionTask.
	// The response could contain a new decision task if there is one or if the request asking for one.
	RespondDecisionTaskCompleted(context.Context, *RespondDecisionTaskCompletedRequest) (*RespondDecisionTaskCompletedResponse, error)
	// RespondDecisionTaskFailed is called by application worker to indicate failure.  This results in
	// DecisionTaskFailedEvent written to the history and a new DecisionTask created.  This API can be used by client to
	// either clear sticky tasklist or report any panics during DecisionTask processing.  Cadence will only append first
	// DecisionTaskFailed event to the history of workflow execution for consecutive failures.
	RespondDecisionTaskFailed(context.Context, *RespondDecisionTaskFailedRequest) (*RespondDecisionTaskFailedResponse, error)
	// PollForActivityTask is called by application worker to process ActivityTask from a specific taskList.  ActivityTask
	// is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
	// Application is expected to call 'RespondActivityTaskCompleted' or 'RespondActivityTaskFailed' once it is done
	// processing the task.
	// Application also needs to call 'RecordActivityTaskHeartbeat' API within 'heartbeatTimeoutSeconds' interval to
	// prevent the task from getting timed out.  An event 'ActivityTaskStarted' event is also written to workflow execution
	// history before the ActivityTask is dispatched to application worker.
	PollForActivityTask(context.Context, *PollForActivityTaskRequest) (*PollForActivityTaskResponse, error)
	// RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
	// result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
	// created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	RespondActivityTaskCompleted(context.Context, *RespondActivityTaskCompletedRequest) (*RespondActivityTaskCompletedResponse, error)
	// RespondActivityTaskCompletedByID is called by application worker when it is done processing an ActivityTask.
	// It will result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
	// created for the workflow so new decisions could be made.  Similar to RespondActivityTaskCompleted but use Domain,
	// WorkflowID and ActivityID instead of 'taskToken' for completion. It fails with 'EntityNotExistsError'
	// if the these IDs are not valid anymore due to activity timeout.
	RespondActivityTaskCompletedByID(context.Context, *RespondActivityTaskCompletedByIDRequest) (*RespondActivityTaskCompletedByIDResponse, error)
	// RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
	// result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	RespondActivityTaskFailed(context.Context, *RespondActivityTaskFailedRequest) (*RespondActivityTaskFailedResponse, error)
	// RespondActivityTaskFailedByID is called by application worker when it is done processing an ActivityTask.
	// It will result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Similar to RespondActivityTaskFailed but use
	// Domain, WorkflowID and ActivityID instead of 'taskToken' for completion. It fails with 'EntityNotExistsError'
	// if the these IDs are not valid anymore due to activity timeout.
	RespondActivityTaskFailedByID(context.Context, *RespondActivityTaskFailedByIDRequest) (*RespondActivityTaskFailedByIDResponse, error)
	// RespondActivityTaskCanceled is called by application worker when it is successfully canceled an ActivityTask.
	// It will result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	RespondActivityTaskCanceled(context.Context, *RespondActivityTaskCanceledRequest) (*RespondActivityTaskCanceledResponse, error)
	// RespondActivityTaskCanceledByID is called by application worker when it is successfully canceled an ActivityTask.
	// It will result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Similar to RespondActivityTaskCanceled but use
	// Domain, WorkflowID and ActivityID instead of 'taskToken' for completion. It fails with 'EntityNotExistsError'
	// if the these IDs are not valid anymore due to activity timeout.
	RespondActivityTaskCanceledByID(context.Context, *RespondActivityTaskCanceledByIDRequest) (*RespondActivityTaskCanceledByIDResponse, error)
	// RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
	// to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
	// 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
	// fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for heartbeating.
	RecordActivityTaskHeartbeat(context.Context, *RecordActivityTaskHeartbeatRequest) (*RecordActivityTaskHeartbeatResponse, error)
	// RecordActivityTaskHeartbeatByID is called by application worker while it is processing an ActivityTask.  If worker
	// fails to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as
	// timed out and 'ActivityTaskTimedOut' event will be written to the workflow history.
	// Calling 'RecordActivityTaskHeartbeatByID' will fail with 'EntityNotExistsError' in such situations.  Instead of
	// using 'taskToken' like in RecordActivityTaskHeartbeat, use Domain, WorkflowID and ActivityID.
	RecordActivityTaskHeartbeatByID(context.Context, *RecordActivityTaskHeartbeatByIDRequest) (*RecordActivityTaskHeartbeatByIDResponse, error)
	// RespondQueryTaskCompleted is called by application worker to complete a QueryTask (which is a DecisionTask for query)
	// as a result of 'PollForDecisionTask' API call. Completing a QueryTask will unblock the client call to 'QueryWorkflow'
	// API and return the query result to client as a response to 'QueryWorkflow' API call.
	RespondQueryTaskCompleted(context.Context, *RespondQueryTaskCompletedRequest) (*RespondQueryTaskCompletedResponse, error)
	// RequestCancelWorkflowExecution is called by application worker when it wants to request cancellation of a workflow
	// instance. It will result in a new 'WorkflowExecutionCancelRequested' event being written to the workflow history
	// and a new DecisionTask created for the workflow instance so new decisions could be made. It fails with
	// 'EntityNotExistsError' if the workflow is not valid anymore due to completion or doesn't exist.
	RequestCancelWorkflowExecution(context.Context, *RequestCancelWorkflowExecutionRequest) (*RequestCancelWorkflowExecutionResponse, error)
}

// UnimplementedWorkerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerAPIServer struct {
}

func (*UnimplementedWorkerAPIServer) PollForDecisionTask(ctx context.Context, req *PollForDecisionTaskRequest) (*PollForDecisionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollForDecisionTask not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondDecisionTaskCompleted(ctx context.Context, req *RespondDecisionTaskCompletedRequest) (*RespondDecisionTaskCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondDecisionTaskCompleted not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondDecisionTaskFailed(ctx context.Context, req *RespondDecisionTaskFailedRequest) (*RespondDecisionTaskFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondDecisionTaskFailed not implemented")
}
func (*UnimplementedWorkerAPIServer) PollForActivityTask(ctx context.Context, req *PollForActivityTaskRequest) (*PollForActivityTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollForActivityTask not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondActivityTaskCompleted(ctx context.Context, req *RespondActivityTaskCompletedRequest) (*RespondActivityTaskCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondActivityTaskCompleted not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondActivityTaskCompletedByID(ctx context.Context, req *RespondActivityTaskCompletedByIDRequest) (*RespondActivityTaskCompletedByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondActivityTaskCompletedByID not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondActivityTaskFailed(ctx context.Context, req *RespondActivityTaskFailedRequest) (*RespondActivityTaskFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondActivityTaskFailed not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondActivityTaskFailedByID(ctx context.Context, req *RespondActivityTaskFailedByIDRequest) (*RespondActivityTaskFailedByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondActivityTaskFailedByID not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondActivityTaskCanceled(ctx context.Context, req *RespondActivityTaskCanceledRequest) (*RespondActivityTaskCanceledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondActivityTaskCanceled not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondActivityTaskCanceledByID(ctx context.Context, req *RespondActivityTaskCanceledByIDRequest) (*RespondActivityTaskCanceledByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondActivityTaskCanceledByID not implemented")
}
func (*UnimplementedWorkerAPIServer) RecordActivityTaskHeartbeat(ctx context.Context, req *RecordActivityTaskHeartbeatRequest) (*RecordActivityTaskHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordActivityTaskHeartbeat not implemented")
}
func (*UnimplementedWorkerAPIServer) RecordActivityTaskHeartbeatByID(ctx context.Context, req *RecordActivityTaskHeartbeatByIDRequest) (*RecordActivityTaskHeartbeatByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordActivityTaskHeartbeatByID not implemented")
}
func (*UnimplementedWorkerAPIServer) RespondQueryTaskCompleted(ctx context.Context, req *RespondQueryTaskCompletedRequest) (*RespondQueryTaskCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondQueryTaskCompleted not implemented")
}
func (*UnimplementedWorkerAPIServer) RequestCancelWorkflowExecution(ctx context.Context, req *RequestCancelWorkflowExecutionRequest) (*RequestCancelWorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCancelWorkflowExecution not implemented")
}

func RegisterWorkerAPIServer(s *grpc.Server, srv WorkerAPIServer) {
	s.RegisterService(&_WorkerAPI_serviceDesc, srv)
}

func _WorkerAPI_PollForDecisionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollForDecisionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).PollForDecisionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/PollForDecisionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).PollForDecisionTask(ctx, req.(*PollForDecisionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondDecisionTaskCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondDecisionTaskCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondDecisionTaskCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondDecisionTaskCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondDecisionTaskCompleted(ctx, req.(*RespondDecisionTaskCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondDecisionTaskFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondDecisionTaskFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondDecisionTaskFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondDecisionTaskFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondDecisionTaskFailed(ctx, req.(*RespondDecisionTaskFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_PollForActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollForActivityTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).PollForActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/PollForActivityTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).PollForActivityTask(ctx, req.(*PollForActivityTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondActivityTaskCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondActivityTaskCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondActivityTaskCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondActivityTaskCompleted(ctx, req.(*RespondActivityTaskCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondActivityTaskCompletedByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondActivityTaskCompletedByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondActivityTaskCompletedByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskCompletedByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondActivityTaskCompletedByID(ctx, req.(*RespondActivityTaskCompletedByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondActivityTaskFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondActivityTaskFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondActivityTaskFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondActivityTaskFailed(ctx, req.(*RespondActivityTaskFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondActivityTaskFailedByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondActivityTaskFailedByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondActivityTaskFailedByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskFailedByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondActivityTaskFailedByID(ctx, req.(*RespondActivityTaskFailedByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondActivityTaskCanceled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondActivityTaskCanceledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondActivityTaskCanceled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskCanceled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondActivityTaskCanceled(ctx, req.(*RespondActivityTaskCanceledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondActivityTaskCanceledByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondActivityTaskCanceledByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondActivityTaskCanceledByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondActivityTaskCanceledByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondActivityTaskCanceledByID(ctx, req.(*RespondActivityTaskCanceledByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RecordActivityTaskHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordActivityTaskHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RecordActivityTaskHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RecordActivityTaskHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RecordActivityTaskHeartbeat(ctx, req.(*RecordActivityTaskHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RecordActivityTaskHeartbeatByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordActivityTaskHeartbeatByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RecordActivityTaskHeartbeatByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RecordActivityTaskHeartbeatByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RecordActivityTaskHeartbeatByID(ctx, req.(*RecordActivityTaskHeartbeatByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RespondQueryTaskCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondQueryTaskCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RespondQueryTaskCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RespondQueryTaskCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RespondQueryTaskCompleted(ctx, req.(*RespondQueryTaskCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerAPI_RequestCancelWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCancelWorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).RequestCancelWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.WorkerAPI/RequestCancelWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).RequestCancelWorkflowExecution(ctx, req.(*RequestCancelWorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uber.cadence.api.v1.WorkerAPI",
	HandlerType: (*WorkerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PollForDecisionTask",
			Handler:    _WorkerAPI_PollForDecisionTask_Handler,
		},
		{
			MethodName: "RespondDecisionTaskCompleted",
			Handler:    _WorkerAPI_RespondDecisionTaskCompleted_Handler,
		},
		{
			MethodName: "RespondDecisionTaskFailed",
			Handler:    _WorkerAPI_RespondDecisionTaskFailed_Handler,
		},
		{
			MethodName: "PollForActivityTask",
			Handler:    _WorkerAPI_PollForActivityTask_Handler,
		},
		{
			MethodName: "RespondActivityTaskCompleted",
			Handler:    _WorkerAPI_RespondActivityTaskCompleted_Handler,
		},
		{
			MethodName: "RespondActivityTaskCompletedByID",
			Handler:    _WorkerAPI_RespondActivityTaskCompletedByID_Handler,
		},
		{
			MethodName: "RespondActivityTaskFailed",
			Handler:    _WorkerAPI_RespondActivityTaskFailed_Handler,
		},
		{
			MethodName: "RespondActivityTaskFailedByID",
			Handler:    _WorkerAPI_RespondActivityTaskFailedByID_Handler,
		},
		{
			MethodName: "RespondActivityTaskCanceled",
			Handler:    _WorkerAPI_RespondActivityTaskCanceled_Handler,
		},
		{
			MethodName: "RespondActivityTaskCanceledByID",
			Handler:    _WorkerAPI_RespondActivityTaskCanceledByID_Handler,
		},
		{
			MethodName: "RecordActivityTaskHeartbeat",
			Handler:    _WorkerAPI_RecordActivityTaskHeartbeat_Handler,
		},
		{
			MethodName: "RecordActivityTaskHeartbeatByID",
			Handler:    _WorkerAPI_RecordActivityTaskHeartbeatByID_Handler,
		},
		{
			MethodName: "RespondQueryTaskCompleted",
			Handler:    _WorkerAPI_RespondQueryTaskCompleted_Handler,
		},
		{
			MethodName: "RequestCancelWorkflowExecution",
			Handler:    _WorkerAPI_RequestCancelWorkflowExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/uber/cadence/.gen/proto/api/v1/service_worker.proto",
}

func (m *PollForDecisionTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForDecisionTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForDecisionTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollForDecisionTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForDecisionTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForDecisionTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for k := range m.Queries {
			v := m.Queries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServiceWorker(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceWorker(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceWorker(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.StartedTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintServiceWorker(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x6a
	}
	if m.ScheduledTime != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ScheduledTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintServiceWorker(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x62
	}
	if m.WorkflowExecutionTaskList != nil {
		{
			size, err := m.WorkflowExecutionTaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x4a
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.BacklogCountHint != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.BacklogCountHint))
		i--
		dAtA[i] = 0x38
	}
	if m.Attempt != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x30
	}
	if m.StartedEventId != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.PreviousStartedEventId != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.PreviousStartedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryResults) > 0 {
		for k := range m.QueryResults {
			v := m.QueryResults[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServiceWorker(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceWorker(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceWorker(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x42
	}
	if m.ForceCreateNewDecisionTask {
		i--
		if m.ForceCreateNewDecisionTask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ReturnNewDecisionTask {
		i--
		if m.ReturnNewDecisionTask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StickyAttributes != nil {
		{
			size, err := m.StickyAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExecutionContext) > 0 {
		i -= len(m.ExecutionContext)
		copy(dAtA[i:], m.ExecutionContext)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ExecutionContext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Decisions) > 0 {
		for iNdEx := len(m.Decisions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Decisions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceWorker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivitiesToDispatchLocally) > 0 {
		for k := range m.ActivitiesToDispatchLocally {
			v := m.ActivitiesToDispatchLocally[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServiceWorker(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceWorker(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceWorker(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DecisionTask != nil {
		{
			size, err := m.DecisionTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskFailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cause != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondDecisionTaskFailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondDecisionTaskFailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondDecisionTaskFailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PollForActivityTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForActivityTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForActivityTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskListMetadata != nil {
		{
			size, err := m.TaskListMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollForActivityTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollForActivityTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollForActivityTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.WorkflowDomain) > 0 {
		i -= len(m.WorkflowDomain)
		copy(dAtA[i:], m.WorkflowDomain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.WorkflowDomain)))
		i--
		dAtA[i] = 0x7a
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.HeartbeatDetails != nil {
		{
			size, err := m.HeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ScheduledTimestampOfThisAttempt != nil {
		n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ScheduledTimestampOfThisAttempt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTimestampOfThisAttempt):])
		if err20 != nil {
			return 0, err20
		}
		i -= n20
		i = encodeVarintServiceWorker(dAtA, i, uint64(n20))
		i--
		dAtA[i] = 0x62
	}
	if m.Attempt != 0 {
		i = encodeVarintServiceWorker(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x58
	}
	if m.HeartbeatTimeout != nil {
		n21, err21 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.HeartbeatTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatTimeout):])
		if err21 != nil {
			return 0, err21
		}
		i -= n21
		i = encodeVarintServiceWorker(dAtA, i, uint64(n21))
		i--
		dAtA[i] = 0x52
	}
	if m.StartToCloseTimeout != nil {
		n22, err22 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.StartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout):])
		if err22 != nil {
			return 0, err22
		}
		i -= n22
		i = encodeVarintServiceWorker(dAtA, i, uint64(n22))
		i--
		dAtA[i] = 0x4a
	}
	if m.ScheduleToCloseTimeout != nil {
		n23, err23 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToCloseTimeout):])
		if err23 != nil {
			return 0, err23
		}
		i -= n23
		i = encodeVarintServiceWorker(dAtA, i, uint64(n23))
		i--
		dAtA[i] = 0x42
	}
	if m.StartedTimestamp != nil {
		n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartedTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTimestamp):])
		if err24 != nil {
			return 0, err24
		}
		i -= n24
		i = encodeVarintServiceWorker(dAtA, i, uint64(n24))
		i--
		dAtA[i] = 0x3a
	}
	if m.ScheduledTimestamp != nil {
		n25, err25 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ScheduledTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTimestamp):])
		if err25 != nil {
			return 0, err25
		}
		i -= n25
		i = encodeVarintServiceWorker(dAtA, i, uint64(n25))
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x32
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCompletedByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCompletedByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCompletedByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x32
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskFailedByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskFailedByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskFailedByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x32
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondActivityTaskCanceledByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondActivityTaskCanceledByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondActivityTaskCanceledByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x32
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityTaskHeartbeatByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityTaskHeartbeatByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RespondQueryTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondQueryTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondQueryTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkerVersionInfo != nil {
		{
			size, err := m.WorkerVersionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondQueryTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondQueryTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondQueryTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestCancelWorkflowExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelWorkflowExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelWorkflowExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintServiceWorker(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelWorkflowExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelWorkflowExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelWorkflowExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintServiceWorker(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceWorker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PollForDecisionTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *PollForDecisionTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.PreviousStartedEventId != 0 {
		n += 1 + sovServiceWorker(uint64(m.PreviousStartedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovServiceWorker(uint64(m.StartedEventId))
	}
	if m.Attempt != 0 {
		n += 1 + sovServiceWorker(uint64(m.Attempt))
	}
	if m.BacklogCountHint != 0 {
		n += 1 + sovServiceWorker(uint64(m.BacklogCountHint))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecutionTaskList != nil {
		l = m.WorkflowExecutionTaskList.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ScheduledTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime)
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StartedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime)
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if len(m.Queries) > 0 {
		for k, v := range m.Queries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServiceWorker(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServiceWorker(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServiceWorker(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RespondDecisionTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if len(m.Decisions) > 0 {
		for _, e := range m.Decisions {
			l = e.Size()
			n += 1 + l + sovServiceWorker(uint64(l))
		}
	}
	l = len(m.ExecutionContext)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StickyAttributes != nil {
		l = m.StickyAttributes.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ReturnNewDecisionTask {
		n += 2
	}
	if m.ForceCreateNewDecisionTask {
		n += 2
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if len(m.QueryResults) > 0 {
		for k, v := range m.QueryResults {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServiceWorker(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServiceWorker(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServiceWorker(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RespondDecisionTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTask != nil {
		l = m.DecisionTask.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if len(m.ActivitiesToDispatchLocally) > 0 {
		for k, v := range m.ActivitiesToDispatchLocally {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServiceWorker(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServiceWorker(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServiceWorker(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RespondDecisionTaskFailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovServiceWorker(uint64(m.Cause))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondDecisionTaskFailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PollForActivityTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.TaskListMetadata != nil {
		l = m.TaskListMetadata.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *PollForActivityTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ScheduledTimestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTimestamp)
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StartedTimestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTimestamp)
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.ScheduleToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToCloseTimeout)
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.StartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout)
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.HeartbeatTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatTimeout)
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovServiceWorker(uint64(m.Attempt))
	}
	if m.ScheduledTimestampOfThisAttempt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTimestampOfThisAttempt)
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.HeartbeatDetails != nil {
		l = m.HeartbeatDetails.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.WorkflowDomain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 2 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskCompletedByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCompletedByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskFailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskFailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskFailedByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskFailedByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskCanceledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCanceledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondActivityTaskCanceledByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondActivityTaskCanceledByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RecordActivityTaskHeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RecordActivityTaskHeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelRequested {
		n += 2
	}
	return n
}

func (m *RecordActivityTaskHeartbeatByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RecordActivityTaskHeartbeatByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelRequested {
		n += 2
	}
	return n
}

func (m *RespondQueryTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkerVersionInfo != nil {
		l = m.WorkerVersionInfo.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RespondQueryTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestCancelWorkflowExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovServiceWorker(uint64(l))
	}
	return n
}

func (m *RequestCancelWorkflowExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovServiceWorker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceWorker(x uint64) (n int) {
	return sovServiceWorker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PollForDecisionTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollForDecisionTaskRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "TaskList", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollForDecisionTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForQueries := make([]string, 0, len(this.Queries))
	for k, _ := range this.Queries {
		keysForQueries = append(keysForQueries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueries)
	mapStringForQueries := "map[string]*WorkflowQuery{"
	for _, k := range keysForQueries {
		mapStringForQueries += fmt.Sprintf("%v: %v,", k, this.Queries[k])
	}
	mapStringForQueries += "}"
	s := strings.Join([]string{`&PollForDecisionTaskResponse{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "WorkflowType", 1) + `,`,
		`PreviousStartedEventId:` + fmt.Sprintf("%v", this.PreviousStartedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`BacklogCountHint:` + fmt.Sprintf("%v", this.BacklogCountHint) + `,`,
		`History:` + strings.Replace(fmt.Sprintf("%v", this.History), "History", "History", 1) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "WorkflowQuery", "WorkflowQuery", 1) + `,`,
		`WorkflowExecutionTaskList:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTaskList), "TaskList", "TaskList", 1) + `,`,
		`ScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`StartedTime:` + strings.Replace(fmt.Sprintf("%v", this.StartedTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`Queries:` + mapStringForQueries + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondDecisionTaskCompletedRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDecisions := "[]*Decision{"
	for _, f := range this.Decisions {
		repeatedStringForDecisions += strings.Replace(fmt.Sprintf("%v", f), "Decision", "Decision", 1) + ","
	}
	repeatedStringForDecisions += "}"
	keysForQueryResults := make([]string, 0, len(this.QueryResults))
	for k, _ := range this.QueryResults {
		keysForQueryResults = append(keysForQueryResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueryResults)
	mapStringForQueryResults := "map[string]*WorkflowQueryResult{"
	for _, k := range keysForQueryResults {
		mapStringForQueryResults += fmt.Sprintf("%v: %v,", k, this.QueryResults[k])
	}
	mapStringForQueryResults += "}"
	s := strings.Join([]string{`&RespondDecisionTaskCompletedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Decisions:` + repeatedStringForDecisions + `,`,
		`ExecutionContext:` + fmt.Sprintf("%v", this.ExecutionContext) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`StickyAttributes:` + strings.Replace(fmt.Sprintf("%v", this.StickyAttributes), "StickyExecutionAttributes", "StickyExecutionAttributes", 1) + `,`,
		`ReturnNewDecisionTask:` + fmt.Sprintf("%v", this.ReturnNewDecisionTask) + `,`,
		`ForceCreateNewDecisionTask:` + fmt.Sprintf("%v", this.ForceCreateNewDecisionTask) + `,`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`QueryResults:` + mapStringForQueryResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondDecisionTaskCompletedResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForActivitiesToDispatchLocally := make([]string, 0, len(this.ActivitiesToDispatchLocally))
	for k, _ := range this.ActivitiesToDispatchLocally {
		keysForActivitiesToDispatchLocally = append(keysForActivitiesToDispatchLocally, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForActivitiesToDispatchLocally)
	mapStringForActivitiesToDispatchLocally := "map[string]*ActivityLocalDispatchInfo{"
	for _, k := range keysForActivitiesToDispatchLocally {
		mapStringForActivitiesToDispatchLocally += fmt.Sprintf("%v: %v,", k, this.ActivitiesToDispatchLocally[k])
	}
	mapStringForActivitiesToDispatchLocally += "}"
	s := strings.Join([]string{`&RespondDecisionTaskCompletedResponse{`,
		`DecisionTask:` + strings.Replace(this.DecisionTask.String(), "PollForDecisionTaskResponse", "PollForDecisionTaskResponse", 1) + `,`,
		`ActivitiesToDispatchLocally:` + mapStringForActivitiesToDispatchLocally + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondDecisionTaskFailedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondDecisionTaskFailedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payload", "Payload", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondDecisionTaskFailedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondDecisionTaskFailedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *PollForActivityTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollForActivityTaskRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "TaskList", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`TaskListMetadata:` + strings.Replace(fmt.Sprintf("%v", this.TaskListMetadata), "TaskListMetadata", "TaskListMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollForActivityTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollForActivityTaskResponse{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "WorkflowExecution", 1) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "ActivityType", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payload", "Payload", 1) + `,`,
		`ScheduledTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTimestamp), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`StartedTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.StartedTimestamp), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`ScheduleToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToCloseTimeout), "Duration", "duration.Duration", 1) + `,`,
		`StartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToCloseTimeout), "Duration", "duration.Duration", 1) + `,`,
		`HeartbeatTimeout:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatTimeout), "Duration", "duration.Duration", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`ScheduledTimestampOfThisAttempt:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTimestampOfThisAttempt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`HeartbeatDetails:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatDetails), "Payload", "Payload", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "WorkflowType", 1) + `,`,
		`WorkflowDomain:` + fmt.Sprintf("%v", this.WorkflowDomain) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCompletedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCompletedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payload", "Payload", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCompletedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCompletedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCompletedByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCompletedByIDRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payload", "Payload", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCompletedByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCompletedByIDResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskFailedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskFailedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "Failure", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskFailedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskFailedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskFailedByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskFailedByIDRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "Failure", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskFailedByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskFailedByIDResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCanceledRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCanceledRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payload", "Payload", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCanceledResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCanceledResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCanceledByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCanceledByIDRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payload", "Payload", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondActivityTaskCanceledByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondActivityTaskCanceledByIDResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityTaskHeartbeatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityTaskHeartbeatRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payload", "Payload", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityTaskHeartbeatResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityTaskHeartbeatResponse{`,
		`CancelRequested:` + fmt.Sprintf("%v", this.CancelRequested) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityTaskHeartbeatByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityTaskHeartbeatByIDRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payload", "Payload", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityTaskHeartbeatByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityTaskHeartbeatByIDResponse{`,
		`CancelRequested:` + fmt.Sprintf("%v", this.CancelRequested) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondQueryTaskCompletedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondQueryTaskCompletedRequest{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "WorkflowQueryResult", "WorkflowQueryResult", 1) + `,`,
		`WorkerVersionInfo:` + strings.Replace(fmt.Sprintf("%v", this.WorkerVersionInfo), "WorkerVersionInfo", "WorkerVersionInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondQueryTaskCompletedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondQueryTaskCompletedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelWorkflowExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelWorkflowExecutionRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "WorkflowExecution", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelWorkflowExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelWorkflowExecutionResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringServiceWorker(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PollForDecisionTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForDecisionTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForDecisionTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForDecisionTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForDecisionTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForDecisionTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStartedEventId", wireType)
			}
			m.PreviousStartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousStartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BacklogCountHint", wireType)
			}
			m.BacklogCountHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BacklogCountHint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &WorkflowQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionTaskList == nil {
				m.WorkflowExecutionTaskList = &TaskList{}
			}
			if err := m.WorkflowExecutionTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ScheduledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Queries == nil {
				m.Queries = make(map[string]*WorkflowQuery)
			}
			var mapkey string
			var mapvalue *WorkflowQuery
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceWorker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WorkflowQuery{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceWorker(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Queries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decisions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decisions = append(m.Decisions, &Decision{})
			if err := m.Decisions[len(m.Decisions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionContext = append(m.ExecutionContext[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecutionContext == nil {
				m.ExecutionContext = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickyAttributes == nil {
				m.StickyAttributes = &StickyExecutionAttributes{}
			}
			if err := m.StickyAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnNewDecisionTask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnNewDecisionTask = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceCreateNewDecisionTask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceCreateNewDecisionTask = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryResults == nil {
				m.QueryResults = make(map[string]*WorkflowQueryResult)
			}
			var mapkey string
			var mapvalue *WorkflowQueryResult
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceWorker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WorkflowQueryResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceWorker(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QueryResults[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecisionTask == nil {
				m.DecisionTask = &PollForDecisionTaskResponse{}
			}
			if err := m.DecisionTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivitiesToDispatchLocally", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivitiesToDispatchLocally == nil {
				m.ActivitiesToDispatchLocally = make(map[string]*ActivityLocalDispatchInfo)
			}
			var mapkey string
			var mapvalue *ActivityLocalDispatchInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceWorker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceWorker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServiceWorker
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ActivityLocalDispatchInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceWorker(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceWorker
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActivitiesToDispatchLocally[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= DecisionTaskFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondDecisionTaskFailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondDecisionTaskFailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForActivityTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForActivityTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForActivityTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskListMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskListMetadata == nil {
				m.TaskListMetadata = &TaskListMetadata{}
			}
			if err := m.TaskListMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollForActivityTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollForActivityTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollForActivityTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTimestamp == nil {
				m.ScheduledTimestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ScheduledTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTimestamp == nil {
				m.StartedTimestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartedTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToCloseTimeout == nil {
				m.ScheduleToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToCloseTimeout == nil {
				m.StartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.StartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatTimeout == nil {
				m.HeartbeatTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.HeartbeatTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimestampOfThisAttempt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTimestampOfThisAttempt == nil {
				m.ScheduledTimestampOfThisAttempt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ScheduledTimestampOfThisAttempt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatDetails == nil {
				m.HeartbeatDetails = &Payload{}
			}
			if err := m.HeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCompletedByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCompletedByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskFailedByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskFailedByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondActivityTaskCanceledByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondActivityTaskCanceledByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityTaskHeartbeatByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityTaskHeartbeatByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondQueryTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &WorkflowQueryResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerVersionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerVersionInfo == nil {
				m.WorkerVersionInfo = &WorkerVersionInfo{}
			}
			if err := m.WorkerVersionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondQueryTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelWorkflowExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelWorkflowExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelWorkflowExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceWorker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceWorker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceWorker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceWorker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceWorker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceWorker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceWorker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceWorker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceWorker = fmt.Errorf("proto: unexpected end of group")
)
