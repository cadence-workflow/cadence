{{$ClientName := (index .Vars "client")}}
{{$clientName := (down $ClientName)}}
{{$interfaceName := .Interface.Name}}
{{ $decorator := (printf "%s%s" (down $clientName) .Interface.Name) }}
{{ $Decorator := (printf "%s%s" $ClientName .Interface.Name) }}
{{/*
 $fieldMap defines a map of the decorator struct fields
 with field name as the key and field type as the value
 */}}
{{$fieldMap := dict "timeout" "time.Duration" "client" .Interface.Type }}
{{ if eq $ClientName "Admin" }}
    {{$fieldMap = merge $fieldMap (dict  "largeTimeout" "time.Duration") }}
{{ else }}
    {{$fieldMap = merge $fieldMap (dict "longPollTimeout" "time.Duration") }}
{{ end }}
{{ if eq $ClientName "Matching" }}
    {{$fieldMap = merge $fieldMap (dict "peerResolver" "matching.PeerResolver" "loadBalancer" "matching.LoadBalancer") }}
{{ end }}

import (
    "context"
    "time"

    "go.uber.org/yarpc"

    "github.com/uber/cadence/client/{{$clientName}}"
    "github.com/uber/cadence/common/future"
    "github.com/uber/cadence/common/persistence"
    "github.com/uber/cadence/common/types"
)

var _ {{.Interface.Type}} = (*{{$decorator}})(nil)

type {{$decorator}} struct {
    {{ range $key, $value := $fieldMap -}}
           {{$key}} {{$value}}
    {{ end }}
}

// New{{$Decorator}} creates a new {{$clientName}} service TChannel client
func New{{$Decorator}}(
	{{- range $key, $value := $fieldMap}}
               {{$key}} {{$value}},
    {{- end }}
) {{.Interface.Type}} {
	return &{{$decorator}}{
		{{- range $key, $value := $fieldMap}}
            {{$key}}: {{$key}},
        {{- end }}
	}
}

{{range $method := .Interface.Methods}}
func (c * {{$decorator}}) {{$method.Declaration}} {
    {{- if or (eq $method.Name "GetCrossClusterTasks") (eq $method.Name "GetReplicationMessages") }}
    ctx, cancel := c.createContextWithLargeTimeout(ctx)
    {{- else }}
    ctx, cancel := c.createContext({{(index $method.Params 0).Name}})
    {{- end }}
    defer cancel()
    return c.client.{{$method.Name}}(
        {{- $paramsLength := len $method.Params -}}
        {{- $lastIndex := sub $paramsLength 1 -}}
        {{- range $index, $param := $method.Params -}}
            {{- if ne $index $lastIndex -}}
                {{- $param.Name -}},
            {{- else -}}
                {{- $param.Name -}}...
            {{- end -}}
        {{- end -}}
    )
}
{{end}}

func (c *{{$decorator}}) createContext(parent context.Context) (context.Context, context.CancelFunc) {
	if parent == nil {
		return context.WithTimeout(context.Background(), c.timeout)
	}
	return context.WithTimeout(parent, c.timeout)
}

{{ if eq $ClientName "Admin" }}
func (c *{{$decorator}}) createContextWithLargeTimeout(parent context.Context) (context.Context, context.CancelFunc) {
	if parent == nil {
		return context.WithTimeout(context.Background(), c.largeTimeout)
	}
	return context.WithTimeout(parent, c.largeTimeout)
}
{{else}}
func (c *{{$decorator}}) createLongPollContext(parent context.Context) (context.Context, context.CancelFunc) {
	if parent == nil {
		return context.WithTimeout(context.Background(), c.longPollTimeout)
	}
	return context.WithTimeout(parent, c.longPollTimeout)
}
{{end}}