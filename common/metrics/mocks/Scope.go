// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/metrics (interfaces: Scope)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/Scope.go github.com/uber/cadence/common/metrics Scope
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	metrics "github.com/uber/cadence/common/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockScope is a mock of Scope interface.
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
	isgomock struct{}
}

// MockScopeMockRecorder is the mock recorder for MockScope.
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance.
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// AddCounter mocks base method.
func (m *MockScope) AddCounter(counter metrics.MetricIdx, delta int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCounter", counter, delta)
}

// AddCounter indicates an expected call of AddCounter.
func (mr *MockScopeMockRecorder) AddCounter(counter, delta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounter", reflect.TypeOf((*MockScope)(nil).AddCounter), counter, delta)
}

// ExponentialHistogram mocks base method.
func (m *MockScope) ExponentialHistogram(hist metrics.MetricIdx, d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExponentialHistogram", hist, d)
}

// ExponentialHistogram indicates an expected call of ExponentialHistogram.
func (mr *MockScopeMockRecorder) ExponentialHistogram(hist, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExponentialHistogram", reflect.TypeOf((*MockScope)(nil).ExponentialHistogram), hist, d)
}

// IncCounter mocks base method.
func (m *MockScope) IncCounter(counter metrics.MetricIdx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCounter", counter)
}

// IncCounter indicates an expected call of IncCounter.
func (mr *MockScopeMockRecorder) IncCounter(counter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounter", reflect.TypeOf((*MockScope)(nil).IncCounter), counter)
}

// IntExponentialHistogram mocks base method.
func (m *MockScope) IntExponentialHistogram(hist metrics.MetricIdx, value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IntExponentialHistogram", hist, value)
}

// IntExponentialHistogram indicates an expected call of IntExponentialHistogram.
func (mr *MockScopeMockRecorder) IntExponentialHistogram(hist, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntExponentialHistogram", reflect.TypeOf((*MockScope)(nil).IntExponentialHistogram), hist, value)
}

// RecordHistogramDuration mocks base method.
func (m *MockScope) RecordHistogramDuration(timer metrics.MetricIdx, d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHistogramDuration", timer, d)
}

// RecordHistogramDuration indicates an expected call of RecordHistogramDuration.
func (mr *MockScopeMockRecorder) RecordHistogramDuration(timer, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHistogramDuration", reflect.TypeOf((*MockScope)(nil).RecordHistogramDuration), timer, d)
}

// RecordHistogramValue mocks base method.
func (m *MockScope) RecordHistogramValue(timer metrics.MetricIdx, value float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHistogramValue", timer, value)
}

// RecordHistogramValue indicates an expected call of RecordHistogramValue.
func (mr *MockScopeMockRecorder) RecordHistogramValue(timer, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHistogramValue", reflect.TypeOf((*MockScope)(nil).RecordHistogramValue), timer, value)
}

// RecordTimer mocks base method.
func (m *MockScope) RecordTimer(timer metrics.MetricIdx, d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTimer", timer, d)
}

// RecordTimer indicates an expected call of RecordTimer.
func (mr *MockScopeMockRecorder) RecordTimer(timer, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTimer", reflect.TypeOf((*MockScope)(nil).RecordTimer), timer, d)
}

// StartTimer mocks base method.
func (m *MockScope) StartTimer(timer metrics.MetricIdx) metrics.Stopwatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTimer", timer)
	ret0, _ := ret[0].(metrics.Stopwatch)
	return ret0
}

// StartTimer indicates an expected call of StartTimer.
func (mr *MockScopeMockRecorder) StartTimer(timer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTimer", reflect.TypeOf((*MockScope)(nil).StartTimer), timer)
}

// Tagged mocks base method.
func (m *MockScope) Tagged(tags ...metrics.Tag) metrics.Scope {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tagged", varargs...)
	ret0, _ := ret[0].(metrics.Scope)
	return ret0
}

// Tagged indicates an expected call of Tagged.
func (mr *MockScopeMockRecorder) Tagged(tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tagged", reflect.TypeOf((*MockScope)(nil).Tagged), tags...)
}

// UpdateGauge mocks base method.
func (m *MockScope) UpdateGauge(gauge metrics.MetricIdx, value float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateGauge", gauge, value)
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockScopeMockRecorder) UpdateGauge(gauge, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockScope)(nil).UpdateGauge), gauge, value)
}
