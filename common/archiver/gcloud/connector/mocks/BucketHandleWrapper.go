// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"cloud.google.com/go/storage"
	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/archiver/gcloud/connector"
)

// NewBucketHandleWrapper creates a new instance of BucketHandleWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBucketHandleWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *BucketHandleWrapper {
	mock := &BucketHandleWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BucketHandleWrapper is an autogenerated mock type for the BucketHandleWrapper type
type BucketHandleWrapper struct {
	mock.Mock
}

type BucketHandleWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *BucketHandleWrapper) EXPECT() *BucketHandleWrapper_Expecter {
	return &BucketHandleWrapper_Expecter{mock: &_m.Mock}
}

// Attrs provides a mock function for the type BucketHandleWrapper
func (_mock *BucketHandleWrapper) Attrs(ctx context.Context) (*storage.BucketAttrs, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Attrs")
	}

	var r0 *storage.BucketAttrs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*storage.BucketAttrs, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *storage.BucketAttrs); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.BucketAttrs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BucketHandleWrapper_Attrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attrs'
type BucketHandleWrapper_Attrs_Call struct {
	*mock.Call
}

// Attrs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *BucketHandleWrapper_Expecter) Attrs(ctx interface{}) *BucketHandleWrapper_Attrs_Call {
	return &BucketHandleWrapper_Attrs_Call{Call: _e.mock.On("Attrs", ctx)}
}

func (_c *BucketHandleWrapper_Attrs_Call) Run(run func(ctx context.Context)) *BucketHandleWrapper_Attrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BucketHandleWrapper_Attrs_Call) Return(bucketAttrs *storage.BucketAttrs, err error) *BucketHandleWrapper_Attrs_Call {
	_c.Call.Return(bucketAttrs, err)
	return _c
}

func (_c *BucketHandleWrapper_Attrs_Call) RunAndReturn(run func(ctx context.Context) (*storage.BucketAttrs, error)) *BucketHandleWrapper_Attrs_Call {
	_c.Call.Return(run)
	return _c
}

// Object provides a mock function for the type BucketHandleWrapper
func (_mock *BucketHandleWrapper) Object(name string) connector.ObjectHandleWrapper {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Object")
	}

	var r0 connector.ObjectHandleWrapper
	if returnFunc, ok := ret.Get(0).(func(string) connector.ObjectHandleWrapper); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connector.ObjectHandleWrapper)
		}
	}
	return r0
}

// BucketHandleWrapper_Object_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Object'
type BucketHandleWrapper_Object_Call struct {
	*mock.Call
}

// Object is a helper method to define mock.On call
//   - name string
func (_e *BucketHandleWrapper_Expecter) Object(name interface{}) *BucketHandleWrapper_Object_Call {
	return &BucketHandleWrapper_Object_Call{Call: _e.mock.On("Object", name)}
}

func (_c *BucketHandleWrapper_Object_Call) Run(run func(name string)) *BucketHandleWrapper_Object_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BucketHandleWrapper_Object_Call) Return(objectHandleWrapper connector.ObjectHandleWrapper) *BucketHandleWrapper_Object_Call {
	_c.Call.Return(objectHandleWrapper)
	return _c
}

func (_c *BucketHandleWrapper_Object_Call) RunAndReturn(run func(name string) connector.ObjectHandleWrapper) *BucketHandleWrapper_Object_Call {
	_c.Call.Return(run)
	return _c
}

// Objects provides a mock function for the type BucketHandleWrapper
func (_mock *BucketHandleWrapper) Objects(ctx context.Context, q *storage.Query) connector.ObjectIteratorWrapper {
	ret := _mock.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Objects")
	}

	var r0 connector.ObjectIteratorWrapper
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storage.Query) connector.ObjectIteratorWrapper); ok {
		r0 = returnFunc(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connector.ObjectIteratorWrapper)
		}
	}
	return r0
}

// BucketHandleWrapper_Objects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Objects'
type BucketHandleWrapper_Objects_Call struct {
	*mock.Call
}

// Objects is a helper method to define mock.On call
//   - ctx context.Context
//   - q *storage.Query
func (_e *BucketHandleWrapper_Expecter) Objects(ctx interface{}, q interface{}) *BucketHandleWrapper_Objects_Call {
	return &BucketHandleWrapper_Objects_Call{Call: _e.mock.On("Objects", ctx, q)}
}

func (_c *BucketHandleWrapper_Objects_Call) Run(run func(ctx context.Context, q *storage.Query)) *BucketHandleWrapper_Objects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *storage.Query
		if args[1] != nil {
			arg1 = args[1].(*storage.Query)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BucketHandleWrapper_Objects_Call) Return(objectIteratorWrapper connector.ObjectIteratorWrapper) *BucketHandleWrapper_Objects_Call {
	_c.Call.Return(objectIteratorWrapper)
	return _c
}

func (_c *BucketHandleWrapper_Objects_Call) RunAndReturn(run func(ctx context.Context, q *storage.Query) connector.ObjectIteratorWrapper) *BucketHandleWrapper_Objects_Call {
	_c.Call.Return(run)
	return _c
}
