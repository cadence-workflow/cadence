// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package blobstore

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockClient
func (_mock *MockClient) Delete(context1 context.Context, deleteRequest *DeleteRequest) (*DeleteResponse, error) {
	ret := _mock.Called(context1, deleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *DeleteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *DeleteRequest) (*DeleteResponse, error)); ok {
		return returnFunc(context1, deleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *DeleteRequest) *DeleteResponse); ok {
		r0 = returnFunc(context1, deleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *DeleteRequest) error); ok {
		r1 = returnFunc(context1, deleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteRequest *DeleteRequest
func (_e *MockClient_Expecter) Delete(context1 interface{}, deleteRequest interface{}) *MockClient_Delete_Call {
	return &MockClient_Delete_Call{Call: _e.mock.On("Delete", context1, deleteRequest)}
}

func (_c *MockClient_Delete_Call) Run(run func(context1 context.Context, deleteRequest *DeleteRequest)) *MockClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *DeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*DeleteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_Delete_Call) Return(deleteResponse *DeleteResponse, err error) *MockClient_Delete_Call {
	_c.Call.Return(deleteResponse, err)
	return _c
}

func (_c *MockClient_Delete_Call) RunAndReturn(run func(context1 context.Context, deleteRequest *DeleteRequest) (*DeleteResponse, error)) *MockClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockClient
func (_mock *MockClient) Exists(context1 context.Context, existsRequest *ExistsRequest) (*ExistsResponse, error) {
	ret := _mock.Called(context1, existsRequest)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *ExistsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ExistsRequest) (*ExistsResponse, error)); ok {
		return returnFunc(context1, existsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ExistsRequest) *ExistsResponse); ok {
		r0 = returnFunc(context1, existsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ExistsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ExistsRequest) error); ok {
		r1 = returnFunc(context1, existsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - context1 context.Context
//   - existsRequest *ExistsRequest
func (_e *MockClient_Expecter) Exists(context1 interface{}, existsRequest interface{}) *MockClient_Exists_Call {
	return &MockClient_Exists_Call{Call: _e.mock.On("Exists", context1, existsRequest)}
}

func (_c *MockClient_Exists_Call) Run(run func(context1 context.Context, existsRequest *ExistsRequest)) *MockClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ExistsRequest
		if args[1] != nil {
			arg1 = args[1].(*ExistsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_Exists_Call) Return(existsResponse *ExistsResponse, err error) *MockClient_Exists_Call {
	_c.Call.Return(existsResponse, err)
	return _c
}

func (_c *MockClient_Exists_Call) RunAndReturn(run func(context1 context.Context, existsRequest *ExistsRequest) (*ExistsResponse, error)) *MockClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockClient
func (_mock *MockClient) Get(context1 context.Context, getRequest *GetRequest) (*GetResponse, error) {
	ret := _mock.Called(context1, getRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *GetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetRequest) (*GetResponse, error)); ok {
		return returnFunc(context1, getRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetRequest) *GetResponse); ok {
		r0 = returnFunc(context1, getRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetRequest) error); ok {
		r1 = returnFunc(context1, getRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - getRequest *GetRequest
func (_e *MockClient_Expecter) Get(context1 interface{}, getRequest interface{}) *MockClient_Get_Call {
	return &MockClient_Get_Call{Call: _e.mock.On("Get", context1, getRequest)}
}

func (_c *MockClient_Get_Call) Run(run func(context1 context.Context, getRequest *GetRequest)) *MockClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetRequest
		if args[1] != nil {
			arg1 = args[1].(*GetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_Get_Call) Return(getResponse *GetResponse, err error) *MockClient_Get_Call {
	_c.Call.Return(getResponse, err)
	return _c
}

func (_c *MockClient_Get_Call) RunAndReturn(run func(context1 context.Context, getRequest *GetRequest) (*GetResponse, error)) *MockClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// IsRetryableError provides a mock function for the type MockClient
func (_mock *MockClient) IsRetryableError(err error) bool {
	ret := _mock.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsRetryableError")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(error) bool); ok {
		r0 = returnFunc(err)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockClient_IsRetryableError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRetryableError'
type MockClient_IsRetryableError_Call struct {
	*mock.Call
}

// IsRetryableError is a helper method to define mock.On call
//   - err error
func (_e *MockClient_Expecter) IsRetryableError(err interface{}) *MockClient_IsRetryableError_Call {
	return &MockClient_IsRetryableError_Call{Call: _e.mock.On("IsRetryableError", err)}
}

func (_c *MockClient_IsRetryableError_Call) Run(run func(err error)) *MockClient_IsRetryableError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_IsRetryableError_Call) Return(b bool) *MockClient_IsRetryableError_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockClient_IsRetryableError_Call) RunAndReturn(run func(err error) bool) *MockClient_IsRetryableError_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockClient
func (_mock *MockClient) Put(context1 context.Context, putRequest *PutRequest) (*PutResponse, error) {
	ret := _mock.Called(context1, putRequest)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *PutResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PutRequest) (*PutResponse, error)); ok {
		return returnFunc(context1, putRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PutRequest) *PutResponse); ok {
		r0 = returnFunc(context1, putRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PutResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *PutRequest) error); ok {
		r1 = returnFunc(context1, putRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - context1 context.Context
//   - putRequest *PutRequest
func (_e *MockClient_Expecter) Put(context1 interface{}, putRequest interface{}) *MockClient_Put_Call {
	return &MockClient_Put_Call{Call: _e.mock.On("Put", context1, putRequest)}
}

func (_c *MockClient_Put_Call) Run(run func(context1 context.Context, putRequest *PutRequest)) *MockClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *PutRequest
		if args[1] != nil {
			arg1 = args[1].(*PutRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_Put_Call) Return(putResponse *PutResponse, err error) *MockClient_Put_Call {
	_c.Call.Return(putResponse, err)
	return _c
}

func (_c *MockClient_Put_Call) RunAndReturn(run func(context1 context.Context, putRequest *PutRequest) (*PutResponse, error)) *MockClient_Put_Call {
	_c.Call.Return(run)
	return _c
}
