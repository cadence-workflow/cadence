// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/elasticsearch/bulk (interfaces: GenericBulkProcessor)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/GenericBulkProcessor.go github.com/uber/cadence/common/elasticsearch/bulk GenericBulkProcessor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bulk "github.com/uber/cadence/common/elasticsearch/bulk"
	gomock "go.uber.org/mock/gomock"
)

// MockGenericBulkProcessor is a mock of GenericBulkProcessor interface.
type MockGenericBulkProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockGenericBulkProcessorMockRecorder
	isgomock struct{}
}

// MockGenericBulkProcessorMockRecorder is the mock recorder for MockGenericBulkProcessor.
type MockGenericBulkProcessorMockRecorder struct {
	mock *MockGenericBulkProcessor
}

// NewMockGenericBulkProcessor creates a new mock instance.
func NewMockGenericBulkProcessor(ctrl *gomock.Controller) *MockGenericBulkProcessor {
	mock := &MockGenericBulkProcessor{ctrl: ctrl}
	mock.recorder = &MockGenericBulkProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericBulkProcessor) EXPECT() *MockGenericBulkProcessorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGenericBulkProcessor) Add(request *bulk.GenericBulkableAddRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", request)
}

// Add indicates an expected call of Add.
func (mr *MockGenericBulkProcessorMockRecorder) Add(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGenericBulkProcessor)(nil).Add), request)
}

// Close mocks base method.
func (m *MockGenericBulkProcessor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGenericBulkProcessorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGenericBulkProcessor)(nil).Close))
}

// Flush mocks base method.
func (m *MockGenericBulkProcessor) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockGenericBulkProcessorMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockGenericBulkProcessor)(nil).Flush))
}

// Start mocks base method.
func (m *MockGenericBulkProcessor) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockGenericBulkProcessorMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGenericBulkProcessor)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockGenericBulkProcessor) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockGenericBulkProcessorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGenericBulkProcessor)(nil).Stop))
}
