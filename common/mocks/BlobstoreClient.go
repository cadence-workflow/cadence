// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import blobstore "github.com/uber/cadence/common/blobstore"
import context "context"
import mock "github.com/stretchr/testify/mock"

// BlobstoreClient is an autogenerated mock type for the blobstore.Client type
type BlobstoreClient struct {
	mock.Mock
}

// BucketMetadata provides a mock function with given fields: ctx, bucket
func (_m *BlobstoreClient) BucketMetadata(ctx context.Context, bucket string) (*blobstore.BucketMetadataResponse, error) {
	ret := _m.Called(ctx, bucket)

	var r0 *blobstore.BucketMetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *blobstore.BucketMetadataResponse); ok {
		r0 = rf(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blobstore.BucketMetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, bucket, key
func (_m *BlobstoreClient) Delete(ctx context.Context, bucket string, key string) (bool, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Download provides a mock function with given fields: ctx, bucket, key
func (_m *BlobstoreClient) Download(ctx context.Context, bucket string, key string) (blobstore.Blob, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 blobstore.Blob
	if rf, ok := ret.Get(0).(func(context.Context, string, string) blobstore.Blob); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blobstore.Blob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx, bucket, key
func (_m *BlobstoreClient) Exists(ctx context.Context, bucket string, key string) (bool, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByPrefix provides a mock function with given fields: ctx, bucket, prefix
func (_m *BlobstoreClient) ListByPrefix(ctx context.Context, bucket string, prefix string) ([]string, error) {
	ret := _m.Called(ctx, bucket, prefix)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, bucket, key, blob
func (_m *BlobstoreClient) Upload(ctx context.Context, bucket string, key string, blob blobstore.Blob) error {
	ret := _m.Called(ctx, bucket, key, blob)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, blobstore.Blob) error); ok {
		r0 = rf(ctx, bucket, key, blob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
