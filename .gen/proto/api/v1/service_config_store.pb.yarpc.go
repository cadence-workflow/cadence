// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: uber/cadence/api/v1/service_config_store.proto

package apiv1

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// ConfigStoreAPIYARPCClient is the YARPC client-side interface for the ConfigStoreAPI service.
type ConfigStoreAPIYARPCClient interface {
	GetDynamicConfig(context.Context, *GetDynamicConfigRequest, ...yarpc.CallOption) (*GetDynamicConfigResponse, error)
	UpdateDynamicConfig(context.Context, *UpdateDynamicConfigRequest, ...yarpc.CallOption) (*UpdateDynamicConfigResponse, error)
	RestoreDynamicConfig(context.Context, *RestoreDynamicConfigRequest, ...yarpc.CallOption) (*RestoreDynamicConfigResponse, error)
	ListDynamicConfig(context.Context, *ListDynamicConfigRequest, ...yarpc.CallOption) (*ListDynamicConfigResponse, error)
}

func newConfigStoreAPIYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) ConfigStoreAPIYARPCClient {
	return &_ConfigStoreAPIYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.cadence.api.v1.ConfigStoreAPI",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewConfigStoreAPIYARPCClient builds a new YARPC client for the ConfigStoreAPI service.
func NewConfigStoreAPIYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) ConfigStoreAPIYARPCClient {
	return newConfigStoreAPIYARPCClient(clientConfig, nil, options...)
}

// ConfigStoreAPIYARPCServer is the YARPC server-side interface for the ConfigStoreAPI service.
type ConfigStoreAPIYARPCServer interface {
	GetDynamicConfig(context.Context, *GetDynamicConfigRequest) (*GetDynamicConfigResponse, error)
	UpdateDynamicConfig(context.Context, *UpdateDynamicConfigRequest) (*UpdateDynamicConfigResponse, error)
	RestoreDynamicConfig(context.Context, *RestoreDynamicConfigRequest) (*RestoreDynamicConfigResponse, error)
	ListDynamicConfig(context.Context, *ListDynamicConfigRequest) (*ListDynamicConfigResponse, error)
}

type buildConfigStoreAPIYARPCProceduresParams struct {
	Server      ConfigStoreAPIYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildConfigStoreAPIYARPCProcedures(params buildConfigStoreAPIYARPCProceduresParams) []transport.Procedure {
	handler := &_ConfigStoreAPIYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.cadence.api.v1.ConfigStoreAPI",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "GetDynamicConfig",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetDynamicConfig,
							NewRequest:  newConfigStoreAPIServiceGetDynamicConfigYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "UpdateDynamicConfig",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.UpdateDynamicConfig,
							NewRequest:  newConfigStoreAPIServiceUpdateDynamicConfigYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RestoreDynamicConfig",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RestoreDynamicConfig,
							NewRequest:  newConfigStoreAPIServiceRestoreDynamicConfigYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListDynamicConfig",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListDynamicConfig,
							NewRequest:  newConfigStoreAPIServiceListDynamicConfigYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// BuildConfigStoreAPIYARPCProcedures prepares an implementation of the ConfigStoreAPI service for YARPC registration.
func BuildConfigStoreAPIYARPCProcedures(server ConfigStoreAPIYARPCServer) []transport.Procedure {
	return buildConfigStoreAPIYARPCProcedures(buildConfigStoreAPIYARPCProceduresParams{Server: server})
}

// FxConfigStoreAPIYARPCClientParams defines the input
// for NewFxConfigStoreAPIYARPCClient. It provides the
// paramaters to get a ConfigStoreAPIYARPCClient in an
// Fx application.
type FxConfigStoreAPIYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxConfigStoreAPIYARPCClientResult defines the output
// of NewFxConfigStoreAPIYARPCClient. It provides a
// ConfigStoreAPIYARPCClient to an Fx application.
type FxConfigStoreAPIYARPCClientResult struct {
	fx.Out

	Client ConfigStoreAPIYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxConfigStoreAPIYARPCClient provides a ConfigStoreAPIYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    apiv1.NewFxConfigStoreAPIYARPCClient("service-name"),
//    ...
//  )
func NewFxConfigStoreAPIYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxConfigStoreAPIYARPCClientParams) FxConfigStoreAPIYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxConfigStoreAPIYARPCClientResult{
			Client: newConfigStoreAPIYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxConfigStoreAPIYARPCProceduresParams defines the input
// for NewFxConfigStoreAPIYARPCProcedures. It provides the
// paramaters to get ConfigStoreAPIYARPCServer procedures in an
// Fx application.
type FxConfigStoreAPIYARPCProceduresParams struct {
	fx.In

	Server      ConfigStoreAPIYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxConfigStoreAPIYARPCProceduresResult defines the output
// of NewFxConfigStoreAPIYARPCProcedures. It provides
// ConfigStoreAPIYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxConfigStoreAPIYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxConfigStoreAPIYARPCProcedures provides ConfigStoreAPIYARPCServer procedures to an Fx application.
// It expects a ConfigStoreAPIYARPCServer to be present in the container.
//
//  fx.Provide(
//    apiv1.NewFxConfigStoreAPIYARPCProcedures(),
//    ...
//  )
func NewFxConfigStoreAPIYARPCProcedures() interface{} {
	return func(params FxConfigStoreAPIYARPCProceduresParams) FxConfigStoreAPIYARPCProceduresResult {
		return FxConfigStoreAPIYARPCProceduresResult{
			Procedures: buildConfigStoreAPIYARPCProcedures(buildConfigStoreAPIYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.cadence.api.v1.ConfigStoreAPI",
				FileDescriptors: yarpcFileDescriptorClosure437205fd559c1aaa,
			},
		}
	}
}

type _ConfigStoreAPIYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_ConfigStoreAPIYARPCCaller) GetDynamicConfig(ctx context.Context, request *GetDynamicConfigRequest, options ...yarpc.CallOption) (*GetDynamicConfigResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetDynamicConfig", request, newConfigStoreAPIServiceGetDynamicConfigYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetDynamicConfigResponse)
	if !ok {
		return nil, protobuf.CastError(emptyConfigStoreAPIServiceGetDynamicConfigYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_ConfigStoreAPIYARPCCaller) UpdateDynamicConfig(ctx context.Context, request *UpdateDynamicConfigRequest, options ...yarpc.CallOption) (*UpdateDynamicConfigResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "UpdateDynamicConfig", request, newConfigStoreAPIServiceUpdateDynamicConfigYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*UpdateDynamicConfigResponse)
	if !ok {
		return nil, protobuf.CastError(emptyConfigStoreAPIServiceUpdateDynamicConfigYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_ConfigStoreAPIYARPCCaller) RestoreDynamicConfig(ctx context.Context, request *RestoreDynamicConfigRequest, options ...yarpc.CallOption) (*RestoreDynamicConfigResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RestoreDynamicConfig", request, newConfigStoreAPIServiceRestoreDynamicConfigYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RestoreDynamicConfigResponse)
	if !ok {
		return nil, protobuf.CastError(emptyConfigStoreAPIServiceRestoreDynamicConfigYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_ConfigStoreAPIYARPCCaller) ListDynamicConfig(ctx context.Context, request *ListDynamicConfigRequest, options ...yarpc.CallOption) (*ListDynamicConfigResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListDynamicConfig", request, newConfigStoreAPIServiceListDynamicConfigYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListDynamicConfigResponse)
	if !ok {
		return nil, protobuf.CastError(emptyConfigStoreAPIServiceListDynamicConfigYARPCResponse, responseMessage)
	}
	return response, err
}

type _ConfigStoreAPIYARPCHandler struct {
	server ConfigStoreAPIYARPCServer
}

func (h *_ConfigStoreAPIYARPCHandler) GetDynamicConfig(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetDynamicConfigRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetDynamicConfigRequest)
		if !ok {
			return nil, protobuf.CastError(emptyConfigStoreAPIServiceGetDynamicConfigYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetDynamicConfig(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_ConfigStoreAPIYARPCHandler) UpdateDynamicConfig(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *UpdateDynamicConfigRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*UpdateDynamicConfigRequest)
		if !ok {
			return nil, protobuf.CastError(emptyConfigStoreAPIServiceUpdateDynamicConfigYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.UpdateDynamicConfig(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_ConfigStoreAPIYARPCHandler) RestoreDynamicConfig(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RestoreDynamicConfigRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RestoreDynamicConfigRequest)
		if !ok {
			return nil, protobuf.CastError(emptyConfigStoreAPIServiceRestoreDynamicConfigYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RestoreDynamicConfig(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_ConfigStoreAPIYARPCHandler) ListDynamicConfig(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListDynamicConfigRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListDynamicConfigRequest)
		if !ok {
			return nil, protobuf.CastError(emptyConfigStoreAPIServiceListDynamicConfigYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListDynamicConfig(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newConfigStoreAPIServiceGetDynamicConfigYARPCRequest() proto.Message {
	return &GetDynamicConfigRequest{}
}

func newConfigStoreAPIServiceGetDynamicConfigYARPCResponse() proto.Message {
	return &GetDynamicConfigResponse{}
}

func newConfigStoreAPIServiceUpdateDynamicConfigYARPCRequest() proto.Message {
	return &UpdateDynamicConfigRequest{}
}

func newConfigStoreAPIServiceUpdateDynamicConfigYARPCResponse() proto.Message {
	return &UpdateDynamicConfigResponse{}
}

func newConfigStoreAPIServiceRestoreDynamicConfigYARPCRequest() proto.Message {
	return &RestoreDynamicConfigRequest{}
}

func newConfigStoreAPIServiceRestoreDynamicConfigYARPCResponse() proto.Message {
	return &RestoreDynamicConfigResponse{}
}

func newConfigStoreAPIServiceListDynamicConfigYARPCRequest() proto.Message {
	return &ListDynamicConfigRequest{}
}

func newConfigStoreAPIServiceListDynamicConfigYARPCResponse() proto.Message {
	return &ListDynamicConfigResponse{}
}

var (
	emptyConfigStoreAPIServiceGetDynamicConfigYARPCRequest      = &GetDynamicConfigRequest{}
	emptyConfigStoreAPIServiceGetDynamicConfigYARPCResponse     = &GetDynamicConfigResponse{}
	emptyConfigStoreAPIServiceUpdateDynamicConfigYARPCRequest   = &UpdateDynamicConfigRequest{}
	emptyConfigStoreAPIServiceUpdateDynamicConfigYARPCResponse  = &UpdateDynamicConfigResponse{}
	emptyConfigStoreAPIServiceRestoreDynamicConfigYARPCRequest  = &RestoreDynamicConfigRequest{}
	emptyConfigStoreAPIServiceRestoreDynamicConfigYARPCResponse = &RestoreDynamicConfigResponse{}
	emptyConfigStoreAPIServiceListDynamicConfigYARPCRequest     = &ListDynamicConfigRequest{}
	emptyConfigStoreAPIServiceListDynamicConfigYARPCResponse    = &ListDynamicConfigResponse{}
)

var yarpcFileDescriptorClosure437205fd559c1aaa = [][]byte{
	// uber/cadence/api/v1/service_config_store.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
		0x10, 0x95, 0x13, 0x48, 0xda, 0x49, 0x8a, 0x60, 0x53, 0x29, 0xc6, 0xe5, 0x23, 0x98, 0x03, 0x39,
		0xc0, 0x9a, 0x94, 0x23, 0x87, 0x2a, 0xe1, 0x4b, 0x48, 0x15, 0x8a, 0x5c, 0xd1, 0x03, 0x07, 0xa2,
		0x8d, 0x33, 0x09, 0x2b, 0x39, 0xb6, 0xf1, 0xae, 0x2d, 0x2a, 0x6e, 0x5c, 0x91, 0xb8, 0xf2, 0x27,
		0xf9, 0x11, 0xc8, 0xeb, 0x2d, 0xa4, 0xcd, 0x06, 0x92, 0xc0, 0x2d, 0x3b, 0x3b, 0x6f, 0xde, 0xcb,
		0xbc, 0x1d, 0x0f, 0xd0, 0x6c, 0x8c, 0xa9, 0x17, 0xb0, 0x09, 0x46, 0x01, 0x7a, 0x2c, 0xe1, 0x5e,
		0xde, 0xf3, 0x04, 0xa6, 0x39, 0x0f, 0x70, 0x14, 0xc4, 0xd1, 0x94, 0xcf, 0x46, 0x42, 0xc6, 0x29,
		0xd2, 0x24, 0x8d, 0x65, 0x4c, 0x5a, 0x45, 0x3e, 0xd5, 0xf9, 0x94, 0x25, 0x9c, 0xe6, 0x3d, 0xf7,
		0xbb, 0x05, 0xed, 0x57, 0x28, 0x9f, 0x9f, 0x45, 0x6c, 0xce, 0x83, 0x67, 0x0a, 0xe5, 0xe3, 0xc7,
		0x0c, 0x85, 0x24, 0x77, 0xa1, 0xa1, 0xcb, 0x44, 0x6c, 0x8e, 0xb6, 0xd5, 0xb1, 0xba, 0xbb, 0x3e,
		0x94, 0xa1, 0x37, 0x6c, 0x8e, 0xa4, 0x0d, 0xf5, 0x19, 0xca, 0x11, 0x0b, 0x43, 0xbb, 0xd2, 0xb1,
		0xba, 0x3b, 0x7e, 0x6d, 0x86, 0xb2, 0x1f, 0x86, 0x64, 0x00, 0xf5, 0x29, 0x0f, 0x25, 0xa6, 0xc2,
		0xae, 0x76, 0xaa, 0xdd, 0xc6, 0x61, 0x97, 0x1a, 0xc8, 0xe9, 0x05, 0xd6, 0x97, 0x0a, 0xe0, 0x9f,
		0x03, 0xdd, 0xaf, 0x16, 0xd8, 0xcb, 0xca, 0x44, 0x12, 0x47, 0x02, 0xc9, 0x31, 0xec, 0x69, 0x69,
		0x39, 0x0b, 0x33, 0x14, 0xb6, 0xa5, 0x68, 0x1e, 0xfc, 0x9d, 0xe6, 0xb4, 0xc8, 0xf7, 0x9b, 0xc1,
		0xef, 0x83, 0x20, 0xf7, 0xa0, 0xa9, 0xca, 0x8c, 0x44, 0x9c, 0xa5, 0x01, 0xaa, 0x3f, 0xb3, 0xeb,
		0x37, 0x54, 0xec, 0x44, 0x85, 0x0a, 0x35, 0xce, 0xdb, 0x64, 0xc2, 0x24, 0x6e, 0xd7, 0xaa, 0x25,
		0xc1, 0x95, 0x7f, 0x10, 0xec, 0xde, 0x86, 0x03, 0xa3, 0x98, 0xb2, 0x3b, 0xee, 0x17, 0x0b, 0x0e,
		0x7c, 0x54, 0xde, 0x6f, 0xa7, 0x76, 0xc1, 0xbf, 0xca, 0xb6, 0xfe, 0xdd, 0x81, 0x5b, 0x66, 0x0d,
		0x5a, 0xa4, 0x03, 0xf6, 0x31, 0x17, 0xc6, 0x97, 0xe7, 0xbe, 0x87, 0x9b, 0x86, 0x3b, 0xed, 0x7d,
		0x1f, 0xea, 0x18, 0xc9, 0x94, 0x6f, 0xe2, 0xfa, 0x8b, 0x48, 0xa6, 0x67, 0xfe, 0x39, 0xce, 0xfd,
		0x66, 0x01, 0x59, 0xbe, 0x27, 0x04, 0xae, 0x2c, 0x34, 0x44, 0xfd, 0x26, 0xf7, 0x61, 0x6f, 0x82,
		0x53, 0x96, 0x85, 0xb2, 0x74, 0x4e, 0x3f, 0x8e, 0xa6, 0x0e, 0x2a, 0x43, 0xc8, 0x11, 0xd4, 0xb4,
		0xad, 0xd5, 0xcd, 0x6c, 0xd5, 0x30, 0x37, 0xba, 0xa4, 0xa7, 0x2c, 0xbb, 0x0f, 0x57, 0x4b, 0xce,
		0x52, 0x50, 0x79, 0xf8, 0x2f, 0xe6, 0x1c, 0x41, 0xcb, 0x70, 0x6f, 0x6c, 0xc0, 0x2f, 0x11, 0x95,
		0x05, 0x11, 0x87, 0x3f, 0xaa, 0x70, 0xad, 0x84, 0x9e, 0x14, 0x16, 0xf7, 0x87, 0xaf, 0x49, 0x0c,
		0xd7, 0x2f, 0xcf, 0x2b, 0x79, 0x68, 0x94, 0xb6, 0xe2, 0x83, 0xe3, 0x3c, 0x5a, 0x33, 0x5b, 0x3f,
		0x84, 0x4f, 0xd0, 0x32, 0x4c, 0x01, 0xf1, 0x8c, 0x55, 0x56, 0x0f, 0xaf, 0xf3, 0x78, 0x7d, 0x80,
		0x66, 0xfe, 0x0c, 0xfb, 0xa6, 0xb7, 0x4d, 0xcc, 0x95, 0xfe, 0x30, 0x8a, 0x4e, 0x6f, 0x03, 0x84,
		0x26, 0x4f, 0xe1, 0xc6, 0xd2, 0x70, 0x10, 0x73, 0xeb, 0x56, 0x0d, 0x98, 0x43, 0xd7, 0x4d, 0x2f,
		0x39, 0x07, 0xa7, 0xd0, 0x0e, 0xe2, 0xb9, 0x09, 0x34, 0xd8, 0xe9, 0x27, 0x7c, 0x58, 0x2c, 0x98,
		0xa1, 0xf5, 0xce, 0x9b, 0x71, 0xf9, 0x21, 0x1b, 0xd3, 0x20, 0x9e, 0x7b, 0x17, 0xb6, 0x13, 0x9d,
		0x61, 0xe4, 0xa9, 0x35, 0xa4, 0x17, 0xd5, 0x53, 0x96, 0xf0, 0xbc, 0x37, 0xae, 0xa9, 0xd8, 0x93,
		0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x75, 0x65, 0x29, 0xcc, 0x06, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) ConfigStoreAPIYARPCClient {
			return NewConfigStoreAPIYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
