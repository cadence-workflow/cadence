// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: uber/cadence/admin/v1/service.proto

package adminv1

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// AdminAPIYARPCClient is the YARPC client-side interface for the AdminAPI service.
type AdminAPIYARPCClient interface {
	DescribeWorkflowExecution(context.Context, *DescribeWorkflowExecutionRequest, ...yarpc.CallOption) (*DescribeWorkflowExecutionResponse, error)
	DescribeHistoryHost(context.Context, *DescribeHistoryHostRequest, ...yarpc.CallOption) (*DescribeHistoryHostResponse, error)
	DescribeShardDistribution(context.Context, *DescribeShardDistributionRequest, ...yarpc.CallOption) (*DescribeShardDistributionResponse, error)
	CloseShard(context.Context, *CloseShardRequest, ...yarpc.CallOption) (*CloseShardResponse, error)
	RemoveTask(context.Context, *RemoveTaskRequest, ...yarpc.CallOption) (*RemoveTaskResponse, error)
	ResetQueue(context.Context, *ResetQueueRequest, ...yarpc.CallOption) (*ResetQueueResponse, error)
	DescribeQueue(context.Context, *DescribeQueueRequest, ...yarpc.CallOption) (*DescribeQueueResponse, error)
	GetWorkflowExecutionRawHistoryV2(context.Context, *GetWorkflowExecutionRawHistoryV2Request, ...yarpc.CallOption) (*GetWorkflowExecutionRawHistoryV2Response, error)
	GetReplicationMessages(context.Context, *GetReplicationMessagesRequest, ...yarpc.CallOption) (*GetReplicationMessagesResponse, error)
	GetDLQReplicationMessages(context.Context, *GetDLQReplicationMessagesRequest, ...yarpc.CallOption) (*GetDLQReplicationMessagesResponse, error)
	GetDomainReplicationMessages(context.Context, *GetDomainReplicationMessagesRequest, ...yarpc.CallOption) (*GetDomainReplicationMessagesResponse, error)
	ReapplyEvents(context.Context, *ReapplyEventsRequest, ...yarpc.CallOption) (*ReapplyEventsResponse, error)
	AddSearchAttribute(context.Context, *AddSearchAttributeRequest, ...yarpc.CallOption) (*AddSearchAttributeResponse, error)
	DescribeCluster(context.Context, *DescribeClusterRequest, ...yarpc.CallOption) (*DescribeClusterResponse, error)
	CountDLQMessages(context.Context, *CountDLQMessagesRequest, ...yarpc.CallOption) (*CountDLQMessagesResponse, error)
	ReadDLQMessages(context.Context, *ReadDLQMessagesRequest, ...yarpc.CallOption) (*ReadDLQMessagesResponse, error)
	PurgeDLQMessages(context.Context, *PurgeDLQMessagesRequest, ...yarpc.CallOption) (*PurgeDLQMessagesResponse, error)
	MergeDLQMessages(context.Context, *MergeDLQMessagesRequest, ...yarpc.CallOption) (*MergeDLQMessagesResponse, error)
	RefreshWorkflowTasks(context.Context, *RefreshWorkflowTasksRequest, ...yarpc.CallOption) (*RefreshWorkflowTasksResponse, error)
	ResendReplicationTasks(context.Context, *ResendReplicationTasksRequest, ...yarpc.CallOption) (*ResendReplicationTasksResponse, error)
	GetCrossClusterTasks(context.Context, *GetCrossClusterTasksRequest, ...yarpc.CallOption) (*GetCrossClusterTasksResponse, error)
	RespondCrossClusterTasksCompleted(context.Context, *RespondCrossClusterTasksCompletedRequest, ...yarpc.CallOption) (*RespondCrossClusterTasksCompletedResponse, error)
	GetDynamicConfig(context.Context, *GetDynamicConfigRequest, ...yarpc.CallOption) (*GetDynamicConfigResponse, error)
	UpdateDynamicConfig(context.Context, *UpdateDynamicConfigRequest, ...yarpc.CallOption) (*UpdateDynamicConfigResponse, error)
	RestoreDynamicConfig(context.Context, *RestoreDynamicConfigRequest, ...yarpc.CallOption) (*RestoreDynamicConfigResponse, error)
	ListDynamicConfig(context.Context, *ListDynamicConfigRequest, ...yarpc.CallOption) (*ListDynamicConfigResponse, error)
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest, ...yarpc.CallOption) (*DeleteWorkflowResponse, error)
	MaintainCorruptWorkflow(context.Context, *MaintainCorruptWorkflowRequest, ...yarpc.CallOption) (*MaintainCorruptWorkflowResponse, error)
}

func newAdminAPIYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) AdminAPIYARPCClient {
	return &_AdminAPIYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.cadence.admin.v1.AdminAPI",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewAdminAPIYARPCClient builds a new YARPC client for the AdminAPI service.
func NewAdminAPIYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) AdminAPIYARPCClient {
	return newAdminAPIYARPCClient(clientConfig, nil, options...)
}

// AdminAPIYARPCServer is the YARPC server-side interface for the AdminAPI service.
type AdminAPIYARPCServer interface {
	DescribeWorkflowExecution(context.Context, *DescribeWorkflowExecutionRequest) (*DescribeWorkflowExecutionResponse, error)
	DescribeHistoryHost(context.Context, *DescribeHistoryHostRequest) (*DescribeHistoryHostResponse, error)
	DescribeShardDistribution(context.Context, *DescribeShardDistributionRequest) (*DescribeShardDistributionResponse, error)
	CloseShard(context.Context, *CloseShardRequest) (*CloseShardResponse, error)
	RemoveTask(context.Context, *RemoveTaskRequest) (*RemoveTaskResponse, error)
	ResetQueue(context.Context, *ResetQueueRequest) (*ResetQueueResponse, error)
	DescribeQueue(context.Context, *DescribeQueueRequest) (*DescribeQueueResponse, error)
	GetWorkflowExecutionRawHistoryV2(context.Context, *GetWorkflowExecutionRawHistoryV2Request) (*GetWorkflowExecutionRawHistoryV2Response, error)
	GetReplicationMessages(context.Context, *GetReplicationMessagesRequest) (*GetReplicationMessagesResponse, error)
	GetDLQReplicationMessages(context.Context, *GetDLQReplicationMessagesRequest) (*GetDLQReplicationMessagesResponse, error)
	GetDomainReplicationMessages(context.Context, *GetDomainReplicationMessagesRequest) (*GetDomainReplicationMessagesResponse, error)
	ReapplyEvents(context.Context, *ReapplyEventsRequest) (*ReapplyEventsResponse, error)
	AddSearchAttribute(context.Context, *AddSearchAttributeRequest) (*AddSearchAttributeResponse, error)
	DescribeCluster(context.Context, *DescribeClusterRequest) (*DescribeClusterResponse, error)
	CountDLQMessages(context.Context, *CountDLQMessagesRequest) (*CountDLQMessagesResponse, error)
	ReadDLQMessages(context.Context, *ReadDLQMessagesRequest) (*ReadDLQMessagesResponse, error)
	PurgeDLQMessages(context.Context, *PurgeDLQMessagesRequest) (*PurgeDLQMessagesResponse, error)
	MergeDLQMessages(context.Context, *MergeDLQMessagesRequest) (*MergeDLQMessagesResponse, error)
	RefreshWorkflowTasks(context.Context, *RefreshWorkflowTasksRequest) (*RefreshWorkflowTasksResponse, error)
	ResendReplicationTasks(context.Context, *ResendReplicationTasksRequest) (*ResendReplicationTasksResponse, error)
	GetCrossClusterTasks(context.Context, *GetCrossClusterTasksRequest) (*GetCrossClusterTasksResponse, error)
	RespondCrossClusterTasksCompleted(context.Context, *RespondCrossClusterTasksCompletedRequest) (*RespondCrossClusterTasksCompletedResponse, error)
	GetDynamicConfig(context.Context, *GetDynamicConfigRequest) (*GetDynamicConfigResponse, error)
	UpdateDynamicConfig(context.Context, *UpdateDynamicConfigRequest) (*UpdateDynamicConfigResponse, error)
	RestoreDynamicConfig(context.Context, *RestoreDynamicConfigRequest) (*RestoreDynamicConfigResponse, error)
	ListDynamicConfig(context.Context, *ListDynamicConfigRequest) (*ListDynamicConfigResponse, error)
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error)
	MaintainCorruptWorkflow(context.Context, *MaintainCorruptWorkflowRequest) (*MaintainCorruptWorkflowResponse, error)
}

type buildAdminAPIYARPCProceduresParams struct {
	Server      AdminAPIYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildAdminAPIYARPCProcedures(params buildAdminAPIYARPCProceduresParams) []transport.Procedure {
	handler := &_AdminAPIYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.cadence.admin.v1.AdminAPI",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "DescribeWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeWorkflowExecution,
							NewRequest:  newAdminAPIServiceDescribeWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeHistoryHost",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeHistoryHost,
							NewRequest:  newAdminAPIServiceDescribeHistoryHostYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeShardDistribution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeShardDistribution,
							NewRequest:  newAdminAPIServiceDescribeShardDistributionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "CloseShard",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.CloseShard,
							NewRequest:  newAdminAPIServiceCloseShardYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RemoveTask",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RemoveTask,
							NewRequest:  newAdminAPIServiceRemoveTaskYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResetQueue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResetQueue,
							NewRequest:  newAdminAPIServiceResetQueueYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeQueue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeQueue,
							NewRequest:  newAdminAPIServiceDescribeQueueYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetWorkflowExecutionRawHistoryV2",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetWorkflowExecutionRawHistoryV2,
							NewRequest:  newAdminAPIServiceGetWorkflowExecutionRawHistoryV2YARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetReplicationMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetReplicationMessages,
							NewRequest:  newAdminAPIServiceGetReplicationMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetDLQReplicationMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetDLQReplicationMessages,
							NewRequest:  newAdminAPIServiceGetDLQReplicationMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetDomainReplicationMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetDomainReplicationMessages,
							NewRequest:  newAdminAPIServiceGetDomainReplicationMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ReapplyEvents",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ReapplyEvents,
							NewRequest:  newAdminAPIServiceReapplyEventsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "AddSearchAttribute",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.AddSearchAttribute,
							NewRequest:  newAdminAPIServiceAddSearchAttributeYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeCluster",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeCluster,
							NewRequest:  newAdminAPIServiceDescribeClusterYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "CountDLQMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.CountDLQMessages,
							NewRequest:  newAdminAPIServiceCountDLQMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ReadDLQMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ReadDLQMessages,
							NewRequest:  newAdminAPIServiceReadDLQMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "PurgeDLQMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.PurgeDLQMessages,
							NewRequest:  newAdminAPIServicePurgeDLQMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "MergeDLQMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.MergeDLQMessages,
							NewRequest:  newAdminAPIServiceMergeDLQMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RefreshWorkflowTasks",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RefreshWorkflowTasks,
							NewRequest:  newAdminAPIServiceRefreshWorkflowTasksYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResendReplicationTasks",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResendReplicationTasks,
							NewRequest:  newAdminAPIServiceResendReplicationTasksYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetCrossClusterTasks",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetCrossClusterTasks,
							NewRequest:  newAdminAPIServiceGetCrossClusterTasksYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondCrossClusterTasksCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondCrossClusterTasksCompleted,
							NewRequest:  newAdminAPIServiceRespondCrossClusterTasksCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetDynamicConfig",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetDynamicConfig,
							NewRequest:  newAdminAPIServiceGetDynamicConfigYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "UpdateDynamicConfig",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.UpdateDynamicConfig,
							NewRequest:  newAdminAPIServiceUpdateDynamicConfigYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RestoreDynamicConfig",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RestoreDynamicConfig,
							NewRequest:  newAdminAPIServiceRestoreDynamicConfigYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListDynamicConfig",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListDynamicConfig,
							NewRequest:  newAdminAPIServiceListDynamicConfigYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DeleteWorkflow",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DeleteWorkflow,
							NewRequest:  newAdminAPIServiceDeleteWorkflowYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "MaintainCorruptWorkflow",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.MaintainCorruptWorkflow,
							NewRequest:  newAdminAPIServiceMaintainCorruptWorkflowYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// BuildAdminAPIYARPCProcedures prepares an implementation of the AdminAPI service for YARPC registration.
func BuildAdminAPIYARPCProcedures(server AdminAPIYARPCServer) []transport.Procedure {
	return buildAdminAPIYARPCProcedures(buildAdminAPIYARPCProceduresParams{Server: server})
}

// FxAdminAPIYARPCClientParams defines the input
// for NewFxAdminAPIYARPCClient. It provides the
// paramaters to get a AdminAPIYARPCClient in an
// Fx application.
type FxAdminAPIYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxAdminAPIYARPCClientResult defines the output
// of NewFxAdminAPIYARPCClient. It provides a
// AdminAPIYARPCClient to an Fx application.
type FxAdminAPIYARPCClientResult struct {
	fx.Out

	Client AdminAPIYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxAdminAPIYARPCClient provides a AdminAPIYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    adminv1.NewFxAdminAPIYARPCClient("service-name"),
//    ...
//  )
func NewFxAdminAPIYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxAdminAPIYARPCClientParams) FxAdminAPIYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxAdminAPIYARPCClientResult{
			Client: newAdminAPIYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxAdminAPIYARPCProceduresParams defines the input
// for NewFxAdminAPIYARPCProcedures. It provides the
// paramaters to get AdminAPIYARPCServer procedures in an
// Fx application.
type FxAdminAPIYARPCProceduresParams struct {
	fx.In

	Server      AdminAPIYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxAdminAPIYARPCProceduresResult defines the output
// of NewFxAdminAPIYARPCProcedures. It provides
// AdminAPIYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxAdminAPIYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxAdminAPIYARPCProcedures provides AdminAPIYARPCServer procedures to an Fx application.
// It expects a AdminAPIYARPCServer to be present in the container.
//
//  fx.Provide(
//    adminv1.NewFxAdminAPIYARPCProcedures(),
//    ...
//  )
func NewFxAdminAPIYARPCProcedures() interface{} {
	return func(params FxAdminAPIYARPCProceduresParams) FxAdminAPIYARPCProceduresResult {
		return FxAdminAPIYARPCProceduresResult{
			Procedures: buildAdminAPIYARPCProcedures(buildAdminAPIYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.cadence.admin.v1.AdminAPI",
				FileDescriptors: yarpcFileDescriptorClosurec6fc96d64a8b67fd,
			},
		}
	}
}

type _AdminAPIYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_AdminAPIYARPCCaller) DescribeWorkflowExecution(ctx context.Context, request *DescribeWorkflowExecutionRequest, options ...yarpc.CallOption) (*DescribeWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeWorkflowExecution", request, newAdminAPIServiceDescribeWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceDescribeWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) DescribeHistoryHost(ctx context.Context, request *DescribeHistoryHostRequest, options ...yarpc.CallOption) (*DescribeHistoryHostResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeHistoryHost", request, newAdminAPIServiceDescribeHistoryHostYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeHistoryHostResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceDescribeHistoryHostYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) DescribeShardDistribution(ctx context.Context, request *DescribeShardDistributionRequest, options ...yarpc.CallOption) (*DescribeShardDistributionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeShardDistribution", request, newAdminAPIServiceDescribeShardDistributionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeShardDistributionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceDescribeShardDistributionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) CloseShard(ctx context.Context, request *CloseShardRequest, options ...yarpc.CallOption) (*CloseShardResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "CloseShard", request, newAdminAPIServiceCloseShardYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*CloseShardResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceCloseShardYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) RemoveTask(ctx context.Context, request *RemoveTaskRequest, options ...yarpc.CallOption) (*RemoveTaskResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RemoveTask", request, newAdminAPIServiceRemoveTaskYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RemoveTaskResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceRemoveTaskYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) ResetQueue(ctx context.Context, request *ResetQueueRequest, options ...yarpc.CallOption) (*ResetQueueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResetQueue", request, newAdminAPIServiceResetQueueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResetQueueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceResetQueueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) DescribeQueue(ctx context.Context, request *DescribeQueueRequest, options ...yarpc.CallOption) (*DescribeQueueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeQueue", request, newAdminAPIServiceDescribeQueueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeQueueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceDescribeQueueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) GetWorkflowExecutionRawHistoryV2(ctx context.Context, request *GetWorkflowExecutionRawHistoryV2Request, options ...yarpc.CallOption) (*GetWorkflowExecutionRawHistoryV2Response, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetWorkflowExecutionRawHistoryV2", request, newAdminAPIServiceGetWorkflowExecutionRawHistoryV2YARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetWorkflowExecutionRawHistoryV2Response)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceGetWorkflowExecutionRawHistoryV2YARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) GetReplicationMessages(ctx context.Context, request *GetReplicationMessagesRequest, options ...yarpc.CallOption) (*GetReplicationMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetReplicationMessages", request, newAdminAPIServiceGetReplicationMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetReplicationMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceGetReplicationMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) GetDLQReplicationMessages(ctx context.Context, request *GetDLQReplicationMessagesRequest, options ...yarpc.CallOption) (*GetDLQReplicationMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetDLQReplicationMessages", request, newAdminAPIServiceGetDLQReplicationMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetDLQReplicationMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceGetDLQReplicationMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) GetDomainReplicationMessages(ctx context.Context, request *GetDomainReplicationMessagesRequest, options ...yarpc.CallOption) (*GetDomainReplicationMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetDomainReplicationMessages", request, newAdminAPIServiceGetDomainReplicationMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetDomainReplicationMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceGetDomainReplicationMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) ReapplyEvents(ctx context.Context, request *ReapplyEventsRequest, options ...yarpc.CallOption) (*ReapplyEventsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ReapplyEvents", request, newAdminAPIServiceReapplyEventsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ReapplyEventsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceReapplyEventsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) AddSearchAttribute(ctx context.Context, request *AddSearchAttributeRequest, options ...yarpc.CallOption) (*AddSearchAttributeResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "AddSearchAttribute", request, newAdminAPIServiceAddSearchAttributeYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*AddSearchAttributeResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceAddSearchAttributeYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) DescribeCluster(ctx context.Context, request *DescribeClusterRequest, options ...yarpc.CallOption) (*DescribeClusterResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeCluster", request, newAdminAPIServiceDescribeClusterYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeClusterResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceDescribeClusterYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) CountDLQMessages(ctx context.Context, request *CountDLQMessagesRequest, options ...yarpc.CallOption) (*CountDLQMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "CountDLQMessages", request, newAdminAPIServiceCountDLQMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*CountDLQMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceCountDLQMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) ReadDLQMessages(ctx context.Context, request *ReadDLQMessagesRequest, options ...yarpc.CallOption) (*ReadDLQMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ReadDLQMessages", request, newAdminAPIServiceReadDLQMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ReadDLQMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceReadDLQMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) PurgeDLQMessages(ctx context.Context, request *PurgeDLQMessagesRequest, options ...yarpc.CallOption) (*PurgeDLQMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "PurgeDLQMessages", request, newAdminAPIServicePurgeDLQMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*PurgeDLQMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServicePurgeDLQMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) MergeDLQMessages(ctx context.Context, request *MergeDLQMessagesRequest, options ...yarpc.CallOption) (*MergeDLQMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "MergeDLQMessages", request, newAdminAPIServiceMergeDLQMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*MergeDLQMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceMergeDLQMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) RefreshWorkflowTasks(ctx context.Context, request *RefreshWorkflowTasksRequest, options ...yarpc.CallOption) (*RefreshWorkflowTasksResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RefreshWorkflowTasks", request, newAdminAPIServiceRefreshWorkflowTasksYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RefreshWorkflowTasksResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceRefreshWorkflowTasksYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) ResendReplicationTasks(ctx context.Context, request *ResendReplicationTasksRequest, options ...yarpc.CallOption) (*ResendReplicationTasksResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResendReplicationTasks", request, newAdminAPIServiceResendReplicationTasksYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResendReplicationTasksResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceResendReplicationTasksYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) GetCrossClusterTasks(ctx context.Context, request *GetCrossClusterTasksRequest, options ...yarpc.CallOption) (*GetCrossClusterTasksResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetCrossClusterTasks", request, newAdminAPIServiceGetCrossClusterTasksYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetCrossClusterTasksResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceGetCrossClusterTasksYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) RespondCrossClusterTasksCompleted(ctx context.Context, request *RespondCrossClusterTasksCompletedRequest, options ...yarpc.CallOption) (*RespondCrossClusterTasksCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondCrossClusterTasksCompleted", request, newAdminAPIServiceRespondCrossClusterTasksCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondCrossClusterTasksCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceRespondCrossClusterTasksCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) GetDynamicConfig(ctx context.Context, request *GetDynamicConfigRequest, options ...yarpc.CallOption) (*GetDynamicConfigResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetDynamicConfig", request, newAdminAPIServiceGetDynamicConfigYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetDynamicConfigResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceGetDynamicConfigYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) UpdateDynamicConfig(ctx context.Context, request *UpdateDynamicConfigRequest, options ...yarpc.CallOption) (*UpdateDynamicConfigResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "UpdateDynamicConfig", request, newAdminAPIServiceUpdateDynamicConfigYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*UpdateDynamicConfigResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceUpdateDynamicConfigYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) RestoreDynamicConfig(ctx context.Context, request *RestoreDynamicConfigRequest, options ...yarpc.CallOption) (*RestoreDynamicConfigResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RestoreDynamicConfig", request, newAdminAPIServiceRestoreDynamicConfigYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RestoreDynamicConfigResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceRestoreDynamicConfigYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) ListDynamicConfig(ctx context.Context, request *ListDynamicConfigRequest, options ...yarpc.CallOption) (*ListDynamicConfigResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListDynamicConfig", request, newAdminAPIServiceListDynamicConfigYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListDynamicConfigResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceListDynamicConfigYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) DeleteWorkflow(ctx context.Context, request *DeleteWorkflowRequest, options ...yarpc.CallOption) (*DeleteWorkflowResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DeleteWorkflow", request, newAdminAPIServiceDeleteWorkflowYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DeleteWorkflowResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceDeleteWorkflowYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AdminAPIYARPCCaller) MaintainCorruptWorkflow(ctx context.Context, request *MaintainCorruptWorkflowRequest, options ...yarpc.CallOption) (*MaintainCorruptWorkflowResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "MaintainCorruptWorkflow", request, newAdminAPIServiceMaintainCorruptWorkflowYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*MaintainCorruptWorkflowResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAdminAPIServiceMaintainCorruptWorkflowYARPCResponse, responseMessage)
	}
	return response, err
}

type _AdminAPIYARPCHandler struct {
	server AdminAPIYARPCServer
}

func (h *_AdminAPIYARPCHandler) DescribeWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceDescribeWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) DescribeHistoryHost(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeHistoryHostRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeHistoryHostRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceDescribeHistoryHostYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeHistoryHost(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) DescribeShardDistribution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeShardDistributionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeShardDistributionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceDescribeShardDistributionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeShardDistribution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) CloseShard(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *CloseShardRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*CloseShardRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceCloseShardYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.CloseShard(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) RemoveTask(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RemoveTaskRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RemoveTaskRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceRemoveTaskYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RemoveTask(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) ResetQueue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResetQueueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResetQueueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceResetQueueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResetQueue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) DescribeQueue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeQueueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeQueueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceDescribeQueueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeQueue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) GetWorkflowExecutionRawHistoryV2(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetWorkflowExecutionRawHistoryV2Request
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetWorkflowExecutionRawHistoryV2Request)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceGetWorkflowExecutionRawHistoryV2YARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetWorkflowExecutionRawHistoryV2(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) GetReplicationMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetReplicationMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetReplicationMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceGetReplicationMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetReplicationMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) GetDLQReplicationMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetDLQReplicationMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetDLQReplicationMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceGetDLQReplicationMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetDLQReplicationMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) GetDomainReplicationMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetDomainReplicationMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetDomainReplicationMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceGetDomainReplicationMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetDomainReplicationMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) ReapplyEvents(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ReapplyEventsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ReapplyEventsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceReapplyEventsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ReapplyEvents(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) AddSearchAttribute(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *AddSearchAttributeRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*AddSearchAttributeRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceAddSearchAttributeYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.AddSearchAttribute(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) DescribeCluster(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeClusterRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeClusterRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceDescribeClusterYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeCluster(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) CountDLQMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *CountDLQMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*CountDLQMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceCountDLQMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.CountDLQMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) ReadDLQMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ReadDLQMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ReadDLQMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceReadDLQMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ReadDLQMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) PurgeDLQMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *PurgeDLQMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*PurgeDLQMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServicePurgeDLQMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.PurgeDLQMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) MergeDLQMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *MergeDLQMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*MergeDLQMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceMergeDLQMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.MergeDLQMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) RefreshWorkflowTasks(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RefreshWorkflowTasksRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RefreshWorkflowTasksRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceRefreshWorkflowTasksYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RefreshWorkflowTasks(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) ResendReplicationTasks(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResendReplicationTasksRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResendReplicationTasksRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceResendReplicationTasksYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResendReplicationTasks(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) GetCrossClusterTasks(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetCrossClusterTasksRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetCrossClusterTasksRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceGetCrossClusterTasksYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetCrossClusterTasks(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) RespondCrossClusterTasksCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondCrossClusterTasksCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondCrossClusterTasksCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceRespondCrossClusterTasksCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondCrossClusterTasksCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) GetDynamicConfig(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetDynamicConfigRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetDynamicConfigRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceGetDynamicConfigYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetDynamicConfig(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) UpdateDynamicConfig(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *UpdateDynamicConfigRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*UpdateDynamicConfigRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceUpdateDynamicConfigYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.UpdateDynamicConfig(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) RestoreDynamicConfig(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RestoreDynamicConfigRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RestoreDynamicConfigRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceRestoreDynamicConfigYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RestoreDynamicConfig(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) ListDynamicConfig(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListDynamicConfigRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListDynamicConfigRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceListDynamicConfigYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListDynamicConfig(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) DeleteWorkflow(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DeleteWorkflowRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DeleteWorkflowRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceDeleteWorkflowYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DeleteWorkflow(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AdminAPIYARPCHandler) MaintainCorruptWorkflow(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *MaintainCorruptWorkflowRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*MaintainCorruptWorkflowRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAdminAPIServiceMaintainCorruptWorkflowYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.MaintainCorruptWorkflow(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newAdminAPIServiceDescribeWorkflowExecutionYARPCRequest() proto.Message {
	return &DescribeWorkflowExecutionRequest{}
}

func newAdminAPIServiceDescribeWorkflowExecutionYARPCResponse() proto.Message {
	return &DescribeWorkflowExecutionResponse{}
}

func newAdminAPIServiceDescribeHistoryHostYARPCRequest() proto.Message {
	return &DescribeHistoryHostRequest{}
}

func newAdminAPIServiceDescribeHistoryHostYARPCResponse() proto.Message {
	return &DescribeHistoryHostResponse{}
}

func newAdminAPIServiceDescribeShardDistributionYARPCRequest() proto.Message {
	return &DescribeShardDistributionRequest{}
}

func newAdminAPIServiceDescribeShardDistributionYARPCResponse() proto.Message {
	return &DescribeShardDistributionResponse{}
}

func newAdminAPIServiceCloseShardYARPCRequest() proto.Message {
	return &CloseShardRequest{}
}

func newAdminAPIServiceCloseShardYARPCResponse() proto.Message {
	return &CloseShardResponse{}
}

func newAdminAPIServiceRemoveTaskYARPCRequest() proto.Message {
	return &RemoveTaskRequest{}
}

func newAdminAPIServiceRemoveTaskYARPCResponse() proto.Message {
	return &RemoveTaskResponse{}
}

func newAdminAPIServiceResetQueueYARPCRequest() proto.Message {
	return &ResetQueueRequest{}
}

func newAdminAPIServiceResetQueueYARPCResponse() proto.Message {
	return &ResetQueueResponse{}
}

func newAdminAPIServiceDescribeQueueYARPCRequest() proto.Message {
	return &DescribeQueueRequest{}
}

func newAdminAPIServiceDescribeQueueYARPCResponse() proto.Message {
	return &DescribeQueueResponse{}
}

func newAdminAPIServiceGetWorkflowExecutionRawHistoryV2YARPCRequest() proto.Message {
	return &GetWorkflowExecutionRawHistoryV2Request{}
}

func newAdminAPIServiceGetWorkflowExecutionRawHistoryV2YARPCResponse() proto.Message {
	return &GetWorkflowExecutionRawHistoryV2Response{}
}

func newAdminAPIServiceGetReplicationMessagesYARPCRequest() proto.Message {
	return &GetReplicationMessagesRequest{}
}

func newAdminAPIServiceGetReplicationMessagesYARPCResponse() proto.Message {
	return &GetReplicationMessagesResponse{}
}

func newAdminAPIServiceGetDLQReplicationMessagesYARPCRequest() proto.Message {
	return &GetDLQReplicationMessagesRequest{}
}

func newAdminAPIServiceGetDLQReplicationMessagesYARPCResponse() proto.Message {
	return &GetDLQReplicationMessagesResponse{}
}

func newAdminAPIServiceGetDomainReplicationMessagesYARPCRequest() proto.Message {
	return &GetDomainReplicationMessagesRequest{}
}

func newAdminAPIServiceGetDomainReplicationMessagesYARPCResponse() proto.Message {
	return &GetDomainReplicationMessagesResponse{}
}

func newAdminAPIServiceReapplyEventsYARPCRequest() proto.Message {
	return &ReapplyEventsRequest{}
}

func newAdminAPIServiceReapplyEventsYARPCResponse() proto.Message {
	return &ReapplyEventsResponse{}
}

func newAdminAPIServiceAddSearchAttributeYARPCRequest() proto.Message {
	return &AddSearchAttributeRequest{}
}

func newAdminAPIServiceAddSearchAttributeYARPCResponse() proto.Message {
	return &AddSearchAttributeResponse{}
}

func newAdminAPIServiceDescribeClusterYARPCRequest() proto.Message {
	return &DescribeClusterRequest{}
}

func newAdminAPIServiceDescribeClusterYARPCResponse() proto.Message {
	return &DescribeClusterResponse{}
}

func newAdminAPIServiceCountDLQMessagesYARPCRequest() proto.Message {
	return &CountDLQMessagesRequest{}
}

func newAdminAPIServiceCountDLQMessagesYARPCResponse() proto.Message {
	return &CountDLQMessagesResponse{}
}

func newAdminAPIServiceReadDLQMessagesYARPCRequest() proto.Message {
	return &ReadDLQMessagesRequest{}
}

func newAdminAPIServiceReadDLQMessagesYARPCResponse() proto.Message {
	return &ReadDLQMessagesResponse{}
}

func newAdminAPIServicePurgeDLQMessagesYARPCRequest() proto.Message {
	return &PurgeDLQMessagesRequest{}
}

func newAdminAPIServicePurgeDLQMessagesYARPCResponse() proto.Message {
	return &PurgeDLQMessagesResponse{}
}

func newAdminAPIServiceMergeDLQMessagesYARPCRequest() proto.Message {
	return &MergeDLQMessagesRequest{}
}

func newAdminAPIServiceMergeDLQMessagesYARPCResponse() proto.Message {
	return &MergeDLQMessagesResponse{}
}

func newAdminAPIServiceRefreshWorkflowTasksYARPCRequest() proto.Message {
	return &RefreshWorkflowTasksRequest{}
}

func newAdminAPIServiceRefreshWorkflowTasksYARPCResponse() proto.Message {
	return &RefreshWorkflowTasksResponse{}
}

func newAdminAPIServiceResendReplicationTasksYARPCRequest() proto.Message {
	return &ResendReplicationTasksRequest{}
}

func newAdminAPIServiceResendReplicationTasksYARPCResponse() proto.Message {
	return &ResendReplicationTasksResponse{}
}

func newAdminAPIServiceGetCrossClusterTasksYARPCRequest() proto.Message {
	return &GetCrossClusterTasksRequest{}
}

func newAdminAPIServiceGetCrossClusterTasksYARPCResponse() proto.Message {
	return &GetCrossClusterTasksResponse{}
}

func newAdminAPIServiceRespondCrossClusterTasksCompletedYARPCRequest() proto.Message {
	return &RespondCrossClusterTasksCompletedRequest{}
}

func newAdminAPIServiceRespondCrossClusterTasksCompletedYARPCResponse() proto.Message {
	return &RespondCrossClusterTasksCompletedResponse{}
}

func newAdminAPIServiceGetDynamicConfigYARPCRequest() proto.Message {
	return &GetDynamicConfigRequest{}
}

func newAdminAPIServiceGetDynamicConfigYARPCResponse() proto.Message {
	return &GetDynamicConfigResponse{}
}

func newAdminAPIServiceUpdateDynamicConfigYARPCRequest() proto.Message {
	return &UpdateDynamicConfigRequest{}
}

func newAdminAPIServiceUpdateDynamicConfigYARPCResponse() proto.Message {
	return &UpdateDynamicConfigResponse{}
}

func newAdminAPIServiceRestoreDynamicConfigYARPCRequest() proto.Message {
	return &RestoreDynamicConfigRequest{}
}

func newAdminAPIServiceRestoreDynamicConfigYARPCResponse() proto.Message {
	return &RestoreDynamicConfigResponse{}
}

func newAdminAPIServiceListDynamicConfigYARPCRequest() proto.Message {
	return &ListDynamicConfigRequest{}
}

func newAdminAPIServiceListDynamicConfigYARPCResponse() proto.Message {
	return &ListDynamicConfigResponse{}
}

func newAdminAPIServiceDeleteWorkflowYARPCRequest() proto.Message {
	return &DeleteWorkflowRequest{}
}

func newAdminAPIServiceDeleteWorkflowYARPCResponse() proto.Message {
	return &DeleteWorkflowResponse{}
}

func newAdminAPIServiceMaintainCorruptWorkflowYARPCRequest() proto.Message {
	return &MaintainCorruptWorkflowRequest{}
}

func newAdminAPIServiceMaintainCorruptWorkflowYARPCResponse() proto.Message {
	return &MaintainCorruptWorkflowResponse{}
}

var (
	emptyAdminAPIServiceDescribeWorkflowExecutionYARPCRequest          = &DescribeWorkflowExecutionRequest{}
	emptyAdminAPIServiceDescribeWorkflowExecutionYARPCResponse         = &DescribeWorkflowExecutionResponse{}
	emptyAdminAPIServiceDescribeHistoryHostYARPCRequest                = &DescribeHistoryHostRequest{}
	emptyAdminAPIServiceDescribeHistoryHostYARPCResponse               = &DescribeHistoryHostResponse{}
	emptyAdminAPIServiceDescribeShardDistributionYARPCRequest          = &DescribeShardDistributionRequest{}
	emptyAdminAPIServiceDescribeShardDistributionYARPCResponse         = &DescribeShardDistributionResponse{}
	emptyAdminAPIServiceCloseShardYARPCRequest                         = &CloseShardRequest{}
	emptyAdminAPIServiceCloseShardYARPCResponse                        = &CloseShardResponse{}
	emptyAdminAPIServiceRemoveTaskYARPCRequest                         = &RemoveTaskRequest{}
	emptyAdminAPIServiceRemoveTaskYARPCResponse                        = &RemoveTaskResponse{}
	emptyAdminAPIServiceResetQueueYARPCRequest                         = &ResetQueueRequest{}
	emptyAdminAPIServiceResetQueueYARPCResponse                        = &ResetQueueResponse{}
	emptyAdminAPIServiceDescribeQueueYARPCRequest                      = &DescribeQueueRequest{}
	emptyAdminAPIServiceDescribeQueueYARPCResponse                     = &DescribeQueueResponse{}
	emptyAdminAPIServiceGetWorkflowExecutionRawHistoryV2YARPCRequest   = &GetWorkflowExecutionRawHistoryV2Request{}
	emptyAdminAPIServiceGetWorkflowExecutionRawHistoryV2YARPCResponse  = &GetWorkflowExecutionRawHistoryV2Response{}
	emptyAdminAPIServiceGetReplicationMessagesYARPCRequest             = &GetReplicationMessagesRequest{}
	emptyAdminAPIServiceGetReplicationMessagesYARPCResponse            = &GetReplicationMessagesResponse{}
	emptyAdminAPIServiceGetDLQReplicationMessagesYARPCRequest          = &GetDLQReplicationMessagesRequest{}
	emptyAdminAPIServiceGetDLQReplicationMessagesYARPCResponse         = &GetDLQReplicationMessagesResponse{}
	emptyAdminAPIServiceGetDomainReplicationMessagesYARPCRequest       = &GetDomainReplicationMessagesRequest{}
	emptyAdminAPIServiceGetDomainReplicationMessagesYARPCResponse      = &GetDomainReplicationMessagesResponse{}
	emptyAdminAPIServiceReapplyEventsYARPCRequest                      = &ReapplyEventsRequest{}
	emptyAdminAPIServiceReapplyEventsYARPCResponse                     = &ReapplyEventsResponse{}
	emptyAdminAPIServiceAddSearchAttributeYARPCRequest                 = &AddSearchAttributeRequest{}
	emptyAdminAPIServiceAddSearchAttributeYARPCResponse                = &AddSearchAttributeResponse{}
	emptyAdminAPIServiceDescribeClusterYARPCRequest                    = &DescribeClusterRequest{}
	emptyAdminAPIServiceDescribeClusterYARPCResponse                   = &DescribeClusterResponse{}
	emptyAdminAPIServiceCountDLQMessagesYARPCRequest                   = &CountDLQMessagesRequest{}
	emptyAdminAPIServiceCountDLQMessagesYARPCResponse                  = &CountDLQMessagesResponse{}
	emptyAdminAPIServiceReadDLQMessagesYARPCRequest                    = &ReadDLQMessagesRequest{}
	emptyAdminAPIServiceReadDLQMessagesYARPCResponse                   = &ReadDLQMessagesResponse{}
	emptyAdminAPIServicePurgeDLQMessagesYARPCRequest                   = &PurgeDLQMessagesRequest{}
	emptyAdminAPIServicePurgeDLQMessagesYARPCResponse                  = &PurgeDLQMessagesResponse{}
	emptyAdminAPIServiceMergeDLQMessagesYARPCRequest                   = &MergeDLQMessagesRequest{}
	emptyAdminAPIServiceMergeDLQMessagesYARPCResponse                  = &MergeDLQMessagesResponse{}
	emptyAdminAPIServiceRefreshWorkflowTasksYARPCRequest               = &RefreshWorkflowTasksRequest{}
	emptyAdminAPIServiceRefreshWorkflowTasksYARPCResponse              = &RefreshWorkflowTasksResponse{}
	emptyAdminAPIServiceResendReplicationTasksYARPCRequest             = &ResendReplicationTasksRequest{}
	emptyAdminAPIServiceResendReplicationTasksYARPCResponse            = &ResendReplicationTasksResponse{}
	emptyAdminAPIServiceGetCrossClusterTasksYARPCRequest               = &GetCrossClusterTasksRequest{}
	emptyAdminAPIServiceGetCrossClusterTasksYARPCResponse              = &GetCrossClusterTasksResponse{}
	emptyAdminAPIServiceRespondCrossClusterTasksCompletedYARPCRequest  = &RespondCrossClusterTasksCompletedRequest{}
	emptyAdminAPIServiceRespondCrossClusterTasksCompletedYARPCResponse = &RespondCrossClusterTasksCompletedResponse{}
	emptyAdminAPIServiceGetDynamicConfigYARPCRequest                   = &GetDynamicConfigRequest{}
	emptyAdminAPIServiceGetDynamicConfigYARPCResponse                  = &GetDynamicConfigResponse{}
	emptyAdminAPIServiceUpdateDynamicConfigYARPCRequest                = &UpdateDynamicConfigRequest{}
	emptyAdminAPIServiceUpdateDynamicConfigYARPCResponse               = &UpdateDynamicConfigResponse{}
	emptyAdminAPIServiceRestoreDynamicConfigYARPCRequest               = &RestoreDynamicConfigRequest{}
	emptyAdminAPIServiceRestoreDynamicConfigYARPCResponse              = &RestoreDynamicConfigResponse{}
	emptyAdminAPIServiceListDynamicConfigYARPCRequest                  = &ListDynamicConfigRequest{}
	emptyAdminAPIServiceListDynamicConfigYARPCResponse                 = &ListDynamicConfigResponse{}
	emptyAdminAPIServiceDeleteWorkflowYARPCRequest                     = &DeleteWorkflowRequest{}
	emptyAdminAPIServiceDeleteWorkflowYARPCResponse                    = &DeleteWorkflowResponse{}
	emptyAdminAPIServiceMaintainCorruptWorkflowYARPCRequest            = &MaintainCorruptWorkflowRequest{}
	emptyAdminAPIServiceMaintainCorruptWorkflowYARPCResponse           = &MaintainCorruptWorkflowResponse{}
)

var yarpcFileDescriptorClosurec6fc96d64a8b67fd = [][]byte{
	// uber/cadence/admin/v1/service.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5b, 0xcd, 0x6f, 0x1b, 0xc7,
		0x15, 0xcf, 0x92, 0x92, 0x2c, 0x3d, 0x5a, 0xb2, 0x35, 0x91, 0x45, 0x6a, 0xe5, 0x38, 0xf2, 0x26,
		0x4e, 0x54, 0xa0, 0xa1, 0x6c, 0x39, 0x71, 0x62, 0x27, 0x6d, 0x21, 0x51, 0x96, 0xac, 0x44, 0x4a,
		0xe4, 0x95, 0xe3, 0x16, 0x41, 0xdb, 0xc5, 0x92, 0x3b, 0xa4, 0x16, 0x26, 0x77, 0x99, 0x9d, 0x21,
		0x65, 0xa5, 0x40, 0x3f, 0x80, 0xb6, 0x29, 0xd2, 0xe6, 0x94, 0xc2, 0x68, 0x81, 0x16, 0x3d, 0x15,
		0xe8, 0xa5, 0x40, 0x03, 0xf4, 0x1f, 0xe8, 0xb5, 0x45, 0x0f, 0xfd, 0x1b, 0x7a, 0x6d, 0x7b, 0x69,
		0x0f, 0x3d, 0x16, 0xf3, 0xb1, 0xe4, 0x72, 0x3f, 0x49, 0xca, 0x85, 0x0d, 0xe4, 0xc6, 0x9d, 0x99,
		0xf7, 0x31, 0xbf, 0x79, 0xf3, 0xde, 0x9b, 0x37, 0x43, 0x78, 0xa1, 0x53, 0xc5, 0xde, 0x5a, 0xcd,
		0xb4, 0xb0, 0x53, 0xc3, 0x6b, 0xa6, 0xd5, 0xb2, 0x9d, 0xb5, 0xee, 0xb5, 0x35, 0x82, 0xbd, 0xae,
		0x5d, 0xc3, 0xe5, 0xb6, 0xe7, 0x52, 0x17, 0x5d, 0x64, 0x9f, 0xd8, 0x2b, 0xb3, 0xb1, 0x65, 0x39,
		0xb6, 0xcc, 0xc7, 0x96, 0xbb, 0xd7, 0xd4, 0xe7, 0x1b, 0xae, 0xdb, 0x68, 0xe2, 0x35, 0x3e, 0xb6,
		0xda, 0xa9, 0xaf, 0x51, 0xbb, 0x85, 0x09, 0x35, 0x5b, 0x6d, 0x41, 0xae, 0x5e, 0x0a, 0x0f, 0x38,
		0xf6, 0xcc, 0x76, 0x1b, 0x7b, 0x44, 0xf6, 0xaf, 0x0c, 0xea, 0xd0, 0xb6, 0x99, 0x06, 0x35, 0xb7,
		0xd5, 0x72, 0x1d, 0x39, 0xe2, 0xc5, 0xb8, 0x11, 0x5d, 0x9b, 0xd8, 0x55, 0xbb, 0x69, 0xd3, 0x13,
		0x39, 0x2a, 0x61, 0x2e, 0xb5, 0x66, 0x87, 0x50, 0xec, 0xa5, 0x0f, 0x3a, 0xb2, 0x09, 0x75, 0x3d,
		0x9f, 0xd3, 0xe5, 0xf8, 0x41, 0x1f, 0x76, 0x70, 0x47, 0x62, 0xa2, 0xbe, 0x1c, 0x3f, 0xc4, 0xc3,
		0xed, 0xa6, 0x5d, 0x33, 0xa9, 0xed, 0xeb, 0xae, 0xfd, 0x42, 0x81, 0x95, 0x2d, 0x4c, 0x6a, 0x9e,
		0x5d, 0xc5, 0x5f, 0x77, 0xbd, 0x07, 0xf5, 0xa6, 0x7b, 0x7c, 0xfb, 0x21, 0xae, 0x75, 0xd8, 0x18,
		0x1d, 0x7f, 0xd8, 0xc1, 0x84, 0xa2, 0x45, 0x98, 0xb2, 0xdc, 0x96, 0x69, 0x3b, 0x25, 0x65, 0x45,
		0x59, 0x9d, 0xd1, 0xe5, 0x17, 0xfa, 0x26, 0xa0, 0x63, 0x49, 0x63, 0x60, 0x9f, 0xa8, 0x94, 0x5b,
		0x51, 0x56, 0x0b, 0xeb, 0xaf, 0x94, 0x63, 0x97, 0xa5, 0x6d, 0x97, 0xbb, 0xd7, 0xca, 0x51, 0x49,
		0xf3, 0xc7, 0xe1, 0x26, 0xed, 0x6f, 0x0a, 0x5c, 0x4e, 0x51, 0x8d, 0xb4, 0x5d, 0x87, 0x60, 0xb4,
		0x04, 0xd3, 0xe4, 0xc8, 0xf4, 0x2c, 0xc3, 0xb6, 0xb8, 0x76, 0x93, 0xfa, 0x19, 0xfe, 0xbd, 0x6b,
		0xa1, 0xcb, 0x70, 0x56, 0x02, 0x67, 0x98, 0x96, 0xe5, 0x71, 0xc5, 0x66, 0xf4, 0x82, 0x6c, 0xdb,
		0xb0, 0x2c, 0x0f, 0x5d, 0x87, 0xc5, 0x56, 0x87, 0x9a, 0xd5, 0x26, 0x36, 0x08, 0x35, 0x29, 0x36,
		0x6c, 0xc7, 0xa8, 0x99, 0xb5, 0x23, 0x5c, 0xca, 0xf3, 0xc1, 0xcf, 0xca, 0xde, 0x43, 0xd6, 0xb9,
		0xeb, 0x54, 0x58, 0x17, 0xba, 0x09, 0x4b, 0x11, 0x22, 0xcb, 0xa4, 0x66, 0xd5, 0x24, 0xb8, 0x34,
		0xc1, 0xe9, 0x16, 0x07, 0xe9, 0xb6, 0x64, 0xaf, 0xf6, 0x57, 0x05, 0x54, 0x7f, 0x4e, 0x77, 0x84,
		0x1e, 0x77, 0x5c, 0x42, 0x7d, 0xa0, 0x5f, 0x80, 0xb3, 0x47, 0x2e, 0xa1, 0x5c, 0x5d, 0x4c, 0x88,
		0x80, 0xfb, 0xce, 0x33, 0x7a, 0x81, 0xb5, 0x6e, 0x88, 0x46, 0xb4, 0x1c, 0x98, 0x31, 0x9b, 0xd2,
		0xe4, 0x9d, 0x67, 0xfa, 0x73, 0xfe, 0x76, 0xec, 0x92, 0xe4, 0xc7, 0x58, 0x92, 0x3b, 0xcf, 0xc4,
		0x2c, 0xca, 0xe6, 0x2c, 0x14, 0x2c, 0xa9, 0xbf, 0x51, 0x3d, 0xd1, 0xbe, 0xd1, 0xb7, 0x9e, 0x43,
		0xa6, 0xc1, 0x96, 0x4d, 0xa8, 0x67, 0x57, 0x07, 0xac, 0x67, 0x19, 0x66, 0xda, 0x66, 0x03, 0x1b,
		0xc4, 0xfe, 0x08, 0xcb, 0x25, 0x9a, 0x66, 0x0d, 0x87, 0xf6, 0x47, 0x18, 0x15, 0xe1, 0x0c, 0xef,
		0xf4, 0xe7, 0xa2, 0x4f, 0xb1, 0xcf, 0x5d, 0x4b, 0xfb, 0x67, 0x60, 0xf5, 0x63, 0x58, 0xcb, 0xd5,
		0x5f, 0x85, 0xf3, 0x4e, 0xa7, 0x55, 0xc5, 0x9e, 0xe1, 0xd6, 0x0d, 0x8e, 0x01, 0x91, 0x22, 0xe6,
		0x44, 0xfb, 0x7b, 0x75, 0x4e, 0x4c, 0x50, 0x0d, 0xa6, 0x64, 0x7f, 0x6e, 0x25, 0xbf, 0x5a, 0x58,
		0x7f, 0xa7, 0x9c, 0xe6, 0x36, 0xca, 0x99, 0xa2, 0xcb, 0x82, 0xef, 0x6d, 0x87, 0x7a, 0x27, 0xba,
		0x64, 0xad, 0xde, 0x84, 0x42, 0xa0, 0x19, 0x9d, 0x87, 0xfc, 0x03, 0x7c, 0x22, 0x15, 0x62, 0x3f,
		0xd1, 0x02, 0x4c, 0x76, 0xcd, 0x66, 0x07, 0x4b, 0x5b, 0x14, 0x1f, 0xb7, 0x72, 0x6f, 0x28, 0xda,
		0x4f, 0x72, 0xb0, 0x1c, 0x6b, 0x19, 0x23, 0xcf, 0x74, 0x19, 0x66, 0x7c, 0xfb, 0x10, 0x93, 0x9d,
		0xd4, 0xa7, 0xa5, 0x79, 0x10, 0x74, 0x00, 0x67, 0xc5, 0xe6, 0x0d, 0x98, 0x79, 0xa2, 0x65, 0xf4,
		0xc0, 0xe0, 0x14, 0xdc, 0xf8, 0x77, 0x9d, 0xba, 0xab, 0x17, 0xac, 0x7e, 0x03, 0xba, 0x01, 0x45,
		0x21, 0xae, 0xe6, 0x3a, 0xd4, 0x73, 0x9b, 0x4d, 0xec, 0xf1, 0x6d, 0xd1, 0x21, 0x72, 0x2f, 0x5c,
		0xe0, 0xdd, 0x95, 0x5e, 0xef, 0x21, 0xef, 0x44, 0x25, 0x38, 0xe3, 0x9b, 0xf9, 0x24, 0x1f, 0xe7,
		0x7f, 0x6a, 0x65, 0x98, 0xaf, 0x34, 0x5d, 0x22, 0xb0, 0xf7, 0xad, 0x28, 0x79, 0x9f, 0x6b, 0x0b,
		0x80, 0x82, 0xe3, 0x05, 0x60, 0xda, 0x7f, 0x14, 0x98, 0xd7, 0x71, 0xcb, 0xed, 0xe2, 0x7b, 0x26,
		0x79, 0x90, 0xcd, 0x06, 0x55, 0x60, 0x86, 0x9a, 0xe4, 0x81, 0x41, 0x4f, 0xda, 0x62, 0x7d, 0xe6,
		0xd6, 0x5f, 0x4a, 0xc7, 0x85, 0x31, 0xbe, 0x77, 0xd2, 0xc6, 0xfa, 0x34, 0x95, 0xbf, 0x98, 0x3d,
		0x73, 0x26, 0xb6, 0xc5, 0xa1, 0xcd, 0xeb, 0x53, 0xec, 0x93, 0x73, 0x3f, 0xd7, 0x0f, 0x09, 0x06,
		0x0b, 0x42, 0x1c, 0x9e, 0xc2, 0xba, 0x5a, 0x16, 0x01, 0xa8, 0xec, 0x07, 0xa0, 0xf2, 0x3d, 0x3f,
		0x42, 0xe9, 0x73, 0x7d, 0x12, 0xd6, 0xc8, 0x3c, 0x9a, 0x8c, 0x17, 0x86, 0x63, 0xb6, 0xb0, 0x04,
		0xae, 0x20, 0xdb, 0xde, 0x35, 0x5b, 0x98, 0x81, 0x11, 0x9c, 0xb5, 0x04, 0xe3, 0x11, 0x07, 0x83,
		0x60, 0x7a, 0x97, 0x05, 0x89, 0x21, 0xc0, 0x08, 0x4b, 0xca, 0x45, 0x24, 0x0d, 0xe2, 0x95, 0x1f,
		0x0f, 0x2f, 0xa1, 0x6e, 0x5f, 0x2f, 0xa9, 0xee, 0x2f, 0x15, 0x58, 0xf0, 0x37, 0xc3, 0xd3, 0xa6,
		0xf1, 0x7b, 0x70, 0x21, 0xa4, 0x9a, 0xdc, 0xa1, 0x37, 0xa0, 0xd8, 0xf6, 0xdc, 0x1a, 0x26, 0xc4,
		0x76, 0x1a, 0x06, 0x8f, 0xc6, 0x22, 0x3e, 0xb0, 0x8d, 0x9a, 0x67, 0x1b, 0xa1, 0xdf, 0xcd, 0x29,
		0x79, 0x70, 0x20, 0xda, 0x8f, 0xf3, 0xf0, 0xf2, 0x0e, 0xa6, 0xd1, 0x10, 0x67, 0x1e, 0x4b, 0x47,
		0x70, 0x7f, 0xfd, 0x89, 0x46, 0x62, 0x74, 0x17, 0x0a, 0x84, 0x9a, 0x1e, 0x35, 0x70, 0x17, 0x3b,
		0x54, 0xfa, 0x8c, 0xab, 0xe9, 0xc8, 0xdd, 0xc7, 0x1e, 0x61, 0x51, 0x44, 0xcc, 0x60, 0x97, 0xe2,
		0x96, 0x0e, 0x9c, 0xc9, 0x6d, 0xc6, 0x03, 0xed, 0xc3, 0x0c, 0x76, 0x2c, 0xc9, 0x70, 0x62, 0x4c,
		0x86, 0xd3, 0xd8, 0xb1, 0x04, 0xbb, 0x81, 0x18, 0x33, 0x19, 0x8a, 0x31, 0x2f, 0xc1, 0x39, 0x07,
		0x3f, 0xa4, 0x06, 0x1f, 0x41, 0xdd, 0x07, 0xd8, 0x29, 0x4d, 0xad, 0x28, 0xab, 0x67, 0xf5, 0x59,
		0xd6, 0x7c, 0x60, 0x36, 0xf0, 0x3d, 0xd6, 0xa8, 0xfd, 0x57, 0x81, 0xd5, 0xec, 0x85, 0x90, 0xab,
		0x1d, 0xc3, 0x54, 0x89, 0x61, 0x8a, 0xf6, 0xe1, 0x9c, 0x9f, 0x84, 0x54, 0x4d, 0x5a, 0x3b, 0xc2,
		0x7e, 0x00, 0x7a, 0x31, 0x6d, 0x59, 0x58, 0xc2, 0xb0, 0xd9, 0x74, 0xab, 0xfa, 0x9c, 0x24, 0xde,
		0x14, 0xb4, 0xe8, 0x7d, 0x38, 0xd7, 0x15, 0x40, 0x18, 0xb2, 0x47, 0x2e, 0xc7, 0x97, 0x47, 0x41,
		0x4f, 0x9f, 0xeb, 0x0e, 0x7c, 0x6b, 0x9f, 0x28, 0xf0, 0xdc, 0x0e, 0xa6, 0x7a, 0x3f, 0x3f, 0xdc,
		0xc7, 0x84, 0x98, 0x0d, 0x4c, 0x7c, 0xcb, 0xdb, 0x86, 0x29, 0x3e, 0x4b, 0x61, 0xcc, 0x85, 0xf5,
		0x72, 0xba, 0xbc, 0x00, 0x27, 0x8e, 0x83, 0x2e, 0xa9, 0x87, 0xd8, 0xa6, 0xda, 0xa7, 0x39, 0xb8,
		0x94, 0xa4, 0x8c, 0x44, 0xbf, 0x0b, 0x73, 0xc2, 0x0f, 0xb4, 0x64, 0x8f, 0xd4, 0xea, 0xbd, 0x74,
		0xad, 0xd2, 0xb9, 0x8a, 0x90, 0xee, 0xb7, 0x8a, 0xc8, 0x3e, 0x4b, 0x82, 0x6d, 0x2a, 0x01, 0x14,
		0x1d, 0x14, 0x13, 0xe7, 0x77, 0x82, 0x71, 0xbe, 0xb0, 0x7e, 0x6d, 0x68, 0xb0, 0x7a, 0x3a, 0x05,
		0x52, 0x03, 0x0a, 0x2b, 0x3b, 0x98, 0x6e, 0xed, 0xdd, 0x4d, 0x59, 0x9e, 0x03, 0x00, 0x11, 0x77,
		0x9c, 0xba, 0xeb, 0x83, 0x31, 0xbc, 0x54, 0xe6, 0xe6, 0x78, 0x64, 0xe7, 0xfe, 0x91, 0xfd, 0x22,
		0xda, 0xf7, 0xe0, 0x72, 0x8a, 0x54, 0xb9, 0x0e, 0x1f, 0xc0, 0x7c, 0xe0, 0x4c, 0x61, 0x30, 0x6a,
		0x5f, 0xfa, 0x2b, 0x23, 0x49, 0xd7, 0xcf, 0x7b, 0x83, 0x0d, 0x84, 0x6d, 0xc7, 0x17, 0x98, 0x06,
		0xdc, 0xc3, 0xa5, 0x4c, 0xfd, 0x3e, 0x2c, 0x35, 0x4d, 0x42, 0x0d, 0x0f, 0x53, 0xcf, 0xc6, 0x5d,
		0xdc, 0x33, 0x0a, 0x3f, 0x48, 0x14, 0xd6, 0x97, 0x23, 0x31, 0x76, 0xd7, 0xa1, 0x37, 0x5e, 0xbd,
		0xcf, 0x20, 0xd6, 0x17, 0x19, 0xb5, 0xee, 0x13, 0x4b, 0xee, 0xbb, 0x56, 0x8f, 0xaf, 0xf4, 0xda,
		0x83, 0x7c, 0x73, 0x43, 0xf2, 0x3d, 0xf0, 0x89, 0xfb, 0x7c, 0xc3, 0x3b, 0x20, 0x1f, 0xdd, 0x01,
		0x1d, 0x78, 0x31, 0x7d, 0xe6, 0x12, 0xfe, 0x7d, 0x98, 0x0e, 0x6c, 0x80, 0x31, 0x2d, 0xad, 0xc7,
		0x42, 0xfb, 0xb3, 0x02, 0x0b, 0x3a, 0x36, 0xdb, 0xed, 0xe6, 0x09, 0x77, 0xab, 0xe4, 0xc9, 0x86,
		0x9d, 0xb7, 0x60, 0x8a, 0xc7, 0x07, 0x22, 0x5d, 0xdc, 0x70, 0x1e, 0x53, 0xd2, 0x68, 0x45, 0xb8,
		0x10, 0x9a, 0x8b, 0x4c, 0x2e, 0x7e, 0x9f, 0x83, 0xa5, 0x0d, 0xcb, 0x3a, 0xc4, 0xa6, 0x57, 0x3b,
		0xda, 0xa0, 0x22, 0xb3, 0xef, 0x65, 0x18, 0xc7, 0x70, 0x9e, 0xf0, 0x1e, 0xc3, 0xf4, 0xbb, 0xa4,
		0x41, 0xef, 0xa5, 0x43, 0x9b, 0xc8, 0xb2, 0x1c, 0x6a, 0x16, 0x8e, 0xe5, 0x1c, 0x19, 0x6c, 0x45,
		0x57, 0x60, 0x8e, 0xe0, 0x5a, 0xc7, 0xe3, 0xe9, 0x21, 0x8f, 0x27, 0xc2, 0x35, 0xce, 0xfa, 0xad,
		0xdc, 0x8f, 0xaa, 0x6d, 0x58, 0x88, 0xe3, 0x17, 0xf4, 0x41, 0x33, 0xc2, 0x07, 0x6d, 0x06, 0x7d,
		0xd0, 0x5c, 0x52, 0x80, 0x10, 0xe8, 0xed, 0x3a, 0x16, 0x7e, 0x88, 0x2d, 0x6e, 0xb8, 0x3c, 0xdf,
		0x09, 0xb8, 0x9f, 0x8b, 0xa0, 0xc6, 0xcd, 0x4d, 0xa2, 0x59, 0x82, 0x45, 0x3f, 0x1d, 0xaa, 0x08,
		0x0b, 0x96, 0xd3, 0xd6, 0xfe, 0x92, 0x87, 0x62, 0xa4, 0x4b, 0x1a, 0xae, 0x0b, 0x4b, 0xa4, 0xd3,
		0x6e, 0xbb, 0x1e, 0xc5, 0x96, 0x51, 0x6b, 0xda, 0xd8, 0xa1, 0x86, 0x0c, 0x49, 0xbe, 0x25, 0x5f,
		0x4f, 0xd3, 0xf7, 0xd0, 0x27, 0xae, 0x70, 0x5a, 0x19, 0xdd, 0x88, 0x5e, 0x24, 0xf1, 0x1d, 0x2c,
		0x6e, 0xb6, 0x30, 0x3b, 0x26, 0x91, 0x23, 0xbb, 0xcd, 0xbd, 0xa4, 0x34, 0xd3, 0x8c, 0xb8, 0xb9,
		0xdf, 0x23, 0xe2, 0xfe, 0x71, 0xae, 0x35, 0xf0, 0x8d, 0x3a, 0x70, 0xbe, 0xcd, 0x44, 0x10, 0xca,
		0xc8, 0x04, 0xdf, 0x3c, 0xb7, 0x96, 0xb7, 0x87, 0x3b, 0x5f, 0x86, 0x80, 0x29, 0x1f, 0xf4, 0xb9,
		0x31, 0x01, 0xd2, 0x56, 0xda, 0x83, 0xad, 0xea, 0x87, 0xb0, 0x10, 0x37, 0x30, 0xc6, 0x08, 0x2a,
		0x83, 0x81, 0x28, 0xc3, 0x29, 0x87, 0x98, 0x06, 0xad, 0xe0, 0x16, 0x14, 0x2b, 0x6e, 0xc7, 0x61,
		0x01, 0x21, 0xec, 0x80, 0x9f, 0x87, 0x42, 0xdd, 0xf5, 0x6a, 0xd8, 0xa8, 0x63, 0x5a, 0x3b, 0xe2,
		0xd2, 0xa7, 0x75, 0xe0, 0x4d, 0xdb, 0xac, 0x45, 0xfb, 0xbe, 0x02, 0xa5, 0x28, 0xb1, 0x34, 0x85,
		0x3d, 0x38, 0xe3, 0x67, 0x32, 0x62, 0x9f, 0xad, 0xa7, 0xeb, 0x28, 0x53, 0x96, 0xad, 0xbd, 0xbb,
		0x9c, 0xa5, 0x40, 0xc8, 0x67, 0x11, 0xf0, 0x54, 0x39, 0x71, 0xfc, 0x12, 0x5f, 0xda, 0x1f, 0x72,
		0xb0, 0xa8, 0x63, 0xd3, 0x8a, 0x51, 0xff, 0x26, 0x4c, 0xf0, 0x03, 0x81, 0xc2, 0xb7, 0xc9, 0x95,
		0x8c, 0x75, 0xdb, 0xbb, 0xcb, 0xf7, 0x07, 0x27, 0x19, 0x38, 0x8e, 0xe4, 0x06, 0x8f, 0x23, 0x6c,
		0x3b, 0xbb, 0x1d, 0x86, 0x8a, 0x74, 0xec, 0xd2, 0xcf, 0xcf, 0x8a, 0x56, 0xb9, 0xee, 0xe8, 0x1e,
		0x94, 0x6c, 0x87, 0x8d, 0xb0, 0xbb, 0xd8, 0x60, 0x19, 0x71, 0x20, 0xc6, 0x4c, 0x64, 0xc7, 0x98,
		0x0b, 0x3d, 0xe2, 0xdb, 0x4e, 0x20, 0xc4, 0x3c, 0x96, 0x74, 0xf8, 0x4f, 0x39, 0x28, 0x46, 0x20,
		0x93, 0x8b, 0x76, 0x0a, 0xcc, 0x62, 0x53, 0x86, 0xdc, 0x63, 0x49, 0x19, 0x50, 0x03, 0x16, 0x23,
		0xbc, 0x83, 0x9b, 0x72, 0x8c, 0x8c, 0x68, 0x21, 0x2c, 0x84, 0xef, 0xfb, 0x18, 0x0c, 0x27, 0xe2,
		0x30, 0xfc, 0x87, 0x02, 0xc5, 0x83, 0x8e, 0xd7, 0xc0, 0x5f, 0x08, 0xbb, 0xd3, 0x54, 0x28, 0x45,
		0x67, 0x2b, 0x03, 0xc5, 0xe7, 0x39, 0x28, 0xee, 0xe3, 0x2f, 0x0a, 0x14, 0x8f, 0x67, 0x0b, 0x6e,
		0x42, 0x29, 0x0a, 0xd9, 0x68, 0x07, 0x50, 0xed, 0x33, 0x05, 0x96, 0x75, 0x5c, 0xf7, 0x30, 0x39,
		0xf2, 0xb3, 0x2e, 0x6e, 0xc7, 0x4f, 0xb6, 0xb8, 0x7f, 0x09, 0x2e, 0xc6, 0x2b, 0x25, 0xad, 0xe5,
		0xef, 0x39, 0x78, 0x4e, 0xc7, 0x04, 0x3b, 0x56, 0x68, 0x53, 0x92, 0x40, 0x59, 0x59, 0x56, 0x32,
		0x65, 0x9a, 0x3f, 0xa3, 0x4f, 0x8b, 0x86, 0x5d, 0xeb, 0xff, 0x9c, 0x98, 0x5e, 0x81, 0x39, 0x0f,
		0xb7, 0x5c, 0x1a, 0x31, 0x2c, 0xd1, 0xea, 0x1b, 0x56, 0xa8, 0x6c, 0x32, 0xf1, 0xb8, 0xcb, 0x26,
		0x93, 0xa7, 0x2d, 0x9b, 0x68, 0x2b, 0x70, 0x29, 0x09, 0x64, 0xb9, 0x0e, 0x26, 0x2c, 0xef, 0x60,
		0x5a, 0xf1, 0x5c, 0x42, 0xe4, 0xb4, 0xc2, 0x8b, 0xd0, 0xaf, 0x35, 0x2b, 0xa1, 0x5a, 0xf3, 0x15,
		0x98, 0xa3, 0xa6, 0xd7, 0xc0, 0xb4, 0x07, 0x93, 0xcc, 0x68, 0x45, 0xab, 0xe4, 0xa7, 0xfd, 0x6c,
		0x02, 0x2e, 0xc6, 0xcb, 0x90, 0x96, 0xee, 0x31, 0x3e, 0xcc, 0x93, 0x57, 0x4f, 0x44, 0xe5, 0x7b,
		0xb8, 0x84, 0x3c, 0x8d, 0x27, 0x2f, 0xec, 0x91, 0xcd, 0x13, 0x7e, 0x98, 0x17, 0x29, 0xc4, 0x59,
		0x1a, 0x68, 0x42, 0x3f, 0x52, 0xe0, 0x42, 0xdd, 0xb4, 0x9b, 0x2c, 0x3d, 0x35, 0x3b, 0x04, 0xf7,
		0x65, 0x8b, 0x50, 0xa5, 0x9f, 0x42, 0xf6, 0x36, 0xe7, 0x5b, 0x61, 0x6c, 0x07, 0x34, 0x40, 0xf5,
		0x48, 0x87, 0x7a, 0x0c, 0xf3, 0x11, 0x55, 0x63, 0xea, 0x0d, 0x7b, 0x83, 0x69, 0xde, 0x8d, 0x74,
		0xed, 0xc2, 0xaa, 0xc9, 0xd5, 0x0c, 0x16, 0x1d, 0xd4, 0x63, 0x28, 0x26, 0xe8, 0x19, 0x23, 0x7e,
		0x7b, 0xf0, 0xa8, 0x71, 0x35, 0x13, 0x1c, 0x26, 0x35, 0xc0, 0x3e, 0x98, 0x68, 0xfe, 0x5b, 0x81,
		0x55, 0x01, 0x95, 0x15, 0x81, 0xb0, 0xe2, 0xb6, 0xda, 0x4d, 0x4c, 0xf1, 0x10, 0xb7, 0x02, 0x43,
		0x5a, 0x1f, 0xfa, 0x96, 0x30, 0x2e, 0xc3, 0x93, 0xab, 0x43, 0x64, 0xaa, 0x30, 0x32, 0x84, 0x82,
		0x9c, 0xb1, 0xef, 0x7f, 0x11, 0xe6, 0xa5, 0x79, 0x56, 0x6c, 0x38, 0xf8, 0x58, 0xe6, 0x3a, 0x13,
		0x3c, 0x3f, 0x9e, 0xe5, 0xcd, 0xef, 0x62, 0xe1, 0xf7, 0xb4, 0x13, 0xf8, 0xd2, 0x10, 0x93, 0xee,
		0xa5, 0xcc, 0x93, 0x7e, 0xa5, 0xe5, 0x54, 0xab, 0xcd, 0x99, 0x68, 0x1f, 0x2b, 0x50, 0xdc, 0xc1,
		0x74, 0xeb, 0xc4, 0x31, 0x5b, 0x76, 0xad, 0xe2, 0x3a, 0x75, 0xbb, 0x11, 0x48, 0xed, 0x6b, 0xbc,
		0x41, 0x94, 0x2a, 0x84, 0x9b, 0x05, 0xd1, 0xc4, 0x4b, 0xea, 0xef, 0xc0, 0x99, 0xba, 0xdd, 0xa4,
		0xd8, 0xf3, 0x73, 0xb8, 0x8c, 0x14, 0x6b, 0x40, 0xca, 0x36, 0xa7, 0xd4, 0x7d, 0x0e, 0xda, 0x7d,
		0x28, 0x45, 0x15, 0x91, 0x73, 0xbe, 0xe5, 0x9b, 0x98, 0x32, 0x42, 0x2d, 0x40, 0x90, 0x68, 0x3f,
		0x57, 0x40, 0x7d, 0xbf, 0x6d, 0x99, 0x14, 0x8f, 0x37, 0xc9, 0xf7, 0x61, 0x56, 0x0e, 0xe0, 0xfc,
		0xfc, 0xa9, 0x5e, 0x1d, 0x61, 0xaa, 0x22, 0x57, 0x38, 0x5b, 0xeb, 0x7f, 0x10, 0xed, 0x39, 0x58,
		0x8e, 0xd5, 0x4a, 0xba, 0xde, 0x9f, 0xf2, 0xc0, 0xcd, 0xdc, 0x36, 0x7e, 0x0a, 0xd6, 0x86, 0x07,
		0xec, 0x38, 0x65, 0xa4, 0xb6, 0x9f, 0x2a, 0x70, 0x61, 0x0b, 0x33, 0x3b, 0xf5, 0x43, 0xe8, 0x93,
		0x4d, 0x30, 0x7e, 0xa3, 0xc0, 0x62, 0x58, 0x1f, 0x69, 0x4a, 0x2f, 0xf7, 0x4b, 0xf2, 0x16, 0x1f,
		0x61, 0xc9, 0x33, 0xab, 0x5f, 0x6c, 0x17, 0x74, 0x16, 0x7a, 0x05, 0x50, 0x4f, 0x31, 0xd2, 0x1b,
		0x9b, 0xe3, 0x63, 0xe7, 0xfb, 0x3d, 0x81, 0xe1, 0x81, 0x2b, 0x3e, 0x7f, 0x78, 0x5e, 0x0c, 0xef,
		0xf7, 0xc8, 0xe1, 0xda, 0x23, 0x05, 0x2e, 0xed, 0x9b, 0xb6, 0x43, 0x4d, 0xdb, 0xa9, 0xb8, 0x9e,
		0xd7, 0x69, 0xd3, 0xa7, 0x03, 0xba, 0xdf, 0x29, 0xf0, 0x7c, 0xa2, 0x62, 0x4f, 0x17, 0x86, 0x6f,
		0x42, 0x69, 0xcf, 0x26, 0xe3, 0xf9, 0x2e, 0xad, 0x01, 0x4b, 0x31, 0xc4, 0x72, 0x82, 0x6f, 0xc3,
		0x19, 0xec, 0x50, 0xcf, 0xee, 0x5d, 0x2d, 0x8c, 0xb2, 0xdb, 0x65, 0x51, 0x42, 0x32, 0xd0, 0x3c,
		0x40, 0xd1, 0x6e, 0x84, 0x60, 0x22, 0xa0, 0x18, 0xff, 0x8d, 0xee, 0xc0, 0x94, 0x74, 0x31, 0xf9,
		0x31, 0x5d, 0x8c, 0xa4, 0xd7, 0x7e, 0xad, 0x84, 0x84, 0xf2, 0xee, 0xd3, 0xb8, 0xd1, 0xc7, 0xeb,
		0x4f, 0x30, 0x3c, 0x1b, 0xd3, 0x1f, 0x0b, 0xca, 0xad, 0xc1, 0xe4, 0x66, 0x14, 0x9d, 0xd7, 0xff,
		0x75, 0x09, 0xa6, 0x37, 0x98, 0x42, 0x1b, 0x07, 0xbb, 0xe8, 0x57, 0x0a, 0x2c, 0x25, 0xbe, 0x28,
		0x42, 0x5f, 0x1d, 0xae, 0x62, 0x97, 0xf4, 0x4a, 0x4a, 0xfd, 0xda, 0xd8, 0xf4, 0xd2, 0xe4, 0x3e,
		0x51, 0xe0, 0xd9, 0x98, 0x27, 0x20, 0xe8, 0x8d, 0xe1, 0x18, 0x47, 0xdf, 0x13, 0xa9, 0x37, 0xc7,
		0xa0, 0x94, 0xca, 0x04, 0xb1, 0x8a, 0x3c, 0x82, 0x19, 0x16, 0xab, 0xa4, 0x37, 0x41, 0xc3, 0x62,
		0x95, 0xfc, 0xf0, 0xc7, 0x05, 0xe8, 0xbf, 0xf9, 0x40, 0x6b, 0x19, 0x19, 0x50, 0xf8, 0x35, 0x89,
		0x7a, 0x75, 0x78, 0x82, 0xbe, 0xc0, 0xfe, 0xbb, 0x8a, 0x2c, 0x81, 0x91, 0x77, 0x27, 0x59, 0x02,
		0xa3, 0x4f, 0x36, 0x84, 0x40, 0xff, 0x65, 0x44, 0xb6, 0xc0, 0xd0, 0xdb, 0x8e, 0x6c, 0x81, 0xe1,
		0x47, 0x17, 0xe8, 0x21, 0xcc, 0x0e, 0x3c, 0x6c, 0x40, 0xeb, 0xc3, 0x2d, 0xd2, 0x80, 0xd8, 0xeb,
		0x23, 0xd1, 0x48, 0xc9, 0x9f, 0x2b, 0xfc, 0x86, 0x33, 0xf5, 0xe2, 0x1d, 0xdd, 0xce, 0x3c, 0x54,
		0x0c, 0xf3, 0x82, 0x42, 0xdd, 0x3e, 0x2d, 0x1b, 0xa9, 0xf3, 0x67, 0x0a, 0x2c, 0xc6, 0x5f, 0x27,
		0xa3, 0x37, 0xc7, 0xbb, 0x84, 0x16, 0xfa, 0xbd, 0x75, 0x9a, 0x1b, 0x6c, 0xbe, 0x6b, 0x13, 0x6f,
		0x6d, 0xb3, 0x76, 0x6d, 0xd6, 0x25, 0x73, 0xd6, 0xae, 0xcd, 0xbe, 0x2e, 0xfe, 0xad, 0xc2, 0x8f,
		0xfa, 0x89, 0x17, 0x9b, 0x68, 0x23, 0x5b, 0x42, 0xc6, 0x75, 0xb0, 0xba, 0x79, 0x1a, 0x16, 0xfd,
		0xad, 0x30, 0x70, 0x77, 0x98, 0xb5, 0x15, 0xe2, 0x2e, 0x4d, 0xb3, 0xb6, 0x42, 0xec, 0xe5, 0x24,
		0xfa, 0x58, 0x01, 0x14, 0xbd, 0x6d, 0x43, 0xaf, 0x8f, 0x79, 0xf7, 0xa8, 0xbe, 0x31, 0x3a, 0xa1,
		0xd4, 0xe4, 0xbb, 0x70, 0x2e, 0x74, 0x49, 0x85, 0x5e, 0x1d, 0xf1, 0x4e, 0x4b, 0xa8, 0xf0, 0xda,
		0x58, 0x37, 0x61, 0xe8, 0x07, 0x0a, 0x9c, 0x0f, 0x5f, 0x1a, 0xa1, 0x0c, 0x5e, 0x09, 0x37, 0x54,
		0xea, 0x8d, 0x51, 0xc9, 0xfa, 0x18, 0x84, 0x6e, 0x40, 0xb2, 0x30, 0x88, 0xbf, 0x63, 0xca, 0xc2,
		0x20, 0xe9, 0x9a, 0x85, 0x61, 0x10, 0x2e, 0xa8, 0x67, 0x61, 0x90, 0x70, 0xdd, 0x90, 0x85, 0x41,
		0x52, 0xdd, 0x9e, 0xeb, 0x10, 0x2e, 0x42, 0x67, 0xe9, 0x90, 0x50, 0xe7, 0xcf, 0xd2, 0x21, 0xb1,
		0xd6, 0xfd, 0x29, 0x7f, 0x98, 0x10, 0x2d, 0x17, 0xa3, 0x9b, 0x59, 0xb8, 0x26, 0xd6, 0xbd, 0xd5,
		0x5b, 0xe3, 0x90, 0x06, 0x9c, 0x7f, 0x7c, 0xe1, 0x34, 0xcb, 0xf9, 0xa7, 0xd6, 0xb4, 0xb3, 0x9c,
		0x7f, 0x7a, 0xad, 0x96, 0xa3, 0x14, 0x57, 0x78, 0xcc, 0x42, 0x29, 0xa5, 0xc0, 0x9b, 0x85, 0x52,
		0x6a, 0xdd, 0xf6, 0x8f, 0x0a, 0x5c, 0xce, 0x2c, 0x6a, 0xa1, 0xed, 0xcc, 0x39, 0x0f, 0x55, 0x0a,
		0x54, 0x77, 0x4e, 0xcd, 0x27, 0x60, 0xf0, 0xe1, 0x32, 0x54, 0x96, 0xc1, 0x27, 0xd4, 0xcf, 0xb2,
		0x0c, 0x3e, 0xb1, 0xda, 0xc5, 0x8e, 0x02, 0x31, 0xb5, 0xa1, 0xac, 0xa3, 0x40, 0x72, 0x91, 0x2b,
		0xeb, 0x28, 0x90, 0x52, 0x88, 0x92, 0xbb, 0x2f, 0x5a, 0xfb, 0xc9, 0xde, 0x7d, 0x89, 0xc5, 0xab,
		0xec, 0xdd, 0x97, 0x5c, 0x6a, 0x42, 0x3f, 0x54, 0x60, 0x3e, 0x72, 0x70, 0x47, 0x19, 0x50, 0x27,
		0x95, 0x09, 0xd4, 0xd7, 0x47, 0xa6, 0x93, 0x6a, 0x7c, 0x07, 0xe6, 0x06, 0x0b, 0x4c, 0x28, 0x33,
		0xf9, 0x8d, 0x29, 0x8f, 0xa9, 0xaf, 0x8e, 0x46, 0x24, 0x85, 0x3f, 0x52, 0xa0, 0x98, 0x50, 0xa3,
		0x41, 0x19, 0x5e, 0x24, 0xbd, 0xe6, 0xa4, 0x7e, 0x65, 0x4c, 0x6a, 0xa1, 0xd8, 0xe6, 0x6b, 0x1f,
		0x5c, 0x6f, 0xd8, 0xf4, 0xa8, 0x53, 0x2d, 0xd7, 0xdc, 0xd6, 0xda, 0xc0, 0xdf, 0x90, 0xca, 0x0d,
		0xec, 0x88, 0xbf, 0x59, 0xf5, 0xfe, 0x91, 0xf4, 0x26, 0xff, 0xd1, 0xbd, 0x56, 0x9d, 0xe2, 0xed,
		0xd7, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xe6, 0x78, 0x16, 0xf2, 0x35, 0x00, 0x00,
	},
	// google/protobuf/timestamp.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc9, 0xcc, 0x4d,
		0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0xd0, 0x03, 0x0b, 0x09, 0xf1, 0x43, 0x14, 0xe8, 0xc1, 0x14, 0x28,
		0x59, 0x73, 0x71, 0x86, 0xc0, 0xd4, 0x08, 0x49, 0x70, 0xb1, 0x17, 0xa7, 0x26, 0xe7, 0xe7, 0xa5,
		0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x79, 0x89,
		0x79, 0xf9, 0xc5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x53, 0x2b, 0x23, 0x97,
		0x70, 0x72, 0x7e, 0xae, 0x1e, 0x9a, 0xa1, 0x4e, 0x7c, 0x70, 0x23, 0x03, 0x40, 0x42, 0x01, 0x8c,
		0x51, 0x46, 0x50, 0x25, 0xe9, 0xf9, 0x39, 0x89, 0x79, 0xe9, 0x7a, 0xf9, 0x45, 0xe9, 0x48, 0x6e,
		0xac, 0x2c, 0x48, 0x2d, 0xd6, 0xcf, 0xce, 0xcb, 0x2f, 0xcf, 0x43, 0xb8, 0xb7, 0x20, 0xe9, 0x07,
		0x23, 0xe3, 0x22, 0x26, 0x66, 0xf7, 0x00, 0xa7, 0x55, 0x4c, 0x72, 0xee, 0x10, 0xdd, 0x01, 0x50,
		0x2d, 0x7a, 0xe1, 0xa9, 0x39, 0x39, 0xde, 0x20, 0x0d, 0x21, 0x20, 0xbd, 0x49, 0x6c, 0x60, 0xb3,
		0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x65, 0xce, 0x7d, 0xff, 0x00, 0x00, 0x00,
	},
	// google/protobuf/wrappers.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x2f, 0x4a, 0x2c,
		0x28, 0x48, 0x2d, 0x2a, 0xd6, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0xca,
		0x5c, 0xdc, 0x2e, 0xf9, 0xa5, 0x49, 0x39, 0xa9, 0x61, 0x89, 0x39, 0xa5, 0xa9, 0x42, 0x22, 0x5c,
		0xac, 0x65, 0x20, 0x86, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x63, 0x10, 0x84, 0xa3, 0xa4, 0xc4, 0xc5,
		0xe5, 0x96, 0x93, 0x9f, 0x58, 0x82, 0x45, 0x0d, 0x13, 0x92, 0x1a, 0xcf, 0xbc, 0x12, 0x33, 0x13,
		0x2c, 0x6a, 0x98, 0x61, 0x6a, 0x94, 0xb9, 0xb8, 0x43, 0x71, 0x29, 0x62, 0x41, 0x35, 0xc8, 0xd8,
		0x08, 0x8b, 0x1a, 0x56, 0x34, 0x83, 0xb0, 0x2a, 0xe2, 0x85, 0x29, 0x52, 0xe4, 0xe2, 0x74, 0xca,
		0xcf, 0xcf, 0xc1, 0xa2, 0x84, 0x03, 0xc9, 0x9c, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0x74, 0x2c, 0x8a,
		0x38, 0x91, 0x1c, 0xe4, 0x54, 0x59, 0x92, 0x5a, 0x8c, 0x45, 0x0d, 0x0f, 0x54, 0x8d, 0x53, 0x33,
		0x23, 0x97, 0x70, 0x72, 0x7e, 0xae, 0x1e, 0x5a, 0xf0, 0x3a, 0xf1, 0x86, 0x43, 0xc3, 0x3f, 0x00,
		0x24, 0x12, 0xc0, 0x18, 0x65, 0x08, 0x55, 0x91, 0x9e, 0x9f, 0x93, 0x98, 0x97, 0xae, 0x97, 0x5f,
		0x94, 0x8e, 0x88, 0xab, 0x92, 0xca, 0x82, 0xd4, 0x62, 0xfd, 0xec, 0xbc, 0xfc, 0xf2, 0x3c, 0x78,
		0xbc, 0x15, 0x24, 0xfd, 0x60, 0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce,
		0x1d, 0xa2, 0x39, 0x00, 0xaa, 0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4,
		0x35, 0x89, 0x0d, 0x6c, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x92, 0x48, 0x30, 0x06,
		0x02, 0x00, 0x00,
	},
	// uber/cadence/api/v1/common.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x73, 0xdb, 0x44,
		0x14, 0x47, 0x71, 0xec, 0xb4, 0xcf, 0x6e, 0x6a, 0xb6, 0x34, 0x75, 0xcc, 0x00, 0x1e, 0x73, 0xc0,
		0x30, 0x8c, 0x34, 0x49, 0x2f, 0x40, 0x87, 0x61, 0x92, 0xd8, 0xa1, 0x6a, 0x69, 0xe2, 0x91, 0x3d,
		0xed, 0x94, 0x03, 0x9a, 0xb5, 0xf4, 0xe4, 0x2e, 0x96, 0x76, 0x35, 0xab, 0x95, 0x12, 0xdf, 0xf8,
		0x40, 0x1c, 0xf8, 0x4a, 0x7c, 0x13, 0x66, 0xa5, 0x75, 0x6c, 0x17, 0x9a, 0x5e, 0x98, 0xe9, 0x4d,
		0xfb, 0x7e, 0x7f, 0xde, 0xef, 0x69, 0xf6, 0x0f, 0xf4, 0xf2, 0x19, 0x4a, 0x27, 0xa0, 0x21, 0xf2,
		0x00, 0x1d, 0x9a, 0x32, 0xa7, 0x38, 0x72, 0x02, 0x91, 0x24, 0x82, 0xdb, 0xa9, 0x14, 0x4a, 0x90,
		0x6e, 0x86, 0xb2, 0x40, 0x69, 0x6b, 0xa2, 0x6d, 0x88, 0x36, 0x4d, 0x99, 0x5d, 0x1c, 0x75, 0x3f,
		0x9f, 0x0b, 0x31, 0x8f, 0xd1, 0x29, 0x99, 0xb3, 0x3c, 0x72, 0xc2, 0x5c, 0x52, 0xc5, 0x56, 0xda,
		0xfe, 0x73, 0xf8, 0xf8, 0x95, 0x90, 0x8b, 0x28, 0x16, 0x57, 0xa3, 0x6b, 0x0c, 0x72, 0x0d, 0x91,
		0x2f, 0xa0, 0x79, 0x65, 0x8a, 0x3e, 0x0b, 0x3b, 0x56, 0xcf, 0x1a, 0xdc, 0xf5, 0x60, 0x55, 0x72,
		0x43, 0xf2, 0x10, 0x1a, 0x32, 0xe7, 0x1a, 0xdb, 0x29, 0xb1, 0xba, 0xcc, 0xb9, 0x1b, 0xf6, 0xfb,
		0xd0, 0x5a, 0x99, 0x4d, 0x97, 0x29, 0x12, 0x02, 0xbb, 0x9c, 0x26, 0x68, 0x0c, 0xca, 0x6f, 0xcd,
		0x39, 0x09, 0x14, 0x2b, 0x98, 0x5a, 0xbe, 0x93, 0xf3, 0x19, 0xec, 0x8d, 0xe9, 0x32, 0x16, 0x34,
		0xd4, 0x70, 0x48, 0x15, 0x2d, 0xe1, 0x96, 0x57, 0x7e, 0xf7, 0x9f, 0xc0, 0xde, 0x39, 0x65, 0x71,
		0x2e, 0x91, 0x1c, 0x40, 0x43, 0x22, 0xcd, 0x04, 0x37, 0x7a, 0xb3, 0x22, 0x1d, 0xd8, 0x0b, 0x51,
		0x51, 0x16, 0x67, 0x65, 0xc2, 0x96, 0xb7, 0x5a, 0xf6, 0xff, 0xb4, 0x60, 0xf7, 0x05, 0x26, 0x82,
		0x0c, 0xa1, 0x11, 0x31, 0x8c, 0xc3, 0xac, 0x63, 0xf5, 0x6a, 0x83, 0xe6, 0xf1, 0xb7, 0xf6, 0xbb,
		0x7f, 0xa3, 0xad, 0x15, 0xf6, 0x79, 0x49, 0x1f, 0x71, 0x25, 0x97, 0x9e, 0xd1, 0x76, 0x7f, 0x83,
		0xe6, 0x46, 0x99, 0xb4, 0xa1, 0xb6, 0xc0, 0xa5, 0x09, 0xa3, 0x3f, 0xc9, 0xf7, 0x50, 0x2f, 0x68,
		0x9c, 0x63, 0x99, 0xa3, 0x79, 0xfc, 0xe5, 0x6d, 0x5d, 0xcc, 0xd0, 0x5e, 0xa5, 0xf8, 0x61, 0xe7,
		0x3b, 0xab, 0xff, 0x97, 0x05, 0x8d, 0xa7, 0x48, 0x43, 0x94, 0xe4, 0xfc, 0xad, 0xc0, 0xf6, 0x6d,
		0x56, 0x95, 0xe6, 0x83, 0x44, 0xfe, 0xdb, 0x82, 0xf6, 0x04, 0xa9, 0x0c, 0xde, 0x9c, 0x28, 0x25,
		0xd9, 0x2c, 0x57, 0x98, 0x91, 0x08, 0xf6, 0x19, 0x0f, 0xf1, 0x1a, 0x43, 0x7f, 0x6b, 0x88, 0x9f,
		0x6e, 0x33, 0x7f, 0xdb, 0xc5, 0x76, 0x2b, 0x8b, 0xcd, 0xa9, 0xee, 0xb1, 0xcd, 0x5a, 0x17, 0x81,
		0xfc, 0x9b, 0xf4, 0xff, 0xcf, 0x98, 0xc0, 0x9d, 0x21, 0x55, 0xf4, 0x34, 0x16, 0x33, 0xf2, 0x02,
		0xee, 0x21, 0x0f, 0x44, 0xc8, 0xf8, 0xdc, 0x57, 0xcb, 0xb4, 0xda, 0xca, 0xfb, 0xc7, 0x83, 0xdb,
		0x2c, 0x47, 0x46, 0xa0, 0x8f, 0x80, 0xd7, 0xc2, 0x8d, 0xd5, 0xcd, 0x8e, 0xdf, 0xd9, 0xd8, 0xf1,
		0xe3, 0xea, 0x94, 0xa2, 0x7c, 0x89, 0x32, 0x63, 0x82, 0xbb, 0x3c, 0x12, 0x9a, 0xc8, 0x92, 0x34,
		0x5e, 0x9d, 0x1c, 0xfd, 0x4d, 0xbe, 0x82, 0xfb, 0x11, 0x52, 0x95, 0x4b, 0xf4, 0x8b, 0x8a, 0x6a,
		0x4e, 0xe8, 0xbe, 0x29, 0x1b, 0x83, 0xfe, 0x73, 0x78, 0x34, 0xc9, 0xd3, 0x54, 0x48, 0x85, 0xe1,
		0x59, 0xcc, 0x90, 0x2b, 0x83, 0x64, 0xfa, 0x70, 0xcf, 0x85, 0x9f, 0x85, 0x0b, 0xe3, 0x5c, 0x9f,
		0x8b, 0x49, 0xb8, 0x20, 0x87, 0x70, 0xe7, 0x77, 0x5a, 0xd0, 0x12, 0xa8, 0x3c, 0xf7, 0xf4, 0x7a,
		0x12, 0x2e, 0xfa, 0x7f, 0xd4, 0xa0, 0xe9, 0xa1, 0x92, 0xcb, 0xb1, 0x88, 0x59, 0xb0, 0x24, 0x43,
		0x68, 0x33, 0xce, 0x14, 0xa3, 0xb1, 0xcf, 0xb8, 0x42, 0x59, 0xd0, 0x2a, 0x65, 0xf3, 0xf8, 0xd0,
		0xae, 0xee, 0x23, 0x7b, 0x75, 0x1f, 0xd9, 0x43, 0x73, 0x1f, 0x79, 0xf7, 0x8d, 0xc4, 0x35, 0x0a,
		0xe2, 0xc0, 0x83, 0x19, 0x0d, 0x16, 0x22, 0x8a, 0xfc, 0x40, 0x60, 0x14, 0xb1, 0x40, 0xc7, 0x2c,
		0x7b, 0x5b, 0x1e, 0x31, 0xd0, 0xd9, 0x1a, 0xd1, 0x6d, 0x13, 0x7a, 0xcd, 0x92, 0x3c, 0x59, 0xb7,
		0xad, 0xbd, 0xb7, 0xad, 0x91, 0xdc, 0xb4, 0xfd, 0x7a, 0xed, 0x42, 0x95, 0xc2, 0x24, 0x55, 0x59,
		0x67, 0xb7, 0x67, 0x0d, 0xea, 0x37, 0xd4, 0x13, 0x53, 0x26, 0x3f, 0xc2, 0xa7, 0x5c, 0x70, 0x5f,
		0xea, 0xd1, 0xe9, 0x2c, 0x46, 0x1f, 0xa5, 0x14, 0xd2, 0xaf, 0xee, 0xa0, 0xac, 0x53, 0xef, 0xd5,
		0x06, 0x77, 0xbd, 0x0e, 0x17, 0xdc, 0x5b, 0x31, 0x46, 0x9a, 0xe0, 0x55, 0x38, 0x79, 0x06, 0x0f,
		0xf0, 0x3a, 0x65, 0x55, 0x90, 0x75, 0xe4, 0xc6, 0xfb, 0x22, 0x93, 0xb5, 0x6a, 0x95, 0xfa, 0x9b,
		0x2b, 0x68, 0x6d, 0xee, 0x29, 0x72, 0x08, 0x0f, 0x47, 0x17, 0x67, 0x97, 0x43, 0xf7, 0xe2, 0x67,
		0x7f, 0xfa, 0x7a, 0x3c, 0xf2, 0xdd, 0x8b, 0x97, 0x27, 0xbf, 0xb8, 0xc3, 0xf6, 0x47, 0xa4, 0x0b,
		0x07, 0xdb, 0xd0, 0xf4, 0xa9, 0xe7, 0x9e, 0x4f, 0xbd, 0x57, 0x6d, 0x8b, 0x1c, 0x00, 0xd9, 0xc6,
		0x9e, 0x4d, 0x2e, 0x2f, 0xda, 0x3b, 0xa4, 0x03, 0x9f, 0x6c, 0xd7, 0xc7, 0xde, 0xe5, 0xf4, 0xf2,
		0x71, 0xbb, 0x76, 0xfa, 0x1a, 0x1e, 0x05, 0x22, 0xf9, 0xaf, 0x4d, 0x7e, 0xda, 0x3c, 0x2b, 0x5f,
		0xa9, 0xb1, 0x1e, 0x60, 0x6c, 0xfd, 0xea, 0xcc, 0x99, 0x7a, 0x93, 0xcf, 0xec, 0x40, 0x24, 0xce,
		0xd6, 0x9b, 0x66, 0xcf, 0x91, 0x57, 0x0f, 0x94, 0x79, 0xde, 0x9e, 0xd0, 0x94, 0x15, 0x47, 0xb3,
		0x46, 0x59, 0x7b, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x38, 0x66, 0x5d, 0x02, 0x07,
		0x00, 0x00,
	},
	// google/protobuf/duration.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0x29, 0x2d, 0x4a,
		0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0x56,
		0x5c, 0x1c, 0x2e, 0x50, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa9, 0xc9, 0xf9, 0x79, 0x29, 0xc5,
		0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x5e, 0x62, 0x5e,
		0x7e, 0xb1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xe3, 0xd4, 0xcc, 0xc8, 0x25, 0x9c,
		0x9c, 0x9f, 0xab, 0x87, 0x66, 0xa6, 0x13, 0x2f, 0xcc, 0xc4, 0x00, 0x90, 0x48, 0x00, 0x63, 0x94,
		0x21, 0x54, 0x45, 0x7a, 0x7e, 0x4e, 0x62, 0x5e, 0xba, 0x5e, 0x7e, 0x51, 0x3a, 0xc2, 0x81, 0x25,
		0x95, 0x05, 0xa9, 0xc5, 0xfa, 0xd9, 0x79, 0xf9, 0xe5, 0x79, 0x70, 0xc7, 0x16, 0x24, 0xfd, 0x60,
		0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce, 0x1d, 0xa2, 0x39, 0x00, 0xaa,
		0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4, 0x35, 0x89, 0x0d, 0x6c, 0x94,
		0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xef, 0x8a, 0xb4, 0xc3, 0xfb, 0x00, 0x00, 0x00,
	},
	// uber/cadence/api/v1/visibility.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xdd, 0x6e, 0xd3, 0x30,
		0x18, 0x25, 0x65, 0xab, 0xc4, 0xd7, 0xc1, 0x22, 0x4b, 0x50, 0xc8, 0x04, 0x45, 0x15, 0x17, 0x13,
		0x17, 0x8e, 0x3a, 0x6e, 0x90, 0x76, 0x81, 0x5a, 0x62, 0x50, 0x44, 0x69, 0x4b, 0x9a, 0x75, 0x0c,
		0x09, 0x05, 0x27, 0xf1, 0x8a, 0x45, 0x12, 0x47, 0x8e, 0x93, 0x6d, 0x4f, 0xc1, 0x7b, 0xf2, 0x14,
		0x28, 0x7f, 0x93, 0x10, 0xa9, 0x76, 0x97, 0x9c, 0xef, 0x9c, 0x63, 0x9f, 0xcf, 0x07, 0x5e, 0xe5,
		0x3e, 0x93, 0x66, 0x40, 0x43, 0x96, 0x04, 0xcc, 0xa4, 0x29, 0x37, 0x8b, 0x89, 0x59, 0xf0, 0x8c,
		0xfb, 0x3c, 0xe2, 0xea, 0x06, 0xa7, 0x52, 0x28, 0x81, 0x8c, 0x8c, 0xc9, 0x82, 0x49, 0x5c, 0x92,
		0x71, 0x43, 0xc6, 0x34, 0xe5, 0xb8, 0x98, 0x18, 0xa3, 0xad, 0x10, 0xdb, 0x88, 0x99, 0x15, 0xd3,
		0xcf, 0x2f, 0x4d, 0xc5, 0x63, 0x96, 0x29, 0x1a, 0xa7, 0xb5, 0xd8, 0x18, 0x77, 0x1d, 0x71, 0x25,
		0xe4, 0xaf, 0xcb, 0x48, 0x5c, 0xd5, 0x9c, 0xf1, 0x17, 0x18, 0x9e, 0x37, 0x08, 0xb9, 0x66, 0x41,
		0xae, 0xb8, 0x48, 0x3e, 0xf0, 0x48, 0x31, 0x89, 0x46, 0x30, 0x68, 0xc9, 0x1e, 0x0f, 0x9f, 0x6a,
		0x2f, 0xb5, 0xe3, 0x07, 0x0e, 0xb4, 0x90, 0x1d, 0xa2, 0xc7, 0xd0, 0x97, 0x79, 0x52, 0xce, 0x7a,
		0xd5, 0x6c, 0x5f, 0xe6, 0x89, 0x1d, 0x8e, 0x8f, 0x01, 0xb5, 0x96, 0xee, 0x4d, 0xca, 0x1a, 0x37,
		0x04, 0x7b, 0x09, 0x8d, 0x59, 0x63, 0x53, 0x7d, 0x8f, 0x7f, 0x6b, 0x70, 0xb8, 0x56, 0x54, 0x2a,
		0x97, 0xc7, 0x2d, 0xef, 0x1d, 0x3c, 0x64, 0x54, 0x46, 0x9c, 0x65, 0xca, 0x2b, 0x03, 0x55, 0x82,
		0xc1, 0x89, 0x81, 0xeb, 0xb4, 0xb8, 0x4d, 0x8b, 0xdd, 0x36, 0xad, 0x73, 0xd0, 0x0a, 0x4a, 0x08,
		0x9d, 0xc2, 0x20, 0xa2, 0xea, 0x56, 0xde, 0xbb, 0x53, 0x0e, 0x35, 0xbd, 0x04, 0xc6, 0x3f, 0xe0,
		0x60, 0xad, 0xa8, 0xca, 0xb3, 0xe6, 0x36, 0x2b, 0xe8, 0x67, 0xd5, 0x7f, 0x75, 0x8d, 0x47, 0x27,
		0x6f, 0xf1, 0xee, 0x07, 0xc1, 0xff, 0x2d, 0xf2, 0x7d, 0x24, 0x32, 0x56, 0xfb, 0x39, 0x8d, 0xcf,
		0xeb, 0x3f, 0x1a, 0xe8, 0x76, 0x12, 0xb2, 0x6b, 0x16, 0x6e, 0x68, 0x94, 0xb3, 0x72, 0x45, 0xe8,
		0x05, 0x18, 0xf6, 0xc2, 0x22, 0x5f, 0x89, 0xe5, 0x6d, 0xa6, 0xf3, 0x33, 0xe2, 0xb9, 0x17, 0x2b,
		0xe2, 0xd9, 0x8b, 0xcd, 0x74, 0x6e, 0x5b, 0xfa, 0x3d, 0xf4, 0x1c, 0x9e, 0x75, 0xcc, 0xd7, 0xae,
		0x63, 0x2f, 0x3e, 0xea, 0xda, 0x0e, 0xf9, 0x27, 0x72, 0x71, 0xbe, 0x74, 0x2c, 0xbd, 0x87, 0x0c,
		0x78, 0xd2, 0x69, 0xef, 0xea, 0xf7, 0x77, 0x58, 0x5b, 0xcb, 0xb3, 0xd9, 0x9c, 0xe8, 0x7b, 0xe8,
		0x08, 0x86, 0x1d, 0xe3, 0xd9, 0x72, 0x39, 0xd7, 0xf7, 0xd1, 0x08, 0x8e, 0xba, 0xb4, 0x53, 0x97,
		0xb8, 0xf6, 0x67, 0xa2, 0xf7, 0x67, 0xdf, 0x61, 0x18, 0x88, 0xb8, 0x6b, 0x59, 0xb3, 0xc3, 0xcd,
		0x6d, 0xd7, 0x57, 0xe5, 0x9b, 0xac, 0xb4, 0x6f, 0xe6, 0x96, 0xab, 0x9f, 0xb9, 0x8f, 0x03, 0x11,
		0x9b, 0xff, 0x54, 0x17, 0x6f, 0x59, 0x52, 0xd7, 0xbc, 0x69, 0xf1, 0x29, 0x4d, 0x79, 0x31, 0xf1,
		0xfb, 0x15, 0xf6, 0xe6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xac, 0x3f, 0x3b, 0xf5, 0x4c, 0x03,
		0x00, 0x00,
	},
	// uber/cadence/api/v1/workflow.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xdd, 0x72, 0xdb, 0xc8,
		0xd1, 0xfd, 0x40, 0x4a, 0xb2, 0xd4, 0xd4, 0x0f, 0x34, 0xb6, 0x2c, 0x5a, 0xde, 0xb5, 0x65, 0xee,
		0x8f, 0x65, 0x7e, 0x36, 0x65, 0xd9, 0xde, 0xf5, 0x3a, 0x5e, 0xc7, 0x81, 0x00, 0xc8, 0xc2, 0x9a,
		0x02, 0xb9, 0x03, 0xd0, 0xb2, 0x76, 0x93, 0xa0, 0x20, 0x72, 0x24, 0xa1, 0x4c, 0x02, 0x2c, 0x00,
		0xb4, 0xad, 0xfb, 0x54, 0xe5, 0x15, 0x52, 0xb9, 0x49, 0x1e, 0x20, 0x95, 0x54, 0x1e, 0x20, 0x95,
		0x4a, 0xee, 0x73, 0x97, 0xca, 0x3b, 0xe4, 0x15, 0x72, 0x95, 0x9a, 0xc1, 0x80, 0x04, 0x45, 0x12,
		0xa0, 0x53, 0xa9, 0xcd, 0x9d, 0xd0, 0x73, 0x4e, 0xa3, 0xa7, 0xa7, 0xfb, 0xf4, 0x80, 0x82, 0x52,
		0xef, 0x98, 0xf8, 0xdb, 0x4d, 0xbb, 0x45, 0xdc, 0x26, 0xd9, 0xb6, 0xbb, 0xce, 0xf6, 0xdb, 0x9d,
		0xed, 0x77, 0x9e, 0xff, 0xe6, 0xa4, 0xed, 0xbd, 0xab, 0x74, 0x7d, 0x2f, 0xf4, 0xd0, 0x46, 0x40,
		0xfc, 0xb7, 0xc4, 0xaf, 0x50, 0x68, 0x85, 0x43, 0x2b, 0x76, 0xd7, 0xa9, 0xbc, 0xdd, 0xd9, 0xb8,
		0x71, 0xea, 0x79, 0xa7, 0x6d, 0xb2, 0xcd, 0x90, 0xc7, 0xbd, 0x93, 0xed, 0x56, 0xcf, 0xb7, 0x43,
		0xc7, 0x73, 0x23, 0xee, 0xc6, 0xcd, 0x8b, 0xeb, 0xa1, 0xd3, 0x21, 0x41, 0x68, 0x77, 0xba, 0x1c,
		0xb0, 0x39, 0x2e, 0x80, 0xa6, 0xd7, 0xe9, 0xf4, 0x5d, 0x8c, 0x0d, 0x31, 0xb4, 0x83, 0x37, 0x6d,
		0x27, 0x08, 0x23, 0x4c, 0xe9, 0xf7, 0x97, 0x60, 0xed, 0x90, 0x47, 0xad, 0xbe, 0x27, 0xcd, 0x1e,
		0x0d, 0x41, 0x73, 0x4f, 0x3c, 0xf4, 0x53, 0x40, 0xf1, 0x76, 0x2c, 0x12, 0xaf, 0x14, 0x85, 0x4d,
		0x61, 0xab, 0xf0, 0xe0, 0x5e, 0x65, 0xf2, 0xce, 0x2a, 0x23, 0xee, 0xf0, 0xea, 0xbb, 0x8b, 0x26,
		0xf4, 0x35, 0xcc, 0x84, 0xe7, 0x5d, 0x52, 0xcc, 0x31, 0x7f, 0x5b, 0xd3, 0xf8, 0x33, 0xcf, 0xbb,
		0x04, 0x33, 0x16, 0x7a, 0x02, 0x10, 0x84, 0xb6, 0x1f, 0x5a, 0x34, 0x29, 0xc5, 0x3c, 0xf3, 0xb1,
		0x51, 0x89, 0x32, 0x56, 0x89, 0x33, 0x56, 0x31, 0xe3, 0x8c, 0xe1, 0x05, 0x86, 0xa6, 0xcf, 0x94,
		0xda, 0x6c, 0x7b, 0x01, 0x89, 0xa8, 0x33, 0xd9, 0x54, 0x86, 0x66, 0xd4, 0xef, 0x61, 0x31, 0xa2,
		0x06, 0xa1, 0x1d, 0xf6, 0x82, 0xe2, 0xec, 0xa6, 0xb0, 0xb5, 0xfc, 0xe0, 0xab, 0x0f, 0xca, 0x85,
		0x4c, 0x1d, 0x18, 0x8c, 0x8f, 0x0b, 0xcd, 0xc1, 0x03, 0xfa, 0x0c, 0x96, 0xcf, 0x9c, 0x20, 0xf4,
		0xfc, 0x73, 0xab, 0x4d, 0xdc, 0xd3, 0xf0, 0xac, 0x38, 0xb7, 0x29, 0x6c, 0xe5, 0xf1, 0x12, 0xb7,
		0x56, 0x99, 0x11, 0x35, 0x61, 0xad, 0x6b, 0xfb, 0xc4, 0x0d, 0x07, 0x67, 0x62, 0x39, 0xee, 0x89,
		0x57, 0xbc, 0xc4, 0x76, 0xb2, 0x9d, 0x16, 0x4c, 0x9d, 0x11, 0x87, 0x4e, 0x19, 0x5f, 0xee, 0x8e,
		0x1a, 0x91, 0x04, 0xcb, 0x03, 0xef, 0x2c, 0x4f, 0xf3, 0x99, 0x79, 0x5a, 0xea, 0x33, 0x58, 0xae,
		0x1e, 0xc1, 0x4c, 0x87, 0x74, 0xbc, 0xe2, 0x02, 0x23, 0x6e, 0xa6, 0x85, 0x75, 0x40, 0x3a, 0x1e,
		0x66, 0x68, 0x74, 0x04, 0xab, 0x01, 0xb1, 0xfd, 0xe6, 0x99, 0x65, 0x87, 0xa1, 0xef, 0x1c, 0xf7,
		0x42, 0x12, 0x14, 0x81, 0xb9, 0xb8, 0x9b, 0xe6, 0xc2, 0x60, 0x24, 0xa9, 0xcf, 0xc1, 0x62, 0x70,
		0xc1, 0x82, 0x0c, 0x58, 0xb5, 0x7b, 0xa1, 0x67, 0xf9, 0x24, 0x20, 0xa1, 0xd5, 0xf5, 0x1c, 0x37,
		0x0c, 0x8a, 0x05, 0xe6, 0xfa, 0x76, 0x9a, 0x6b, 0x4c, 0xf1, 0x75, 0x06, 0xc7, 0x2b, 0xd4, 0x43,
		0xc2, 0x80, 0xae, 0xc3, 0x02, 0xed, 0x27, 0x8b, 0x36, 0x54, 0x71, 0x71, 0x53, 0xd8, 0x5a, 0xc0,
		0xf3, 0xd4, 0x50, 0x75, 0x82, 0x10, 0xad, 0xc3, 0x25, 0x27, 0xb0, 0x9a, 0xbe, 0xe7, 0x16, 0x97,
		0x36, 0x85, 0xad, 0x79, 0x3c, 0xe7, 0x04, 0xb2, 0xef, 0xb9, 0xe8, 0x29, 0x14, 0x7a, 0xdd, 0x96,
		0x1d, 0xf2, 0x1a, 0x5c, 0xce, 0xcc, 0x2d, 0x44, 0x70, 0x6a, 0x28, 0xfd, 0x26, 0x07, 0x37, 0x46,
		0xab, 0xca, 0x73, 0x4f, 0x9c, 0x53, 0x2e, 0x20, 0x48, 0x4a, 0x46, 0x15, 0x35, 0xec, 0xa7, 0x69,
		0x5b, 0x34, 0x79, 0xc4, 0x89, 0xd8, 0x6d, 0xd8, 0x1c, 0x54, 0x00, 0x6f, 0x35, 0xcf, 0x1a, 0x34,
		0x8e, 0xd7, 0x0b, 0x79, 0xeb, 0x5e, 0x1b, 0x89, 0x5b, 0xe1, 0x71, 0xe0, 0x8f, 0xfa, 0x2e, 0x0c,
		0xd6, 0x7e, 0x9e, 0x1c, 0xb7, 0x92, 0xd7, 0x0b, 0xd1, 0x21, 0x5c, 0x67, 0x51, 0x4e, 0xf0, 0x9e,
		0xcf, 0xf2, 0xbe, 0x4e, 0xd9, 0x63, 0x1c, 0x97, 0xfe, 0x2e, 0xc0, 0xe5, 0x31, 0xa5, 0x4e, 0x0f,
		0xab, 0xe5, 0x75, 0x6c, 0xc7, 0xb5, 0x9c, 0x16, 0x4b, 0xcb, 0x02, 0x9e, 0x8f, 0x0c, 0x5a, 0x0b,
		0xdd, 0x84, 0x02, 0x5f, 0x74, 0xed, 0x4e, 0x24, 0x4b, 0x0b, 0x18, 0x22, 0x93, 0x6e, 0x77, 0xc8,
		0x04, 0x39, 0xcc, 0xff, 0x97, 0xe4, 0xf0, 0x16, 0x2c, 0x3a, 0xae, 0x13, 0x3a, 0x76, 0x48, 0x5a,
		0x34, 0xbc, 0x19, 0xd6, 0xfb, 0x85, 0xbe, 0x4d, 0x6b, 0x95, 0x7e, 0x25, 0xc0, 0x9a, 0xfa, 0x3e,
		0x24, 0xbe, 0x6b, 0xb7, 0x7f, 0x48, 0xa5, 0xbe, 0x18, 0x5a, 0x6e, 0x34, 0xb4, 0x7f, 0xcd, 0xc2,
		0xe5, 0x3a, 0x71, 0x5b, 0x8e, 0x7b, 0x2a, 0x35, 0x43, 0xe7, 0xad, 0x13, 0x9e, 0xb3, 0xc0, 0x6e,
		0x42, 0xc1, 0xe6, 0xcf, 0x83, 0x9c, 0x43, 0x6c, 0xd2, 0x5a, 0xe8, 0x00, 0x96, 0xfa, 0x80, 0x69,
		0xc7, 0x41, 0xfc, 0x06, 0x36, 0x0e, 0x16, 0xed, 0xc4, 0x13, 0xda, 0x83, 0x59, 0x2a, 0xcd, 0xd1,
		0x44, 0x58, 0x7e, 0x70, 0x3f, 0x55, 0x0c, 0x87, 0xe3, 0xa5, 0x2a, 0x4c, 0x70, 0x44, 0x47, 0x75,
		0x58, 0x3d, 0x23, 0xb6, 0x1f, 0x1e, 0x13, 0x3b, 0xb4, 0x5a, 0x24, 0xb4, 0x9d, 0x76, 0xc0, 0x47,
		0xc5, 0x27, 0xe9, 0x02, 0x7b, 0xde, 0xf6, 0xec, 0x16, 0x16, 0xfb, 0x6c, 0x25, 0x22, 0xa3, 0x6f,
		0xe0, 0x72, 0xdb, 0x0e, 0x42, 0x6b, 0xe0, 0x96, 0xb5, 0xfe, 0x6c, 0x66, 0xeb, 0xaf, 0x52, 0xda,
		0x7e, 0xcc, 0x62, 0xd2, 0xba, 0x07, 0xcc, 0x18, 0x35, 0x0e, 0x69, 0x45, 0x9e, 0xe6, 0x32, 0x3d,
		0xad, 0x50, 0x92, 0x11, 0x71, 0x98, 0x9f, 0x22, 0x5c, 0xb2, 0xc3, 0x90, 0x74, 0xba, 0x21, 0x1b,
		0x1e, 0xb3, 0x38, 0x7e, 0x44, 0x77, 0x40, 0xec, 0xd8, 0xef, 0x9d, 0x4e, 0xaf, 0x63, 0x71, 0x53,
		0xc0, 0x26, 0xc0, 0x2c, 0x5e, 0xe1, 0x76, 0x89, 0x9b, 0xe9, 0xa8, 0x08, 0x9a, 0x67, 0xa4, 0xd5,
		0x6b, 0xc7, 0x91, 0x2c, 0x64, 0x8f, 0x8a, 0x3e, 0x83, 0xc5, 0x21, 0xc3, 0x0a, 0x79, 0xdf, 0x75,
		0xa2, 0xb6, 0x8e, 0x7c, 0x40, 0xa6, 0x8f, 0xe5, 0x01, 0x85, 0x27, 0x65, 0x91, 0x25, 0xe5, 0xc4,
		0x76, 0xda, 0x3d, 0x9f, 0x70, 0x65, 0x4f, 0x3d, 0xad, 0xbd, 0x08, 0x8a, 0x0b, 0x94, 0xc8, 0x1f,
		0xd0, 0x7d, 0xb8, 0xc2, 0xfc, 0xd0, 0x3e, 0x20, 0xbe, 0xe5, 0xb4, 0x88, 0x1b, 0x3a, 0xe1, 0x39,
		0x17, 0x77, 0x44, 0xd7, 0x0e, 0xd9, 0x92, 0xc6, 0x57, 0x4a, 0x7f, 0xc9, 0xc1, 0x35, 0x5e, 0x4c,
		0xf2, 0x99, 0xd3, 0x6e, 0xfd, 0x90, 0xbd, 0x79, 0x37, 0xe1, 0x9d, 0xf6, 0x4f, 0x52, 0xbc, 0xc4,
		0x77, 0x89, 0x7b, 0x13, 0x93, 0xb0, 0x8b, 0x9d, 0x9c, 0x1f, 0xe9, 0x64, 0xf4, 0x33, 0xe0, 0x17,
		0x02, 0xae, 0xc6, 0x5d, 0xaf, 0xed, 0x34, 0xcf, 0x59, 0xed, 0x2f, 0xa7, 0xc7, 0x1b, 0x29, 0x2e,
		0x13, 0xe2, 0x3a, 0x23, 0xe1, 0xd5, 0xee, 0x45, 0x13, 0xba, 0x0a, 0x73, 0x91, 0xa4, 0xb2, 0xca,
		0x5f, 0xc0, 0xfc, 0xa9, 0xf4, 0xb7, 0x5c, 0x5f, 0x40, 0x14, 0xd2, 0x74, 0x82, 0x38, 0x7b, 0xfd,
		0x86, 0x16, 0xa6, 0x6e, 0xe8, 0x98, 0x3f, 0xd4, 0xd0, 0xa3, 0x55, 0x9a, 0xfb, 0xd0, 0x2a, 0x7d,
		0x06, 0x8b, 0x43, 0x0d, 0x97, 0x7d, 0xe9, 0x2c, 0x04, 0xe3, 0x9b, 0x6d, 0x66, 0xb8, 0xd9, 0x30,
		0xac, 0x7b, 0xbe, 0x73, 0xea, 0xb8, 0x76, 0xdb, 0xba, 0x10, 0x64, 0xb6, 0x3c, 0xac, 0xc5, 0x54,
		0x23, 0x19, 0x6c, 0xe9, 0x4f, 0x39, 0xb8, 0x16, 0x2b, 0x5b, 0xd5, 0x6b, 0xda, 0x6d, 0xc5, 0x09,
		0xba, 0x76, 0xd8, 0x3c, 0x9b, 0x4e, 0x96, 0xff, 0xf7, 0xe9, 0xfa, 0x39, 0xdc, 0x18, 0x8e, 0xc0,
		0xf2, 0x4e, 0xac, 0xf0, 0xcc, 0x09, 0xac, 0x64, 0x16, 0xd3, 0x1d, 0x6e, 0x0c, 0x45, 0x54, 0x3b,
		0x31, 0xcf, 0x9c, 0x80, 0xeb, 0x16, 0xfa, 0x18, 0x80, 0x5d, 0x3e, 0x42, 0xef, 0x0d, 0x89, 0x8a,
		0x71, 0x11, 0xb3, 0x4b, 0x93, 0x49, 0x0d, 0xa5, 0x6f, 0xa1, 0x90, 0xbc, 0xe6, 0xed, 0xc2, 0x1c,
		0xbf, 0x30, 0x0a, 0x9b, 0xf9, 0xad, 0xc2, 0x83, 0xf2, 0x74, 0x17, 0x46, 0x76, 0xc1, 0xe6, 0xcc,
		0xd2, 0x1f, 0x72, 0xb0, 0x3c, 0xbc, 0x84, 0x6e, 0xc3, 0xca, 0xb1, 0xe3, 0xda, 0xfe, 0xb9, 0xd5,
		0x3c, 0x23, 0xcd, 0x37, 0x41, 0xaf, 0xc3, 0xcf, 0x62, 0x39, 0x32, 0xcb, 0xdc, 0x8a, 0xd6, 0x60,
		0xce, 0xef, 0xb9, 0xf1, 0xf0, 0x5d, 0xc0, 0xb3, 0x7e, 0x8f, 0xde, 0x59, 0x9e, 0xc1, 0xf5, 0x13,
		0xc7, 0x0f, 0xe8, 0x88, 0x8a, 0x6a, 0xde, 0x6a, 0x7a, 0x9d, 0x6e, 0x9b, 0x0c, 0xb5, 0x77, 0x91,
		0x41, 0xe2, 0xae, 0x90, 0x63, 0x00, 0xa3, 0x2f, 0x36, 0x7d, 0x62, 0xf7, 0x8f, 0x28, 0x3b, 0xa3,
		0x05, 0x8e, 0x67, 0x47, 0xf4, 0x1c, 0x96, 0x98, 0x06, 0x3b, 0xee, 0xe9, 0xb4, 0xd5, 0xba, 0x18,
		0x13, 0x98, 0x83, 0x1b, 0x00, 0xec, 0x32, 0x1e, 0xda, 0xc7, 0xed, 0x68, 0x80, 0xcd, 0xe3, 0x84,
		0xa5, 0xfc, 0x47, 0x01, 0xae, 0x8c, 0x9b, 0xd2, 0xa8, 0x04, 0x37, 0xea, 0xaa, 0xae, 0x68, 0xfa,
		0x0b, 0x4b, 0x92, 0x4d, 0xed, 0x95, 0x66, 0x1e, 0x59, 0x86, 0x29, 0x99, 0xaa, 0xa5, 0xe9, 0xaf,
		0xa4, 0xaa, 0xa6, 0x88, 0xff, 0x87, 0x3e, 0x85, 0xcd, 0x09, 0x18, 0x43, 0xde, 0x57, 0x95, 0x46,
		0x55, 0x55, 0x44, 0x21, 0xc5, 0x93, 0x61, 0x4a, 0xd8, 0x54, 0x15, 0x31, 0x87, 0xfe, 0x1f, 0x6e,
		0x4f, 0xc0, 0xc8, 0x92, 0x2e, 0xab, 0x55, 0x0b, 0xab, 0xdf, 0x36, 0x54, 0x83, 0x82, 0xf3, 0xe5,
		0x5f, 0x0c, 0x62, 0x1e, 0x12, 0xa2, 0xe4, 0x9b, 0x14, 0x55, 0xd6, 0x0c, 0xad, 0xa6, 0xa7, 0xc5,
		0x7c, 0x01, 0x33, 0x21, 0xe6, 0x8b, 0xa8, 0x38, 0xe6, 0xf2, 0x2f, 0x73, 0x83, 0xaf, 0x7a, 0xad,
		0x85, 0x49, 0xaf, 0xaf, 0xc0, 0x9f, 0xc2, 0xe6, 0x61, 0x0d, 0xbf, 0xdc, 0xab, 0xd6, 0x0e, 0x2d,
		0x4d, 0xb1, 0xb0, 0xda, 0x30, 0x54, 0xab, 0x5e, 0xab, 0x6a, 0xf2, 0x51, 0x22, 0x92, 0xaf, 0xe0,
		0xd1, 0x44, 0x94, 0x54, 0xa5, 0x56, 0xa5, 0x51, 0xaf, 0x6a, 0x32, 0x7d, 0xeb, 0x9e, 0xa4, 0x55,
		0x55, 0xc5, 0xaa, 0xe9, 0xd5, 0x23, 0x51, 0x40, 0x77, 0x61, 0x6b, 0x5a, 0xa6, 0x98, 0x43, 0xf7,
		0xe0, 0xce, 0x44, 0x34, 0x56, 0xbf, 0x51, 0x65, 0x33, 0x01, 0xcf, 0xa3, 0x1d, 0xb8, 0x37, 0x11,
		0x6e, 0xaa, 0xf8, 0x40, 0xd3, 0x59, 0x42, 0xf7, 0x2c, 0xdc, 0xd0, 0x75, 0x4d, 0x7f, 0x21, 0xce,
		0x94, 0x7f, 0x2b, 0xc0, 0xea, 0xc8, 0x68, 0x42, 0x37, 0xe1, 0x7a, 0x5d, 0xc2, 0xaa, 0x6e, 0x5a,
		0x72, 0xb5, 0x36, 0x2e, 0x01, 0x13, 0x00, 0xd2, 0xae, 0xa4, 0x2b, 0x35, 0x5d, 0x14, 0xd0, 0xe7,
		0x50, 0x1a, 0x07, 0xe0, 0xb5, 0xc0, 0x4b, 0x43, 0xcc, 0xa1, 0x5b, 0xf0, 0xf1, 0x38, 0x5c, 0x3f,
		0x5a, 0x31, 0x5f, 0xfe, 0x67, 0x0e, 0x3e, 0x4a, 0xfb, 0x9d, 0x80, 0x56, 0x60, 0x7f, 0xdb, 0xea,
		0x6b, 0x55, 0x6e, 0x98, 0xf4, 0xcc, 0x23, 0x7f, 0xf4, 0xe4, 0x1b, 0x46, 0x22, 0xf2, 0x64, 0x4a,
		0x27, 0x80, 0xe5, 0xda, 0x41, 0xbd, 0xaa, 0x9a, 0xac, 0x9a, 0xca, 0xf0, 0x79, 0x16, 0x3c, 0x3a,
		0x60, 0x31, 0x37, 0x74, 0xb6, 0x93, 0x5c, 0xb3, 0x7d, 0xd3, 0x56, 0x40, 0x15, 0x28, 0x67, 0xa1,
		0xfb, 0x59, 0x50, 0xc4, 0x19, 0xf4, 0x08, 0xee, 0x67, 0x07, 0xae, 0x9b, 0x9a, 0xde, 0x50, 0x15,
		0x4b, 0x32, 0x2c, 0x5d, 0x3d, 0x14, 0x67, 0xa7, 0xd9, 0xae, 0xa9, 0x1d, 0xd0, 0xfa, 0x6c, 0x98,
		0xe2, 0x5c, 0xf9, 0xcf, 0x02, 0x5c, 0x95, 0x3d, 0x37, 0x74, 0xdc, 0x1e, 0x91, 0x02, 0x9d, 0xbc,
		0xd3, 0xa2, 0xcb, 0x8f, 0xe7, 0xa3, 0xcf, 0xe0, 0x56, 0xec, 0x9f, 0xbb, 0xb7, 0x34, 0x5d, 0x33,
		0x35, 0xc9, 0xac, 0xe1, 0x44, 0x7e, 0x53, 0x61, 0xb4, 0x21, 0x15, 0x15, 0x47, 0x79, 0x9d, 0x0c,
		0xc3, 0xaa, 0x89, 0x8f, 0x78, 0x29, 0x44, 0x0a, 0x33, 0x19, 0x2b, 0x63, 0xda, 0xdf, 0xbc, 0xff,
		0xc5, 0x7c, 0xf9, 0x77, 0x02, 0x14, 0xf8, 0x97, 0x2e, 0xfb, 0xe6, 0x29, 0xc2, 0x15, 0xba, 0xc1,
		0x5a, 0xc3, 0xb4, 0xcc, 0xa3, 0xba, 0x3a, 0x5c, 0xc3, 0x43, 0x2b, 0x4c, 0x1e, 0x2c, 0xb3, 0x16,
		0x65, 0x27, 0x52, 0x92, 0x61, 0x00, 0x7f, 0x0b, 0xc5, 0x30, 0xb0, 0x98, 0x4b, 0xc5, 0x44, 0x7e,
		0xf2, 0x68, 0x03, 0xae, 0x0e, 0x61, 0xf6, 0x55, 0x09, 0x9b, 0xbb, 0xaa, 0x64, 0x8a, 0x33, 0xe5,
		0x5f, 0x0b, 0x70, 0x2d, 0x56, 0x42, 0x93, 0xce, 0x57, 0xa7, 0x43, 0x5a, 0xb5, 0x5e, 0x28, 0xdb,
		0xbd, 0x80, 0xa0, 0x3b, 0xf0, 0x59, 0x5f, 0xc3, 0x4c, 0xc9, 0x78, 0x39, 0x38, 0x2b, 0x4b, 0x96,
		0x68, 0x73, 0x0f, 0x76, 0x93, 0x09, 0xe5, 0x21, 0x88, 0x02, 0xba, 0x0d, 0x9f, 0xa4, 0x43, 0xb1,
		0x6a, 0xa8, 0xa6, 0x98, 0x2b, 0xff, 0xa3, 0x00, 0xeb, 0xc9, 0xe0, 0xe8, 0x47, 0x00, 0x69, 0x45,
		0xa1, 0x7d, 0x0e, 0xa5, 0x61, 0x27, 0x5c, 0xe7, 0x2e, 0xc6, 0xb5, 0x03, 0xf7, 0x52, 0x70, 0x0d,
		0x7d, 0x5f, 0xd2, 0x15, 0xfa, 0x1c, 0x83, 0x44, 0x01, 0x3d, 0x87, 0xa7, 0x29, 0x94, 0x5d, 0x49,
		0x19, 0x64, 0xb9, 0x3f, 0x71, 0x24, 0xd3, 0xc4, 0xda, 0x6e, 0xc3, 0x54, 0x0d, 0x31, 0x87, 0x54,
		0x90, 0x32, 0x1c, 0x0c, 0xeb, 0xd0, 0x58, 0x37, 0x79, 0xf4, 0x04, 0xbe, 0xc8, 0x8a, 0x23, 0x2a,
		0x19, 0xed, 0x40, 0xc5, 0x49, 0xea, 0x0c, 0xfa, 0x11, 0x7c, 0x99, 0x41, 0xe5, 0x6f, 0x1e, 0xe1,
		0xce, 0xa2, 0xa7, 0xf0, 0x38, 0x33, 0x7a, 0xb9, 0x86, 0x15, 0xeb, 0x40, 0xc2, 0x2f, 0x87, 0xc9,
		0x73, 0x48, 0x03, 0x35, 0xeb, 0xc5, 0x5c, 0xdd, 0xac, 0x31, 0xba, 0x90, 0x70, 0x75, 0x69, 0x8a,
		0x2c, 0x52, 0x43, 0x86, 0x9b, 0x79, 0xf4, 0x02, 0xe4, 0xe9, 0x52, 0x91, 0xee, 0x68, 0x01, 0xbd,
		0x06, 0xf3, 0xc3, 0x4e, 0x55, 0x7d, 0x6d, 0xaa, 0x58, 0x97, 0xb2, 0x3c, 0x03, 0x7a, 0x06, 0x4f,
		0x32, 0x93, 0x36, 0xac, 0x3f, 0x09, 0x7a, 0x01, 0x3d, 0x86, 0x87, 0x29, 0xf4, 0x64, 0x8d, 0x0c,
		0x6e, 0x05, 0x9a, 0x22, 0x2e, 0xa2, 0x2f, 0x60, 0x27, 0x85, 0xc8, 0xba, 0xd0, 0x32, 0x4c, 0x4d,
		0x7e, 0x79, 0x14, 0x2d, 0x57, 0x35, 0xc3, 0x14, 0x97, 0xd0, 0x4f, 0xe0, 0xeb, 0x14, 0x5a, 0x7f,
		0xb3, 0xf4, 0x0f, 0x15, 0x27, 0x5a, 0x8c, 0xc2, 0x1a, 0x58, 0x15, 0x97, 0xa7, 0x38, 0x13, 0x43,
		0x7b, 0x91, 0x9d, 0xb9, 0x15, 0x24, 0xc3, 0xf3, 0xa9, 0x5a, 0x44, 0xde, 0xd7, 0xaa, 0xca, 0x78,
		0x27, 0x22, 0x7a, 0x08, 0xdb, 0x29, 0x4e, 0xf6, 0x6a, 0x58, 0x56, 0xf9, 0xc4, 0xea, 0x8b, 0xc4,
		0x2a, 0xfa, 0x12, 0x1e, 0xa4, 0x91, 0x24, 0xad, 0x5a, 0x7b, 0xa5, 0xe2, 0x8b, 0x3c, 0x44, 0xc7,
		0xe8, 0x74, 0x5b, 0xd7, 0xf4, 0x7a, 0xc3, 0xb4, 0x0c, 0xed, 0x3b, 0x55, 0xbc, 0x4c, 0xc7, 0x68,
		0xe6, 0x49, 0xc5, 0xb9, 0x12, 0xaf, 0x8c, 0x8a, 0xf1, 0xc8, 0x4b, 0x76, 0x35, 0x5d, 0xc2, 0x47,
		0xe2, 0x5a, 0x46, 0xed, 0x8d, 0x0a, 0xdd, 0x50, 0x09, 0x5d, 0x9d, 0x66, 0x3b, 0xaa, 0x84, 0xe5,
		0xfd, 0x64, 0xc6, 0xd7, 0xe9, 0xd4, 0xb9, 0xc5, 0x7e, 0x8c, 0x19, 0xb9, 0x57, 0x25, 0x25, 0x7e,
		0x07, 0xee, 0x45, 0xe7, 0x36, 0xa6, 0x0a, 0x26, 0xa8, 0xfd, 0x2e, 0xfc, 0x78, 0x3a, 0x4a, 0x7f,
		0x5d, 0xaa, 0x62, 0x55, 0x52, 0x8e, 0xfa, 0x57, 0x52, 0xa1, 0xfc, 0x57, 0x01, 0xca, 0xb2, 0xed,
		0x36, 0x49, 0x3b, 0xfe, 0x39, 0x37, 0x35, 0xca, 0xa7, 0xf0, 0x78, 0x8a, 0x7e, 0x9f, 0x10, 0xef,
		0x21, 0x18, 0x1f, 0x4a, 0x6e, 0xe8, 0x2f, 0xf5, 0xda, 0xa1, 0x9e, 0x46, 0xe0, 0x9b, 0x30, 0x9c,
		0x53, 0xf6, 0x5b, 0xf4, 0x74, 0x9b, 0xe0, 0x65, 0xf7, 0x9f, 0x6d, 0xe2, 0x43, 0xc9, 0x53, 0x6d,
		0x62, 0xf7, 0x7b, 0x58, 0x6f, 0x7a, 0x9d, 0x71, 0x5f, 0xf1, 0xbb, 0x4b, 0xf1, 0x76, 0xea, 0xf4,
		0x33, 0xb6, 0x2e, 0x7c, 0xb7, 0x7d, 0xea, 0x84, 0x67, 0xbd, 0xe3, 0x4a, 0xd3, 0xeb, 0x6c, 0x0f,
		0xfd, 0x5f, 0xb5, 0x72, 0x4a, 0xdc, 0xe8, 0xbf, 0xb4, 0xfc, 0x5f, 0xac, 0x4f, 0xed, 0xae, 0xf3,
		0x76, 0xe7, 0x78, 0x8e, 0xd9, 0x1e, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xa7, 0x58, 0x50,
		0x29, 0x1e, 0x00, 0x00,
	},
	// uber/cadence/api/v1/tasklist.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xff, 0x6e, 0xdb, 0x36,
		0x10, 0x9e, 0xe2, 0xb4, 0x4b, 0x98, 0x25, 0xd5, 0x88, 0xb5, 0x8d, 0xdd, 0xfd, 0x08, 0x84, 0xa1,
		0x0b, 0x8a, 0x41, 0x42, 0xb2, 0x3f, 0x37, 0x60, 0x70, 0xe2, 0x00, 0x15, 0xec, 0xb8, 0x86, 0xa4,
		0x05, 0xc8, 0x36, 0x80, 0xa3, 0xc4, 0xab, 0x43, 0xe8, 0x07, 0x05, 0x92, 0x72, 0x92, 0x17, 0xd9,
		0xfb, 0xec, 0x89, 0xf6, 0x0a, 0x03, 0x29, 0xd9, 0x73, 0x13, 0x0f, 0xeb, 0x7f, 0xe4, 0x7d, 0xf7,
		0xdd, 0xf1, 0xbe, 0xbb, 0x23, 0xf2, 0x9a, 0x14, 0x64, 0x90, 0x51, 0x06, 0x55, 0x06, 0x01, 0xad,
		0x79, 0xb0, 0x38, 0x09, 0x34, 0x55, 0x79, 0xc1, 0x95, 0xf6, 0x6b, 0x29, 0xb4, 0xc0, 0x03, 0x05,
		0x72, 0x01, 0xd2, 0x37, 0xae, 0x7e, 0xe7, 0xea, 0xd3, 0x9a, 0xfb, 0x8b, 0x93, 0xc1, 0xd7, 0x73,
		0x21, 0xe6, 0x05, 0x04, 0xd6, 0x33, 0x6d, 0xde, 0x07, 0xac, 0x91, 0x54, 0x73, 0x51, 0xb5, 0xdc,
		0xc1, 0x37, 0x0f, 0x71, 0xcd, 0x4b, 0x50, 0x9a, 0x96, 0x75, 0xe7, 0xf0, 0x28, 0xc0, 0xad, 0xa4,
		0x75, 0x0d, 0x52, 0xb5, 0xb8, 0xf7, 0x3b, 0xda, 0x49, 0xa8, 0xca, 0x27, 0x5c, 0x69, 0x8c, 0xd1,
		0x76, 0x45, 0x4b, 0x38, 0x74, 0x8e, 0x9c, 0xe3, 0xdd, 0xc8, 0x9e, 0xf1, 0x4f, 0x68, 0x3b, 0xe7,
		0x15, 0x3b, 0xdc, 0x3a, 0x72, 0x8e, 0x0f, 0x4e, 0x8f, 0xfd, 0xff, 0x7e, 0xab, 0xbf, 0x8c, 0x33,
		0xe6, 0x15, 0x8b, 0x2c, 0xcb, 0xa3, 0xc8, 0x5d, 0x5a, 0x2f, 0x41, 0x53, 0x46, 0x35, 0xc5, 0x97,
		0xe8, 0x8b, 0x92, 0xde, 0x11, 0x23, 0x82, 0x22, 0x35, 0x48, 0xa2, 0x20, 0x13, 0x15, 0xb3, 0x59,
		0xf7, 0x4e, 0xbf, 0xf4, 0xdb, 0x07, 0xfb, 0xcb, 0x07, 0xfb, 0x23, 0xd1, 0xa4, 0x05, 0x5c, 0xd1,
		0xa2, 0x81, 0xe8, 0xf3, 0x92, 0xde, 0x99, 0x80, 0x6a, 0x06, 0x32, 0xb6, 0x34, 0xef, 0x17, 0xd4,
		0x5f, 0xa6, 0x98, 0x51, 0xa9, 0xb9, 0x11, 0x67, 0x95, 0xcb, 0x45, 0xbd, 0x1c, 0xee, 0xbb, 0x82,
		0xcc, 0x11, 0xbf, 0x46, 0xcf, 0xc4, 0x6d, 0x05, 0x92, 0xdc, 0x08, 0xa5, 0x89, 0x2d, 0x77, 0xcb,
		0xa2, 0xfb, 0xd6, 0xfc, 0x56, 0x28, 0x3d, 0xa5, 0x25, 0x78, 0x7f, 0x3b, 0xe8, 0x60, 0x19, 0x37,
		0xd6, 0x54, 0x37, 0x0a, 0x7f, 0x8f, 0x70, 0x4a, 0xb3, 0xbc, 0x10, 0x73, 0x92, 0x89, 0xa6, 0xd2,
		0xe4, 0x86, 0x57, 0xda, 0xc6, 0xee, 0x45, 0x6e, 0x87, 0x9c, 0x1b, 0xe0, 0x2d, 0xaf, 0x34, 0xfe,
		0x0a, 0x21, 0x09, 0x94, 0x91, 0x02, 0x16, 0x50, 0xd8, 0x1c, 0xbd, 0x68, 0xd7, 0x58, 0x26, 0xc6,
		0x80, 0x5f, 0xa1, 0x5d, 0x9a, 0xe5, 0x1d, 0xda, 0xb3, 0xe8, 0x0e, 0xcd, 0xf2, 0x16, 0x7c, 0x8d,
		0x9e, 0x49, 0xaa, 0x61, 0x5d, 0x9d, 0xed, 0x23, 0xe7, 0xd8, 0x89, 0xf6, 0x8d, 0x79, 0x55, 0x3b,
		0x1e, 0xa3, 0x7d, 0x23, 0x23, 0xe1, 0x8c, 0xa4, 0x85, 0xc8, 0xf2, 0xc3, 0x27, 0x56, 0xc3, 0xef,
		0xfe, 0xaf, 0x4b, 0xe1, 0xe8, 0xcc, 0xb8, 0x47, 0x7b, 0x86, 0x1d, 0x32, 0x7b, 0xf1, 0x7e, 0x46,
		0x7b, 0x6b, 0x18, 0xee, 0xa3, 0x1d, 0xa5, 0xa9, 0xd4, 0x84, 0xb3, 0xae, 0xc6, 0x4f, 0xed, 0x3d,
		0x64, 0xf8, 0x39, 0x7a, 0x0a, 0x15, 0x33, 0x40, 0x5b, 0xd6, 0x13, 0xa8, 0x58, 0xc8, 0xbc, 0x3f,
		0x1d, 0x84, 0x66, 0xa2, 0x28, 0x40, 0x86, 0xd5, 0x7b, 0x81, 0x47, 0xc8, 0x2d, 0xa8, 0xd2, 0x84,
		0x66, 0x19, 0x28, 0x45, 0xcc, 0x60, 0x76, 0x3d, 0x1e, 0x3c, 0xea, 0x71, 0xb2, 0x9c, 0xda, 0xe8,
		0xc0, 0x70, 0x86, 0x96, 0x62, 0x8c, 0x78, 0x80, 0x76, 0x38, 0x83, 0x4a, 0x73, 0x7d, 0xdf, 0x35,
		0x6a, 0x75, 0xdf, 0x24, 0x53, 0x6f, 0x83, 0x4c, 0xde, 0x5f, 0x0e, 0xea, 0xc7, 0x9a, 0x67, 0xf9,
		0xfd, 0xc5, 0x1d, 0x64, 0x8d, 0x99, 0x90, 0xa1, 0xd6, 0x92, 0xa7, 0x8d, 0x06, 0x85, 0xa7, 0xc8,
		0xbd, 0x15, 0x32, 0x07, 0x69, 0x47, 0x92, 0x98, 0xc5, 0xec, 0xde, 0xf9, 0xed, 0xc7, 0x4c, 0x7b,
		0x74, 0xd0, 0xb2, 0x57, 0x5b, 0x94, 0xa0, 0xbe, 0xca, 0x6e, 0x80, 0x35, 0x05, 0x10, 0x2d, 0x48,
		0x2b, 0xa2, 0xa9, 0x5e, 0x34, 0xda, 0x96, 0xb0, 0x77, 0xda, 0x7f, 0x3c, 0xe4, 0xdd, 0x5a, 0x47,
		0x2f, 0x96, 0xdc, 0x44, 0xc4, 0x86, 0x99, 0xb4, 0xc4, 0x37, 0x7f, 0xa0, 0xcf, 0xd6, 0xf7, 0x0b,
		0x0f, 0xd0, 0x8b, 0x64, 0x18, 0x8f, 0xc9, 0x24, 0x8c, 0x13, 0x32, 0x0e, 0xa7, 0x23, 0x12, 0x4e,
		0xaf, 0x86, 0x93, 0x70, 0xe4, 0x7e, 0x82, 0xfb, 0xe8, 0xf9, 0x03, 0x6c, 0xfa, 0x2e, 0xba, 0x1c,
		0x4e, 0x5c, 0x67, 0x03, 0x14, 0x27, 0xe1, 0xf9, 0xf8, 0xda, 0xdd, 0x7a, 0xc3, 0xfe, 0xcd, 0x90,
		0xdc, 0xd7, 0xf0, 0x61, 0x86, 0xe4, 0x7a, 0x76, 0xb1, 0x96, 0xe1, 0x15, 0x7a, 0xf9, 0x00, 0x1b,
		0x5d, 0x9c, 0x87, 0x71, 0xf8, 0x6e, 0xea, 0x3a, 0x1b, 0xc0, 0xe1, 0x79, 0x12, 0x5e, 0x85, 0xc9,
		0xb5, 0xbb, 0x75, 0xf6, 0x1b, 0x7a, 0x99, 0x89, 0x72, 0x93, 0xa2, 0x67, 0xfb, 0xab, 0x3d, 0x36,
		0xaa, 0xcc, 0x9c, 0x5f, 0x83, 0x39, 0xd7, 0x37, 0x4d, 0xea, 0x67, 0xa2, 0x0c, 0x3e, 0xf8, 0x47,
		0xfd, 0x39, 0x54, 0xed, 0x8f, 0xd6, 0x7d, 0xa9, 0x3f, 0xd2, 0x9a, 0x2f, 0x4e, 0xd2, 0xa7, 0xd6,
		0xf6, 0xc3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xca, 0xe9, 0x31, 0x9b, 0x76, 0x05, 0x00, 0x00,
	},
	// uber/cadence/admin/v1/cluster.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x6b, 0xdb, 0x4e,
		0x10, 0x45, 0xd1, 0xcf, 0x3f, 0xdb, 0xe3, 0xd0, 0xa4, 0x4b, 0x4b, 0x4d, 0xff, 0x80, 0xab, 0x42,
		0x30, 0x14, 0xa4, 0x3a, 0xa1, 0x97, 0x36, 0x94, 0x90, 0x94, 0x52, 0x43, 0xff, 0xb1, 0xbd, 0xf5,
		0x22, 0x56, 0xab, 0xb1, 0xb5, 0xc4, 0xbb, 0x1b, 0x56, 0x2b, 0x81, 0xcf, 0x3d, 0xf7, 0x6b, 0xb5,
		0x5f, 0xab, 0x68, 0x57, 0x12, 0x0d, 0x4d, 0x83, 0x6f, 0x33, 0xb3, 0xef, 0x3d, 0xbd, 0x99, 0xd1,
		0xc0, 0xb3, 0x2a, 0x43, 0x93, 0x70, 0x96, 0xa3, 0xe2, 0x98, 0xb0, 0x5c, 0x0a, 0x95, 0xd4, 0x8b,
		0x84, 0x6f, 0xaa, 0xd2, 0xa2, 0x89, 0xaf, 0x8c, 0xb6, 0x9a, 0x3c, 0x2e, 0xd1, 0xd4, 0x68, 0xe2,
		0x06, 0x1b, 0xb7, 0xd8, 0xd8, 0x61, 0xe3, 0x7a, 0x11, 0x1d, 0xc1, 0xe8, 0xbd, 0x2e, 0xed, 0x52,
		0xad, 0x34, 0x79, 0x08, 0x23, 0x91, 0xa3, 0xb2, 0xc2, 0x6e, 0xa7, 0xc1, 0x2c, 0x98, 0x8f, 0x69,
		0x9f, 0x47, 0xdf, 0x03, 0x18, 0x51, 0xa1, 0xd6, 0x0e, 0x48, 0xe0, 0x3f, 0xa3, 0x37, 0xd8, 0x82,
		0x5c, 0x4c, 0x9e, 0xc2, 0xbe, 0x44, 0x99, 0xa1, 0x49, 0xb9, 0xae, 0x94, 0x9d, 0xee, 0xcd, 0x82,
		0xf9, 0x80, 0x4e, 0x7c, 0xed, 0xa2, 0x29, 0x91, 0x33, 0x18, 0xfa, 0xb4, 0x9c, 0x86, 0xb3, 0x70,
		0x3e, 0x39, 0x3e, 0x8a, 0x6f, 0xf3, 0x16, 0x77, 0xc6, 0x68, 0x47, 0x8b, 0x7e, 0x06, 0x70, 0xe7,
		0xa3, 0x8f, 0x0b, 0x71, 0xe5, 0xbc, 0x2c, 0x61, 0x9f, 0x57, 0xc6, 0xa0, 0xb2, 0x69, 0xa1, 0x4b,
		0xeb, 0x3c, 0xed, 0xae, 0x3c, 0x69, 0xb9, 0x4d, 0x81, 0x3c, 0x87, 0xbb, 0x06, 0x19, 0x2f, 0x58,
		0xb6, 0xc1, 0xb4, 0x73, 0xba, 0x37, 0x0b, 0xe7, 0x63, 0x7a, 0xd8, 0x3f, 0xb4, 0x9f, 0x27, 0xa7,
		0x30, 0x30, 0x42, 0xad, 0x77, 0x6c, 0xa5, 0x1b, 0x1d, 0xf5, 0xa4, 0xe8, 0x47, 0x00, 0x07, 0x6f,
		0xb5, 0x64, 0x42, 0x5d, 0x30, 0x5e, 0xa0, 0xeb, 0xe4, 0x15, 0x3c, 0x52, 0x95, 0x4c, 0xf5, 0x2a,
		0x15, 0x16, 0x65, 0x99, 0x0a, 0x95, 0xf2, 0xe6, 0x31, 0xcd, 0xb6, 0xa9, 0xc8, 0x5d, 0x63, 0x21,
		0xbd, 0xaf, 0x2a, 0xf9, 0x79, 0xb5, 0x6c, 0x00, 0x4b, 0xcf, 0x3d, 0xdf, 0x2e, 0x73, 0xf2, 0x06,
		0x9e, 0xfc, 0x93, 0xab, 0x98, 0x44, 0xb7, 0x8e, 0x90, 0x3e, 0xb8, 0x81, 0xfd, 0x89, 0x49, 0x8c,
		0x4e, 0x81, 0x7c, 0x41, 0x53, 0x8a, 0xd2, 0x36, 0xbe, 0xbf, 0xa2, 0xb5, 0x42, 0xad, 0xc9, 0x21,
		0x84, 0x97, 0xd8, 0xfd, 0x0b, 0x4d, 0x48, 0xee, 0xc1, 0xa0, 0x66, 0x9b, 0xca, 0xeb, 0x8d, 0xa9,
		0x4f, 0xa2, 0xb3, 0x6b, 0xec, 0x77, 0xc8, 0x6c, 0x65, 0xf0, 0x06, 0xf6, 0x14, 0x86, 0xa8, 0x9a,
		0x21, 0xe6, 0x8e, 0x3f, 0xa2, 0x5d, 0x1a, 0xfd, 0x0a, 0xe0, 0xe0, 0x0f, 0x09, 0x37, 0x8f, 0x29,
		0x0c, 0x33, 0xc6, 0x2f, 0x51, 0xe5, 0xad, 0x46, 0x97, 0x92, 0x0f, 0x30, 0x2a, 0xbd, 0x45, 0xbf,
		0x9f, 0xc9, 0xf1, 0x8b, 0xdb, 0xc7, 0xff, 0x77, 0x6f, 0xb4, 0x57, 0x68, 0xd4, 0x56, 0xde, 0x72,
		0xb7, 0xcc, 0xdd, 0xd5, 0xda, 0x5e, 0x69, 0xaf, 0x70, 0xfe, 0xf2, 0xdb, 0xc9, 0x5a, 0xd8, 0xa2,
		0xca, 0x62, 0xae, 0x65, 0x72, 0xed, 0x40, 0xe3, 0x35, 0xaa, 0xc4, 0x1d, 0x65, 0x7f, 0xab, 0xaf,
		0x5d, 0x50, 0x2f, 0xb2, 0xff, 0x5d, 0xfd, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xe7,
		0x4c, 0x6e, 0xd3, 0x03, 0x00, 0x00,
	},
	// uber/cadence/admin/v1/history.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xb1, 0x4a, 0x04, 0x31,
		0x14, 0xe4, 0xee, 0xd0, 0x93, 0xdc, 0x61, 0x91, 0x2a, 0x82, 0xc5, 0x79, 0x36, 0x57, 0xbd, 0xb8,
		0x1e, 0x56, 0x76, 0x16, 0xe2, 0xb6, 0x8b, 0x58, 0xd8, 0x1c, 0x9b, 0xe4, 0xb1, 0x1b, 0x24, 0x89,
		0x24, 0xd9, 0x80, 0xf8, 0xf3, 0xb2, 0xc9, 0x22, 0x2c, 0x82, 0xdd, 0x9b, 0x79, 0x33, 0xc3, 0x30,
		0xe4, 0x76, 0x10, 0xe8, 0xb9, 0x6c, 0x15, 0x5a, 0x89, 0xbc, 0x55, 0x46, 0x5b, 0x9e, 0x2a, 0xde,
		0xeb, 0x10, 0x9d, 0xff, 0x82, 0x4f, 0xef, 0xa2, 0xa3, 0xd7, 0x01, 0x7d, 0x42, 0x0f, 0xa3, 0x16,
		0x26, 0x2d, 0x64, 0x2d, 0xa4, 0x6a, 0x5f, 0x13, 0xfa, 0x86, 0x3e, 0x68, 0x67, 0x5f, 0x8a, 0xab,
		0x8e, 0x68, 0xe8, 0x15, 0xb9, 0xc0, 0x84, 0x36, 0x9e, 0xb4, 0x62, 0x8b, 0xdd, 0xe2, 0xb0, 0x6a,
		0xd6, 0x19, 0xd7, 0x8a, 0x32, 0xb2, 0x4e, 0xc5, 0xc0, 0x96, 0xe5, 0x33, 0xc1, 0xfd, 0x37, 0xb9,
		0x9c, 0x47, 0xd1, 0x1b, 0xb2, 0x15, 0xbe, 0xb5, 0xb2, 0x3f, 0x45, 0xf7, 0x81, 0x36, 0x47, 0x6d,
		0x9b, 0x4d, 0xe1, 0x5e, 0x47, 0x8a, 0x3e, 0x93, 0x33, 0x1d, 0xd1, 0x04, 0xb6, 0xdc, 0xad, 0x0e,
		0x9b, 0xfb, 0x3b, 0xf8, 0xaf, 0x2d, 0xfc, 0xad, 0xda, 0x14, 0xfb, 0xd3, 0xc3, 0xfb, 0xb1, 0xd3,
		0xb1, 0x1f, 0x04, 0x48, 0x67, 0xf8, 0x6c, 0x17, 0xe8, 0xd0, 0xf2, 0xbc, 0xc5, 0xef, 0x44, 0x8f,
		0xf9, 0x48, 0x95, 0x38, 0xcf, 0xfc, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xda, 0x4f, 0x3b,
		0x4a, 0x01, 0x00, 0x00,
	},
	// uber/cadence/admin/v1/queue.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4d, 0x6f, 0xdb, 0xc8,
		0x19, 0x36, 0x25, 0x7f, 0xc8, 0xaf, 0x1d, 0x87, 0x9e, 0x6c, 0x1a, 0xe5, 0xc3, 0x88, 0xa2, 0x00,
		0x1b, 0xc1, 0x4d, 0xe8, 0xda, 0x69, 0xd0, 0x36, 0x29, 0x16, 0x65, 0x28, 0xda, 0xe6, 0x46, 0x16,
		0xd5, 0x21, 0x1d, 0xaf, 0x83, 0x2d, 0xa6, 0x34, 0x35, 0x76, 0x88, 0x48, 0xa4, 0x96, 0xa4, 0x94,
		0xea, 0x0f, 0xf4, 0xd4, 0xf4, 0xde, 0xed, 0xad, 0x3f, 0xa1, 0x40, 0xef, 0x05, 0x7a, 0x58, 0xf4,
		0xda, 0xeb, 0x62, 0x7b, 0xeb, 0xa1, 0xbf, 0xa0, 0xd7, 0x82, 0x43, 0x4a, 0xa2, 0x28, 0xea, 0xcb,
		0xf1, 0x1e, 0x0a, 0xf4, 0x66, 0xbd, 0x7c, 0xe6, 0x9d, 0xe7, 0xfd, 0x98, 0x87, 0xef, 0x98, 0xf0,
		0xa0, 0x7d, 0x46, 0xdd, 0x1d, 0xd3, 0xa8, 0x53, 0xdb, 0xa4, 0x3b, 0x46, 0xbd, 0x69, 0xd9, 0x3b,
		0x9d, 0xdd, 0x9d, 0xaf, 0xda, 0xb4, 0x4d, 0x85, 0x96, 0xeb, 0xf8, 0x0e, 0xba, 0xe7, 0x51, 0xb7,
		0x43, 0x5d, 0x21, 0x40, 0x0a, 0x11, 0x52, 0x60, 0x48, 0xa1, 0xb3, 0x7b, 0xe7, 0xfe, 0x85, 0xe3,
		0x5c, 0x34, 0xe8, 0x0e, 0xc3, 0x9e, 0xb5, 0xcf, 0x77, 0x7c, 0xab, 0x49, 0x3d, 0xdf, 0x68, 0xb6,
		0xc2, 0xe5, 0x77, 0x0a, 0xc3, 0x3b, 0xb4, 0xac, 0xc0, 0xbf, 0xe9, 0x34, 0x9b, 0x8e, 0x1d, 0x21,
		0x1e, 0xa4, 0x21, 0xde, 0x5a, 0x9e, 0xef, 0xb8, 0xdd, 0x08, 0x52, 0x4c, 0x83, 0xbc, 0x77, 0xdc,
		0x77, 0xe7, 0x0d, 0xe7, 0x7d, 0x88, 0x29, 0xfe, 0x3b, 0x03, 0x9f, 0x48, 0xae, 0xe3, 0x79, 0x52,
		0xa3, 0xed, 0xf9, 0xd4, 0xd5, 0x0d, 0xef, 0x9d, 0x62, 0x9f, 0x3b, 0xe8, 0x2e, 0xac, 0xd6, 0x9d,
		0xa6, 0x61, 0xd9, 0xc4, 0xaa, 0xe7, 0xb9, 0x02, 0x57, 0x5a, 0xc5, 0xb9, 0xd0, 0xa0, 0xd4, 0xd1,
		0x97, 0x80, 0x7a, 0x7e, 0x08, 0xfd, 0x0d, 0x35, 0xdb, 0xbe, 0xe5, 0xd8, 0xf9, 0x4c, 0x81, 0x2b,
		0xad, 0xed, 0x3d, 0x11, 0x52, 0x43, 0x6f, 0x59, 0x42, 0x67, 0x57, 0x38, 0x89, 0x56, 0xc9, 0xbd,
		0x45, 0x78, 0xf3, 0x7d, 0xd2, 0x84, 0x54, 0x58, 0xf5, 0x0d, 0xef, 0x1d, 0xf1, 0xbb, 0x2d, 0x9a,
		0xcf, 0x16, 0xb8, 0xd2, 0xc6, 0xde, 0x9e, 0x30, 0x29, 0x9f, 0x42, 0x32, 0x02, 0xbd, 0xdb, 0xa2,
		0x38, 0xe7, 0x47, 0x7f, 0xa1, 0x2d, 0x00, 0xe6, 0xd0, 0xf3, 0x0d, 0x9f, 0xe6, 0x17, 0x0b, 0x5c,
		0x69, 0x09, 0xb3, 0x2d, 0xb4, 0xc0, 0x80, 0x6e, 0xc1, 0x0a, 0x7b, 0x6c, 0xd5, 0xf3, 0x4b, 0x05,
		0xae, 0x94, 0xc5, 0xcb, 0xc1, 0x4f, 0xa5, 0x8e, 0x8e, 0xe0, 0x93, 0x8e, 0xe5, 0x59, 0x67, 0x56,
		0xc3, 0xf2, 0xbb, 0xa4, 0x5f, 0xa3, 0xfc, 0x32, 0x0b, 0xf4, 0x8e, 0x10, 0x56, 0x51, 0xe8, 0x55,
		0x51, 0xd0, 0x7b, 0x08, 0x7c, 0x63, 0xb0, 0xae, 0x6f, 0x2c, 0x7e, 0x97, 0x81, 0x1f, 0xc5, 0x99,
		0x6a, 0xbe, 0xe1, 0xfa, 0xd2, 0x5b, 0xab, 0x51, 0x1f, 0xa4, 0x83, 0x7e, 0xd5, 0xa6, 0x9e, 0x2f,
		0xfa, 0xbe, 0x6b, 0x9d, 0xb5, 0x7d, 0xea, 0xa1, 0x12, 0xf0, 0xbe, 0xe1, 0x5e, 0x50, 0x9f, 0x24,
		0xcb, 0xb1, 0x11, 0xda, 0xcb, 0xbd, 0xa2, 0x6c, 0x01, 0xb8, 0xe1, 0xf2, 0x00, 0x93, 0x61, 0x98,
		0xd5, 0xc8, 0xa2, 0xd4, 0xd1, 0x63, 0x40, 0x96, 0x6d, 0xf9, 0x96, 0xe1, 0xd3, 0x3a, 0xa1, 0x1d,
		0x6a, 0x33, 0x58, 0x96, 0x05, 0xcc, 0xf7, 0x9f, 0xc8, 0xc1, 0x03, 0xa5, 0x8e, 0x3e, 0x70, 0x70,
		0x27, 0x09, 0x37, 0xfa, 0xac, 0x58, 0x0e, 0xd7, 0xf6, 0xd4, 0x49, 0xa5, 0x1e, 0x44, 0x37, 0x52,
		0x74, 0x65, 0x68, 0xb7, 0x41, 0xb0, 0x38, 0x6f, 0x8d, 0x79, 0x82, 0x8a, 0x70, 0x2d, 0x4a, 0x83,
		0xdb, 0xb6, 0x7b, 0x95, 0x5a, 0xc5, 0x6b, 0xa1, 0x11, 0xb7, 0x6d, 0xa5, 0x5e, 0xfc, 0x1c, 0x76,
		0xa7, 0xa6, 0xd7, 0x6b, 0x39, 0xb6, 0x47, 0x63, 0x8e, 0x6f, 0xc2, 0x72, 0xe4, 0x31, 0xcc, 0xea,
		0x92, 0xcb, 0x7c, 0xfd, 0x35, 0x03, 0x8f, 0xe3, 0xce, 0x24, 0xc3, 0x36, 0x69, 0xe3, 0x4a, 0xea,
		0x64, 0xc1, 0xed, 0x08, 0x79, 0x55, 0x67, 0xe8, 0x56, 0xe8, 0x6f, 0xe4, 0x41, 0xa2, 0x25, 0xb2,
		0xb3, 0xb5, 0xc4, 0xe2, 0x98, 0x96, 0x10, 0xe0, 0x86, 0x19, 0x64, 0x73, 0x40, 0xdb, 0xb1, 0x1b,
		0x5d, 0x56, 0x88, 0x1c, 0xde, 0x34, 0xe3, 0x95, 0x56, 0xed, 0x46, 0xb7, 0xb8, 0x03, 0x4f, 0x26,
		0x66, 0x30, 0x59, 0x8a, 0xe2, 0xdf, 0xb2, 0xc3, 0x39, 0xd7, 0xac, 0x0b, 0xdb, 0xf8, 0x7f, 0xce,
		0xe7, 0xc8, 0x39, 0xba, 0x0f, 0x6b, 0x1e, 0xcb, 0x1a, 0xb1, 0x8d, 0x26, 0x65, 0x42, 0xb5, 0x8a,
		0x21, 0x34, 0x55, 0x8d, 0x26, 0x45, 0xfb, 0xb0, 0x1e, 0x01, 0x2c, 0xbb, 0xd5, 0xf6, 0xf3, 0x2b,
		0x2c, 0xf6, 0x87, 0x93, 0x62, 0xaf, 0x19, 0xdd, 0x86, 0x63, 0xd4, 0x71, 0xe4, 0x59, 0x09, 0xd6,
		0xa1, 0x3c, 0xac, 0x98, 0x8e, 0xed, 0xbb, 0x4e, 0x23, 0x9f, 0x2b, 0x70, 0xa5, 0x75, 0xdc, 0xfb,
		0x99, 0x2c, 0xfb, 0x48, 0x11, 0x47, 0xca, 0xfe, 0x6d, 0x06, 0xc4, 0xf8, 0x0a, 0x4c, 0x4d, 0xc7,
		0xad, 0xa7, 0x2b, 0x87, 0xe4, 0x34, 0x5b, 0x0d, 0xea, 0xd3, 0xff, 0x91, 0x5e, 0x98, 0x4f, 0x73,
		0x35, 0xe0, 0xcd, 0x30, 0x3e, 0xcb, 0xb1, 0x43, 0x78, 0x24, 0xb4, 0xa5, 0x49, 0x7c, 0x0e, 0xc3,
		0x97, 0x3e, 0xf3, 0x82, 0xaf, 0x0f, 0x3c, 0x30, 0x43, 0xb1, 0x0c, 0x2f, 0xe7, 0x4f, 0xee, 0x48,
		0x8d, 0xfe, 0xc3, 0x41, 0x41, 0x6c, 0xb5, 0x1a, 0xdd, 0x9a, 0xe1, 0x52, 0xdb, 0x97, 0x1a, 0x8e,
		0x47, 0x6b, 0x4e, 0xc3, 0x32, 0xbb, 0xb1, 0x12, 0x7c, 0x0a, 0xd7, 0xc3, 0x66, 0x4d, 0x56, 0xe0,
		0x1a, 0x33, 0xf7, 0x0b, 0xb0, 0x0d, 0x9b, 0x89, 0xa6, 0xee, 0xbf, 0xaf, 0xae, 0x0f, 0xb5, 0xb4,
		0x52, 0x47, 0x05, 0x58, 0x0f, 0xb1, 0x91, 0x48, 0x87, 0xe7, 0x09, 0x98, 0x8d, 0xa9, 0x3e, 0xfa,
		0x15, 0xdc, 0x68, 0x31, 0x52, 0xc4, 0x0c, 0x58, 0x91, 0x16, 0xa3, 0xc5, 0x12, 0xb7, 0x31, 0xb9,
		0x90, 0x23, 0xb1, 0xe0, 0xcd, 0x56, 0xd2, 0x54, 0xfc, 0x9a, 0x83, 0x7b, 0xe9, 0x91, 0x07, 0xc3,
		0x43, 0xdb, 0x43, 0xf7, 0x60, 0x35, 0xca, 0x39, 0x0d, 0xe3, 0xcd, 0xe1, 0x81, 0x01, 0x7d, 0x09,
		0xeb, 0xe7, 0x86, 0xd5, 0xa0, 0x75, 0x62, 0x1a, 0x6d, 0x8f, 0xb2, 0x30, 0x37, 0xf6, 0x7e, 0x36,
		0xdf, 0x38, 0xb3, 0xcf, 0x3c, 0x48, 0x81, 0x03, 0xbc, 0x76, 0x3e, 0xf8, 0x51, 0xfc, 0x3b, 0x07,
		0x5b, 0xe9, 0xe4, 0xa2, 0x03, 0x82, 0x74, 0x58, 0x62, 0xb9, 0x62, 0xcc, 0xd6, 0xf6, 0x3e, 0x9b,
		0xbc, 0xf1, 0xb4, 0x12, 0xe3, 0xd0, 0x19, 0xc2, 0xb0, 0xec, 0xb1, 0xe8, 0xa3, 0xf3, 0xf2, 0xfc,
		0x32, 0x6e, 0xc3, 0xfc, 0xe1, 0xc8, 0x53, 0xf1, 0xf7, 0x1c, 0x3c, 0x8d, 0x07, 0x3e, 0x31, 0xae,
		0x58, 0xd7, 0x9d, 0x40, 0x8e, 0x91, 0x72, 0xa9, 0x9d, 0xe7, 0x0a, 0xd9, 0xd2, 0xda, 0xde, 0x8b,
		0xcb, 0xb0, 0x89, 0x1c, 0xe3, 0xbe, 0xb3, 0xe2, 0x3f, 0xc6, 0x56, 0x1e, 0x53, 0xaf, 0xdd, 0xf8,
		0xbe, 0x72, 0xfb, 0xfd, 0x76, 0xcc, 0x1f, 0x39, 0xf8, 0xf1, 0x2c, 0x59, 0x1e, 0x99, 0x93, 0xcc,
		0xe8, 0x70, 0xbb, 0xd4, 0x26, 0x51, 0xed, 0xc3, 0x6c, 0x3f, 0xbf, 0x5c, 0xb6, 0x83, 0x0c, 0xe2,
		0x8d, 0x9e, 0xcb, 0xb0, 0x17, 0x8a, 0xdf, 0xac, 0xc0, 0xad, 0x64, 0x28, 0xbd, 0x4e, 0xee, 0xdd,
		0x0a, 0x2c, 0xfb, 0xdc, 0x89, 0x32, 0x3e, 0xe7, 0xad, 0x20, 0xb8, 0xd7, 0x84, 0xb7, 0x02, 0x76,
		0xc3, 0xf9, 0x03, 0x07, 0x05, 0x2f, 0x98, 0x11, 0x49, 0xa8, 0x30, 0xfd, 0x97, 0x40, 0x7c, 0xd0,
		0x0d, 0xfb, 0xbb, 0x3a, 0xfb, 0x46, 0xb3, 0x0c, 0xf5, 0x87, 0x0b, 0x78, 0xcb, 0x1b, 0xc5, 0xc5,
		0xb2, 0xfd, 0x3b, 0x0e, 0xee, 0x9a, 0x6c, 0x60, 0x4a, 0xa7, 0x95, 0x65, 0xb4, 0x3e, 0x9f, 0x9d,
		0xd6, 0xb4, 0xf9, 0xf5, 0x70, 0x01, 0xdf, 0x36, 0x87, 0x31, 0x09, 0x3a, 0xd1, 0xd8, 0x90, 0x4a,
		0x67, 0x71, 0x5e, 0x3a, 0xd3, 0x46, 0xbb, 0x80, 0x8e, 0x37, 0x8c, 0x89, 0xd1, 0xf9, 0x8e, 0x83,
		0x17, 0x2e, 0x7b, 0x91, 0x91, 0xc4, 0x8b, 0x64, 0xc0, 0xae, 0x27, 0xc1, 0xa4, 0x37, 0x8c, 0xc5,
		0xe8, 0x2e, 0x31, 0xba, 0x64, 0x76, 0xba, 0x97, 0x1a, 0x49, 0x0e, 0x17, 0xf0, 0x33, 0xf7, 0x52,
		0xb3, 0xcc, 0x9f, 0x39, 0x78, 0x6c, 0x04, 0xe7, 0x86, 0xa4, 0xbc, 0xd9, 0xd2, 0x02, 0x0a, 0x2f,
		0xa4, 0xbf, 0x9c, 0x3d, 0xa0, 0x19, 0xc5, 0xf5, 0x70, 0x01, 0x3f, 0x32, 0x66, 0x83, 0xbe, 0x5c,
		0x07, 0x18, 0x30, 0x2a, 0xfe, 0x2b, 0x07, 0xf9, 0xd1, 0x93, 0x1c, 0xaa, 0x4a, 0xfc, 0xc2, 0xcd,
		0x0d, 0x5d, 0xb8, 0x87, 0x6e, 0xfe, 0x99, 0x2b, 0xbf, 0xf9, 0x67, 0x93, 0x37, 0xff, 0xa4, 0xd6,
		0x2e, 0x5e, 0xa5, 0xd6, 0xa2, 0xaf, 0x67, 0x11, 0x98, 0xa5, 0x49, 0x37, 0xe9, 0x99, 0x05, 0x26,
		0x29, 0xd7, 0xd3, 0x15, 0xe6, 0xc3, 0x14, 0x85, 0x09, 0x5b, 0xea, 0xd5, 0x47, 0x28, 0x4c, 0x0a,
		0xa7, 0x09, 0x12, 0xf3, 0x61, 0x8a, 0xc4, 0xac, 0xcc, 0xcb, 0x67, 0xea, 0xc5, 0x63, 0xb2, 0xc6,
		0xfc, 0xf3, 0x23, 0x35, 0x26, 0xc7, 0xf8, 0xfe, 0xfa, 0xaa, 0x35, 0x26, 0x25, 0x88, 0x4b, 0x8a,
		0xcc, 0x5f, 0x38, 0x78, 0x32, 0x49, 0x64, 0xc2, 0x9d, 0xe2, 0x21, 0xad, 0xb2, 0x90, 0xf0, 0xc7,
		0xab, 0x4c, 0x4a, 0x10, 0x25, 0x63, 0x46, 0x6c, 0x42, 0x67, 0x3a, 0x69, 0x32, 0xc3, 0x42, 0xf5,
		0xd0, 0x1b, 0xb8, 0xc6, 0x0e, 0x7f, 0x54, 0x9d, 0xde, 0xc0, 0xf2, 0x6c, 0xbe, 0xe3, 0xdd, 0x1b,
		0x0c, 0xd7, 0xfd, 0x98, 0xef, 0xed, 0xdf, 0x72, 0x90, 0xeb, 0xe9, 0x0d, 0xba, 0x09, 0x9b, 0xba,
		0xa8, 0xbd, 0x22, 0xfa, 0x69, 0x4d, 0x26, 0x4a, 0xf5, 0xb5, 0x58, 0x51, 0xca, 0xfc, 0x02, 0xfa,
		0x01, 0xa0, 0x81, 0x59, 0xc7, 0x62, 0x55, 0xdb, 0x97, 0x31, 0xcf, 0xa1, 0x1b, 0x70, 0x3d, 0x66,
		0x57, 0x8e, 0x64, 0xcc, 0x67, 0xd0, 0x6d, 0xb8, 0x39, 0x30, 0x62, 0xb9, 0x56, 0x51, 0x24, 0x51,
		0x57, 0xd4, 0x2a, 0x9f, 0x45, 0x77, 0xe1, 0xd6, 0xe0, 0x91, 0x84, 0x55, 0x4d, 0x23, 0x52, 0xe5,
		0x58, 0xd3, 0x65, 0xcc, 0x2f, 0x6e, 0x7f, 0x93, 0xf2, 0x0f, 0x5c, 0x46, 0xea, 0x21, 0xdc, 0x1f,
		0xc2, 0x92, 0x34, 0x8a, 0xbb, 0xf0, 0x64, 0x1c, 0x48, 0xd3, 0x45, 0xac, 0x13, 0xe9, 0x50, 0xa9,
		0x94, 0x89, 0xfc, 0x85, 0x2c, 0x1d, 0x33, 0x36, 0x1c, 0x7a, 0x0c, 0xa5, 0x71, 0x4b, 0x24, 0xb1,
		0x2a, 0xc9, 0x95, 0x18, 0x3a, 0x33, 0x09, 0xad, 0x29, 0x07, 0x55, 0x31, 0x8e, 0xce, 0xa2, 0x32,
		0xfc, 0x62, 0x1c, 0x1a, 0xcb, 0x92, 0x8a, 0xcb, 0x11, 0x9f, 0x13, 0x15, 0xbf, 0x7a, 0x55, 0x51,
		0x4f, 0x06, 0x8b, 0x89, 0xa4, 0x1e, 0xd5, 0x2a, 0xb2, 0x2e, 0xf3, 0x8b, 0xe8, 0x19, 0xec, 0x8e,
		0xf3, 0x22, 0xd6, 0x6a, 0x95, 0x53, 0x52, 0x13, 0xb1, 0x5c, 0xd5, 0x89, 0x54, 0x51, 0x35, 0x99,
		0xd4, 0xd4, 0x8a, 0x22, 0x9d, 0xf2, 0x4b, 0xdb, 0x7f, 0xca, 0xc2, 0xdd, 0x09, 0xda, 0x8e, 0x7e,
		0x08, 0x8f, 0x52, 0xdc, 0xee, 0x8b, 0x4a, 0x45, 0x2e, 0x13, 0x49, 0x3c, 0xd6, 0xe2, 0x89, 0x4d,
		0xe7, 0x30, 0x04, 0x2e, 0xab, 0x47, 0xa2, 0x52, 0x25, 0x55, 0x55, 0x27, 0xa2, 0xa4, 0x2b, 0xaf,
		0x65, 0x9e, 0x9b, 0x73, 0x99, 0xfc, 0x85, 0xa2, 0xe9, 0x1a, 0x9f, 0x41, 0x3f, 0x87, 0x9f, 0x4e,
		0x5b, 0x16, 0xa4, 0x6c, 0x3f, 0x48, 0x99, 0x58, 0xc1, 0xb2, 0x58, 0x3e, 0x25, 0xf8, 0xb8, 0x5a,
		0x55, 0xaa, 0x07, 0x7c, 0x16, 0xfd, 0x04, 0x9e, 0xce, 0xbc, 0x3a, 0xb6, 0xed, 0x22, 0xfa, 0x0c,
		0x9e, 0xcf, 0xbd, 0x6d, 0xaf, 0x4e, 0x65, 0x7e, 0x69, 0x4c, 0xf7, 0x0d, 0xad, 0x3f, 0xae, 0x4a,
		0xa2, 0x2e, 0x1f, 0xa8, 0x58, 0x79, 0x23, 0x97, 0xf9, 0xe5, 0xed, 0x6f, 0x39, 0x40, 0x07, 0xd4,
		0x4f, 0xd6, 0xe6, 0x01, 0x6c, 0x1d, 0xc8, 0xfa, 0xc4, 0x8a, 0x7c, 0x0a, 0xc5, 0x74, 0x88, 0x26,
		0xe3, 0xd7, 0x8a, 0x24, 0x93, 0x97, 0xc7, 0xda, 0x29, 0xcf, 0x8d, 0x77, 0x15, 0x9c, 0x54, 0xf5,
		0x58, 0xe7, 0x33, 0x48, 0x80, 0xed, 0x31, 0xae, 0x0e, 0x45, 0x5c, 0x26, 0xea, 0x49, 0x55, 0xc6,
		0xda, 0xa1, 0x52, 0x23, 0x15, 0x55, 0xd3, 0xf9, 0x2c, 0x7a, 0x04, 0x0f, 0xd3, 0xf1, 0xc3, 0xd1,
		0x2d, 0xbe, 0x7c, 0xf6, 0xe6, 0xe9, 0x85, 0xe5, 0xbf, 0x6d, 0x9f, 0x09, 0xa6, 0xd3, 0xdc, 0x19,
		0xfa, 0x7c, 0x23, 0x5c, 0x50, 0x3b, 0xfc, 0x5e, 0xd4, 0xff, 0xe0, 0xf4, 0x82, 0xfd, 0xd1, 0xd9,
		0x3d, 0x5b, 0x66, 0xf6, 0xa7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x24, 0x33, 0x79, 0x13, 0x98,
		0x1a, 0x00, 0x00,
	},
	// uber/cadence/api/v1/history.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xdd, 0x6f, 0x1b, 0xc7,
		0xb5, 0xcf, 0x92, 0x12, 0x29, 0x1e, 0x4a, 0xb2, 0x34, 0xb6, 0x65, 0xc9, 0x9f, 0xf2, 0xda, 0xb1,
		0x15, 0x5b, 0x26, 0x6d, 0xd9, 0xb9, 0xbe, 0xb6, 0xe3, 0xdc, 0xc8, 0xb2, 0x74, 0xc3, 0x44, 0xb1,
		0x85, 0x95, 0x6e, 0x72, 0x13, 0xa4, 0x60, 0x57, 0xbb, 0x23, 0x6b, 0x23, 0x72, 0x97, 0xdd, 0x1d,
		0x8a, 0xd6, 0x4b, 0x81, 0x7e, 0xbc, 0xb4, 0x45, 0x0b, 0x04, 0x68, 0xd1, 0x20, 0x40, 0x91, 0xb4,
		0x05, 0x5a, 0x14, 0x68, 0xd1, 0x14, 0x05, 0x12, 0xb4, 0x08, 0xd0, 0xbc, 0xb5, 0x05, 0x8a, 0xa0,
		0x68, 0xd1, 0xf6, 0xa5, 0x79, 0xe9, 0x6b, 0x1f, 0x9a, 0x3f, 0xa1, 0xd8, 0xd9, 0x59, 0x92, 0xfb,
		0x31, 0xfb, 0x41, 0x52, 0x4d, 0x83, 0xfa, 0x4d, 0x3b, 0x3b, 0xe7, 0xec, 0xef, 0xcc, 0xf9, 0x98,
		0x33, 0x73, 0x0e, 0x05, 0xa7, 0x9b, 0x9b, 0xd8, 0x2c, 0x2b, 0xb2, 0x8a, 0x75, 0x05, 0x97, 0xe5,
		0x86, 0x56, 0xde, 0xbd, 0x52, 0xde, 0xd6, 0x2c, 0x62, 0x98, 0x7b, 0xa5, 0x86, 0x69, 0x10, 0x03,
		0x1d, 0xb5, 0xb0, 0xb9, 0x8b, 0xcd, 0x92, 0x3d, 0xb3, 0xc4, 0x66, 0x96, 0xe4, 0x86, 0x56, 0xda,
		0xbd, 0x72, 0xf4, 0xe4, 0x03, 0xc3, 0x78, 0x50, 0xc3, 0x65, 0x3a, 0x73, 0xb3, 0xb9, 0x55, 0x56,
		0x9b, 0xa6, 0x4c, 0x34, 0x43, 0x77, 0x68, 0x8f, 0x9e, 0xf2, 0xbf, 0x27, 0x5a, 0x1d, 0x5b, 0x44,
		0xae, 0x37, 0xd8, 0x84, 0xd9, 0xb0, 0xef, 0x2b, 0x46, 0xbd, 0xde, 0x66, 0x21, 0x86, 0xcd, 0x20,
		0xb2, 0xb5, 0x53, 0xd3, 0x2c, 0x12, 0x35, 0xa7, 0x65, 0x98, 0x3b, 0x5b, 0x35, 0xa3, 0xe5, 0xcc,
		0x11, 0x9f, 0x87, 0xfc, 0xb3, 0x8e, 0x5c, 0xe8, 0x19, 0xc8, 0xe1, 0x5d, 0xac, 0x13, 0x6b, 0x5a,
		0x98, 0xcd, 0xce, 0x15, 0x17, 0xe6, 0x4a, 0x7c, 0x11, 0x4b, 0x8c, 0x68, 0xd9, 0x26, 0x90, 0x18,
		0x9d, 0xf8, 0xfa, 0x4d, 0x18, 0xed, 0x7e, 0x81, 0x66, 0x60, 0x84, 0xbe, 0xaa, 0x6a, 0xea, 0xb4,
		0x30, 0x2b, 0xcc, 0x65, 0xa5, 0x3c, 0x7d, 0xae, 0xa8, 0xe8, 0x06, 0x80, 0xf3, 0xca, 0x96, 0x7d,
		0x3a, 0x33, 0x2b, 0xcc, 0x15, 0x17, 0x8e, 0x96, 0x9c, 0x85, 0x29, 0xb9, 0x0b, 0x53, 0xda, 0x70,
		0x17, 0x46, 0x2a, 0xd0, 0xd9, 0xf6, 0x33, 0x9a, 0x86, 0xfc, 0x2e, 0x36, 0x2d, 0xcd, 0xd0, 0xa7,
		0xb3, 0x0e, 0x53, 0xf6, 0x88, 0x8e, 0x40, 0xde, 0x5e, 0x03, 0xfb, 0x73, 0x43, 0xf4, 0x4d, 0xce,
		0x7e, 0xac, 0xa8, 0xe8, 0xfb, 0x02, 0x5c, 0x74, 0x25, 0xaf, 0xe2, 0x87, 0x58, 0x69, 0xda, 0xea,
		0xa8, 0x5a, 0x44, 0x36, 0x09, 0x56, 0xab, 0x0e, 0x12, 0x99, 0x10, 0x53, 0xdb, 0x6c, 0x12, 0x6c,
		0x4d, 0x0f, 0x53, 0x3c, 0x4b, 0x51, 0x2b, 0xf0, 0x12, 0x63, 0xb7, 0xec, 0x72, 0x5b, 0x77, 0x98,
		0x51, 0xc9, 0x17, 0xdb, 0xac, 0x9e, 0x7d, 0x4c, 0x3a, 0xdf, 0x4a, 0x36, 0x15, 0xfd, 0x48, 0x80,
		0x4b, 0x21, 0x28, 0x15, 0xa3, 0xde, 0xa8, 0xe1, 0x50, 0x9c, 0x39, 0x8a, 0x73, 0x39, 0x15, 0xce,
		0x25, 0x97, 0x5d, 0x10, 0xe9, 0x13, 0xad, 0xa4, 0x93, 0xd1, 0xdb, 0x02, 0x5c, 0x08, 0xc1, 0xba,
		0x25, 0x6b, 0xb5, 0x30, 0xa0, 0x79, 0x0a, 0xf4, 0x4e, 0x2a, 0xa0, 0x2b, 0x94, 0x57, 0x10, 0xe5,
		0xb9, 0x56, 0xa2, 0x99, 0xe8, 0x87, 0xe1, 0xcb, 0x69, 0x1b, 0x9c, 0x5a, 0x35, 0x9a, 0x24, 0x88,
		0x72, 0x84, 0xa2, 0xbc, 0x9b, 0x0a, 0xa5, 0x6d, 0x92, 0xea, 0xfd, 0x26, 0x09, 0xe2, 0x9c, 0x6b,
		0x25, 0x9c, 0x8b, 0xde, 0x14, 0x60, 0x4e, 0xc5, 0x8a, 0x66, 0x51, 0x7c, 0xb6, 0x05, 0x5b, 0xca,
		0x36, 0x56, 0x9b, 0xa1, 0x4b, 0x59, 0xa0, 0x20, 0x9f, 0x89, 0x02, 0x79, 0x97, 0xf1, 0xda, 0x90,
		0xad, 0x9d, 0x75, 0x97, 0x53, 0x10, 0xe0, 0x59, 0x35, 0xc1, 0x3c, 0xf4, 0x4d, 0x01, 0xce, 0xf9,
		0xc0, 0xf1, 0xdc, 0x06, 0x28, 0xb4, 0xa7, 0x13, 0x43, 0xe3, 0x79, 0x8c, 0xa8, 0xc6, 0xce, 0x0a,
		0x59, 0xb3, 0x08, 0x3f, 0x29, 0xa6, 0x5b, 0xb3, 0x08, 0x17, 0xf1, 0xac, 0x19, 0xd7, 0x3b, 0xde,
		0x08, 0x80, 0x8b, 0xb0, 0xba, 0x51, 0x0a, 0xee, 0x7f, 0x92, 0x82, 0xe3, 0x1b, 0xdc, 0x19, 0x35,
		0x7e, 0x1a, 0x7a, 0x5d, 0x80, 0xc7, 0xbd, 0xd0, 0x78, 0x3e, 0x3b, 0x46, 0x71, 0xdd, 0x4e, 0x8a,
		0x8b, 0xe7, 0xae, 0xa7, 0xd5, 0xb8, 0x49, 0x54, 0x97, 0xb2, 0x42, 0xb4, 0x5d, 0x8d, 0xec, 0xc5,
		0xda, 0xff, 0x78, 0xbc, 0x2e, 0x17, 0x19, 0xaf, 0x38, 0xfb, 0x97, 0x13, 0xcc, 0xa3, 0xf6, 0xef,
		0x03, 0xc7, 0xb3, 0xff, 0x03, 0xf1, 0xf6, 0xef, 0x81, 0xc6, 0xb5, 0x7f, 0x39, 0x76, 0x56, 0xc8,
		0x9a, 0x45, 0xd8, 0xff, 0x44, 0xba, 0x35, 0x8b, 0xb2, 0x7f, 0x39, 0xc1, 0x3c, 0x6a, 0x64, 0x5e,
		0x70, 0x3c, 0x23, 0x9b, 0x8c, 0x37, 0xb2, 0x6e, 0x64, 0x5c, 0x23, 0x93, 0xe3, 0x26, 0x51, 0x9f,
		0xf4, 0x62, 0x8a, 0xf0, 0x49, 0x14, 0xef, 0x93, 0xdd, 0xb0, 0x22, 0x7c, 0x52, 0x8e, 0x9f, 0x86,
		0x3e, 0x0f, 0x27, 0x6d, 0x2c, 0x26, 0xdf, 0xb2, 0x0e, 0x52, 0x3c, 0xd7, 0xa3, 0xf0, 0xd8, 0xcc,
		0x4d, 0xae, 0x49, 0x1d, 0x23, 0xfc, 0xd7, 0xe8, 0x21, 0x1c, 0x77, 0xbe, 0xbf, 0xa5, 0x99, 0x61,
		0x5f, 0x3f, 0x44, 0xbf, 0xfe, 0x64, 0xec, 0xd7, 0x57, 0x6c, 0xf2, 0xe0, 0xb7, 0x67, 0x08, 0xef,
		0x25, 0xfa, 0x89, 0x00, 0x65, 0x9f, 0x15, 0xcb, 0xba, 0x82, 0x6b, 0x55, 0x13, 0x7f, 0xae, 0x89,
		0xad, 0xd0, 0xb5, 0x38, 0x4c, 0xd1, 0xac, 0x24, 0x36, 0x66, 0xca, 0x50, 0x72, 0xf9, 0x05, 0xe1,
		0x5d, 0x90, 0x13, 0xcf, 0x46, 0xbf, 0x14, 0xe0, 0x1a, 0x83, 0xe6, 0x22, 0x4d, 0x66, 0xe7, 0x53,
		0x14, 0xf4, 0x73, 0x51, 0xa0, 0xd9, 0x47, 0x1d, 0x04, 0x49, 0x8c, 0xbe, 0x64, 0xa6, 0xa2, 0x40,
		0xdf, 0x16, 0xe0, 0x7c, 0xd8, 0x62, 0x87, 0xe1, 0x3d, 0x92, 0xce, 0x01, 0x96, 0x18, 0xa3, 0x18,
		0x07, 0xe0, 0x4c, 0x43, 0x5f, 0x10, 0xe0, 0x94, 0x63, 0x81, 0x7c, 0x44, 0xd3, 0x14, 0xd1, 0x7f,
		0xc7, 0x1a, 0x21, 0x1f, 0x8a, 0x63, 0xe4, 0x3c, 0x0c, 0xdf, 0x10, 0xe0, 0x2c, 0x53, 0x29, 0x73,
		0x06, 0x8e, 0x2a, 0x67, 0x28, 0x90, 0xa7, 0xa2, 0x80, 0x38, 0xdf, 0x70, 0x7c, 0x82, 0xa3, 0xbc,
		0x59, 0x25, 0x66, 0x0e, 0xfa, 0xb2, 0x00, 0xb3, 0x75, 0xd9, 0xdc, 0xc1, 0x66, 0xd5, 0xc4, 0x8a,
		0x61, 0xaa, 0x61, 0x60, 0x8e, 0x52, 0x30, 0x37, 0xa2, 0xc0, 0xbc, 0x40, 0x79, 0x48, 0x8c, 0x45,
		0x10, 0xc9, 0x89, 0x7a, 0xd4, 0x04, 0xf4, 0x03, 0x01, 0xe6, 0xc3, 0xce, 0x4e, 0xda, 0x03, 0x5d,
		0x0e, 0x5d, 0x9f, 0x63, 0x3d, 0x64, 0xd1, 0xeb, 0x8c, 0x5b, 0x92, 0x2c, 0x9a, 0x33, 0x17, 0xfd,
		0x58, 0x80, 0x52, 0x58, 0xbe, 0x8f, 0xcd, 0xba, 0xa6, 0xcb, 0xa1, 0xa1, 0xe4, 0x78, 0x7c, 0x28,
		0x09, 0x26, 0xfc, 0x6d, 0x7e, 0x21, 0xa1, 0xa4, 0x95, 0x78, 0x36, 0x7a, 0x5f, 0x80, 0x6b, 0x61,
		0xa7, 0xbd, 0xd8, 0xf8, 0x77, 0x82, 0x82, 0x7e, 0x3e, 0xdd, 0xa1, 0x2f, 0x2e, 0x08, 0x96, 0x5b,
		0xe9, 0x48, 0x78, 0x66, 0xc1, 0xf7, 0xdf, 0x93, 0x3d, 0x98, 0x05, 0xdf, 0x97, 0xe7, 0x5a, 0x09,
		0xe7, 0xa2, 0xbf, 0x0b, 0xb0, 0xec, 0x0b, 0xd9, 0xf8, 0x21, 0xc1, 0xa6, 0x2e, 0xd7, 0xaa, 0x21,
		0x02, 0x68, 0xba, 0x46, 0xb4, 0x70, 0x6b, 0x39, 0x45, 0x25, 0x78, 0x25, 0x71, 0x0c, 0x5f, 0x66,
		0x9f, 0x09, 0x88, 0x55, 0x71, 0xbf, 0x11, 0x94, 0xeb, 0x69, 0xb3, 0x2f, 0x0e, 0xe8, 0x6f, 0x02,
		0xdc, 0x49, 0x21, 0x2d, 0x2f, 0xc6, 0xcd, 0x52, 0x51, 0x5f, 0xea, 0x5f, 0x54, 0x5e, 0xf8, 0xbb,
		0x65, 0xf6, 0x4e, 0x8e, 0xfe, 0x24, 0xc0, 0xed, 0x28, 0xa9, 0xe2, 0x7d, 0xe8, 0x34, 0x95, 0x6f,
		0x3d, 0x4a, 0x3e, 0x2e, 0xa6, 0x58, 0x5f, 0xba, 0x8e, 0x7b, 0x23, 0xa5, 0xd9, 0x45, 0xe8, 0x05,
		0x90, 0x4e, 0x34, 0xbd, 0x89, 0xd5, 0xaa, 0x6c, 0x55, 0x75, 0xdc, 0x0a, 0x8a, 0x23, 0xc6, 0x67,
		0x17, 0x21, 0xf7, 0x40, 0x8c, 0xeb, 0xa2, 0x75, 0x0f, 0xb7, 0x42, 0xb2, 0x8b, 0x56, 0x2a, 0x0a,
		0xf4, 0x5b, 0x01, 0x6e, 0xd0, 0xfc, 0xb5, 0xaa, 0x6c, 0x6b, 0x35, 0x35, 0xa5, 0x6f, 0x9d, 0xa1,
		0x12, 0xdc, 0x8f, 0x92, 0x80, 0x26, 0xaf, 0x4b, 0x36, 0xef, 0x34, 0x0e, 0x75, 0xd5, 0x4a, 0x4f,
		0x86, 0x3e, 0x10, 0xe0, 0xbf, 0x62, 0x64, 0xe1, 0x79, 0xce, 0x59, 0x2a, 0xc8, 0x6a, 0x8f, 0x82,
		0xf0, 0xdc, 0xe5, 0xb2, 0x95, 0x92, 0x06, 0xfd, 0x5c, 0x80, 0x2b, 0x5c, 0xf0, 0xdc, 0x73, 0xc6,
		0xe3, 0x14, 0xfd, 0xb3, 0x91, 0xb9, 0x4d, 0x28, 0x08, 0xee, 0xc1, 0x63, 0x5e, 0x49, 0x31, 0x1f,
		0xfd, 0x42, 0x80, 0xab, 0x5c, 0xd4, 0x11, 0x07, 0xdc, 0x73, 0xf1, 0x0e, 0x10, 0x8e, 0x3b, 0xe2,
		0xa8, 0x5b, 0x52, 0x52, 0x51, 0xa0, 0x77, 0x04, 0xb8, 0x9c, 0xda, 0x5c, 0xce, 0x53, 0xe0, 0xff,
		0x9b, 0x1e, 0x38, 0xcf, 0x52, 0x2e, 0x2a, 0x29, 0x8c, 0xe4, 0x5d, 0x01, 0x16, 0xf8, 0xcb, 0xcd,
		0xdd, 0xca, 0xe7, 0x28, 0xe8, 0x4a, 0x0f, 0xab, 0xcd, 0xdd, 0xcf, 0x2f, 0x29, 0x69, 0x08, 0xd0,
		0x7b, 0x51, 0x76, 0x12, 0x71, 0xae, 0x7f, 0xa2, 0x57, 0xe4, 0xfc, 0x13, 0x3e, 0x07, 0x39, 0xef,
		0xac, 0x6f, 0xa7, 0x7d, 0x7c, 0xe4, 0x11, 0xb9, 0xea, 0x85, 0xf8, 0xb4, 0x8f, 0x03, 0x3d, 0x22,
		0x61, 0x2d, 0x2b, 0xe9, 0x48, 0xe8, 0xd6, 0xeb, 0xa4, 0xfe, 0xbd, 0x66, 0x51, 0x17, 0xe3, 0xb7,
		0x5e, 0x27, 0xc3, 0xef, 0x25, 0x7d, 0xba, 0x6e, 0xf5, 0x46, 0x8a, 0x7e, 0x27, 0xc0, 0xcd, 0x04,
		0x72, 0xf1, 0xdc, 0x78, 0x9e, 0x0a, 0xb5, 0xd6, 0x87, 0x50, 0x3c, 0x7f, 0xbe, 0x66, 0xf5, 0x40,
		0x87, 0x7e, 0x25, 0xc0, 0x93, 0x51, 0x72, 0xf0, 0x4f, 0x6f, 0x97, 0xe2, 0xf7, 0x2f, 0x2e, 0x16,
		0xfe, 0x29, 0xee, 0x32, 0x4e, 0x49, 0x43, 0x43, 0x53, 0xb3, 0x61, 0x61, 0x93, 0x74, 0xf0, 0x5b,
		0x58, 0x36, 0x95, 0xed, 0x2e, 0xb4, 0x41, 0xf8, 0xa5, 0x78, 0x07, 0xff, 0x3f, 0xca, 0xd5, 0x05,
		0xb2, 0x4e, 0x79, 0x76, 0x3e, 0x1c, 0xe2, 0xe0, 0xcd, 0x34, 0x04, 0x77, 0x46, 0x01, 0x3a, 0x78,
		0xc4, 0x2f, 0x8e, 0xc1, 0xf9, 0xa4, 0x9b, 0xdf, 0x0b, 0x30, 0xd6, 0x16, 0x95, 0xec, 0x35, 0x30,
		0xad, 0x99, 0xc6, 0x14, 0x62, 0x5d, 0xde, 0x1b, 0x7b, 0x0d, 0x2c, 0x8d, 0xb6, 0xba, 0x9e, 0x90,
		0x02, 0x87, 0x1b, 0xb2, 0x69, 0xaf, 0x4f, 0xb7, 0x5f, 0x6e, 0x19, 0xac, 0xda, 0x5a, 0x8e, 0x62,
		0xbb, 0x46, 0x09, 0xbb, 0xdc, 0x66, 0xcb, 0x90, 0x0e, 0x36, 0x82, 0x83, 0x68, 0x11, 0x0a, 0xf4,
		0x26, 0xa9, 0xa6, 0x59, 0x84, 0x96, 0x63, 0x8b, 0x0b, 0x67, 0x23, 0xaf, 0x68, 0x64, 0x6b, 0x67,
		0x55, 0xb3, 0x88, 0x34, 0x42, 0xd8, 0x5f, 0xe8, 0x06, 0x0c, 0x6b, 0x7a, 0xa3, 0x49, 0x68, 0xcd,
		0xb6, 0xb8, 0x70, 0x26, 0x1a, 0xd7, 0x5e, 0xcd, 0x90, 0x55, 0xc9, 0xa1, 0x40, 0x32, 0xcc, 0xfa,
		0x92, 0x9a, 0x2a, 0x31, 0xaa, 0x4a, 0xcd, 0xb0, 0x30, 0xdd, 0x05, 0x8c, 0x26, 0x61, 0xb5, 0xdc,
		0x99, 0x40, 0x6d, 0xf9, 0x2e, 0x2b, 0xca, 0x4b, 0xc7, 0xb1, 0x47, 0x2f, 0x1b, 0xc6, 0x92, 0x4d,
		0xbf, 0xe1, 0x90, 0xa3, 0x97, 0xe0, 0x58, 0xe7, 0xd2, 0x3f, 0xc8, 0x3d, 0x17, 0xc7, 0xfd, 0x08,
		0x71, 0xef, 0xf0, 0x7d, 0x8c, 0x6f, 0xc1, 0xd1, 0x4e, 0x62, 0xdf, 0x91, 0xc2, 0x6c, 0xea, 0x55,
		0x4d, 0xa5, 0x05, 0xd3, 0x82, 0x74, 0xa4, 0x3d, 0xa3, 0xbd, 0xea, 0x52, 0x53, 0xaf, 0xa8, 0x68,
		0x0d, 0x0a, 0x2c, 0xc4, 0x1a, 0x26, 0x2d, 0x5b, 0x8e, 0x2f, 0x2c, 0x44, 0xee, 0x0c, 0x8c, 0x0f,
		0xcd, 0xdc, 0x2b, 0x2e, 0xa5, 0xd4, 0x61, 0x82, 0xd6, 0x60, 0xb2, 0x03, 0xc7, 0x0e, 0x73, 0x4d,
		0x13, 0xb3, 0x5a, 0x63, 0xa4, 0x46, 0x56, 0x9c, 0xa9, 0xd2, 0x44, 0x9b, 0x9a, 0x8d, 0xa0, 0x97,
		0x61, 0xaa, 0x26, 0xdb, 0xc7, 0x50, 0x27, 0x61, 0xa2, 0xc2, 0x61, 0xab, 0x59, 0x23, 0xac, 0x4e,
		0x98, 0x48, 0xd1, 0x87, 0x6c, 0x16, 0x4b, 0x6d, 0x0e, 0x12, 0x65, 0x80, 0x6e, 0xc0, 0x8c, 0x61,
		0x6a, 0x0f, 0x34, 0x27, 0x5c, 0xfb, 0x96, 0xae, 0x48, 0x97, 0x6e, 0xca, 0x9d, 0xe0, 0x5b, 0xb9,
		0xa3, 0x30, 0xa2, 0xa9, 0x58, 0x27, 0x1a, 0xd9, 0xa3, 0x95, 0xb7, 0x82, 0xd4, 0x7e, 0x46, 0x57,
		0x61, 0x6a, 0x4b, 0x33, 0x2d, 0x12, 0xe4, 0x39, 0x46, 0x67, 0x1e, 0xa4, 0x6f, 0x7d, 0x0c, 0x9f,
		0x83, 0x51, 0x13, 0x13, 0x73, 0xaf, 0xda, 0x30, 0x6a, 0x9a, 0xb2, 0xc7, 0xea, 0x53, 0xe7, 0xa3,
		0x8f, 0xce, 0xc4, 0xdc, 0x5b, 0xa3, 0xd3, 0xa5, 0xa2, 0xd9, 0x79, 0x40, 0xd3, 0x90, 0x97, 0x09,
		0xc1, 0xf5, 0x06, 0xa1, 0xb5, 0xa4, 0x61, 0xc9, 0x7d, 0x44, 0x4b, 0x70, 0x00, 0x3f, 0x6c, 0x68,
		0x8e, 0x51, 0x39, 0x4d, 0x13, 0x13, 0xb1, 0x4d, 0x13, 0xe3, 0x1d, 0x12, 0xda, 0x39, 0x71, 0x06,
		0xc6, 0x14, 0xd3, 0xf6, 0x14, 0x56, 0xeb, 0xa2, 0xd5, 0x97, 0x82, 0x34, 0x6a, 0x0f, 0xba, 0xf5,
		0x2f, 0xf4, 0xff, 0x70, 0xcc, 0x59, 0x04, 0x6f, 0x95, 0x70, 0x53, 0x56, 0x76, 0x8c, 0xad, 0x2d,
		0x56, 0x19, 0x89, 0x30, 0xf8, 0x69, 0x4a, 0xdd, 0x5d, 0x19, 0xbc, 0xe3, 0x90, 0xa2, 0x6b, 0x30,
		0x54, 0xc7, 0x75, 0x83, 0x15, 0x33, 0x66, 0x23, 0xef, 0x2c, 0x71, 0xdd, 0x90, 0xe8, 0x6c, 0xf4,
		0x32, 0x4c, 0x06, 0xe2, 0x3e, 0xab, 0x48, 0xcc, 0x47, 0xee, 0xb7, 0xbe, 0x38, 0x2d, 0x4d, 0x58,
		0xbe, 0x11, 0xf4, 0x2a, 0x4c, 0x35, 0x4c, 0xbc, 0x5b, 0x95, 0x9b, 0xc4, 0xb0, 0x6d, 0x13, 0x93,
		0x6a, 0xc3, 0xd0, 0x74, 0xe2, 0xd6, 0x18, 0x62, 0x94, 0x68, 0x61, 0xb2, 0x46, 0xa7, 0x4b, 0x07,
		0x6d, 0x36, 0x8b, 0x4d, 0x62, 0x74, 0x0d, 0xa2, 0x9b, 0x90, 0xdb, 0xc6, 0xb2, 0x8a, 0x4d, 0x76,
		0xf9, 0x2f, 0x46, 0x36, 0xd4, 0xd0, 0x99, 0x12, 0xa3, 0x40, 0xab, 0x70, 0xc8, 0x51, 0x42, 0xa7,
		0x10, 0x4a, 0x75, 0x7e, 0x24, 0x56, 0xe7, 0x88, 0xd2, 0xb5, 0xab, 0x99, 0xf6, 0x0b, 0xf1, 0x1d,
		0x01, 0x9e, 0x48, 0x7e, 0x8e, 0xb9, 0x05, 0x39, 0xe6, 0xa7, 0x42, 0x72, 0x3f, 0x65, 0x24, 0x68,
		0x05, 0x66, 0xa3, 0xab, 0xf2, 0x9a, 0x4a, 0xf7, 0x9f, 0xac, 0x74, 0x9c, 0x5f, 0x49, 0xaf, 0xa8,
		0xe2, 0x4f, 0x05, 0x38, 0x97, 0x30, 0xd7, 0xb9, 0x0d, 0x79, 0x37, 0x5e, 0x09, 0xc9, 0xe3, 0x95,
		0x4b, 0x33, 0x30, 0xc4, 0xbb, 0x30, 0x97, 0xf8, 0x10, 0xf0, 0x1c, 0x8c, 0xb2, 0x0d, 0xa4, 0xb3,
		0xd1, 0x8f, 0x47, 0x9b, 0x1b, 0xdb, 0x36, 0xe8, 0x3e, 0x5f, 0x24, 0x9d, 0x07, 0xf1, 0x8f, 0x02,
		0x9c, 0x4d, 0xd2, 0xf0, 0xe1, 0xdd, 0xaa, 0x85, 0x9e, 0xb6, 0xea, 0x7b, 0x30, 0xc5, 0xd9, 0x07,
		0x33, 0x71, 0x61, 0xe1, 0xa0, 0x15, 0xb2, 0x07, 0x76, 0xc5, 0xbb, 0xac, 0x27, 0xde, 0x89, 0x5f,
		0x17, 0x40, 0x8c, 0xef, 0x15, 0x41, 0xf3, 0x80, 0xfc, 0xad, 0x02, 0xed, 0x5e, 0xb3, 0x09, 0xcb,
		0xb3, 0x12, 0xbe, 0xd8, 0x9f, 0xf1, 0xc5, 0xfe, 0x13, 0x00, 0xee, 0xbd, 0xa9, 0xa6, 0x52, 0x34,
		0x05, 0xa9, 0xc0, 0x46, 0x2a, 0xaa, 0xf8, 0xb1, 0x6f, 0x95, 0xb9, 0xde, 0x93, 0x0e, 0xd1, 0x1c,
		0x4c, 0x78, 0xef, 0x62, 0xda, 0xc6, 0x36, 0x6e, 0x75, 0x49, 0xec, 0xc3, 0x9e, 0xf5, 0x61, 0x3f,
		0x0f, 0x07, 0x36, 0x35, 0x5d, 0x36, 0xf7, 0xaa, 0xca, 0x36, 0x56, 0x76, 0xac, 0x66, 0x9d, 0xe6,
		0x52, 0x05, 0x69, 0xdc, 0x19, 0x5e, 0x62, 0xa3, 0xe8, 0x22, 0x4c, 0x7a, 0xaf, 0x15, 0xf1, 0x43,
		0x27, 0x41, 0x1a, 0x95, 0x26, 0x70, 0xf7, 0x35, 0x1f, 0x7e, 0x48, 0xc4, 0x37, 0xb3, 0x70, 0x26,
		0x41, 0xe3, 0xc9, 0xbe, 0x49, 0xec, 0x77, 0x92, 0x6c, 0xef, 0x4e, 0x82, 0x4e, 0x42, 0x71, 0x53,
		0xb6, 0xb0, 0xbb, 0x9d, 0x3b, 0xab, 0x53, 0xb0, 0x87, 0x9c, 0x4d, 0xfc, 0x38, 0x80, 0x8e, 0x5b,
		0xee, 0xeb, 0x61, 0x67, 0x7d, 0x75, 0xdc, 0x72, 0xde, 0xce, 0x03, 0xda, 0x32, 0xcc, 0x1d, 0x06,
		0xd8, 0x6d, 0x3e, 0xcc, 0x39, 0x12, 0xda, 0x6f, 0x28, 0xe4, 0x17, 0x59, 0x17, 0xe2, 0x94, 0x1d,
		0x3f, 0x65, 0xcb, 0xd0, 0x59, 0x12, 0xc7, 0x9e, 0xd0, 0xf3, 0x30, 0xac, 0xc8, 0x4d, 0x0b, 0xb3,
		0x7c, 0xed, 0xc9, 0xb4, 0x0d, 0x3f, 0x4b, 0x36, 0xb1, 0xe4, 0xf0, 0x10, 0xdf, 0xcd, 0xc2, 0xe9,
		0xd8, 0xee, 0x9b, 0x7d, 0x53, 0x4d, 0xc5, 0x15, 0xc5, 0xd1, 0xc9, 0xd5, 0x74, 0x3d, 0x42, 0xdd,
		0x82, 0x74, 0x47, 0xef, 0xa1, 0x1e, 0xa2, 0x77, 0xb7, 0x5b, 0x0c, 0xfb, 0xdc, 0xc2, 0xa7, 0xf4,
		0x5c, 0xb4, 0xd2, 0xf3, 0x89, 0x94, 0x3e, 0xc2, 0x51, 0x7a, 0x88, 0x0b, 0x16, 0xc2, 0x5c, 0x50,
		0xfc, 0x20, 0x07, 0x67, 0x93, 0xf4, 0x27, 0xa1, 0x53, 0x50, 0x6c, 0x17, 0xeb, 0x99, 0xd2, 0x0a,
		0x12, 0xb8, 0x43, 0x15, 0xd5, 0x3e, 0x2e, 0x76, 0xaa, 0xf9, 0xb6, 0x83, 0x64, 0xe2, 0x8f, 0x8b,
		0xed, 0x2f, 0xd3, 0xe3, 0xa2, 0xdc, 0xf5, 0x64, 0x9b, 0xad, 0x6a, 0xd4, 0x65, 0x4d, 0x67, 0xe1,
		0x85, 0x3d, 0x79, 0xb7, 0x8d, 0xa1, 0xfe, 0x4e, 0x78, 0xb9, 0xd4, 0x27, 0xbc, 0x0d, 0x98, 0x71,
		0xed, 0x34, 0xb8, 0xe9, 0xe4, 0xe3, 0x36, 0x9d, 0x29, 0x97, 0xd6, 0xb7, 0xef, 0xf8, 0xb8, 0xb2,
		0x3d, 0x8d, 0x71, 0x1d, 0x49, 0xc1, 0xd5, 0x39, 0xd8, 0x31, 0xae, 0xfc, 0xdd, 0xb1, 0xd0, 0xd3,
		0xee, 0xb8, 0x02, 0x93, 0xdb, 0x58, 0x36, 0xc9, 0x26, 0x96, 0x3b, 0xe8, 0x20, 0x8e, 0xd5, 0x44,
		0x9b, 0xa6, 0xc3, 0x27, 0x3e, 0xc3, 0x29, 0xc6, 0x67, 0x38, 0x81, 0x93, 0xce, 0x68, 0x1f, 0x27,
		0x9d, 0x4e, 0x72, 0x3c, 0x96, 0x36, 0x39, 0x16, 0xff, 0x21, 0x80, 0x18, 0xdf, 0x47, 0xf7, 0x2f,
		0xcb, 0x0d, 0xba, 0xb3, 0x98, 0x21, 0xef, 0xa9, 0x6d, 0x05, 0x46, 0xe9, 0x11, 0xd8, 0x8d, 0x70,
		0xc3, 0xc9, 0x23, 0x5c, 0xd1, 0x26, 0x64, 0x0f, 0xe2, 0x5f, 0x04, 0x6f, 0xd0, 0xd8, 0x9f, 0xdc,
		0x3d, 0x7c, 0xc1, 0x32, 0x29, 0x76, 0x8b, 0x6c, 0x6c, 0xea, 0x32, 0xe4, 0x5d, 0x5a, 0xf1, 0xcf,
		0x02, 0x9c, 0x8e, 0xef, 0x5c, 0xea, 0x33, 0xc5, 0xff, 0x24, 0x04, 0xfb, 0x7d, 0x06, 0xce, 0x24,
		0x68, 0x11, 0xb4, 0x45, 0x53, 0x31, 0x91, 0xb5, 0x9a, 0x95, 0x46, 0x65, 0x2e, 0xcd, 0xbe, 0x89,
		0xe6, 0x4f, 0xbe, 0x86, 0xfa, 0x48, 0xbe, 0x06, 0xe5, 0x05, 0xdf, 0x12, 0xe0, 0x42, 0xf2, 0xce,
		0xbe, 0xf8, 0x0d, 0x74, 0x80, 0x67, 0xd5, 0x94, 0xcd, 0x7b, 0xf1, 0xd8, 0x0e, 0xb9, 0x19, 0x96,
		0x13, 0x8b, 0x58, 0xb2, 0x94, 0x04, 0x71, 0x36, 0x01, 0xe2, 0xb7, 0x7d, 0xc6, 0xc9, 0x2b, 0xb3,
		0xf5, 0x69, 0x9c, 0x2b, 0x30, 0x5b, 0x93, 0x49, 0x57, 0x2b, 0x8a, 0xbf, 0x23, 0xa3, 0xb3, 0xc0,
		0xce, 0xbc, 0x30, 0x8d, 0x3a, 0xa9, 0x58, 0x88, 0x91, 0x67, 0x53, 0x18, 0xf9, 0x50, 0xac, 0xff,
		0xfa, 0x92, 0x47, 0xf1, 0x43, 0x01, 0x8e, 0x45, 0xb4, 0xd4, 0xa2, 0x19, 0x18, 0x71, 0xda, 0x04,
		0xdb, 0xea, 0xcb, 0xd3, 0xe7, 0x8a, 0x8a, 0x56, 0xe1, 0x70, 0x3b, 0x0f, 0xd8, 0xd2, 0xcc, 0x14,
		0x87, 0x64, 0xc4, 0xd2, 0x80, 0x15, 0xcd, 0xc4, 0x69, 0x76, 0xef, 0x24, 0x3a, 0xff, 0x2c, 0xcc,
		0x70, 0x9b, 0x74, 0xa3, 0xa4, 0x49, 0x7c, 0x2a, 0x10, 0x7f, 0x2d, 0xc0, 0xf1, 0xa8, 0x16, 0xcc,
		0x81, 0x7c, 0x65, 0x50, 0xeb, 0x11, 0x19, 0xbc, 0xdf, 0x13, 0x60, 0x36, 0xae, 0x87, 0x33, 0x4a,
		0x9a, 0x7d, 0xf5, 0xde, 0x48, 0xe4, 0xef, 0x8f, 0x40, 0xca, 0x56, 0x1f, 0x54, 0x86, 0x43, 0xb4,
		0xa9, 0xc8, 0x7f, 0xe7, 0xed, 0xc8, 0x34, 0xa9, 0xe3, 0x96, 0xef, 0xc6, 0x3b, 0x50, 0xa7, 0xca,
		0xf4, 0x55, 0xa7, 0x7a, 0x54, 0x42, 0xea, 0xb5, 0x84, 0x94, 0xc4, 0xa0, 0xf2, 0x09, 0x0c, 0xea,
		0x3e, 0x4c, 0xb1, 0xeb, 0x7d, 0x86, 0x51, 0xd3, 0x09, 0x36, 0x77, 0xe5, 0x5a, 0xfc, 0x59, 0xe8,
		0x10, 0x23, 0xa4, 0xf0, 0x2a, 0x8c, 0xcc, 0x5b, 0x9e, 0x2a, 0x0c, 0xa2, 0x3c, 0xd5, 0x95, 0x01,
		0x42, 0x0f, 0x19, 0x20, 0xbf, 0x16, 0x55, 0xec, 0xb7, 0x16, 0xd5, 0x39, 0xc9, 0x8c, 0xa6, 0xbe,
		0xe6, 0x77, 0x2b, 0x22, 0x63, 0xfd, 0x57, 0x44, 0xc6, 0x07, 0x51, 0x11, 0xb1, 0x77, 0xbd, 0x72,
		0xda, 0xae, 0xc5, 0x76, 0xb0, 0x13, 0xba, 0x83, 0x5d, 0xd4, 0x79, 0x4a, 0x83, 0x23, 0xed, 0xe6,
		0x04, 0x5f, 0x6d, 0xda, 0xf1, 0xff, 0x2b, 0x49, 0xda, 0x0f, 0xbc, 0xd5, 0xe9, 0xc3, 0x38, 0x6c,
		0x58, 0xfc, 0x99, 0x10, 0x72, 0x2d, 0xcf, 0xdb, 0x9f, 0x92, 0xf8, 0x93, 0x90, 0xc0, 0x9f, 0xba,
		0xd2, 0xa6, 0x4c, 0xfa, 0xb4, 0x49, 0xfc, 0x52, 0x06, 0x4e, 0x44, 0x36, 0xed, 0xdb, 0xe9, 0x23,
		0xfb, 0x65, 0x80, 0x2e, 0xd7, 0xdd, 0x85, 0x07, 0x67, 0xe8, 0x9e, 0x5c, 0xc7, 0x7d, 0x22, 0x18,
		0xd8, 0x4e, 0xd5, 0xf1, 0x8d, 0xa1, 0xd4, 0xa7, 0xfc, 0xef, 0x85, 0x69, 0x8e, 0xd7, 0x2d, 0x72,
		0x0a, 0x8a, 0xac, 0x7b, 0xa7, 0x7b, 0x41, 0x9c, 0x21, 0xba, 0x20, 0xed, 0x1d, 0x22, 0x93, 0x7a,
		0x87, 0x88, 0xb8, 0x79, 0x17, 0xdf, 0x12, 0xe0, 0x42, 0x8a, 0xee, 0xa9, 0xce, 0xd5, 0xb0, 0xe0,
		0xb9, 0x1a, 0xee, 0x53, 0x5d, 0x51, 0x08, 0x7f, 0x93, 0x81, 0xa7, 0xfb, 0xeb, 0x4a, 0x1f, 0x98,
		0x5b, 0x74, 0x6e, 0x18, 0x33, 0x9e, 0x1b, 0xc6, 0x57, 0x01, 0x05, 0x5b, 0x94, 0x58, 0x24, 0xb8,
		0x94, 0xaa, 0xa7, 0x59, 0x9a, 0x0c, 0x34, 0x2d, 0xa3, 0x69, 0xc8, 0x2b, 0x86, 0x4e, 0x4c, 0xa3,
		0x46, 0x8d, 0x70, 0x54, 0x72, 0x1f, 0x51, 0x09, 0x0e, 0xfa, 0x3a, 0xf1, 0x0c, 0xbd, 0xe6, 0x9c,
		0x04, 0x46, 0xa4, 0x49, 0x4f, 0x67, 0xdc, 0x7d, 0xbd, 0xb6, 0x27, 0x7e, 0x37, 0x0b, 0xb7, 0xfa,
		0xe8, 0x7a, 0x47, 0xaf, 0x76, 0x07, 0xca, 0xf1, 0xe8, 0x9f, 0x9d, 0x24, 0xfa, 0x80, 0xe7, 0x22,
		0x7d, 0x40, 0xa7, 0x59, 0xee, 0x3d, 0x70, 0xb8, 0x96, 0x86, 0x06, 0xa4, 0xa5, 0x79, 0x40, 0xfe,
		0x9e, 0x41, 0x56, 0x88, 0xc9, 0x4a, 0x13, 0x9a, 0xc7, 0x32, 0x9d, 0x1b, 0x37, 0x57, 0xa7, 0x39,
		0x8f, 0x4e, 0xc5, 0x8f, 0x04, 0xb8, 0xde, 0x63, 0xe7, 0x3e, 0x07, 0x83, 0xc0, 0xc1, 0xf0, 0x89,
		0x58, 0xb3, 0xf8, 0x9d, 0x2c, 0x5c, 0xef, 0xb1, 0x3d, 0xf2, 0x53, 0xee, 0xc7, 0xbe, 0x10, 0x3f,
		0xc4, 0x0f, 0xf1, 0xc3, 0xa9, 0x43, 0x3c, 0xd7, 0x9e, 0x78, 0x31, 0x22, 0xcf, 0x8b, 0x11, 0x6f,
		0x66, 0xe1, 0x5a, 0x2f, 0x9d, 0x9e, 0xa9, 0x82, 0x43, 0xa2, 0x0f, 0x3c, 0x0a, 0x0e, 0x81, 0xe0,
		0xf0, 0xb1, 0x00, 0x97, 0xd3, 0x36, 0xaf, 0x7e, 0x1a, 0xa2, 0x02, 0x7f, 0x8f, 0x13, 0xff, 0x20,
		0xc0, 0xa5, 0x54, 0x0d, 0xaf, 0x03, 0x8b, 0x12, 0xa1, 0xa7, 0x94, 0xcc, 0x40, 0x4e, 0x29, 0x7f,
		0x2d, 0xc0, 0xd5, 0x1e, 0x7e, 0x0d, 0xd4, 0xa5, 0x1c, 0xc1, 0xa3, 0x9c, 0x53, 0x50, 0x6c, 0x2b,
		0x87, 0x39, 0x42, 0x41, 0x02, 0x77, 0x28, 0xec, 0xc6, 0x23, 0x3b, 0xb8, 0x1b, 0x8f, 0x3e, 0x4b,
		0xaa, 0xc3, 0xfb, 0x72, 0xe3, 0x91, 0xdb, 0xd7, 0x1b, 0x8f, 0x7c, 0xcf, 0x37, 0x1e, 0x9f, 0x01,
		0xd6, 0x85, 0xcc, 0x38, 0xb2, 0x4a, 0xa4, 0xd3, 0x51, 0x71, 0x29, 0xbe, 0xa3, 0x99, 0x32, 0x63,
		0xf5, 0xc8, 0xc9, 0x86, 0x7f, 0xa8, 0xdb, 0x8f, 0x0a, 0xde, 0x7d, 0x20, 0x89, 0x57, 0x40, 0x02,
		0xaf, 0x78, 0x0d, 0xa6, 0xbb, 0x4c, 0xad, 0x6a, 0xe2, 0x66, 0x47, 0x8a, 0x22, 0x95, 0xe2, 0x4a,
		0x12, 0xa3, 0xaa, 0xa8, 0x92, 0x4d, 0xc9, 0x24, 0x39, 0xdc, 0x0a, 0x1b, 0x0e, 0xd4, 0x6b, 0xc7,
		0xfa, 0xa8, 0xd7, 0x06, 0x5a, 0x47, 0xc7, 0x43, 0x5a, 0x47, 0x3b, 0xc7, 0xbd, 0x03, 0x3d, 0x5f,
		0x85, 0x4c, 0xf4, 0x7f, 0x15, 0x32, 0x39, 0x90, 0xe6, 0xd0, 0x9b, 0x50, 0x54, 0x71, 0x4d, 0xde,
		0x73, 0x8c, 0x38, 0xbe, 0xef, 0x15, 0xe8, 0x6c, 0x6a, 0xb4, 0xe8, 0x29, 0x18, 0x7d, 0x4d, 0x23,
		0xc4, 0xfd, 0x8f, 0x1e, 0xac, 0xe3, 0x35, 0x82, 0xb8, 0xe8, 0x4c, 0xa7, 0xd4, 0xe2, 0x5b, 0x59,
		0xb8, 0x9c, 0xf6, 0x37, 0x82, 0xff, 0x36, 0xb1, 0x6d, 0xdd, 0xcd, 0x63, 0x9c, 0x8a, 0xe1, 0xed,
		0x5e, 0x7f, 0xd9, 0xe6, 0x49, 0x5f, 0xba, 0xfc, 0x72, 0xd8, 0xeb, 0x97, 0xe1, 0xbb, 0x73, 0x8e,
		0xb3, 0x3b, 0x0f, 0xe8, 0xc2, 0x54, 0xfc, 0x28, 0x03, 0xf3, 0x69, 0x7e, 0x07, 0xc9, 0xd5, 0x4e,
		0x78, 0x5a, 0x90, 0x19, 0x50, 0x5a, 0x30, 0x60, 0xd5, 0x86, 0xaf, 0xf5, 0x10, 0x67, 0xad, 0x3b,
		0xc1, 0x60, 0x38, 0xf5, 0xdd, 0xcf, 0x57, 0xb3, 0x90, 0xf2, 0xf7, 0x9a, 0xff, 0x89, 0x2b, 0x1c,
		0x56, 0x33, 0x1b, 0x0e, 0xad, 0x99, 0x75, 0xda, 0x42, 0x72, 0xa9, 0xdb, 0x42, 0xc4, 0xaf, 0x64,
		0xe1, 0xe2, 0x20, 0x22, 0xd1, 0x23, 0x4d, 0x38, 0x57, 0xc3, 0x6e, 0x1d, 0x23, 0x97, 0xbe, 0x8e,
		0x21, 0x7e, 0x2d, 0x0b, 0x97, 0x52, 0xfd, 0xb4, 0xf6, 0x91, 0x36, 0x62, 0xb4, 0xe1, 0xde, 0xbb,
		0xe6, 0x7a, 0xb8, 0xa8, 0x7f, 0x83, 0xab, 0x0d, 0x5e, 0xb7, 0xcf, 0x23, 0x6d, 0x44, 0x68, 0xc3,
		0xdf, 0x73, 0x94, 0xeb, 0xe3, 0x57, 0x11, 0x1f, 0x66, 0xa0, 0x9c, 0xf2, 0xe7, 0xd0, 0x8f, 0x94,
		0x13, 0xa1, 0x9c, 0x0b, 0x04, 0x0e, 0xd0, 0x3f, 0x57, 0xb4, 0x1a, 0xc1, 0x26, 0xfd, 0xd4, 0x09,
		0x98, 0x59, 0x7e, 0x71, 0xf9, 0xde, 0x46, 0x75, 0xa5, 0xb2, 0xba, 0xb1, 0x2c, 0x55, 0x37, 0x5e,
		0x5e, 0x5b, 0xae, 0x56, 0xee, 0xbd, 0xb8, 0xb8, 0x5a, 0xb9, 0x3b, 0xf1, 0x18, 0x3a, 0x05, 0xc7,
		0x82, 0xaf, 0x17, 0x57, 0x57, 0xab, 0x74, 0x74, 0x42, 0x40, 0xa7, 0xe1, 0x44, 0x70, 0xc2, 0xd2,
		0xea, 0xfd, 0xf5, 0x65, 0x36, 0x25, 0x73, 0xe7, 0x15, 0x38, 0xa2, 0x18, 0xf5, 0xb0, 0x35, 0xb8,
		0xe3, 0xfe, 0xab, 0xe1, 0x35, 0x3b, 0x99, 0x5e, 0x13, 0x5e, 0x29, 0x3f, 0xd0, 0xc8, 0x76, 0x73,
		0xb3, 0xa4, 0x18, 0xf5, 0xb2, 0xe7, 0x3f, 0x1f, 0x97, 0x1e, 0x60, 0xdd, 0xf9, 0x5f, 0xcb, 0xec,
		0x9f, 0x20, 0xdf, 0x92, 0x1b, 0xda, 0xee, 0x95, 0xcd, 0x1c, 0x1d, 0xbb, 0xfa, 0xcf, 0x00, 0x00,
		0x00, 0xff, 0xff, 0x24, 0x98, 0xf0, 0xa2, 0xee, 0x59, 0x00, 0x00,
	},
	// uber/cadence/admin/v1/replication.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdf, 0x4e, 0x1b, 0xcd,
		0x15, 0xcf, 0xda, 0xf8, 0x0f, 0x07, 0x63, 0x9b, 0x81, 0x06, 0x87, 0x04, 0xd5, 0x71, 0x48, 0x43,
		0x68, 0x63, 0x02, 0x51, 0xaa, 0x34, 0x69, 0x54, 0x6d, 0xb0, 0x11, 0x9b, 0xf0, 0x2f, 0x63, 0x87,
		0x94, 0xa8, 0xd2, 0x6a, 0xd9, 0x1d, 0xf0, 0x16, 0x7b, 0xd7, 0x9a, 0x19, 0x9b, 0xf8, 0xa2, 0xd7,
		0x7d, 0x80, 0x5e, 0x56, 0xbd, 0x69, 0x9f, 0xa2, 0xaf, 0x50, 0xa9, 0x52, 0xdf, 0xa3, 0x2f, 0xf1,
		0x69, 0x67, 0x66, 0x6d, 0xaf, 0x6d, 0x4c, 0xf8, 0xf2, 0x49, 0xdf, 0x1d, 0x73, 0xe6, 0xf7, 0x3b,
		0xe7, 0xec, 0xf9, 0x3b, 0x18, 0x9e, 0x74, 0xce, 0x08, 0xdd, 0xb4, 0x2d, 0x87, 0x78, 0x36, 0xd9,
		0xb4, 0x9c, 0x96, 0xeb, 0x6d, 0x76, 0xb7, 0x36, 0x29, 0x69, 0x37, 0x5d, 0xdb, 0xe2, 0xae, 0xef,
		0x95, 0xdb, 0xd4, 0xe7, 0x3e, 0x7a, 0xc0, 0x08, 0xed, 0x12, 0x5a, 0x0e, 0xf0, 0x65, 0x85, 0x2f,
		0x0b, 0x7c, 0xb9, 0xbb, 0xb5, 0xf2, 0xcb, 0x0b, 0xdf, 0xbf, 0x68, 0x92, 0x4d, 0x81, 0x3d, 0xeb,
		0x9c, 0x6f, 0x72, 0xb7, 0x45, 0x18, 0xb7, 0x5a, 0x6d, 0x49, 0x5f, 0x29, 0x46, 0xed, 0xb4, 0xdd,
		0xc0, 0x8a, 0xed, 0xb7, 0x5a, 0xa1, 0x81, 0xc9, 0x08, 0xc7, 0x6f, 0x59, 0x6e, 0x88, 0x78, 0x34,
		0xd9, 0xd7, 0x86, 0xcb, 0xb8, 0x4f, 0x7b, 0x12, 0x54, 0xfa, 0x67, 0x0c, 0x16, 0xf1, 0xc0, 0xfb,
		0x03, 0xc2, 0x98, 0x75, 0x41, 0x18, 0xfa, 0x02, 0x0b, 0x43, 0x1f, 0x65, 0x72, 0x8b, 0x5d, 0xb2,
		0x82, 0x56, 0x8c, 0xaf, 0xcf, 0x6d, 0x3f, 0x2b, 0x4f, 0xfb, 0xb6, 0xf2, 0x90, 0xb6, 0xba, 0xc5,
		0x2e, 0x71, 0x9e, 0x46, 0x05, 0x0c, 0xfd, 0x0e, 0xee, 0x35, 0x2d, 0xc6, 0x4d, 0x4a, 0x38, 0x75,
		0x49, 0x97, 0x38, 0x66, 0x4b, 0x9a, 0x35, 0x5d, 0xa7, 0x10, 0x2b, 0x6a, 0xeb, 0x71, 0x7c, 0x37,
		0x00, 0xe0, 0xf0, 0x5e, 0x79, 0x65, 0x38, 0xe8, 0x1e, 0xa4, 0x1b, 0x16, 0x33, 0x5b, 0x3e, 0x25,
		0x85, 0x78, 0x51, 0x5b, 0x4f, 0xe3, 0x54, 0xc3, 0x62, 0x07, 0x3e, 0x25, 0xe8, 0x14, 0x16, 0x58,
		0xcf, 0xb3, 0x4d, 0xd6, 0xb0, 0xa8, 0x63, 0x32, 0x6e, 0xf1, 0x0e, 0x2b, 0xcc, 0x14, 0xb5, 0x9b,
		0x3d, 0xae, 0xf5, 0x3c, 0xbb, 0x16, 0xb0, 0x6a, 0x82, 0x84, 0x73, 0x2c, 0x2a, 0x28, 0xfd, 0x3b,
		0x09, 0xb9, 0x91, 0xcf, 0x42, 0x87, 0x30, 0x1b, 0x04, 0xc5, 0xe4, 0xbd, 0x36, 0x29, 0x68, 0x45,
		0x6d, 0x3d, 0xbb, 0xbd, 0x75, 0xab, 0xc0, 0xd4, 0x7b, 0x6d, 0x82, 0xd3, 0x5c, 0xfd, 0x85, 0xd6,
		0x20, 0xcb, 0xfc, 0x0e, 0xb5, 0x89, 0x88, 0xf5, 0x20, 0x12, 0x19, 0x29, 0x0d, 0x18, 0x86, 0x83,
		0xfe, 0x00, 0xf3, 0x36, 0x25, 0x2a, 0x27, 0x6e, 0x4b, 0x06, 0x61, 0x6e, 0x7b, 0xa5, 0x2c, 0x0b,
		0xaa, 0x1c, 0x16, 0x54, 0xb9, 0x1e, 0x16, 0x14, 0xce, 0x84, 0x84, 0x40, 0x84, 0xfe, 0x0c, 0x77,
		0x65, 0x91, 0x48, 0x33, 0x16, 0xe7, 0xd4, 0x3d, 0xeb, 0x70, 0x12, 0x86, 0x6a, 0x7b, 0xfa, 0x37,
		0x54, 0x04, 0x37, 0x70, 0x46, 0xef, 0x33, 0xf7, 0xee, 0xe0, 0x25, 0x67, 0x82, 0x1c, 0xfd, 0x55,
		0x83, 0x87, 0x63, 0x29, 0x19, 0xb3, 0x9b, 0x10, 0x76, 0xdf, 0xdc, 0x2a, 0x45, 0x63, 0x0e, 0xac,
		0xb2, 0x69, 0x00, 0xf4, 0x17, 0x10, 0x00, 0xd3, 0xb2, 0xb9, 0xdb, 0x75, 0x79, 0x6f, 0xcc, 0x89,
		0xa4, 0x70, 0xe2, 0xd5, 0xcd, 0x4e, 0xe8, 0x4a, 0xc3, 0x98, 0x07, 0x2b, 0xec, 0xda, 0x5b, 0xc4,
		0x61, 0x45, 0x75, 0x9d, 0x34, 0xdc, 0xdd, 0x1e, 0xb6, 0x9d, 0x12, 0xb6, 0x5f, 0x4e, 0xb7, 0xbd,
		0x27, 0xf9, 0x81, 0xe2, 0x93, 0xed, 0x88, 0xe1, 0xe5, 0xc6, 0xe4, 0x2b, 0xd4, 0x85, 0x95, 0x73,
		0xcb, 0x6d, 0xfa, 0x5d, 0x42, 0xcd, 0x96, 0x45, 0x2f, 0x09, 0x1d, 0xb6, 0x9a, 0x16, 0x56, 0x7f,
		0x3b, 0xdd, 0xea, 0xae, 0xe2, 0x1f, 0x08, 0x7a, 0xc4, 0x6c, 0xe1, 0xfc, 0x9a, 0xbb, 0x77, 0x19,
		0x80, 0x81, 0x9d, 0xd2, 0x7f, 0x62, 0xb0, 0x34, 0xa9, 0x6a, 0xd0, 0x1f, 0x21, 0xaf, 0x2a, 0xd1,
		0x6f, 0x13, 0x2a, 0x2a, 0x54, 0xf5, 0xd1, 0xb3, 0x6f, 0xa9, 0xc1, 0xa3, 0x90, 0x84, 0x73, 0x4e,
		0x54, 0x80, 0xb2, 0x10, 0x53, 0xed, 0x33, 0x8b, 0x63, 0xae, 0x83, 0x5e, 0x43, 0x52, 0x42, 0x54,
		0xb7, 0x94, 0x26, 0xeb, 0x6f, 0xbb, 0x03, 0xed, 0x58, 0x31, 0xd0, 0x63, 0xc8, 0xda, 0xbe, 0x77,
		0xee, 0x5e, 0x98, 0x5d, 0x42, 0x59, 0xe0, 0xe3, 0x8c, 0x68, 0xcb, 0x79, 0x29, 0x3d, 0x91, 0x42,
		0xf4, 0x14, 0xf2, 0xfd, 0x58, 0x87, 0xc0, 0x84, 0x00, 0xe6, 0x42, 0x79, 0x08, 0x7d, 0x0d, 0xf7,
		0xda, 0x94, 0x74, 0x5d, 0xbf, 0xc3, 0xcc, 0x31, 0x4e, 0x52, 0x70, 0x96, 0x43, 0xc0, 0x6e, 0x94,
		0x5b, 0xfa, 0xbb, 0x06, 0xab, 0x53, 0x5b, 0x21, 0xf0, 0x57, 0x8d, 0x11, 0xbb, 0xd9, 0x61, 0x9c,
		0x50, 0x11, 0xd3, 0x59, 0x3c, 0x2f, 0xa5, 0x3b, 0x52, 0x18, 0xcc, 0x51, 0xd9, 0x94, 0x2a, 0x50,
		0x09, 0x9c, 0x12, 0x67, 0xc3, 0x41, 0xaf, 0x60, 0xb6, 0xbf, 0x8d, 0xbe, 0x61, 0xbc, 0x0c, 0xc0,
		0xa5, 0xff, 0x27, 0x60, 0xe5, 0xfa, 0x1e, 0x41, 0xf7, 0x61, 0x56, 0x25, 0xdc, 0x75, 0x94, 0x57,
		0x69, 0x29, 0x30, 0x1c, 0xf4, 0x27, 0x40, 0x57, 0x3e, 0xbd, 0x3c, 0x6f, 0xfa, 0x57, 0x26, 0xf9,
		0x4a, 0xec, 0x8e, 0xa8, 0x87, 0xd8, 0xb4, 0xf1, 0x2d, 0xf3, 0xf5, 0x59, 0xb1, 0xaa, 0x21, 0x09,
		0x2f, 0x5c, 0x8d, 0x8a, 0x50, 0x01, 0x52, 0x61, 0x84, 0xe3, 0x22, 0xc2, 0xe1, 0x11, 0x3d, 0x84,
		0x0c, 0xb3, 0x1b, 0xc4, 0xe9, 0x34, 0x89, 0x08, 0x86, 0xcc, 0xee, 0x5c, 0x5f, 0x66, 0x38, 0x48,
		0x87, 0xec, 0x00, 0x22, 0x86, 0x6e, 0xe2, 0xc6, 0xa8, 0xcc, 0xf7, 0x19, 0x62, 0xea, 0xae, 0x02,
		0x30, 0x6e, 0x51, 0x2e, 0x6d, 0xc8, 0x24, 0xcf, 0x2a, 0x89, 0xe1, 0xa0, 0xb7, 0x90, 0x09, 0xaf,
		0x85, 0xfe, 0xd4, 0x8d, 0xfa, 0xe7, 0x14, 0x5e, 0x68, 0x7f, 0x0f, 0x8b, 0x62, 0x9f, 0x36, 0x88,
		0x45, 0xf9, 0x19, 0xb1, 0xb8, 0xd4, 0x92, 0xbe, 0x51, 0xcb, 0x42, 0x40, 0xdb, 0x0b, 0x59, 0x42,
		0xd7, 0x5b, 0x48, 0x39, 0x84, 0x5b, 0x6e, 0x93, 0x15, 0x66, 0x05, 0xff, 0xd1, 0xb4, 0xe0, 0x1f,
		0x5b, 0xbd, 0xa6, 0x6f, 0x39, 0x38, 0xe4, 0x04, 0x81, 0xb6, 0x38, 0x27, 0xad, 0x36, 0x2f, 0x80,
		0x2c, 0x2b, 0x75, 0x44, 0xbb, 0x90, 0x11, 0x4e, 0x06, 0x25, 0xdf, 0xa1, 0xa4, 0x30, 0x77, 0xb3,
		0xf6, 0x5d, 0x09, 0xc5, 0x73, 0x01, 0x51, 0x1d, 0xd0, 0x73, 0x58, 0x12, 0x7a, 0x82, 0x24, 0x13,
		0x6a, 0xba, 0x0e, 0xf1, 0xb8, 0xcb, 0x7b, 0x85, 0x8c, 0x28, 0x28, 0x14, 0xdc, 0x7d, 0x16, 0x57,
		0x86, 0xba, 0x41, 0x9f, 0x20, 0xa7, 0xb2, 0x6d, 0xaa, 0x51, 0x59, 0x98, 0x17, 0xc6, 0x7f, 0x33,
		0x7d, 0xce, 0xa8, 0xa6, 0x53, 0x93, 0x17, 0x67, 0xbb, 0x91, 0x73, 0xe9, 0x1f, 0x71, 0x58, 0xbe,
		0x66, 0x2a, 0xa3, 0x65, 0x48, 0x85, 0x5b, 0x5c, 0x13, 0xc9, 0x4e, 0x72, 0xb9, 0xbf, 0x23, 0x3d,
		0x10, 0xfb, 0xa6, 0x1e, 0x88, 0xff, 0x44, 0x3d, 0xe0, 0xc0, 0x2f, 0x46, 0xc2, 0x60, 0xba, 0x9c,
		0xb4, 0x82, 0xc5, 0x1f, 0xbc, 0xea, 0x9e, 0xdf, 0x26, 0x18, 0x06, 0x27, 0x2d, 0xbc, 0xd8, 0x1d,
		0x93, 0x31, 0xf4, 0x7b, 0x48, 0x92, 0x2e, 0xf1, 0x78, 0xb8, 0xd7, 0xd7, 0xa6, 0xce, 0x5a, 0x8b,
		0x5b, 0xef, 0x9a, 0xfe, 0x19, 0x56, 0x1c, 0xf4, 0x1e, 0xb2, 0x1e, 0xb9, 0x32, 0x69, 0xc7, 0x33,
		0x95, 0x96, 0xe4, 0x2d, 0xb4, 0x64, 0x3c, 0x72, 0x85, 0x3b, 0x5e, 0x55, 0x30, 0x4b, 0xff, 0xd2,
		0xa0, 0x70, 0xdd, 0xfe, 0x9a, 0x3e, 0x8b, 0x26, 0x0d, 0xf3, 0xd8, 0xe4, 0x61, 0xfe, 0xbd, 0xef,
		0xb1, 0xd2, 0xdf, 0x34, 0x58, 0x8c, 0x7a, 0x59, 0xf7, 0x2f, 0x89, 0x17, 0x38, 0x18, 0x0e, 0x68,
		0xf9, 0xee, 0x4e, 0xe0, 0xb4, 0x9a, 0xd0, 0x0c, 0x99, 0x90, 0x1b, 0xd9, 0xec, 0x6a, 0x52, 0xfe,
		0xc8, 0x75, 0x8e, 0xb3, 0xd1, 0x65, 0x5e, 0xfa, 0x6f, 0xf4, 0xbf, 0x02, 0xf1, 0xf8, 0xf4, 0xce,
		0xfd, 0x9f, 0x73, 0x84, 0xdf, 0x1f, 0x7e, 0x6f, 0xc7, 0xc5, 0x6c, 0x19, 0x3c, 0x9e, 0x87, 0xfa,
		0x6d, 0x26, 0xd2, 0x6f, 0x43, 0x83, 0x3f, 0x11, 0x1d, 0xfc, 0x6b, 0x90, 0x3d, 0x77, 0x29, 0xe3,
		0xb2, 0xd0, 0x06, 0x63, 0x39, 0x23, 0xa4, 0xa2, 0x86, 0x0c, 0x07, 0x95, 0x60, 0xde, 0x23, 0x5f,
		0x87, 0x40, 0x29, 0xb9, 0x1f, 0x02, 0x61, 0x88, 0x19, 0x5d, 0x21, 0xe9, 0xb1, 0x15, 0x12, 0xd4,
		0x62, 0x7e, 0x38, 0x9e, 0x22, 0xc5, 0xc3, 0x3b, 0x58, 0x8b, 0xee, 0xe0, 0xef, 0xf8, 0x0f, 0x29,
		0xa4, 0xb6, 0xa9, 0x6f, 0x13, 0xc6, 0xa2, 0xd4, 0xf8, 0x80, 0x7a, 0x1c, 0xde, 0xf7, 0xa9, 0xa5,
		0x0f, 0x90, 0x1b, 0x79, 0x5c, 0x44, 0x1f, 0x03, 0xda, 0x6d, 0x1e, 0x03, 0x1e, 0x2c, 0xa9, 0xc1,
		0x50, 0xd9, 0xff, 0xb8, 0xe3, 0x77, 0x3c, 0x5e, 0xf5, 0x38, 0xed, 0xa1, 0x25, 0x48, 0xd8, 0xc1,
		0x49, 0x0d, 0x46, 0x79, 0x98, 0xf6, 0x1e, 0x19, 0x7f, 0xd1, 0xc4, 0x27, 0xbc, 0x68, 0x36, 0xfe,
		0x37, 0x5e, 0xb2, 0xa2, 0x34, 0x1e, 0xc2, 0x2a, 0xae, 0x1e, 0xef, 0x1b, 0x3b, 0x7a, 0xdd, 0x38,
		0x3a, 0x34, 0xeb, 0x7a, 0xed, 0x83, 0x59, 0x3f, 0x3d, 0xae, 0x9a, 0xc6, 0xe1, 0x89, 0xbe, 0x6f,
		0x54, 0xf2, 0x77, 0x50, 0x11, 0x1e, 0x4c, 0x86, 0x54, 0x8e, 0x0e, 0x74, 0xe3, 0x30, 0xaf, 0x5d,
		0xaf, 0x64, 0xcf, 0xa8, 0xd5, 0x8f, 0xf0, 0x69, 0x3e, 0x86, 0x7e, 0x0d, 0x4f, 0x26, 0x43, 0x6a,
		0xa7, 0x87, 0x3b, 0x66, 0x6d, 0x4f, 0xc7, 0x15, 0xb3, 0x56, 0xd7, 0xeb, 0x9f, 0x6a, 0xf9, 0x38,
		0x7a, 0x02, 0x8f, 0xa6, 0x80, 0xf5, 0x9d, 0xba, 0x71, 0x62, 0xd4, 0x4f, 0xf3, 0x33, 0x68, 0x03,
		0x7e, 0x35, 0xd5, 0xb0, 0x79, 0x50, 0xad, 0xeb, 0x15, 0xbd, 0xae, 0xe7, 0x13, 0x68, 0x0d, 0x8a,
		0xd3, 0xb1, 0x27, 0xdb, 0xf9, 0x24, 0x7a, 0x0a, 0x8f, 0x27, 0xa3, 0x76, 0x75, 0x63, 0xff, 0xe8,
		0xa4, 0x8a, 0xcd, 0x03, 0x1d, 0x7f, 0xa8, 0xe2, 0x7c, 0x6a, 0xc3, 0x85, 0xdc, 0xc8, 0x5b, 0x1b,
		0x3d, 0x80, 0x82, 0x0c, 0x8a, 0x79, 0x74, 0x5c, 0xc5, 0x52, 0xc5, 0x20, 0x90, 0xf7, 0x61, 0x79,
		0xec, 0x76, 0x07, 0x57, 0xf5, 0x7a, 0x35, 0xaf, 0x4d, 0xbc, 0xfc, 0x74, 0x5c, 0x09, 0x2e, 0x63,
		0x1b, 0x87, 0x90, 0xaa, 0xec, 0x7f, 0x14, 0x09, 0x5b, 0x82, 0x7c, 0x65, 0xff, 0xe3, 0x68, 0x8e,
		0x0a, 0xb0, 0xd4, 0x97, 0x0e, 0xf9, 0x9f, 0xd7, 0xd0, 0x22, 0xe4, 0xfa, 0x37, 0x2a, 0x61, 0xb1,
		0x77, 0x2f, 0xbf, 0xbc, 0xb8, 0x70, 0x79, 0xa3, 0x73, 0x56, 0xb6, 0xfd, 0xd6, 0x66, 0xe4, 0x87,
		0x90, 0xf2, 0x05, 0xf1, 0xe4, 0x0f, 0x2f, 0xfd, 0xdf, 0x44, 0xde, 0x88, 0x3f, 0xba, 0x5b, 0x67,
		0x49, 0x21, 0x7f, 0xf1, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xe3, 0xac, 0x3b, 0xe7, 0x11,
		0x00, 0x00,
	},
	// uber/cadence/api/v1/domain.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x5d, 0x6f, 0xe3, 0x44,
		0x14, 0xc5, 0x49, 0x5b, 0xd2, 0xeb, 0x34, 0x9b, 0x9d, 0xdd, 0x6e, 0xdd, 0x80, 0x68, 0x28, 0x42,
		0x64, 0x2b, 0xe4, 0xd0, 0x20, 0x3e, 0xc4, 0x0a, 0xb1, 0x69, 0x6d, 0x96, 0xa0, 0x6e, 0x29, 0x4e,
		0xb6, 0x08, 0x5e, 0xac, 0x89, 0x3d, 0x49, 0x46, 0xeb, 0x78, 0xac, 0xf1, 0xd8, 0xdd, 0xbe, 0x21,
		0x7e, 0x1a, 0x2f, 0xf0, 0xb3, 0x90, 0xc7, 0x63, 0x37, 0x69, 0x42, 0xbb, 0xfb, 0xe6, 0xb9, 0xf7,
		0x9e, 0x33, 0xc7, 0xf7, 0xcb, 0x86, 0x76, 0x32, 0x26, 0xbc, 0xeb, 0x61, 0x9f, 0x84, 0x1e, 0xe9,
		0xe2, 0x88, 0x76, 0xd3, 0xe3, 0xae, 0xcf, 0xe6, 0x98, 0x86, 0x66, 0xc4, 0x99, 0x60, 0xa8, 0x15,
		0x13, 0x9e, 0x12, 0x6e, 0x66, 0x81, 0xa6, 0x0a, 0x34, 0x71, 0x44, 0xcd, 0xf4, 0xb8, 0xf5, 0xd1,
		0x94, 0xb1, 0x69, 0x40, 0xba, 0x32, 0x72, 0x9c, 0x4c, 0xba, 0x7e, 0xc2, 0xb1, 0xa0, 0x4c, 0x61,
		0x5b, 0x07, 0xb7, 0xfd, 0x82, 0xce, 0x49, 0x2c, 0xf0, 0x3c, 0xca, 0x03, 0x0e, 0xff, 0xa9, 0xc1,
		0x96, 0x25, 0x6f, 0x43, 0x0d, 0xa8, 0x50, 0xdf, 0xd0, 0xda, 0x5a, 0x67, 0xdb, 0xa9, 0x50, 0x1f,
		0x21, 0xd8, 0x08, 0xf1, 0x9c, 0x18, 0x15, 0x69, 0x91, 0xcf, 0xe8, 0x39, 0x6c, 0xc5, 0x02, 0x8b,
		0x24, 0x36, 0xaa, 0x6d, 0xad, 0xd3, 0xe8, 0x75, 0xcc, 0xff, 0x17, 0x67, 0xe6, 0xbc, 0x43, 0x19,
		0xef, 0x28, 0x1c, 0x6a, 0x83, 0xee, 0x93, 0xd8, 0xe3, 0x34, 0xca, 0x64, 0x1a, 0x1b, 0x92, 0x7c,
		0xd1, 0x84, 0x0e, 0x40, 0x67, 0x57, 0x21, 0xe1, 0x2e, 0x99, 0x63, 0x1a, 0x18, 0x9b, 0x32, 0x02,
		0xa4, 0xc9, 0xce, 0x2c, 0xe8, 0x39, 0x6c, 0xf8, 0x58, 0x60, 0x63, 0xab, 0x5d, 0xed, 0xe8, 0xbd,
		0xcf, 0xef, 0x97, 0x60, 0x5a, 0x58, 0x60, 0x3b, 0x14, 0xfc, 0xda, 0x91, 0x48, 0x34, 0x83, 0x4f,
		0xae, 0x18, 0x7f, 0x3d, 0x09, 0xd8, 0x95, 0x4b, 0xde, 0x10, 0x2f, 0xc9, 0x2e, 0x76, 0x39, 0x11,
		0x24, 0x94, 0x4f, 0x11, 0xe1, 0x94, 0xf9, 0xc6, 0xfb, 0x6d, 0xad, 0xa3, 0xf7, 0xf6, 0xcd, 0x3c,
		0x89, 0x66, 0x91, 0x44, 0xd3, 0x52, 0x49, 0x76, 0xda, 0x05, 0x8b, 0x5d, 0x90, 0x38, 0x05, 0xc7,
		0x85, 0xa4, 0x40, 0x3f, 0x43, 0x7d, 0x8c, 0x7d, 0x77, 0x4c, 0x43, 0xcc, 0x29, 0x89, 0x8d, 0x9a,
		0xa4, 0xfc, 0xec, 0x2e, 0xcd, 0x27, 0xd8, 0x3f, 0x51, 0xe1, 0x8e, 0x3e, 0xbe, 0x39, 0xa0, 0x31,
		0xec, 0xcd, 0x68, 0x2c, 0x18, 0xbf, 0x76, 0x31, 0xf7, 0x66, 0x34, 0xc5, 0x81, 0xab, 0xaa, 0xb1,
		0x2d, 0xab, 0x71, 0x74, 0x17, 0x6d, 0x5f, 0x41, 0x54, 0x3d, 0x76, 0x15, 0xd5, 0xb2, 0x19, 0x7d,
		0x01, 0x8f, 0x57, 0xee, 0x48, 0x38, 0x35, 0x40, 0x56, 0x01, 0xdd, 0x02, 0xbd, 0xe2, 0x14, 0xcd,
		0xa0, 0x95, 0xd2, 0x98, 0x8e, 0x69, 0x40, 0xc5, 0xaa, 0x30, 0xfd, 0x9d, 0x85, 0x19, 0x37, 0x6c,
		0xb7, 0xb4, 0x7d, 0x0d, 0x7b, 0xeb, 0x6e, 0xca, 0xe4, 0xd5, 0xa5, 0xbc, 0xdd, 0x55, 0x68, 0xa6,
		0xd0, 0x84, 0x47, 0xd8, 0x13, 0x34, 0x25, 0xae, 0x17, 0x24, 0xb1, 0x20, 0xdc, 0x95, 0x7d, 0xbd,
		0x23, 0x31, 0x0f, 0x73, 0xd7, 0x69, 0xee, 0x39, 0xcf, 0x9a, 0xfc, 0x37, 0xa8, 0xa9, 0xc0, 0xd8,
		0x68, 0xc8, 0x1e, 0x7b, 0x76, 0x97, 0x7e, 0x05, 0x75, 0x48, 0x14, 0x50, 0x4f, 0xf6, 0xc5, 0x29,
		0x0b, 0x27, 0x74, 0x5a, 0x34, 0x49, 0x49, 0x86, 0x9e, 0x42, 0x73, 0x82, 0x69, 0xc0, 0x52, 0xc2,
		0xdd, 0x94, 0xf0, 0x38, 0x1b, 0x80, 0x07, 0x6d, 0xad, 0x53, 0x75, 0x1e, 0x14, 0xf6, 0xcb, 0xdc,
		0x8c, 0x3a, 0xd0, 0xa4, 0xb1, 0x3b, 0x0d, 0xd8, 0x18, 0x07, 0x6e, 0xbe, 0x0e, 0x8c, 0x66, 0x5b,
		0xeb, 0xd4, 0x9c, 0x06, 0x8d, 0x5f, 0x48, 0xb3, 0x1a, 0xdb, 0x97, 0xb0, 0x53, 0x92, 0xd2, 0x70,
		0xc2, 0x8c, 0x87, 0xb2, 0xc5, 0xee, 0x9c, 0xcc, 0x1f, 0x15, 0x60, 0x10, 0x4e, 0x98, 0x53, 0x9f,
		0x2c, 0x9c, 0x5a, 0xdf, 0xc0, 0x76, 0x39, 0x2d, 0xa8, 0x09, 0xd5, 0xd7, 0xe4, 0x5a, 0xed, 0x84,
		0xec, 0x11, 0x3d, 0x86, 0xcd, 0x14, 0x07, 0x49, 0xb1, 0x15, 0xf2, 0xc3, 0x77, 0x95, 0x6f, 0xb5,
		0x43, 0x0b, 0x0e, 0xee, 0xc9, 0x04, 0xfa, 0x18, 0xea, 0x4b, 0x15, 0xc8, 0x79, 0x75, 0xef, 0x26,
		0xf7, 0x87, 0xff, 0x6a, 0xa0, 0x2f, 0x0c, 0x00, 0xfa, 0x15, 0x6a, 0xe5, 0xec, 0x68, 0xb2, 0x16,
		0x5f, 0xbd, 0xe5, 0xec, 0x98, 0xc5, 0x43, 0x3e, 0xf8, 0x25, 0x4d, 0x6b, 0x02, 0x3b, 0x4b, 0xae,
		0x35, 0x6f, 0xf9, 0xc3, 0xe2, 0x5b, 0xea, 0xbd, 0xa7, 0x6f, 0x73, 0xe5, 0xb5, 0x4c, 0xe6, 0x42,
		0x42, 0xfe, 0xd2, 0x60, 0x67, 0xc9, 0x89, 0x9e, 0xc0, 0x16, 0x27, 0x38, 0x66, 0xa1, 0xba, 0x4b,
		0x9d, 0x50, 0x0b, 0x6a, 0x2c, 0x22, 0x1c, 0x0b, 0xc6, 0x55, 0x5e, 0xcb, 0x33, 0xfa, 0x1e, 0xea,
		0x1e, 0x27, 0x58, 0x10, 0xdf, 0xcd, 0x76, 0xb7, 0xdc, 0xbb, 0x7a, 0xaf, 0xb5, 0xb2, 0x93, 0x46,
		0xc5, 0x62, 0x77, 0x74, 0x15, 0x9f, 0x59, 0x0e, 0xff, 0xae, 0x40, 0x7d, 0xb1, 0xda, 0x6b, 0x7b,
		0x50, 0x5b, 0xdf, 0x83, 0x23, 0x30, 0xca, 0xd0, 0x58, 0x60, 0x2e, 0xdc, 0xf2, 0xeb, 0xa1, 0x12,
		0x73, 0x97, 0x8c, 0x27, 0x05, 0x76, 0x98, 0x41, 0x4b, 0x3b, 0xba, 0x84, 0xfd, 0x92, 0x95, 0xbc,
		0x89, 0x28, 0x27, 0x0b, 0xb4, 0xf7, 0xbf, 0xdd, 0x5e, 0x01, 0xb6, 0x25, 0xf6, 0x86, 0xb7, 0x07,
		0xbb, 0x1e, 0x9b, 0x47, 0x01, 0xc9, 0x52, 0x15, 0xcf, 0x30, 0xf7, 0x5d, 0x8f, 0x25, 0xa1, 0x90,
		0x9f, 0x98, 0x4d, 0xe7, 0x51, 0xe9, 0x1c, 0x66, 0xbe, 0xd3, 0xcc, 0x85, 0x3e, 0x85, 0x46, 0x44,
		0x42, 0x9f, 0x86, 0xd3, 0x1c, 0x11, 0x1b, 0x9b, 0xed, 0x6a, 0x67, 0xd3, 0xd9, 0x51, 0x56, 0x19,
		0x1a, 0x1f, 0xfd, 0xa9, 0x41, 0x7d, 0xf1, 0x63, 0x86, 0xf6, 0x61, 0xd7, 0xfa, 0xe5, 0x65, 0x7f,
		0x70, 0xee, 0x0e, 0x47, 0xfd, 0xd1, 0xab, 0xa1, 0x3b, 0x38, 0xbf, 0xec, 0x9f, 0x0d, 0xac, 0xe6,
		0x7b, 0xe8, 0x43, 0x30, 0x96, 0x5d, 0x8e, 0xfd, 0x62, 0x30, 0x1c, 0xd9, 0x8e, 0x6d, 0x35, 0xb5,
		0x55, 0xaf, 0x65, 0x5f, 0x38, 0xf6, 0x69, 0x7f, 0x64, 0x5b, 0xcd, 0xca, 0x2a, 0xad, 0x65, 0x9f,
		0xd9, 0x99, 0xab, 0x7a, 0x34, 0x83, 0xc6, 0xad, 0x6d, 0xf8, 0x01, 0xec, 0xf5, 0x9d, 0xd3, 0x9f,
		0x06, 0x97, 0xfd, 0xb3, 0xb5, 0x2a, 0x6e, 0x3b, 0xad, 0xc1, 0xb0, 0x7f, 0x72, 0x26, 0x55, 0xac,
		0x81, 0xda, 0xe7, 0xb9, 0xb3, 0x72, 0xf2, 0x3b, 0xec, 0x79, 0x6c, 0xbe, 0xae, 0xd5, 0x4f, 0xf4,
		0x3c, 0x09, 0x17, 0x59, 0x55, 0x2e, 0xb4, 0x3f, 0xba, 0x53, 0x2a, 0x66, 0xc9, 0xd8, 0xf4, 0xd8,
		0xbc, 0xbb, 0xf4, 0x17, 0x63, 0x4e, 0x49, 0x98, 0xff, 0x72, 0xa8, 0x1f, 0x9a, 0x67, 0x38, 0xa2,
		0xe9, 0xf1, 0x78, 0x4b, 0xda, 0xbe, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xaf, 0xff, 0xe7,
		0xf4, 0x08, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) AdminAPIYARPCClient {
			return NewAdminAPIYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
