// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/clock (interfaces: TimerGate)
//
// Generated by this command:
//
//	mockgen -package=clock -destination=timer_gate_mock.go github.com/uber/cadence/common/clock TimerGate
//

// Package clock is a generated GoMock package.
package clock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTimerGate is a mock of TimerGate interface.
type MockTimerGate struct {
	ctrl     *gomock.Controller
	recorder *MockTimerGateMockRecorder
	isgomock struct{}
}

// MockTimerGateMockRecorder is the mock recorder for MockTimerGate.
type MockTimerGateMockRecorder struct {
	mock *MockTimerGate
}

// NewMockTimerGate creates a new mock instance.
func NewMockTimerGate(ctrl *gomock.Controller) *MockTimerGate {
	mock := &MockTimerGate{ctrl: ctrl}
	mock.recorder = &MockTimerGateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimerGate) EXPECT() *MockTimerGateMockRecorder {
	return m.recorder
}

// Chan mocks base method.
func (m *MockTimerGate) Chan() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Chan indicates an expected call of Chan.
func (mr *MockTimerGateMockRecorder) Chan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockTimerGate)(nil).Chan))
}

// FireAfter mocks base method.
func (m *MockTimerGate) FireAfter(t time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FireAfter", t)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FireAfter indicates an expected call of FireAfter.
func (mr *MockTimerGateMockRecorder) FireAfter(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FireAfter", reflect.TypeOf((*MockTimerGate)(nil).FireAfter), t)
}

// Stop mocks base method.
func (m *MockTimerGate) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTimerGateMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTimerGate)(nil).Stop))
}

// Update mocks base method.
func (m *MockTimerGate) Update(t time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", t)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTimerGateMockRecorder) Update(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTimerGate)(nil).Update), t)
}
