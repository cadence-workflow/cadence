name: CI Checks
on: 
  push:
  pull_request:

jobs:
  idl-submodule-points-to-master:
    if: github.event_name == 'push'
    name: IDL submodule points to master
    runs-on: ubuntu-latest # uses ubuntu as runner instead of kubernetes like buildkite
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true # ensures git submodules are intialized and updated

      # - name: Check IDL submodule status (must point to master)
        # run: make .idl-status # TODO: add this back in

  golang-unit-test:
    if: github.event_name == 'push'
    name: Golang unit test
    runs-on: ubuntu-latest
    needs: idl-submodule-points-to-master
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # version from cadence/docker/buildkite/Dockerfile

      - name: Not rebuilding binaries and not regenerating code
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make .just-build

      - name: Run tests with coverage
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_profile
      
      - name: Generate coverage metadata
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            ./scripts/github_actions/gen_coverage_metadata.sh .build/coverage/metadata.txt

      - name: Run docker compose unit test
        run: docker compose -f docker/github_actions/docker-compose.yml run unit-test
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-unit-test-coverage
          path: |
            .build/coverage/*.out
            .build/coverage/metadata.txt


  golangci-lint-validate-code-is-clean:
    if: github.event_name == 'push'
    name: Golangci lint validate code is clean
    runs-on: ubuntu-latest
    needs: golang-unit-test

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run golint
        run: ./scripts/github_actions/golint.sh
      
      - name: Run coverage report
        run: docker compose -f docker/github_actions/docker-compose.yml run coverage-report
        working-directory: .


  golang-integration-test-with-cassandra:
    if: github.event_name == 'push'
    name: Golang integration test with cassandra
    runs-on: ubuntu-latest
    needs: golangci-lint-validate-code-is-clean

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run integration profile for cassandra
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_integration_profile

      - name: Run docker compose integration test cassandra
        run: docker compose -f docker/github_actions/docker-compose.yml run integration-test-cassandra
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-cassandra-integration-coverage
          path: .build/coverage/*.out


  golang-integration-test-with-cassandra-and-elasticsearch-v7:
    if: github.event_name == 'push'
    name: Golang integration test with cassandra and elasticsearch v7
    runs-on: ubuntu-latest
    needs: golang-integration-test-with-cassandra

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run integration profile for cassandra and elasticsearch v7
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_integration_profile

      - name: Run docker compose integration test cassandra and elasticsearch v7
        run: docker compose -f docker/github_actions/docker-compose-es7.yml run integration-test-cassandra
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-cassandra-and-elasticsearch-v7-integration-coverage
          path: .build/coverage/*.out


  golang-integration-test-with-cassandra-and-pinot:
    if: github.event_name == 'push'
    name: Golang integration test with cassandra and pinot
    runs-on: ubuntu-latest
    needs: golang-integration-test-with-cassandra

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run .just-build
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make .just-build

      - name: Make the directory for the pinot coverage file
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            mkdir -p .build/coverage

      - name: Run docker compose integration test cassandra and pinot # runs in docker compose so has right env vars
        run: docker compose -f docker/github_actions/docker-compose-pinot.yml run integration-test-cassandra-pinot go test -timeout 600s -run ^TestPinotIntegrationSuite -tags pinotintegration -count 1 -v -coverprofile=.build/coverage/pinot.out github.com/uber/cadence/host
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-cassandra-pinot-integration-coverage
          path: .build/coverage/*.out


  golang-integration-test-with-cassandra-with-opensearch-v2:
    if: github.event_name == 'push'
    name: Golang integration test with cassandra with opensearch v2
    runs-on: ubuntu-latest
    needs: golang-integration-test-with-cassandra

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run integration profile for cassandra and opensearch v2
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_integration_profile

      - name: Run docker compose integration test cassandra and opensearch v2
        run: docker compose -f docker/github_actions/docker-compose-opensearch2.yml run integration-test-cassandra
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-cassandra-and-opensearch-v2-integration-coverage
          path: .build/coverage/*.out


  golang-integration-ndc-test-with-cassandra:
    if: github.event_name == 'push'
    name: Golang integration ndc test with cassandra
    runs-on: ubuntu-latest
    needs: golang-integration-test-with-cassandra

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run ndc profile for cassandra
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_ndc_profile

      - name: Run docker ndc integration test cassandra
        run: docker compose -f docker/github_actions/docker-compose.yml run integration-test-ndc-cassandra
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-cassandra-ndc-integration-coverage
          path: .build/coverage/*.out


  golang-integration-test-with-mysql:
    if: github.event_name == 'push'
    name: Golang integration test with mysql
    runs-on: ubuntu-latest
    needs: golangci-lint-validate-code-is-clean

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run integration profile for mysql
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_integration_profile

      - name: Run docker compose integration test mysql
        run: docker compose -f docker/github_actions/docker-compose.yml run integration-test-mysql
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-mysql-integration-coverage
          path: .build/coverage/*.out
          

  golang-integration-ndc-test-with-mysql:
    if: github.event_name == 'push'
    name: Golang integration ndc test with mysql
    runs-on: ubuntu-latest
    needs: golang-integration-test-with-mysql

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run ndc profile for mysql
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_ndc_profile

      - name: Run docker ndc integration test mysql
        run: docker compose -f docker/github_actions/docker-compose.yml run integration-test-ndc-mysql
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-mysql-ndc-integration-coverage
          path: .build/coverage/*.out


  golang-integration-test-with-postgres:
    if: github.event_name == 'push'
    name: Golang integration test with postgres
    runs-on: ubuntu-latest
    needs: golangci-lint-validate-code-is-clean

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run integration profile for postgres
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_integration_profile

      - name: Run docker compose integration test postgres
        run: docker compose -f docker/github_actions/docker-compose.yml run integration-test-postgres
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-postgres-integration-coverage
          path: .build/coverage/*.out
             

  golang-integration-test-with-sqlite:
    if: github.event_name == 'push'
    name: Golang integration test with sqlite
    runs-on: ubuntu-latest
    needs: golangci-lint-validate-code-is-clean
    continue-on-error: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run integration profile for sqlite
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_integration_profile

      - name: Run docker compose integration test sqlite
        run: docker compose -f docker/github_actions/docker-compose.yml run integration-test-sqlite
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-sqlite-integration-coverage
          path: .build/coverage/*.out


  golang-integration-ndc-test-with-postgres:
    if: github.event_name == 'push'
    name: Golang integration ndc test with postgres
    runs-on: ubuntu-latest
    needs: golang-integration-test-with-postgres

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run ndc profile for postgres
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make cover_ndc_profile

      - name: Run docker compose ndc test postgres
        run: docker compose -f docker/github_actions/docker-compose.yml run integration-test-ndc-postgres
        working-directory: .

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-postgres-ndc-integration-coverage
          path: .build/coverage/*.out


  golang-async-wf-integration-test-with-kafka:
    if: github.event_name == 'push'
    name: Golang async wf integration test with kafka
    runs-on: ubuntu-latest
    needs: golangci-lint-validate-code-is-clean

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Run make .just-build
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 25
          command: |
            make .just-build

      - name: Run async wf integration test # runs in docker compose so has right env vars
        run: docker compose -f docker/github_actions/docker-compose.yml run integration-test-async-wf go test -timeout 60s -run ^TestAsyncWFIntegrationSuite -tags asyncwfintegration -count 1 -v github.com/uber/cadence/host

