// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/service/history/queuev2 (interfaces: VirtualQueueManager)
//
// Generated by this command:
//
//	mockgen -destination virtual_queue_manager_mock.go -package queuev2 github.com/uber/cadence/service/history/queuev2 VirtualQueueManager
//

// Package queuev2 is a generated GoMock package.
package queuev2

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVirtualQueueManager is a mock of VirtualQueueManager interface.
type MockVirtualQueueManager struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualQueueManagerMockRecorder
	isgomock struct{}
}

// MockVirtualQueueManagerMockRecorder is the mock recorder for MockVirtualQueueManager.
type MockVirtualQueueManagerMockRecorder struct {
	mock *MockVirtualQueueManager
}

// NewMockVirtualQueueManager creates a new mock instance.
func NewMockVirtualQueueManager(ctrl *gomock.Controller) *MockVirtualQueueManager {
	mock := &MockVirtualQueueManager{ctrl: ctrl}
	mock.recorder = &MockVirtualQueueManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualQueueManager) EXPECT() *MockVirtualQueueManagerMockRecorder {
	return m.recorder
}

// AddNewVirtualSliceToRootQueue mocks base method.
func (m *MockVirtualQueueManager) AddNewVirtualSliceToRootQueue(arg0 VirtualSlice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNewVirtualSliceToRootQueue", arg0)
}

// AddNewVirtualSliceToRootQueue indicates an expected call of AddNewVirtualSliceToRootQueue.
func (mr *MockVirtualQueueManagerMockRecorder) AddNewVirtualSliceToRootQueue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewVirtualSliceToRootQueue", reflect.TypeOf((*MockVirtualQueueManager)(nil).AddNewVirtualSliceToRootQueue), arg0)
}

// GetState mocks base method.
func (m *MockVirtualQueueManager) GetState() map[int64][]VirtualSliceState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(map[int64][]VirtualSliceState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockVirtualQueueManagerMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockVirtualQueueManager)(nil).GetState))
}

// Start mocks base method.
func (m *MockVirtualQueueManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockVirtualQueueManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualQueueManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockVirtualQueueManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockVirtualQueueManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVirtualQueueManager)(nil).Stop))
}

// UpdateAndGetState mocks base method.
func (m *MockVirtualQueueManager) UpdateAndGetState() map[int64][]VirtualSliceState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAndGetState")
	ret0, _ := ret[0].(map[int64][]VirtualSliceState)
	return ret0
}

// UpdateAndGetState indicates an expected call of UpdateAndGetState.
func (mr *MockVirtualQueueManagerMockRecorder) UpdateAndGetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAndGetState", reflect.TypeOf((*MockVirtualQueueManager)(nil).UpdateAndGetState))
}
