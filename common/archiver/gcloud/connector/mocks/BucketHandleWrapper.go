// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/archiver/gcloud/connector (interfaces: BucketHandleWrapper)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/BucketHandleWrapper.go github.com/uber/cadence/common/archiver/gcloud/connector BucketHandleWrapper
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "cloud.google.com/go/storage"
	connector "github.com/uber/cadence/common/archiver/gcloud/connector"
	gomock "go.uber.org/mock/gomock"
)

// MockBucketHandleWrapper is a mock of BucketHandleWrapper interface.
type MockBucketHandleWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockBucketHandleWrapperMockRecorder
	isgomock struct{}
}

// MockBucketHandleWrapperMockRecorder is the mock recorder for MockBucketHandleWrapper.
type MockBucketHandleWrapperMockRecorder struct {
	mock *MockBucketHandleWrapper
}

// NewMockBucketHandleWrapper creates a new mock instance.
func NewMockBucketHandleWrapper(ctrl *gomock.Controller) *MockBucketHandleWrapper {
	mock := &MockBucketHandleWrapper{ctrl: ctrl}
	mock.recorder = &MockBucketHandleWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketHandleWrapper) EXPECT() *MockBucketHandleWrapperMockRecorder {
	return m.recorder
}

// Attrs mocks base method.
func (m *MockBucketHandleWrapper) Attrs(ctx context.Context) (*storage.BucketAttrs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attrs", ctx)
	ret0, _ := ret[0].(*storage.BucketAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attrs indicates an expected call of Attrs.
func (mr *MockBucketHandleWrapperMockRecorder) Attrs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockBucketHandleWrapper)(nil).Attrs), ctx)
}

// Object mocks base method.
func (m *MockBucketHandleWrapper) Object(name string) connector.ObjectHandleWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object", name)
	ret0, _ := ret[0].(connector.ObjectHandleWrapper)
	return ret0
}

// Object indicates an expected call of Object.
func (mr *MockBucketHandleWrapperMockRecorder) Object(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockBucketHandleWrapper)(nil).Object), name)
}

// Objects mocks base method.
func (m *MockBucketHandleWrapper) Objects(ctx context.Context, q *storage.Query) connector.ObjectIteratorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Objects", ctx, q)
	ret0, _ := ret[0].(connector.ObjectIteratorWrapper)
	return ret0
}

// Objects indicates an expected call of Objects.
func (mr *MockBucketHandleWrapperMockRecorder) Objects(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Objects", reflect.TypeOf((*MockBucketHandleWrapper)(nil).Objects), ctx, q)
}
