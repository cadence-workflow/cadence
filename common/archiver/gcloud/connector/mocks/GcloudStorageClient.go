// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/archiver/gcloud/connector"
)

// NewGcloudStorageClient creates a new instance of GcloudStorageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGcloudStorageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GcloudStorageClient {
	mock := &GcloudStorageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GcloudStorageClient is an autogenerated mock type for the GcloudStorageClient type
type GcloudStorageClient struct {
	mock.Mock
}

type GcloudStorageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GcloudStorageClient) EXPECT() *GcloudStorageClient_Expecter {
	return &GcloudStorageClient_Expecter{mock: &_m.Mock}
}

// Bucket provides a mock function for the type GcloudStorageClient
func (_mock *GcloudStorageClient) Bucket(URI string) connector.BucketHandleWrapper {
	ret := _mock.Called(URI)

	if len(ret) == 0 {
		panic("no return value specified for Bucket")
	}

	var r0 connector.BucketHandleWrapper
	if returnFunc, ok := ret.Get(0).(func(string) connector.BucketHandleWrapper); ok {
		r0 = returnFunc(URI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connector.BucketHandleWrapper)
		}
	}
	return r0
}

// GcloudStorageClient_Bucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bucket'
type GcloudStorageClient_Bucket_Call struct {
	*mock.Call
}

// Bucket is a helper method to define mock.On call
//   - URI string
func (_e *GcloudStorageClient_Expecter) Bucket(URI interface{}) *GcloudStorageClient_Bucket_Call {
	return &GcloudStorageClient_Bucket_Call{Call: _e.mock.On("Bucket", URI)}
}

func (_c *GcloudStorageClient_Bucket_Call) Run(run func(URI string)) *GcloudStorageClient_Bucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GcloudStorageClient_Bucket_Call) Return(bucketHandleWrapper connector.BucketHandleWrapper) *GcloudStorageClient_Bucket_Call {
	_c.Call.Return(bucketHandleWrapper)
	return _c
}

func (_c *GcloudStorageClient_Bucket_Call) RunAndReturn(run func(URI string) connector.BucketHandleWrapper) *GcloudStorageClient_Bucket_Call {
	_c.Call.Return(run)
	return _c
}
