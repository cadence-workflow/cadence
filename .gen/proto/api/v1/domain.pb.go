// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/domain.proto

package apiv1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DomainStatus int32

const (
	DOMAIN_STATUS_INVALID    DomainStatus = 0
	DOMAIN_STATUS_REGISTERED DomainStatus = 1
	DOMAIN_STATUS_DEPRECATED DomainStatus = 2
	DOMAIN_STATUS_DELETED    DomainStatus = 3
)

var DomainStatus_name = map[int32]string{
	0: "DOMAIN_STATUS_INVALID",
	1: "DOMAIN_STATUS_REGISTERED",
	2: "DOMAIN_STATUS_DEPRECATED",
	3: "DOMAIN_STATUS_DELETED",
}

var DomainStatus_value = map[string]int32{
	"DOMAIN_STATUS_INVALID":    0,
	"DOMAIN_STATUS_REGISTERED": 1,
	"DOMAIN_STATUS_DEPRECATED": 2,
	"DOMAIN_STATUS_DELETED":    3,
}

func (DomainStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{0}
}

type ArchivalStatus int32

const (
	ARCHIVAL_STATUS_INVALID  ArchivalStatus = 0
	ARCHIVAL_STATUS_DISABLED ArchivalStatus = 1
	ARCHIVAL_STATUS_ENABLED  ArchivalStatus = 2
)

var ArchivalStatus_name = map[int32]string{
	0: "ARCHIVAL_STATUS_INVALID",
	1: "ARCHIVAL_STATUS_DISABLED",
	2: "ARCHIVAL_STATUS_ENABLED",
}

var ArchivalStatus_value = map[string]int32{
	"ARCHIVAL_STATUS_INVALID":  0,
	"ARCHIVAL_STATUS_DISABLED": 1,
	"ARCHIVAL_STATUS_ENABLED":  2,
}

func (ArchivalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{1}
}

type Domain struct {
	Id                               string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                             string                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status                           DomainStatus                       `protobuf:"varint,3,opt,name=status,proto3,enum=uber.cadence.api.v1.DomainStatus" json:"status,omitempty"`
	Description                      string                             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	OwnerEmail                       string                             `protobuf:"bytes,5,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"`
	Data                             map[string]string                  `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkflowExecutionRetentionPeriod *time.Duration                     `protobuf:"bytes,7,opt,name=workflow_execution_retention_period,json=workflowExecutionRetentionPeriod,proto3,stdduration" json:"workflow_execution_retention_period,omitempty"`
	BadBinaries                      *BadBinaries                       `protobuf:"bytes,8,opt,name=bad_binaries,json=badBinaries,proto3" json:"bad_binaries,omitempty"`
	HistoryArchival                  *Archival                          `protobuf:"bytes,9,opt,name=history_archival,json=historyArchival,proto3" json:"history_archival,omitempty"`
	VisibilityArchival               *Archival                          `protobuf:"bytes,10,opt,name=visibility_archival,json=visibilityArchival,proto3" json:"visibility_archival,omitempty"`
	ActiveClusterName                string                             `protobuf:"bytes,11,opt,name=active_cluster_name,json=activeClusterName,proto3" json:"active_cluster_name,omitempty"`
	Clusters                         []*ClusterReplicationConfiguration `protobuf:"bytes,12,rep,name=clusters,proto3" json:"clusters,omitempty"`
	FailoverVersion                  int64                              `protobuf:"varint,13,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	IsGlobalDomain                   bool                               `protobuf:"varint,14,opt,name=is_global_domain,json=isGlobalDomain,proto3" json:"is_global_domain,omitempty"`
}

func (m *Domain) Reset()      { *m = Domain{} }
func (*Domain) ProtoMessage() {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{0}
}
func (m *Domain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return m.Size()
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain) GetStatus() DomainStatus {
	if m != nil {
		return m.Status
	}
	return DOMAIN_STATUS_INVALID
}

func (m *Domain) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Domain) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *Domain) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Domain) GetWorkflowExecutionRetentionPeriod() *time.Duration {
	if m != nil {
		return m.WorkflowExecutionRetentionPeriod
	}
	return nil
}

func (m *Domain) GetBadBinaries() *BadBinaries {
	if m != nil {
		return m.BadBinaries
	}
	return nil
}

func (m *Domain) GetHistoryArchival() *Archival {
	if m != nil {
		return m.HistoryArchival
	}
	return nil
}

func (m *Domain) GetVisibilityArchival() *Archival {
	if m != nil {
		return m.VisibilityArchival
	}
	return nil
}

func (m *Domain) GetActiveClusterName() string {
	if m != nil {
		return m.ActiveClusterName
	}
	return ""
}

func (m *Domain) GetClusters() []*ClusterReplicationConfiguration {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *Domain) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *Domain) GetIsGlobalDomain() bool {
	if m != nil {
		return m.IsGlobalDomain
	}
	return false
}

type ClusterReplicationConfiguration struct {
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (m *ClusterReplicationConfiguration) Reset()      { *m = ClusterReplicationConfiguration{} }
func (*ClusterReplicationConfiguration) ProtoMessage() {}
func (*ClusterReplicationConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{1}
}
func (m *ClusterReplicationConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterReplicationConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterReplicationConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterReplicationConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterReplicationConfiguration.Merge(m, src)
}
func (m *ClusterReplicationConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ClusterReplicationConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterReplicationConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterReplicationConfiguration proto.InternalMessageInfo

func (m *ClusterReplicationConfiguration) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type BadBinaries struct {
	Binaries map[string]*BadBinaryInfo `protobuf:"bytes,1,rep,name=binaries,proto3" json:"binaries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BadBinaries) Reset()      { *m = BadBinaries{} }
func (*BadBinaries) ProtoMessage() {}
func (*BadBinaries) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{2}
}
func (m *BadBinaries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadBinaries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadBinaries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadBinaries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadBinaries.Merge(m, src)
}
func (m *BadBinaries) XXX_Size() int {
	return m.Size()
}
func (m *BadBinaries) XXX_DiscardUnknown() {
	xxx_messageInfo_BadBinaries.DiscardUnknown(m)
}

var xxx_messageInfo_BadBinaries proto.InternalMessageInfo

func (m *BadBinaries) GetBinaries() map[string]*BadBinaryInfo {
	if m != nil {
		return m.Binaries
	}
	return nil
}

type BadBinaryInfo struct {
	Reason      string     `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Operator    string     `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	CreatedTime *time.Time `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3,stdtime" json:"created_time,omitempty"`
}

func (m *BadBinaryInfo) Reset()      { *m = BadBinaryInfo{} }
func (*BadBinaryInfo) ProtoMessage() {}
func (*BadBinaryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{3}
}
func (m *BadBinaryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadBinaryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadBinaryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadBinaryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadBinaryInfo.Merge(m, src)
}
func (m *BadBinaryInfo) XXX_Size() int {
	return m.Size()
}
func (m *BadBinaryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BadBinaryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BadBinaryInfo proto.InternalMessageInfo

func (m *BadBinaryInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BadBinaryInfo) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *BadBinaryInfo) GetCreatedTime() *time.Time {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

type Archival struct {
	Status ArchivalStatus `protobuf:"varint,1,opt,name=status,proto3,enum=uber.cadence.api.v1.ArchivalStatus" json:"status,omitempty"`
	Uri    string         `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *Archival) Reset()      { *m = Archival{} }
func (*Archival) ProtoMessage() {}
func (*Archival) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{4}
}
func (m *Archival) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Archival) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Archival.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Archival) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Archival.Merge(m, src)
}
func (m *Archival) XXX_Size() int {
	return m.Size()
}
func (m *Archival) XXX_DiscardUnknown() {
	xxx_messageInfo_Archival.DiscardUnknown(m)
}

var xxx_messageInfo_Archival proto.InternalMessageInfo

func (m *Archival) GetStatus() ArchivalStatus {
	if m != nil {
		return m.Status
	}
	return ARCHIVAL_STATUS_INVALID
}

func (m *Archival) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func init() {
	proto.RegisterEnum("uber.cadence.api.v1.DomainStatus", DomainStatus_name, DomainStatus_value)
	proto.RegisterEnum("uber.cadence.api.v1.ArchivalStatus", ArchivalStatus_name, ArchivalStatus_value)
	proto.RegisterType((*Domain)(nil), "uber.cadence.api.v1.Domain")
	proto.RegisterMapType((map[string]string)(nil), "uber.cadence.api.v1.Domain.DataEntry")
	proto.RegisterType((*ClusterReplicationConfiguration)(nil), "uber.cadence.api.v1.ClusterReplicationConfiguration")
	proto.RegisterType((*BadBinaries)(nil), "uber.cadence.api.v1.BadBinaries")
	proto.RegisterMapType((map[string]*BadBinaryInfo)(nil), "uber.cadence.api.v1.BadBinaries.BinariesEntry")
	proto.RegisterType((*BadBinaryInfo)(nil), "uber.cadence.api.v1.BadBinaryInfo")
	proto.RegisterType((*Archival)(nil), "uber.cadence.api.v1.Archival")
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/api/v1/domain.proto", fileDescriptor_824795d6ae7d8e2f)
}

var fileDescriptor_824795d6ae7d8e2f = []byte{
	// 901 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x41, 0x73, 0xdb, 0x44,
	0x14, 0xf6, 0xda, 0x89, 0x71, 0x9e, 0x92, 0xd4, 0x6c, 0x80, 0xaa, 0xa6, 0x28, 0xaa, 0x3b, 0xcc,
	0x98, 0x1e, 0xe4, 0x89, 0x61, 0x86, 0x16, 0x4e, 0xb6, 0xa5, 0x69, 0xcd, 0x04, 0xe3, 0x91, 0x4d,
	0x66, 0xe0, 0x22, 0xd6, 0xd2, 0xda, 0xd9, 0xa9, 0xac, 0xd5, 0xac, 0x64, 0x87, 0xdc, 0x7a, 0xe4,
	0xd8, 0x23, 0x3f, 0x81, 0xdf, 0xc0, 0x99, 0x03, 0xc7, 0x1c, 0x7b, 0x83, 0x38, 0x17, 0x8e, 0xfd,
	0x09, 0x8c, 0x56, 0xb2, 0x63, 0x27, 0x9e, 0xb4, 0xb7, 0xd5, 0xfb, 0xde, 0xfb, 0xf6, 0xe9, 0xdb,
	0xef, 0x3d, 0xd0, 0xa7, 0x43, 0x2a, 0xea, 0x2e, 0xf1, 0x68, 0xe0, 0xd2, 0x3a, 0x09, 0x59, 0x7d,
	0x76, 0x54, 0xf7, 0xf8, 0x84, 0xb0, 0xc0, 0x08, 0x05, 0x8f, 0x39, 0x3e, 0x48, 0x32, 0x8c, 0x2c,
	0xc3, 0x20, 0x21, 0x33, 0x66, 0x47, 0x15, 0x6d, 0xcc, 0xf9, 0xd8, 0xa7, 0x75, 0x99, 0x32, 0x9c,
	0x8e, 0xea, 0xde, 0x54, 0x90, 0x98, 0xf1, 0xac, 0xa8, 0x72, 0x78, 0x13, 0x8f, 0xd9, 0x84, 0x46,
	0x31, 0x99, 0x84, 0x59, 0xc2, 0x43, 0x8f, 0x86, 0x34, 0x48, 0x38, 0x19, 0x8d, 0xea, 0x63, 0x3e,
	0xe6, 0x32, 0x9e, 0xa2, 0xd5, 0xbf, 0x8a, 0x50, 0x34, 0x65, 0x13, 0x78, 0x1f, 0xf2, 0xcc, 0x53,
	0x91, 0x8e, 0x6a, 0x3b, 0x76, 0x9e, 0x79, 0x18, 0xc3, 0x56, 0x40, 0x26, 0x54, 0xcd, 0xcb, 0x88,
	0x3c, 0xe3, 0x67, 0x50, 0x8c, 0x62, 0x12, 0x4f, 0x23, 0xb5, 0xa0, 0xa3, 0xda, 0x7e, 0xe3, 0x91,
	0xb1, 0xa1, 0x67, 0x23, 0x25, 0xec, 0xcb, 0x44, 0x3b, 0x2b, 0xc0, 0x3a, 0x28, 0x1e, 0x8d, 0x5c,
	0xc1, 0xc2, 0xa4, 0x7b, 0x75, 0x4b, 0xb2, 0xae, 0x86, 0xf0, 0x21, 0x28, 0xfc, 0x2c, 0xa0, 0xc2,
	0xa1, 0x13, 0xc2, 0x7c, 0x75, 0x5b, 0x66, 0x80, 0x0c, 0x59, 0x49, 0x04, 0x3f, 0x83, 0x2d, 0x8f,
	0xc4, 0x44, 0x2d, 0xea, 0x85, 0x9a, 0xd2, 0xf8, 0xfc, 0x8e, 0xbb, 0x0d, 0x93, 0xc4, 0xc4, 0x0a,
	0x62, 0x71, 0x6e, 0xcb, 0x12, 0x1c, 0xc0, 0xe3, 0x33, 0x2e, 0x5e, 0x8e, 0x7c, 0x7e, 0xe6, 0xd0,
	0x5f, 0xa9, 0x3b, 0x4d, 0x6e, 0x74, 0x04, 0x8d, 0x69, 0x20, 0x4f, 0x21, 0x15, 0x8c, 0x7b, 0xea,
	0x07, 0x3a, 0xaa, 0x29, 0x8d, 0x07, 0x46, 0x2a, 0xaa, 0xb1, 0x10, 0xd5, 0x30, 0x33, 0xd1, 0x5b,
	0x5b, 0xbf, 0xff, 0x73, 0x88, 0x6c, 0x7d, 0xc1, 0x65, 0x2d, 0xa8, 0xec, 0x05, 0x53, 0x4f, 0x12,
	0xe1, 0x36, 0xec, 0x0e, 0x89, 0xe7, 0x0c, 0x59, 0x40, 0x04, 0xa3, 0x91, 0x5a, 0x92, 0xc4, 0xfa,
	0xc6, 0x96, 0x5b, 0xc4, 0x6b, 0x65, 0x79, 0xb6, 0x32, 0xbc, 0xfe, 0xc0, 0x2f, 0xa0, 0x7c, 0xca,
	0xa2, 0x98, 0x8b, 0x73, 0x87, 0x08, 0xf7, 0x94, 0xcd, 0x88, 0xaf, 0xee, 0x48, 0xa2, 0xcf, 0x36,
	0x12, 0x35, 0xb3, 0x24, 0xfb, 0x5e, 0x56, 0xb6, 0x08, 0xe0, 0x2e, 0x1c, 0xcc, 0x58, 0xc4, 0x86,
	0xcc, 0x67, 0xf1, 0x0a, 0x19, 0xbc, 0x0f, 0x19, 0xbe, 0xae, 0x5c, 0xf2, 0x19, 0x70, 0x40, 0xdc,
	0x98, 0xcd, 0xa8, 0xe3, 0xfa, 0xd3, 0x28, 0xa6, 0xc2, 0x91, 0x56, 0x51, 0xe4, 0x93, 0x7d, 0x98,
	0x42, 0xed, 0x14, 0xe9, 0x26, 0xbe, 0xe9, 0x41, 0x29, 0x4b, 0x8c, 0xd4, 0x5d, 0xf9, 0x7a, 0x5f,
	0x6d, 0xbc, 0x34, 0xab, 0xb1, 0x69, 0xe8, 0x33, 0x57, 0x2a, 0xde, 0xe6, 0xc1, 0x88, 0x8d, 0x33,
	0xf9, 0xed, 0x25, 0x0b, 0xfe, 0x02, 0xca, 0x23, 0xc2, 0x7c, 0x3e, 0xa3, 0xc2, 0x99, 0x51, 0x11,
	0x25, 0x9e, 0xda, 0xd3, 0x51, 0xad, 0x60, 0xdf, 0x5b, 0xc4, 0x4f, 0xd2, 0x30, 0xae, 0x41, 0x99,
	0x45, 0xce, 0xd8, 0xe7, 0x43, 0xe2, 0x3b, 0xe9, 0xc4, 0xa9, 0xfb, 0x3a, 0xaa, 0x95, 0xec, 0x7d,
	0x16, 0x3d, 0x97, 0xe1, 0xd4, 0x35, 0x95, 0xaf, 0x61, 0x67, 0x69, 0x1c, 0x5c, 0x86, 0xc2, 0x4b,
	0x7a, 0x9e, 0x0d, 0x44, 0x72, 0xc4, 0x1f, 0xc1, 0xf6, 0x8c, 0xf8, 0xd3, 0xc5, 0x48, 0xa4, 0x1f,
	0xdf, 0xe4, 0x9f, 0xa2, 0xaa, 0x09, 0x87, 0xef, 0x68, 0x1d, 0x3f, 0x82, 0xdd, 0x35, 0xad, 0x52,
	0x5e, 0xc5, 0xbd, 0x56, 0xa9, 0xfa, 0x27, 0x02, 0x65, 0xc5, 0x0c, 0xf8, 0x3b, 0x28, 0x2d, 0x0d,
	0x84, 0xa4, 0x6a, 0xc6, 0xbb, 0x0c, 0x64, 0x2c, 0x0e, 0xa9, 0xf9, 0x97, 0xf5, 0x15, 0x07, 0xf6,
	0xd6, 0xa0, 0x0d, 0xbf, 0xf7, 0x74, 0xf5, 0xf7, 0x94, 0x46, 0xf5, 0xce, 0xbb, 0xce, 0x3b, 0xc1,
	0x88, 0xaf, 0x4a, 0xf0, 0x1b, 0x82, 0xbd, 0x35, 0x10, 0x7f, 0x02, 0x45, 0x41, 0x49, 0xc4, 0x83,
	0xec, 0x92, 0xec, 0x0b, 0x57, 0xa0, 0xc4, 0x43, 0x2a, 0x48, 0xcc, 0x45, 0xa6, 0xe4, 0xf2, 0x3b,
	0x99, 0x1b, 0x57, 0x50, 0x12, 0x53, 0xcf, 0x49, 0x16, 0x99, 0x5c, 0x33, 0x4a, 0xa3, 0x72, 0x6b,
	0x20, 0x07, 0x8b, 0x2d, 0xd7, 0xda, 0x7a, 0x9d, 0x4c, 0xa4, 0x92, 0x55, 0x25, 0xf1, 0xea, 0x4f,
	0x50, 0x5a, 0x3a, 0xf5, 0xdb, 0xe5, 0xc6, 0x42, 0x72, 0x63, 0x3d, 0xbe, 0xd3, 0xec, 0x37, 0x76,
	0x56, 0x19, 0x0a, 0x53, 0xc1, 0xb2, 0x26, 0x93, 0xe3, 0x93, 0x57, 0x08, 0x76, 0x57, 0xd7, 0x1b,
	0x7e, 0x00, 0x1f, 0x9b, 0x3f, 0x7c, 0xdf, 0xec, 0x74, 0x9d, 0xfe, 0xa0, 0x39, 0xf8, 0xb1, 0xef,
	0x74, 0xba, 0x27, 0xcd, 0xe3, 0x8e, 0x59, 0xce, 0xe1, 0x87, 0xa0, 0xae, 0x43, 0xb6, 0xf5, 0xbc,
	0xd3, 0x1f, 0x58, 0xb6, 0x65, 0x96, 0xd1, 0x6d, 0xd4, 0xb4, 0x7a, 0xb6, 0xd5, 0x6e, 0x0e, 0x2c,
	0xb3, 0x9c, 0xbf, 0x4d, 0x6b, 0x5a, 0xc7, 0x56, 0x02, 0x15, 0x9e, 0x9c, 0xc2, 0xfe, 0x7a, 0xbb,
	0xf8, 0x53, 0xb8, 0xdf, 0xb4, 0xdb, 0x2f, 0x3a, 0x27, 0xcd, 0xe3, 0x8d, 0x5d, 0xdc, 0x04, 0xcd,
	0x4e, 0xbf, 0xd9, 0x3a, 0x96, 0x5d, 0x6c, 0x28, 0xb5, 0xba, 0x29, 0x98, 0x6f, 0xfd, 0x72, 0x71,
	0xa9, 0xe5, 0xde, 0x5c, 0x6a, 0xb9, 0xb7, 0x97, 0x1a, 0x7a, 0x35, 0xd7, 0xd0, 0x1f, 0x73, 0x0d,
	0xfd, 0x3d, 0xd7, 0xd0, 0xc5, 0x5c, 0x43, 0xff, 0xce, 0x35, 0xf4, 0xdf, 0x5c, 0xcb, 0xbd, 0x9d,
	0x6b, 0xe8, 0xf5, 0x95, 0x96, 0xbb, 0xb8, 0xd2, 0x72, 0x6f, 0xae, 0xb4, 0x1c, 0xdc, 0x77, 0xf9,
	0x64, 0x93, 0xc8, 0xad, 0x52, 0x33, 0x64, 0xbd, 0xe4, 0x01, 0x7b, 0xe8, 0xe7, 0x6d, 0x12, 0xb2,
	0xd9, 0xd1, 0xb0, 0x28, 0x1f, 0xf4, 0xcb, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x56, 0x88, 0xf1,
	0xdb, 0x1d, 0x07, 0x00, 0x00,
}

func (x DomainStatus) String() string {
	s, ok := DomainStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ArchivalStatus) String() string {
	s, ok := ArchivalStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain)
	if !ok {
		that2, ok := that.(Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.OwnerEmail != that1.OwnerEmail {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if this.WorkflowExecutionRetentionPeriod != nil && that1.WorkflowExecutionRetentionPeriod != nil {
		if *this.WorkflowExecutionRetentionPeriod != *that1.WorkflowExecutionRetentionPeriod {
			return false
		}
	} else if this.WorkflowExecutionRetentionPeriod != nil {
		return false
	} else if that1.WorkflowExecutionRetentionPeriod != nil {
		return false
	}
	if !this.BadBinaries.Equal(that1.BadBinaries) {
		return false
	}
	if !this.HistoryArchival.Equal(that1.HistoryArchival) {
		return false
	}
	if !this.VisibilityArchival.Equal(that1.VisibilityArchival) {
		return false
	}
	if this.ActiveClusterName != that1.ActiveClusterName {
		return false
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if !this.Clusters[i].Equal(that1.Clusters[i]) {
			return false
		}
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if this.IsGlobalDomain != that1.IsGlobalDomain {
		return false
	}
	return true
}
func (this *ClusterReplicationConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterReplicationConfiguration)
	if !ok {
		that2, ok := that.(ClusterReplicationConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	return true
}
func (this *BadBinaries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BadBinaries)
	if !ok {
		that2, ok := that.(BadBinaries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Binaries) != len(that1.Binaries) {
		return false
	}
	for i := range this.Binaries {
		if !this.Binaries[i].Equal(that1.Binaries[i]) {
			return false
		}
	}
	return true
}
func (this *BadBinaryInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BadBinaryInfo)
	if !ok {
		that2, ok := that.(BadBinaryInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if that1.CreatedTime == nil {
		if this.CreatedTime != nil {
			return false
		}
	} else if !this.CreatedTime.Equal(*that1.CreatedTime) {
		return false
	}
	return true
}
func (this *Archival) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Archival)
	if !ok {
		that2, ok := that.(Archival)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	return true
}
func (this *Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&apiv1.Domain{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "OwnerEmail: "+fmt.Sprintf("%#v", this.OwnerEmail)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	s = append(s, "WorkflowExecutionRetentionPeriod: "+fmt.Sprintf("%#v", this.WorkflowExecutionRetentionPeriod)+",\n")
	if this.BadBinaries != nil {
		s = append(s, "BadBinaries: "+fmt.Sprintf("%#v", this.BadBinaries)+",\n")
	}
	if this.HistoryArchival != nil {
		s = append(s, "HistoryArchival: "+fmt.Sprintf("%#v", this.HistoryArchival)+",\n")
	}
	if this.VisibilityArchival != nil {
		s = append(s, "VisibilityArchival: "+fmt.Sprintf("%#v", this.VisibilityArchival)+",\n")
	}
	s = append(s, "ActiveClusterName: "+fmt.Sprintf("%#v", this.ActiveClusterName)+",\n")
	if this.Clusters != nil {
		s = append(s, "Clusters: "+fmt.Sprintf("%#v", this.Clusters)+",\n")
	}
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	s = append(s, "IsGlobalDomain: "+fmt.Sprintf("%#v", this.IsGlobalDomain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClusterReplicationConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.ClusterReplicationConfiguration{")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BadBinaries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.BadBinaries{")
	keysForBinaries := make([]string, 0, len(this.Binaries))
	for k, _ := range this.Binaries {
		keysForBinaries = append(keysForBinaries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBinaries)
	mapStringForBinaries := "map[string]*BadBinaryInfo{"
	for _, k := range keysForBinaries {
		mapStringForBinaries += fmt.Sprintf("%#v: %#v,", k, this.Binaries[k])
	}
	mapStringForBinaries += "}"
	if this.Binaries != nil {
		s = append(s, "Binaries: "+mapStringForBinaries+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BadBinaryInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.BadBinaryInfo{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	s = append(s, "CreatedTime: "+fmt.Sprintf("%#v", this.CreatedTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Archival) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.Archival{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Uri: "+fmt.Sprintf("%#v", this.Uri)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDomain(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsGlobalDomain {
		i--
		if m.IsGlobalDomain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDomain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ActiveClusterName) > 0 {
		i -= len(m.ActiveClusterName)
		copy(dAtA[i:], m.ActiveClusterName)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.ActiveClusterName)))
		i--
		dAtA[i] = 0x5a
	}
	if m.VisibilityArchival != nil {
		{
			size, err := m.VisibilityArchival.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.HistoryArchival != nil {
		{
			size, err := m.HistoryArchival.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.BadBinaries != nil {
		{
			size, err := m.BadBinaries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.WorkflowExecutionRetentionPeriod != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowExecutionRetentionPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionRetentionPeriod):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintDomain(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDomain(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OwnerEmail) > 0 {
		i -= len(m.OwnerEmail)
		copy(dAtA[i:], m.OwnerEmail)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.OwnerEmail)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterReplicationConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterReplicationConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterReplicationConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BadBinaries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadBinaries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadBinaries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Binaries) > 0 {
		for k := range m.Binaries {
			v := m.Binaries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDomain(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BadBinaryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadBinaryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadBinaryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedTime != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedTime):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintDomain(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Archival) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Archival) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Archival) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDomain(dAtA []byte, offset int, v uint64) int {
	offset -= sovDomain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDomain(uint64(m.Status))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.OwnerEmail)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + 1 + len(v) + sovDomain(uint64(len(v)))
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	if m.WorkflowExecutionRetentionPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionRetentionPeriod)
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.BadBinaries != nil {
		l = m.BadBinaries.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.HistoryArchival != nil {
		l = m.HistoryArchival.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.VisibilityArchival != nil {
		l = m.VisibilityArchival.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.ActiveClusterName)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovDomain(uint64(l))
		}
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovDomain(uint64(m.FailoverVersion))
	}
	if m.IsGlobalDomain {
		n += 2
	}
	return n
}

func (m *ClusterReplicationConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	return n
}

func (m *BadBinaries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Binaries) > 0 {
		for k, v := range m.Binaries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDomain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BadBinaryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.CreatedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedTime)
		n += 1 + l + sovDomain(uint64(l))
	}
	return n
}

func (m *Archival) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovDomain(uint64(m.Status))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	return n
}

func sovDomain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDomain(x uint64) (n int) {
	return sovDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Domain) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClusters := "[]*ClusterReplicationConfiguration{"
	for _, f := range this.Clusters {
		repeatedStringForClusters += strings.Replace(f.String(), "ClusterReplicationConfiguration", "ClusterReplicationConfiguration", 1) + ","
	}
	repeatedStringForClusters += "}"
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&Domain{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`OwnerEmail:` + fmt.Sprintf("%v", this.OwnerEmail) + `,`,
		`Data:` + mapStringForData + `,`,
		`WorkflowExecutionRetentionPeriod:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionRetentionPeriod), "Duration", "duration.Duration", 1) + `,`,
		`BadBinaries:` + strings.Replace(this.BadBinaries.String(), "BadBinaries", "BadBinaries", 1) + `,`,
		`HistoryArchival:` + strings.Replace(this.HistoryArchival.String(), "Archival", "Archival", 1) + `,`,
		`VisibilityArchival:` + strings.Replace(this.VisibilityArchival.String(), "Archival", "Archival", 1) + `,`,
		`ActiveClusterName:` + fmt.Sprintf("%v", this.ActiveClusterName) + `,`,
		`Clusters:` + repeatedStringForClusters + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`IsGlobalDomain:` + fmt.Sprintf("%v", this.IsGlobalDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterReplicationConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterReplicationConfiguration{`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BadBinaries) String() string {
	if this == nil {
		return "nil"
	}
	keysForBinaries := make([]string, 0, len(this.Binaries))
	for k, _ := range this.Binaries {
		keysForBinaries = append(keysForBinaries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBinaries)
	mapStringForBinaries := "map[string]*BadBinaryInfo{"
	for _, k := range keysForBinaries {
		mapStringForBinaries += fmt.Sprintf("%v: %v,", k, this.Binaries[k])
	}
	mapStringForBinaries += "}"
	s := strings.Join([]string{`&BadBinaries{`,
		`Binaries:` + mapStringForBinaries + `,`,
		`}`,
	}, "")
	return s
}
func (this *BadBinaryInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BadBinaryInfo{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`CreatedTime:` + strings.Replace(fmt.Sprintf("%v", this.CreatedTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Archival) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Archival{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Uri:` + fmt.Sprintf("%v", this.Uri) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDomain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DomainStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionRetentionPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionRetentionPeriod == nil {
				m.WorkflowExecutionRetentionPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowExecutionRetentionPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadBinaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BadBinaries == nil {
				m.BadBinaries = &BadBinaries{}
			}
			if err := m.BadBinaries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchival", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryArchival == nil {
				m.HistoryArchival = &Archival{}
			}
			if err := m.HistoryArchival.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchival", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisibilityArchival == nil {
				m.VisibilityArchival = &Archival{}
			}
			if err := m.VisibilityArchival.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &ClusterReplicationConfiguration{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalDomain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterReplicationConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterReplicationConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterReplicationConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadBinaries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadBinaries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadBinaries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binaries == nil {
				m.Binaries = make(map[string]*BadBinaryInfo)
			}
			var mapkey string
			var mapvalue *BadBinaryInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDomain
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDomain
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BadBinaryInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Binaries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadBinaryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadBinaryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadBinaryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Archival) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Archival: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Archival: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDomain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDomain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDomain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDomain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDomain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDomain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDomain = fmt.Errorf("proto: unexpected end of group")
)
