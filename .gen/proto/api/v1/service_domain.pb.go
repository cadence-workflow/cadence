// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/service_domain.proto

package apiv1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisterDomainRequest struct {
	Name                             string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description                      string                            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OwnerEmail                       string                            `protobuf:"bytes,3,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"`
	WorkflowExecutionRetentionPeriod *time.Duration                    `protobuf:"bytes,4,opt,name=workflow_execution_retention_period,json=workflowExecutionRetentionPeriod,proto3,stdduration" json:"workflow_execution_retention_period,omitempty"`
	EmitMetric                       bool                              `protobuf:"varint,5,opt,name=emit_metric,json=emitMetric,proto3" json:"emit_metric,omitempty"`
	Clusters                         []*DomainReplicationConfiguration `protobuf:"bytes,6,rep,name=clusters,proto3" json:"clusters,omitempty"`
	ActiveClusterName                string                            `protobuf:"bytes,7,opt,name=active_cluster_name,json=activeClusterName,proto3" json:"active_cluster_name,omitempty"`
	Data                             map[string]string                 `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecurityToken                    string                            `protobuf:"bytes,9,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
	IsGlobalDomain                   bool                              `protobuf:"varint,10,opt,name=is_global_domain,json=isGlobalDomain,proto3" json:"is_global_domain,omitempty"`
	HistoryArchivalStatus            ArchivalStatus                    `protobuf:"varint,11,opt,name=history_archival_status,json=historyArchivalStatus,proto3,enum=uber.cadence.api.v1.ArchivalStatus" json:"history_archival_status,omitempty"`
	HistoryArchivalUri               string                            `protobuf:"bytes,12,opt,name=history_archival_uri,json=historyArchivalUri,proto3" json:"history_archival_uri,omitempty"`
	VisibilityArchivalStatus         ArchivalStatus                    `protobuf:"varint,13,opt,name=visibility_archival_status,json=visibilityArchivalStatus,proto3,enum=uber.cadence.api.v1.ArchivalStatus" json:"visibility_archival_status,omitempty"`
	VisibilityArchivalUri            string                            `protobuf:"bytes,14,opt,name=visibility_archival_uri,json=visibilityArchivalUri,proto3" json:"visibility_archival_uri,omitempty"`
}

func (m *RegisterDomainRequest) Reset()      { *m = RegisterDomainRequest{} }
func (*RegisterDomainRequest) ProtoMessage() {}
func (*RegisterDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{0}
}
func (m *RegisterDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDomainRequest.Merge(m, src)
}
func (m *RegisterDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDomainRequest proto.InternalMessageInfo

func (m *RegisterDomainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterDomainRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RegisterDomainRequest) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *RegisterDomainRequest) GetWorkflowExecutionRetentionPeriod() *time.Duration {
	if m != nil {
		return m.WorkflowExecutionRetentionPeriod
	}
	return nil
}

func (m *RegisterDomainRequest) GetEmitMetric() bool {
	if m != nil {
		return m.EmitMetric
	}
	return false
}

func (m *RegisterDomainRequest) GetClusters() []*DomainReplicationConfiguration {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *RegisterDomainRequest) GetActiveClusterName() string {
	if m != nil {
		return m.ActiveClusterName
	}
	return ""
}

func (m *RegisterDomainRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RegisterDomainRequest) GetSecurityToken() string {
	if m != nil {
		return m.SecurityToken
	}
	return ""
}

func (m *RegisterDomainRequest) GetIsGlobalDomain() bool {
	if m != nil {
		return m.IsGlobalDomain
	}
	return false
}

func (m *RegisterDomainRequest) GetHistoryArchivalStatus() ArchivalStatus {
	if m != nil {
		return m.HistoryArchivalStatus
	}
	return ARCHIVAL_STATUS_INVALID
}

func (m *RegisterDomainRequest) GetHistoryArchivalUri() string {
	if m != nil {
		return m.HistoryArchivalUri
	}
	return ""
}

func (m *RegisterDomainRequest) GetVisibilityArchivalStatus() ArchivalStatus {
	if m != nil {
		return m.VisibilityArchivalStatus
	}
	return ARCHIVAL_STATUS_INVALID
}

func (m *RegisterDomainRequest) GetVisibilityArchivalUri() string {
	if m != nil {
		return m.VisibilityArchivalUri
	}
	return ""
}

type RegisterDomainResponse struct {
}

func (m *RegisterDomainResponse) Reset()      { *m = RegisterDomainResponse{} }
func (*RegisterDomainResponse) ProtoMessage() {}
func (*RegisterDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{1}
}
func (m *RegisterDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDomainResponse.Merge(m, src)
}
func (m *RegisterDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDomainResponse proto.InternalMessageInfo

type DescribeDomainRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DescribeDomainRequest) Reset()      { *m = DescribeDomainRequest{} }
func (*DescribeDomainRequest) ProtoMessage() {}
func (*DescribeDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{2}
}
func (m *DescribeDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeDomainRequest.Merge(m, src)
}
func (m *DescribeDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *DescribeDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeDomainRequest proto.InternalMessageInfo

func (m *DescribeDomainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DescribeDomainRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DescribeDomainResponse struct {
	Info                     *DomainInfo                     `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Configuration            *DomainConfiguration            `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	ReplicationConfiguration *DomainReplicationConfiguration `protobuf:"bytes,3,opt,name=replication_configuration,json=replicationConfiguration,proto3" json:"replication_configuration,omitempty"`
	FailoverVersion          int64                           `protobuf:"varint,4,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	IsGlobalDomain           bool                            `protobuf:"varint,5,opt,name=is_global_domain,json=isGlobalDomain,proto3" json:"is_global_domain,omitempty"`
}

func (m *DescribeDomainResponse) Reset()      { *m = DescribeDomainResponse{} }
func (*DescribeDomainResponse) ProtoMessage() {}
func (*DescribeDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{3}
}
func (m *DescribeDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeDomainResponse.Merge(m, src)
}
func (m *DescribeDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *DescribeDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeDomainResponse proto.InternalMessageInfo

func (m *DescribeDomainResponse) GetInfo() *DomainInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DescribeDomainResponse) GetConfiguration() *DomainConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *DescribeDomainResponse) GetReplicationConfiguration() *DomainReplicationConfiguration {
	if m != nil {
		return m.ReplicationConfiguration
	}
	return nil
}

func (m *DescribeDomainResponse) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *DescribeDomainResponse) GetIsGlobalDomain() bool {
	if m != nil {
		return m.IsGlobalDomain
	}
	return false
}

type ListDomainsRequest struct {
	PageSize      int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken []byte `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListDomainsRequest) Reset()      { *m = ListDomainsRequest{} }
func (*ListDomainsRequest) ProtoMessage() {}
func (*ListDomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{4}
}
func (m *ListDomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDomainsRequest.Merge(m, src)
}
func (m *ListDomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDomainsRequest proto.InternalMessageInfo

func (m *ListDomainsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListDomainsRequest) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListDomainsResponse struct {
	Domains       []*DescribeDomainResponse `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	NextPageToken []byte                    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListDomainsResponse) Reset()      { *m = ListDomainsResponse{} }
func (*ListDomainsResponse) ProtoMessage() {}
func (*ListDomainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{5}
}
func (m *ListDomainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDomainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDomainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDomainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDomainsResponse.Merge(m, src)
}
func (m *ListDomainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDomainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDomainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDomainsResponse proto.InternalMessageInfo

func (m *ListDomainsResponse) GetDomains() []*DescribeDomainResponse {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ListDomainsResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type UpdateDomainInfo struct {
	Description string            `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	OwnerEmail  string            `protobuf:"bytes,2,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"`
	Data        map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UpdateDomainInfo) Reset()      { *m = UpdateDomainInfo{} }
func (*UpdateDomainInfo) ProtoMessage() {}
func (*UpdateDomainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{6}
}
func (m *UpdateDomainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDomainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDomainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDomainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDomainInfo.Merge(m, src)
}
func (m *UpdateDomainInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDomainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDomainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDomainInfo proto.InternalMessageInfo

func (m *UpdateDomainInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateDomainInfo) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *UpdateDomainInfo) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateDomainRequest struct {
	Name                     string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Info                     *UpdateDomainInfo               `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Configuration            *DomainConfiguration            `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
	ReplicationConfiguration *DomainReplicationConfiguration `protobuf:"bytes,4,opt,name=replication_configuration,json=replicationConfiguration,proto3" json:"replication_configuration,omitempty"`
	SecurityToken            string                          `protobuf:"bytes,5,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
	DeleteBadBinary          string                          `protobuf:"bytes,6,opt,name=delete_bad_binary,json=deleteBadBinary,proto3" json:"delete_bad_binary,omitempty"`
	FailoverTimeout          *time.Duration                  `protobuf:"bytes,7,opt,name=failover_timeout,json=failoverTimeout,proto3,stdduration" json:"failover_timeout,omitempty"`
}

func (m *UpdateDomainRequest) Reset()      { *m = UpdateDomainRequest{} }
func (*UpdateDomainRequest) ProtoMessage() {}
func (*UpdateDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{7}
}
func (m *UpdateDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDomainRequest.Merge(m, src)
}
func (m *UpdateDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDomainRequest proto.InternalMessageInfo

func (m *UpdateDomainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateDomainRequest) GetInfo() *UpdateDomainInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *UpdateDomainRequest) GetConfiguration() *DomainConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *UpdateDomainRequest) GetReplicationConfiguration() *DomainReplicationConfiguration {
	if m != nil {
		return m.ReplicationConfiguration
	}
	return nil
}

func (m *UpdateDomainRequest) GetSecurityToken() string {
	if m != nil {
		return m.SecurityToken
	}
	return ""
}

func (m *UpdateDomainRequest) GetDeleteBadBinary() string {
	if m != nil {
		return m.DeleteBadBinary
	}
	return ""
}

func (m *UpdateDomainRequest) GetFailoverTimeout() *time.Duration {
	if m != nil {
		return m.FailoverTimeout
	}
	return nil
}

type UpdateDomainResponse struct {
	Info                     *DomainInfo                     `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Configuration            *DomainConfiguration            `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	ReplicationConfiguration *DomainReplicationConfiguration `protobuf:"bytes,3,opt,name=replication_configuration,json=replicationConfiguration,proto3" json:"replication_configuration,omitempty"`
	FailoverVersion          int64                           `protobuf:"varint,4,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	IsGlobalNamespace        bool                            `protobuf:"varint,5,opt,name=is_global_namespace,json=isGlobalNamespace,proto3" json:"is_global_namespace,omitempty"`
}

func (m *UpdateDomainResponse) Reset()      { *m = UpdateDomainResponse{} }
func (*UpdateDomainResponse) ProtoMessage() {}
func (*UpdateDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{8}
}
func (m *UpdateDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDomainResponse.Merge(m, src)
}
func (m *UpdateDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDomainResponse proto.InternalMessageInfo

func (m *UpdateDomainResponse) GetInfo() *DomainInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *UpdateDomainResponse) GetConfiguration() *DomainConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *UpdateDomainResponse) GetReplicationConfiguration() *DomainReplicationConfiguration {
	if m != nil {
		return m.ReplicationConfiguration
	}
	return nil
}

func (m *UpdateDomainResponse) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *UpdateDomainResponse) GetIsGlobalNamespace() bool {
	if m != nil {
		return m.IsGlobalNamespace
	}
	return false
}

type DeprecateDomainRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SecurityToken string `protobuf:"bytes,2,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
}

func (m *DeprecateDomainRequest) Reset()      { *m = DeprecateDomainRequest{} }
func (*DeprecateDomainRequest) ProtoMessage() {}
func (*DeprecateDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{9}
}
func (m *DeprecateDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeprecateDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeprecateDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeprecateDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeprecateDomainRequest.Merge(m, src)
}
func (m *DeprecateDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeprecateDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeprecateDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeprecateDomainRequest proto.InternalMessageInfo

func (m *DeprecateDomainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeprecateDomainRequest) GetSecurityToken() string {
	if m != nil {
		return m.SecurityToken
	}
	return ""
}

type DeprecateDomainResponse struct {
}

func (m *DeprecateDomainResponse) Reset()      { *m = DeprecateDomainResponse{} }
func (*DeprecateDomainResponse) ProtoMessage() {}
func (*DeprecateDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e37d15268893114, []int{10}
}
func (m *DeprecateDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeprecateDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeprecateDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeprecateDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeprecateDomainResponse.Merge(m, src)
}
func (m *DeprecateDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeprecateDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeprecateDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeprecateDomainResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterDomainRequest)(nil), "uber.cadence.api.v1.RegisterDomainRequest")
	proto.RegisterMapType((map[string]string)(nil), "uber.cadence.api.v1.RegisterDomainRequest.DataEntry")
	proto.RegisterType((*RegisterDomainResponse)(nil), "uber.cadence.api.v1.RegisterDomainResponse")
	proto.RegisterType((*DescribeDomainRequest)(nil), "uber.cadence.api.v1.DescribeDomainRequest")
	proto.RegisterType((*DescribeDomainResponse)(nil), "uber.cadence.api.v1.DescribeDomainResponse")
	proto.RegisterType((*ListDomainsRequest)(nil), "uber.cadence.api.v1.ListDomainsRequest")
	proto.RegisterType((*ListDomainsResponse)(nil), "uber.cadence.api.v1.ListDomainsResponse")
	proto.RegisterType((*UpdateDomainInfo)(nil), "uber.cadence.api.v1.UpdateDomainInfo")
	proto.RegisterMapType((map[string]string)(nil), "uber.cadence.api.v1.UpdateDomainInfo.DataEntry")
	proto.RegisterType((*UpdateDomainRequest)(nil), "uber.cadence.api.v1.UpdateDomainRequest")
	proto.RegisterType((*UpdateDomainResponse)(nil), "uber.cadence.api.v1.UpdateDomainResponse")
	proto.RegisterType((*DeprecateDomainRequest)(nil), "uber.cadence.api.v1.DeprecateDomainRequest")
	proto.RegisterType((*DeprecateDomainResponse)(nil), "uber.cadence.api.v1.DeprecateDomainResponse")
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/api/v1/service_domain.proto", fileDescriptor_2e37d15268893114)
}

var fileDescriptor_2e37d15268893114 = []byte{
	// 1131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0xf5, 0xe3, 0xd8, 0xa3, 0x58, 0x76, 0xd6, 0x76, 0x4c, 0xab, 0x05, 0x2d, 0x28, 0x48,
	0xab, 0x24, 0x05, 0x55, 0xcb, 0x45, 0x7f, 0x4f, 0xfe, 0x43, 0x9b, 0xa2, 0x75, 0x0d, 0x3a, 0x2e,
	0xd0, 0xf6, 0xc0, 0xac, 0xc8, 0x91, 0xb2, 0x30, 0x45, 0xb2, 0xcb, 0x95, 0x1c, 0xe7, 0xd4, 0x43,
	0x1f, 0xa0, 0xa7, 0xa2, 0x8f, 0xd0, 0x17, 0x29, 0xd0, 0xa3, 0x81, 0x5e, 0x72, 0x6b, 0x2d, 0xf7,
	0x90, 0x63, 0x9e, 0xa0, 0x28, 0xb8, 0x24, 0x6d, 0xfd, 0xd0, 0xb6, 0x1a, 0x20, 0xb7, 0xde, 0xa8,
	0x6f, 0x67, 0xe6, 0x9b, 0xdd, 0x99, 0x6f, 0x46, 0x50, 0xeb, 0x36, 0x91, 0xd7, 0x2d, 0x6a, 0xa3,
	0x6b, 0x61, 0x9d, 0xfa, 0xac, 0xde, 0x5b, 0xab, 0x07, 0xc8, 0x7b, 0xcc, 0x42, 0xd3, 0xf6, 0x3a,
	0x94, 0xb9, 0xba, 0xcf, 0x3d, 0xe1, 0x91, 0x85, 0xd0, 0x52, 0x8f, 0x2d, 0x75, 0xea, 0x33, 0xbd,
	0xb7, 0x56, 0xd6, 0xda, 0x9e, 0xd7, 0x76, 0xb0, 0x2e, 0x4d, 0x9a, 0xdd, 0x56, 0xdd, 0xee, 0x72,
	0x2a, 0x98, 0x17, 0x3b, 0x95, 0xdf, 0xb4, 0xd1, 0x47, 0x37, 0x74, 0x61, 0x18, 0xd4, 0xdb, 0x5e,
	0xdb, 0x93, 0x78, 0x7c, 0x5a, 0x49, 0x23, 0x1f, 0x24, 0xad, 0xfe, 0x33, 0x05, 0x4b, 0x06, 0xb6,
	0x59, 0x20, 0x90, 0x6f, 0xcb, 0x03, 0x03, 0xbf, 0xef, 0x62, 0x20, 0x08, 0x81, 0xbc, 0x4b, 0x3b,
	0xa8, 0x2a, 0x15, 0xa5, 0x36, 0x63, 0xc8, 0x6f, 0x52, 0x81, 0xa2, 0x8d, 0x81, 0xc5, 0x99, 0x1f,
	0xa6, 0xa0, 0x66, 0xe5, 0xd1, 0x20, 0x44, 0x56, 0xa1, 0xe8, 0x1d, 0xb9, 0xc8, 0x4d, 0xec, 0x50,
	0xe6, 0xa8, 0x39, 0x69, 0x01, 0x12, 0xda, 0x09, 0x11, 0xe2, 0xc2, 0x9d, 0x23, 0x8f, 0x1f, 0xb6,
	0x1c, 0xef, 0xc8, 0xc4, 0xa7, 0x68, 0x75, 0x43, 0x37, 0x93, 0xa3, 0x40, 0x57, 0x7e, 0xf9, 0xc8,
	0x99, 0x67, 0xab, 0xf9, 0x8a, 0x52, 0x2b, 0x36, 0x56, 0xf4, 0xe8, 0xfa, 0x7a, 0x72, 0x7d, 0x7d,
	0x3b, 0xbe, 0xfe, 0x66, 0xfe, 0x97, 0x3f, 0x57, 0x15, 0xa3, 0x92, 0xc4, 0xda, 0x49, 0x42, 0x19,
	0x49, 0xa4, 0x3d, 0x19, 0x28, 0x4c, 0x08, 0x3b, 0x4c, 0x98, 0x1d, 0x14, 0x9c, 0x59, 0x6a, 0xa1,
	0xa2, 0xd4, 0xa6, 0x0d, 0x08, 0xa1, 0x2f, 0x25, 0x42, 0xbe, 0x82, 0x69, 0xcb, 0xe9, 0x86, 0xf7,
	0x0f, 0xd4, 0xa9, 0x4a, 0xae, 0x56, 0x6c, 0xac, 0xeb, 0x29, 0x95, 0xd0, 0x93, 0xd7, 0xf1, 0x1d,
	0x66, 0xc9, 0x14, 0xb6, 0x3c, 0xb7, 0xc5, 0xda, 0x71, 0x3e, 0xc6, 0x79, 0x10, 0xa2, 0xc3, 0x02,
	0xb5, 0x04, 0xeb, 0xa1, 0x19, 0x43, 0xa6, 0x7c, 0xc7, 0x1b, 0xf2, 0x29, 0x6e, 0x45, 0x47, 0x5b,
	0xd1, 0xc9, 0x6e, 0xf8, 0xa8, 0x9f, 0x41, 0xde, 0xa6, 0x82, 0xaa, 0xd3, 0x92, 0xfc, 0xbd, 0x54,
	0xf2, 0xd4, 0x12, 0xe9, 0xdb, 0x54, 0xd0, 0x1d, 0x57, 0xf0, 0x63, 0x43, 0x46, 0x20, 0x77, 0xa1,
	0x14, 0xa0, 0xd5, 0xe5, 0x4c, 0x1c, 0x9b, 0xc2, 0x3b, 0x44, 0x57, 0x9d, 0x91, 0xa4, 0xb3, 0x09,
	0xfa, 0x28, 0x04, 0x49, 0x0d, 0xe6, 0x59, 0x60, 0xb6, 0x1d, 0xaf, 0x49, 0x9d, 0xb8, 0x05, 0x55,
	0x90, 0xef, 0x52, 0x62, 0xc1, 0xa7, 0x12, 0x8e, 0x78, 0xc8, 0x77, 0xb0, 0xfc, 0x84, 0x05, 0xc2,
	0xe3, 0xc7, 0x26, 0xe5, 0xd6, 0x13, 0xd6, 0xa3, 0x8e, 0x19, 0x08, 0x2a, 0xba, 0x81, 0x5a, 0xac,
	0x28, 0xb5, 0x52, 0xe3, 0x4e, 0x6a, 0xb6, 0x1b, 0xb1, 0xed, 0xbe, 0x34, 0x35, 0x96, 0xe2, 0x18,
	0xc3, 0x30, 0x79, 0x17, 0x16, 0xc7, 0x82, 0x77, 0x39, 0x53, 0x6f, 0xca, 0x9c, 0xc9, 0x88, 0xd3,
	0x01, 0x67, 0x84, 0x42, 0xb9, 0xc7, 0x02, 0xd6, 0x64, 0x4e, 0x78, 0xc3, 0xd1, 0x8c, 0x66, 0x27,
	0xcf, 0x48, 0xbd, 0x08, 0x33, 0x92, 0xd4, 0xfb, 0xb0, 0x9c, 0x46, 0x11, 0xe6, 0x55, 0x92, 0x79,
	0x2d, 0x8d, 0xbb, 0x1e, 0x70, 0x56, 0xfe, 0x00, 0x66, 0xce, 0xab, 0x41, 0xe6, 0x21, 0x77, 0x88,
	0xc7, 0xb1, 0x72, 0xc2, 0x4f, 0xb2, 0x08, 0x85, 0x1e, 0x75, 0xba, 0x18, 0x4b, 0x26, 0xfa, 0xf1,
	0x71, 0xf6, 0x43, 0xa5, 0xaa, 0xc2, 0xed, 0xd1, 0xe2, 0x06, 0xbe, 0xe7, 0x06, 0x58, 0xfd, 0x04,
	0x96, 0xb6, 0xa5, 0xb2, 0x9a, 0x78, 0xbd, 0x32, 0x4b, 0x90, 0x65, 0x76, 0x1c, 0x3d, 0xcb, 0xec,
	0xea, 0xdf, 0x59, 0xb8, 0x3d, 0xea, 0x1d, 0xc5, 0x25, 0xeb, 0x90, 0x67, 0x6e, 0xcb, 0x93, 0xee,
	0xc5, 0xc6, 0xea, 0x15, 0xcd, 0xfe, 0xd0, 0x6d, 0x79, 0x86, 0x34, 0x26, 0xbb, 0x30, 0x6b, 0x0d,
	0xf6, 0xbb, 0xa4, 0x2a, 0x36, 0x6a, 0x57, 0x78, 0x0f, 0xeb, 0x63, 0xd8, 0x9d, 0xf8, 0xb0, 0xc2,
	0x2f, 0xa4, 0x64, 0x0e, 0xc7, 0xce, 0xc9, 0xd8, 0xaf, 0x24, 0x43, 0x95, 0x5f, 0x72, 0x42, 0xee,
	0xc1, 0x7c, 0x8b, 0x32, 0xc7, 0xeb, 0x21, 0x37, 0x7b, 0xc8, 0x83, 0x90, 0x28, 0x9c, 0x32, 0x39,
	0x63, 0x2e, 0xc1, 0xbf, 0x8e, 0xe0, 0x54, 0x81, 0x14, 0xd2, 0x04, 0x52, 0xfd, 0x06, 0xc8, 0x17,
	0x2c, 0x10, 0xd1, 0xaf, 0x20, 0x29, 0xd0, 0x1b, 0x30, 0xe3, 0xd3, 0x36, 0x9a, 0x01, 0x7b, 0x16,
	0x55, 0xa9, 0x60, 0x4c, 0x87, 0xc0, 0x3e, 0x7b, 0x86, 0xe4, 0x2d, 0x98, 0x73, 0xf1, 0xa9, 0x30,
	0xa5, 0x45, 0xa4, 0xd2, 0xf0, 0x2d, 0x6f, 0x1a, 0xb3, 0x21, 0xbc, 0x47, 0xdb, 0x28, 0x55, 0x5a,
	0xfd, 0x51, 0x81, 0x85, 0xa1, 0xd8, 0x71, 0xf9, 0x76, 0xe0, 0x46, 0x94, 0x52, 0xa0, 0x2a, 0x72,
	0x62, 0x3c, 0x48, 0x7f, 0xa7, 0xd4, 0xe2, 0x1b, 0x89, 0xef, 0xc4, 0x69, 0xfc, 0xa1, 0xc0, 0xfc,
	0x81, 0x6f, 0x53, 0x81, 0x17, 0x3d, 0x31, 0xba, 0x07, 0x94, 0x6b, 0xf7, 0x40, 0x76, 0x6c, 0x0f,
	0x6c, 0xc5, 0x53, 0x2f, 0x27, 0xef, 0x50, 0x4f, 0xbd, 0xc3, 0x28, 0xef, 0xe8, 0xc0, 0x7b, 0x75,
	0xd5, 0xfd, 0x96, 0x83, 0x85, 0xc1, 0xe8, 0x57, 0x49, 0xeb, 0xa3, 0x58, 0x2f, 0x51, 0xc7, 0xdf,
	0x9d, 0x28, 0xd3, 0xcb, 0x54, 0x93, 0x7b, 0x8d, 0xaa, 0xc9, 0xbf, 0x0e, 0xd5, 0x8c, 0xaf, 0x94,
	0x42, 0xda, 0x4a, 0xb9, 0x0f, 0xb7, 0x6c, 0x74, 0x50, 0xa0, 0xd9, 0xa4, 0xb6, 0xd9, 0x64, 0x2e,
	0xe5, 0xc7, 0xea, 0x94, 0xb4, 0x9c, 0x8b, 0x0e, 0x36, 0xa9, 0xbd, 0x29, 0x61, 0xf2, 0xf9, 0x80,
	0x10, 0x05, 0xeb, 0xa0, 0xd7, 0x15, 0x72, 0x39, 0x4e, 0xb0, 0xee, 0xcf, 0x95, 0xfa, 0x28, 0xf2,
	0xab, 0xbe, 0xc8, 0xc2, 0xe2, 0x70, 0x1d, 0xff, 0x1f, 0x72, 0x13, 0x0e, 0x39, 0x1d, 0x16, 0x2e,
	0x86, 0x5c, 0xd8, 0xe8, 0x81, 0x4f, 0x2d, 0x8c, 0xe7, 0xdc, 0xad, 0x64, 0xce, 0xed, 0x26, 0x07,
	0xd5, 0xfd, 0x70, 0xa1, 0xf8, 0x1c, 0xad, 0x89, 0x44, 0x33, 0xde, 0x37, 0xd9, 0x94, 0xbe, 0xa9,
	0xae, 0xc0, 0xf2, 0x58, 0xd0, 0xa8, 0x82, 0x8d, 0x9f, 0xf3, 0x30, 0x13, 0x41, 0x1b, 0x7b, 0x0f,
	0x09, 0x83, 0xd2, 0xf0, 0x9a, 0x24, 0xf7, 0x27, 0xff, 0xa3, 0x54, 0x7e, 0x30, 0x91, 0x6d, 0xdc,
	0x3a, 0x0c, 0x4a, 0xc3, 0xc3, 0xf3, 0x12, 0xaa, 0xd4, 0xe5, 0x5c, 0xfe, 0x2f, 0xd3, 0x98, 0x3c,
	0x86, 0xe2, 0xc0, 0x88, 0x27, 0x6f, 0xa7, 0xfa, 0x8e, 0x2f, 0x98, 0x72, 0xed, 0x7a, 0xc3, 0x98,
	0xc1, 0x82, 0x9b, 0x83, 0xfa, 0x20, 0xb5, 0x6b, 0xc7, 0x57, 0xc2, 0x71, 0x6f, 0x02, 0xcb, 0x98,
	0xc4, 0x81, 0xb9, 0x91, 0x2a, 0x92, 0xcb, 0x9e, 0x21, 0xad, 0x81, 0xca, 0xef, 0x4c, 0x66, 0x1c,
	0xb1, 0x6d, 0x3e, 0x3e, 0x39, 0xd5, 0x32, 0xcf, 0x4f, 0xb5, 0xcc, 0xcb, 0x53, 0x4d, 0xf9, 0xa1,
	0xaf, 0x29, 0xbf, 0xf6, 0x35, 0xe5, 0xf7, 0xbe, 0xa6, 0x9c, 0xf4, 0x35, 0xe5, 0xaf, 0xbe, 0xa6,
	0xbc, 0xe8, 0x6b, 0x99, 0x97, 0x7d, 0x4d, 0xf9, 0xe9, 0x4c, 0xcb, 0x9c, 0x9c, 0x69, 0x99, 0xe7,
	0x67, 0x5a, 0x06, 0x96, 0x2d, 0xaf, 0x93, 0x46, 0xb3, 0x39, 0xbd, 0xe1, 0xb3, 0xbd, 0x70, 0xde,
	0xec, 0x29, 0xdf, 0x16, 0xa8, 0xcf, 0x7a, 0x6b, 0xcd, 0x29, 0x39, 0x7f, 0xd6, 0xff, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x9f, 0xa6, 0x55, 0xb5, 0xbc, 0x0d, 0x00, 0x00,
}

func (this *RegisterDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterDomainRequest)
	if !ok {
		that2, ok := that.(RegisterDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.OwnerEmail != that1.OwnerEmail {
		return false
	}
	if this.WorkflowExecutionRetentionPeriod != nil && that1.WorkflowExecutionRetentionPeriod != nil {
		if *this.WorkflowExecutionRetentionPeriod != *that1.WorkflowExecutionRetentionPeriod {
			return false
		}
	} else if this.WorkflowExecutionRetentionPeriod != nil {
		return false
	} else if that1.WorkflowExecutionRetentionPeriod != nil {
		return false
	}
	if this.EmitMetric != that1.EmitMetric {
		return false
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if !this.Clusters[i].Equal(that1.Clusters[i]) {
			return false
		}
	}
	if this.ActiveClusterName != that1.ActiveClusterName {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if this.SecurityToken != that1.SecurityToken {
		return false
	}
	if this.IsGlobalDomain != that1.IsGlobalDomain {
		return false
	}
	if this.HistoryArchivalStatus != that1.HistoryArchivalStatus {
		return false
	}
	if this.HistoryArchivalUri != that1.HistoryArchivalUri {
		return false
	}
	if this.VisibilityArchivalStatus != that1.VisibilityArchivalStatus {
		return false
	}
	if this.VisibilityArchivalUri != that1.VisibilityArchivalUri {
		return false
	}
	return true
}
func (this *RegisterDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterDomainResponse)
	if !ok {
		that2, ok := that.(RegisterDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DescribeDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeDomainRequest)
	if !ok {
		that2, ok := that.(DescribeDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *DescribeDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeDomainResponse)
	if !ok {
		that2, ok := that.(DescribeDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.ReplicationConfiguration.Equal(that1.ReplicationConfiguration) {
		return false
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if this.IsGlobalDomain != that1.IsGlobalDomain {
		return false
	}
	return true
}
func (this *ListDomainsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDomainsRequest)
	if !ok {
		that2, ok := that.(ListDomainsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListDomainsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDomainsResponse)
	if !ok {
		that2, ok := that.(ListDomainsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if !this.Domains[i].Equal(that1.Domains[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *UpdateDomainInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDomainInfo)
	if !ok {
		that2, ok := that.(UpdateDomainInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.OwnerEmail != that1.OwnerEmail {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *UpdateDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDomainRequest)
	if !ok {
		that2, ok := that.(UpdateDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.ReplicationConfiguration.Equal(that1.ReplicationConfiguration) {
		return false
	}
	if this.SecurityToken != that1.SecurityToken {
		return false
	}
	if this.DeleteBadBinary != that1.DeleteBadBinary {
		return false
	}
	if this.FailoverTimeout != nil && that1.FailoverTimeout != nil {
		if *this.FailoverTimeout != *that1.FailoverTimeout {
			return false
		}
	} else if this.FailoverTimeout != nil {
		return false
	} else if that1.FailoverTimeout != nil {
		return false
	}
	return true
}
func (this *UpdateDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDomainResponse)
	if !ok {
		that2, ok := that.(UpdateDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.ReplicationConfiguration.Equal(that1.ReplicationConfiguration) {
		return false
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if this.IsGlobalNamespace != that1.IsGlobalNamespace {
		return false
	}
	return true
}
func (this *DeprecateDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeprecateDomainRequest)
	if !ok {
		that2, ok := that.(DeprecateDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SecurityToken != that1.SecurityToken {
		return false
	}
	return true
}
func (this *DeprecateDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeprecateDomainResponse)
	if !ok {
		that2, ok := that.(DeprecateDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RegisterDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&apiv1.RegisterDomainRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "OwnerEmail: "+fmt.Sprintf("%#v", this.OwnerEmail)+",\n")
	s = append(s, "WorkflowExecutionRetentionPeriod: "+fmt.Sprintf("%#v", this.WorkflowExecutionRetentionPeriod)+",\n")
	s = append(s, "EmitMetric: "+fmt.Sprintf("%#v", this.EmitMetric)+",\n")
	if this.Clusters != nil {
		s = append(s, "Clusters: "+fmt.Sprintf("%#v", this.Clusters)+",\n")
	}
	s = append(s, "ActiveClusterName: "+fmt.Sprintf("%#v", this.ActiveClusterName)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	s = append(s, "SecurityToken: "+fmt.Sprintf("%#v", this.SecurityToken)+",\n")
	s = append(s, "IsGlobalDomain: "+fmt.Sprintf("%#v", this.IsGlobalDomain)+",\n")
	s = append(s, "HistoryArchivalStatus: "+fmt.Sprintf("%#v", this.HistoryArchivalStatus)+",\n")
	s = append(s, "HistoryArchivalUri: "+fmt.Sprintf("%#v", this.HistoryArchivalUri)+",\n")
	s = append(s, "VisibilityArchivalStatus: "+fmt.Sprintf("%#v", this.VisibilityArchivalStatus)+",\n")
	s = append(s, "VisibilityArchivalUri: "+fmt.Sprintf("%#v", this.VisibilityArchivalUri)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.RegisterDomainResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.DescribeDomainRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&apiv1.DescribeDomainResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	if this.ReplicationConfiguration != nil {
		s = append(s, "ReplicationConfiguration: "+fmt.Sprintf("%#v", this.ReplicationConfiguration)+",\n")
	}
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	s = append(s, "IsGlobalDomain: "+fmt.Sprintf("%#v", this.IsGlobalDomain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDomainsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.ListDomainsRequest{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDomainsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.ListDomainsResponse{")
	if this.Domains != nil {
		s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDomainInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.UpdateDomainInfo{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "OwnerEmail: "+fmt.Sprintf("%#v", this.OwnerEmail)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&apiv1.UpdateDomainRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	if this.ReplicationConfiguration != nil {
		s = append(s, "ReplicationConfiguration: "+fmt.Sprintf("%#v", this.ReplicationConfiguration)+",\n")
	}
	s = append(s, "SecurityToken: "+fmt.Sprintf("%#v", this.SecurityToken)+",\n")
	s = append(s, "DeleteBadBinary: "+fmt.Sprintf("%#v", this.DeleteBadBinary)+",\n")
	s = append(s, "FailoverTimeout: "+fmt.Sprintf("%#v", this.FailoverTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&apiv1.UpdateDomainResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	if this.ReplicationConfiguration != nil {
		s = append(s, "ReplicationConfiguration: "+fmt.Sprintf("%#v", this.ReplicationConfiguration)+",\n")
	}
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	s = append(s, "IsGlobalNamespace: "+fmt.Sprintf("%#v", this.IsGlobalNamespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeprecateDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.DeprecateDomainRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "SecurityToken: "+fmt.Sprintf("%#v", this.SecurityToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeprecateDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apiv1.DeprecateDomainResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringServiceDomain(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DomainAPIClient is the client API for DomainAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DomainAPIClient interface {
	// RegisterDomain creates a new domain which can be used as a container for all resources.  Domain is a top level
	// entity within Cadence, used as a container for all resources like workflow executions, task lists, etc.  Domain
	// acts as a sandbox and provides isolation for all resources within the domain.  All resources belongs to exactly one
	// domain.
	RegisterDomain(ctx context.Context, in *RegisterDomainRequest, opts ...grpc.CallOption) (*RegisterDomainResponse, error)
	// DescribeDomain returns the information and configuration for a registered domain.
	DescribeDomain(ctx context.Context, in *DescribeDomainRequest, opts ...grpc.CallOption) (*DescribeDomainResponse, error)
	// ListDomains returns the information and configuration for all domains.
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	// UpdateDomain is used to update the information and configuration for a registered domain.
	UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*UpdateDomainResponse, error)
	// DeprecateDomain us used to update status of a registered domain to DEPRECATED.  Once the domain is deprecated
	// it cannot be used to start new workflow executions.  Existing workflow executions will continue to run on
	// deprecated domains.
	DeprecateDomain(ctx context.Context, in *DeprecateDomainRequest, opts ...grpc.CallOption) (*DeprecateDomainResponse, error)
}

type domainAPIClient struct {
	cc *grpc.ClientConn
}

func NewDomainAPIClient(cc *grpc.ClientConn) DomainAPIClient {
	return &domainAPIClient{cc}
}

func (c *domainAPIClient) RegisterDomain(ctx context.Context, in *RegisterDomainRequest, opts ...grpc.CallOption) (*RegisterDomainResponse, error) {
	out := new(RegisterDomainResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.DomainAPI/RegisterDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainAPIClient) DescribeDomain(ctx context.Context, in *DescribeDomainRequest, opts ...grpc.CallOption) (*DescribeDomainResponse, error) {
	out := new(DescribeDomainResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.DomainAPI/DescribeDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainAPIClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.DomainAPI/ListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainAPIClient) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*UpdateDomainResponse, error) {
	out := new(UpdateDomainResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.DomainAPI/UpdateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainAPIClient) DeprecateDomain(ctx context.Context, in *DeprecateDomainRequest, opts ...grpc.CallOption) (*DeprecateDomainResponse, error) {
	out := new(DeprecateDomainResponse)
	err := c.cc.Invoke(ctx, "/uber.cadence.api.v1.DomainAPI/DeprecateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainAPIServer is the server API for DomainAPI service.
type DomainAPIServer interface {
	// RegisterDomain creates a new domain which can be used as a container for all resources.  Domain is a top level
	// entity within Cadence, used as a container for all resources like workflow executions, task lists, etc.  Domain
	// acts as a sandbox and provides isolation for all resources within the domain.  All resources belongs to exactly one
	// domain.
	RegisterDomain(context.Context, *RegisterDomainRequest) (*RegisterDomainResponse, error)
	// DescribeDomain returns the information and configuration for a registered domain.
	DescribeDomain(context.Context, *DescribeDomainRequest) (*DescribeDomainResponse, error)
	// ListDomains returns the information and configuration for all domains.
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	// UpdateDomain is used to update the information and configuration for a registered domain.
	UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error)
	// DeprecateDomain us used to update status of a registered domain to DEPRECATED.  Once the domain is deprecated
	// it cannot be used to start new workflow executions.  Existing workflow executions will continue to run on
	// deprecated domains.
	DeprecateDomain(context.Context, *DeprecateDomainRequest) (*DeprecateDomainResponse, error)
}

// UnimplementedDomainAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDomainAPIServer struct {
}

func (*UnimplementedDomainAPIServer) RegisterDomain(ctx context.Context, req *RegisterDomainRequest) (*RegisterDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDomain not implemented")
}
func (*UnimplementedDomainAPIServer) DescribeDomain(ctx context.Context, req *DescribeDomainRequest) (*DescribeDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDomain not implemented")
}
func (*UnimplementedDomainAPIServer) ListDomains(ctx context.Context, req *ListDomainsRequest) (*ListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (*UnimplementedDomainAPIServer) UpdateDomain(ctx context.Context, req *UpdateDomainRequest) (*UpdateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (*UnimplementedDomainAPIServer) DeprecateDomain(ctx context.Context, req *DeprecateDomainRequest) (*DeprecateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeprecateDomain not implemented")
}

func RegisterDomainAPIServer(s *grpc.Server, srv DomainAPIServer) {
	s.RegisterService(&_DomainAPI_serviceDesc, srv)
}

func _DomainAPI_RegisterDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainAPIServer).RegisterDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.DomainAPI/RegisterDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainAPIServer).RegisterDomain(ctx, req.(*RegisterDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainAPI_DescribeDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainAPIServer).DescribeDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.DomainAPI/DescribeDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainAPIServer).DescribeDomain(ctx, req.(*DescribeDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainAPI_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainAPIServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.DomainAPI/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainAPIServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainAPI_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainAPIServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.DomainAPI/UpdateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainAPIServer).UpdateDomain(ctx, req.(*UpdateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainAPI_DeprecateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprecateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainAPIServer).DeprecateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.cadence.api.v1.DomainAPI/DeprecateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainAPIServer).DeprecateDomain(ctx, req.(*DeprecateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DomainAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uber.cadence.api.v1.DomainAPI",
	HandlerType: (*DomainAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDomain",
			Handler:    _DomainAPI_RegisterDomain_Handler,
		},
		{
			MethodName: "DescribeDomain",
			Handler:    _DomainAPI_DescribeDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _DomainAPI_ListDomains_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _DomainAPI_UpdateDomain_Handler,
		},
		{
			MethodName: "DeprecateDomain",
			Handler:    _DomainAPI_DeprecateDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/uber/cadence/.gen/proto/api/v1/service_domain.proto",
}

func (m *RegisterDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VisibilityArchivalUri) > 0 {
		i -= len(m.VisibilityArchivalUri)
		copy(dAtA[i:], m.VisibilityArchivalUri)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.VisibilityArchivalUri)))
		i--
		dAtA[i] = 0x72
	}
	if m.VisibilityArchivalStatus != 0 {
		i = encodeVarintServiceDomain(dAtA, i, uint64(m.VisibilityArchivalStatus))
		i--
		dAtA[i] = 0x68
	}
	if len(m.HistoryArchivalUri) > 0 {
		i -= len(m.HistoryArchivalUri)
		copy(dAtA[i:], m.HistoryArchivalUri)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.HistoryArchivalUri)))
		i--
		dAtA[i] = 0x62
	}
	if m.HistoryArchivalStatus != 0 {
		i = encodeVarintServiceDomain(dAtA, i, uint64(m.HistoryArchivalStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.IsGlobalDomain {
		i--
		if m.IsGlobalDomain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.SecurityToken) > 0 {
		i -= len(m.SecurityToken)
		copy(dAtA[i:], m.SecurityToken)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.SecurityToken)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintServiceDomain(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ActiveClusterName) > 0 {
		i -= len(m.ActiveClusterName)
		copy(dAtA[i:], m.ActiveClusterName)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.ActiveClusterName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceDomain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EmitMetric {
		i--
		if m.EmitMetric {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowExecutionRetentionPeriod != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.WorkflowExecutionRetentionPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionRetentionPeriod):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintServiceDomain(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerEmail) > 0 {
		i -= len(m.OwnerEmail)
		copy(dAtA[i:], m.OwnerEmail)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.OwnerEmail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DescribeDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DescribeDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsGlobalDomain {
		i--
		if m.IsGlobalDomain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintServiceDomain(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.ReplicationConfiguration != nil {
		{
			size, err := m.ReplicationConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDomainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PageSize != 0 {
		i = encodeVarintServiceDomain(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDomainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDomainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDomainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceDomain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDomainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDomainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDomainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintServiceDomain(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OwnerEmail) > 0 {
		i -= len(m.OwnerEmail)
		copy(dAtA[i:], m.OwnerEmail)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.OwnerEmail)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailoverTimeout != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.FailoverTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.FailoverTimeout):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintServiceDomain(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DeleteBadBinary) > 0 {
		i -= len(m.DeleteBadBinary)
		copy(dAtA[i:], m.DeleteBadBinary)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.DeleteBadBinary)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityToken) > 0 {
		i -= len(m.SecurityToken)
		copy(dAtA[i:], m.SecurityToken)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.SecurityToken)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReplicationConfiguration != nil {
		{
			size, err := m.ReplicationConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsGlobalNamespace {
		i--
		if m.IsGlobalNamespace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintServiceDomain(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.ReplicationConfiguration != nil {
		{
			size, err := m.ReplicationConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeprecateDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeprecateDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeprecateDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecurityToken) > 0 {
		i -= len(m.SecurityToken)
		copy(dAtA[i:], m.SecurityToken)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.SecurityToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServiceDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeprecateDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeprecateDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeprecateDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintServiceDomain(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceDomain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	l = len(m.OwnerEmail)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.WorkflowExecutionRetentionPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.WorkflowExecutionRetentionPeriod)
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.EmitMetric {
		n += 2
	}
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovServiceDomain(uint64(l))
		}
	}
	l = len(m.ActiveClusterName)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovServiceDomain(uint64(len(k))) + 1 + len(v) + sovServiceDomain(uint64(len(v)))
			n += mapEntrySize + 1 + sovServiceDomain(uint64(mapEntrySize))
		}
	}
	l = len(m.SecurityToken)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.IsGlobalDomain {
		n += 2
	}
	if m.HistoryArchivalStatus != 0 {
		n += 1 + sovServiceDomain(uint64(m.HistoryArchivalStatus))
	}
	l = len(m.HistoryArchivalUri)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.VisibilityArchivalStatus != 0 {
		n += 1 + sovServiceDomain(uint64(m.VisibilityArchivalStatus))
	}
	l = len(m.VisibilityArchivalUri)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	return n
}

func (m *RegisterDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DescribeDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	return n
}

func (m *DescribeDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.ReplicationConfiguration != nil {
		l = m.ReplicationConfiguration.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovServiceDomain(uint64(m.FailoverVersion))
	}
	if m.IsGlobalDomain {
		n += 2
	}
	return n
}

func (m *ListDomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovServiceDomain(uint64(m.PageSize))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	return n
}

func (m *ListDomainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovServiceDomain(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	return n
}

func (m *UpdateDomainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	l = len(m.OwnerEmail)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovServiceDomain(uint64(len(k))) + 1 + len(v) + sovServiceDomain(uint64(len(v)))
			n += mapEntrySize + 1 + sovServiceDomain(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpdateDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.ReplicationConfiguration != nil {
		l = m.ReplicationConfiguration.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	l = len(m.SecurityToken)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	l = len(m.DeleteBadBinary)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.FailoverTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.FailoverTimeout)
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	return n
}

func (m *UpdateDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.ReplicationConfiguration != nil {
		l = m.ReplicationConfiguration.Size()
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovServiceDomain(uint64(m.FailoverVersion))
	}
	if m.IsGlobalNamespace {
		n += 2
	}
	return n
}

func (m *DeprecateDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	l = len(m.SecurityToken)
	if l > 0 {
		n += 1 + l + sovServiceDomain(uint64(l))
	}
	return n
}

func (m *DeprecateDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovServiceDomain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceDomain(x uint64) (n int) {
	return sovServiceDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegisterDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClusters := "[]*DomainReplicationConfiguration{"
	for _, f := range this.Clusters {
		repeatedStringForClusters += strings.Replace(fmt.Sprintf("%v", f), "DomainReplicationConfiguration", "DomainReplicationConfiguration", 1) + ","
	}
	repeatedStringForClusters += "}"
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&RegisterDomainRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`OwnerEmail:` + fmt.Sprintf("%v", this.OwnerEmail) + `,`,
		`WorkflowExecutionRetentionPeriod:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionRetentionPeriod), "Duration", "duration.Duration", 1) + `,`,
		`EmitMetric:` + fmt.Sprintf("%v", this.EmitMetric) + `,`,
		`Clusters:` + repeatedStringForClusters + `,`,
		`ActiveClusterName:` + fmt.Sprintf("%v", this.ActiveClusterName) + `,`,
		`Data:` + mapStringForData + `,`,
		`SecurityToken:` + fmt.Sprintf("%v", this.SecurityToken) + `,`,
		`IsGlobalDomain:` + fmt.Sprintf("%v", this.IsGlobalDomain) + `,`,
		`HistoryArchivalStatus:` + fmt.Sprintf("%v", this.HistoryArchivalStatus) + `,`,
		`HistoryArchivalUri:` + fmt.Sprintf("%v", this.HistoryArchivalUri) + `,`,
		`VisibilityArchivalStatus:` + fmt.Sprintf("%v", this.VisibilityArchivalStatus) + `,`,
		`VisibilityArchivalUri:` + fmt.Sprintf("%v", this.VisibilityArchivalUri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterDomainResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DescribeDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DescribeDomainRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DescribeDomainResponse{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "DomainInfo", "DomainInfo", 1) + `,`,
		`Configuration:` + strings.Replace(fmt.Sprintf("%v", this.Configuration), "DomainConfiguration", "DomainConfiguration", 1) + `,`,
		`ReplicationConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationConfiguration), "DomainReplicationConfiguration", "DomainReplicationConfiguration", 1) + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`IsGlobalDomain:` + fmt.Sprintf("%v", this.IsGlobalDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDomainsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDomainsRequest{`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDomainsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDomains := "[]*DescribeDomainResponse{"
	for _, f := range this.Domains {
		repeatedStringForDomains += strings.Replace(f.String(), "DescribeDomainResponse", "DescribeDomainResponse", 1) + ","
	}
	repeatedStringForDomains += "}"
	s := strings.Join([]string{`&ListDomainsResponse{`,
		`Domains:` + repeatedStringForDomains + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDomainInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&UpdateDomainInfo{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`OwnerEmail:` + fmt.Sprintf("%v", this.OwnerEmail) + `,`,
		`Data:` + mapStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDomainRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Info:` + strings.Replace(this.Info.String(), "UpdateDomainInfo", "UpdateDomainInfo", 1) + `,`,
		`Configuration:` + strings.Replace(fmt.Sprintf("%v", this.Configuration), "DomainConfiguration", "DomainConfiguration", 1) + `,`,
		`ReplicationConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationConfiguration), "DomainReplicationConfiguration", "DomainReplicationConfiguration", 1) + `,`,
		`SecurityToken:` + fmt.Sprintf("%v", this.SecurityToken) + `,`,
		`DeleteBadBinary:` + fmt.Sprintf("%v", this.DeleteBadBinary) + `,`,
		`FailoverTimeout:` + strings.Replace(fmt.Sprintf("%v", this.FailoverTimeout), "Duration", "duration.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDomainResponse{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "DomainInfo", "DomainInfo", 1) + `,`,
		`Configuration:` + strings.Replace(fmt.Sprintf("%v", this.Configuration), "DomainConfiguration", "DomainConfiguration", 1) + `,`,
		`ReplicationConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationConfiguration), "DomainReplicationConfiguration", "DomainReplicationConfiguration", 1) + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`IsGlobalNamespace:` + fmt.Sprintf("%v", this.IsGlobalNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeprecateDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeprecateDomainRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`SecurityToken:` + fmt.Sprintf("%v", this.SecurityToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeprecateDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeprecateDomainResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringServiceDomain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegisterDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionRetentionPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionRetentionPeriod == nil {
				m.WorkflowExecutionRetentionPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.WorkflowExecutionRetentionPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitMetric", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmitMetric = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &DomainReplicationConfiguration{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthServiceDomain
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthServiceDomain
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalDomain = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalStatus", wireType)
			}
			m.HistoryArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryArchivalStatus |= ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryArchivalUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalStatus", wireType)
			}
			m.VisibilityArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisibilityArchivalStatus |= ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisibilityArchivalUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &DomainInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &DomainConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfiguration == nil {
				m.ReplicationConfiguration = &DomainReplicationConfiguration{}
			}
			if err := m.ReplicationConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalDomain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDomainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDomainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDomainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &DescribeDomainResponse{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDomainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDomainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDomainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthServiceDomain
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthServiceDomain
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &UpdateDomainInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &DomainConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfiguration == nil {
				m.ReplicationConfiguration = &DomainReplicationConfiguration{}
			}
			if err := m.ReplicationConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBadBinary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteBadBinary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailoverTimeout == nil {
				m.FailoverTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.FailoverTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &DomainInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &DomainConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfiguration == nil {
				m.ReplicationConfiguration = &DomainReplicationConfiguration{}
			}
			if err := m.ReplicationConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalNamespace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalNamespace = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeprecateDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeprecateDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeprecateDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeprecateDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeprecateDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeprecateDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServiceDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceDomain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceDomain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceDomain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceDomain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceDomain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceDomain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceDomain = fmt.Errorf("proto: unexpected end of group")
)
