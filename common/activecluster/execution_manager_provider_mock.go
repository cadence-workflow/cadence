// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/activecluster (interfaces: ExecutionManagerProvider)
//
// Generated by this command:
//
//	mockgen -package activecluster -destination execution_manager_provider_mock.go -self_package github.com/uber/cadence/common/activecluster github.com/uber/cadence/common/activecluster ExecutionManagerProvider
//

// Package activecluster is a generated GoMock package.
package activecluster

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	persistence "github.com/uber/cadence/common/persistence"
)

// MockExecutionManagerProvider is a mock of ExecutionManagerProvider interface.
type MockExecutionManagerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionManagerProviderMockRecorder
	isgomock struct{}
}

// MockExecutionManagerProviderMockRecorder is the mock recorder for MockExecutionManagerProvider.
type MockExecutionManagerProviderMockRecorder struct {
	mock *MockExecutionManagerProvider
}

// NewMockExecutionManagerProvider creates a new mock instance.
func NewMockExecutionManagerProvider(ctrl *gomock.Controller) *MockExecutionManagerProvider {
	mock := &MockExecutionManagerProvider{ctrl: ctrl}
	mock.recorder = &MockExecutionManagerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionManagerProvider) EXPECT() *MockExecutionManagerProviderMockRecorder {
	return m.recorder
}

// GetExecutionManager mocks base method.
func (m *MockExecutionManagerProvider) GetExecutionManager(shardID int) (persistence.ExecutionManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionManager", shardID)
	ret0, _ := ret[0].(persistence.ExecutionManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionManager indicates an expected call of GetExecutionManager.
func (mr *MockExecutionManagerProviderMockRecorder) GetExecutionManager(shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionManager", reflect.TypeOf((*MockExecutionManagerProvider)(nil).GetExecutionManager), shardID)
}
