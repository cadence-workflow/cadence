(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{413:function(e,t,o){"use strict";o.r(t);var a=o(8),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"synchronous-query"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#synchronous-query"}},[e._v("#")]),e._v(" Synchronous query")]),e._v(" "),o("p",[e._v(":workflow:Workflow: code is stateful with the Cadence framework preserving it over various software and hardware failures. The state is constantly mutated during :workflow_execution:. To expose this internal state to the external world Cadence provides a synchronous :query: feature. From the :workflow: implementer point of view the :query: is exposed as a synchronous callback that is invoked by external entities. Multiple such callbacks can be provided per :workflow: type exposing different information to different external systems.")]),e._v(" "),o("p",[e._v("To execute a :query: an external client calls a synchronous Cadence API providing "),o("em",[e._v(":domain:, workflowID, :query: name")]),e._v(" and optional "),o("em",[e._v(":query: arguments")]),e._v(".")]),e._v(" "),o("p",[e._v(":query:Query: callbacks must be read-only not mutating the :workflow: state in any way. The other limitation is that the :query: callback cannot contain any blocking code. Both above limitations rule out ability to invoke :activity:activities: from the :query: handlers.")]),e._v(" "),o("p",[e._v("Cadence team is currently working on implementing "),o("em",[e._v("update")]),e._v(" feature that would be similar to :query: in the way it is invoked, but would support :workflow: state mutation and :local_activity: invocations.")]),e._v(" "),o("h2",{attrs:{id:"stack-trace-query"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#stack-trace-query"}},[e._v("#")]),e._v(" Stack Trace Query")]),e._v(" "),o("p",[e._v("The Cadence client libraries expose some predefined :query:queries: out of the box. Currently the only supported built-in :query: is "),o("em",[e._v("stack_trace")]),e._v(". This :query: returns stacks of all :workflow: owned threads. This is a great way to troubleshoot any :workflow: in production.")])])}),[],!1,null,null,null);t.default=r.exports}}]);