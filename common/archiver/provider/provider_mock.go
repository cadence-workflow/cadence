// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/archiver/provider (interfaces: ArchiverProvider)
//
// Generated by this command:
//
//	mockgen -package=provider -destination=provider_mock.go -self_package=github.com/uber/cadence/common/archiver/provider github.com/uber/cadence/common/archiver/provider ArchiverProvider
//

// Package provider is a generated GoMock package.
package provider

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	archiver "github.com/uber/cadence/common/archiver"
)

// MockArchiverProvider is a mock of ArchiverProvider interface.
type MockArchiverProvider struct {
	ctrl     *gomock.Controller
	recorder *MockArchiverProviderMockRecorder
	isgomock struct{}
}

// MockArchiverProviderMockRecorder is the mock recorder for MockArchiverProvider.
type MockArchiverProviderMockRecorder struct {
	mock *MockArchiverProvider
}

// NewMockArchiverProvider creates a new mock instance.
func NewMockArchiverProvider(ctrl *gomock.Controller) *MockArchiverProvider {
	mock := &MockArchiverProvider{ctrl: ctrl}
	mock.recorder = &MockArchiverProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiverProvider) EXPECT() *MockArchiverProviderMockRecorder {
	return m.recorder
}

// GetHistoryArchiver mocks base method.
func (m *MockArchiverProvider) GetHistoryArchiver(scheme, serviceName string) (archiver.HistoryArchiver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryArchiver", scheme, serviceName)
	ret0, _ := ret[0].(archiver.HistoryArchiver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryArchiver indicates an expected call of GetHistoryArchiver.
func (mr *MockArchiverProviderMockRecorder) GetHistoryArchiver(scheme, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryArchiver", reflect.TypeOf((*MockArchiverProvider)(nil).GetHistoryArchiver), scheme, serviceName)
}

// GetVisibilityArchiver mocks base method.
func (m *MockArchiverProvider) GetVisibilityArchiver(scheme, serviceName string) (archiver.VisibilityArchiver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisibilityArchiver", scheme, serviceName)
	ret0, _ := ret[0].(archiver.VisibilityArchiver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisibilityArchiver indicates an expected call of GetVisibilityArchiver.
func (mr *MockArchiverProviderMockRecorder) GetVisibilityArchiver(scheme, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisibilityArchiver", reflect.TypeOf((*MockArchiverProvider)(nil).GetVisibilityArchiver), scheme, serviceName)
}

// RegisterBootstrapContainer mocks base method.
func (m *MockArchiverProvider) RegisterBootstrapContainer(serviceName string, historyContainer *archiver.HistoryBootstrapContainer, visibilityContainter *archiver.VisibilityBootstrapContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBootstrapContainer", serviceName, historyContainer, visibilityContainter)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBootstrapContainer indicates an expected call of RegisterBootstrapContainer.
func (mr *MockArchiverProviderMockRecorder) RegisterBootstrapContainer(serviceName, historyContainer, visibilityContainter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBootstrapContainer", reflect.TypeOf((*MockArchiverProvider)(nil).RegisterBootstrapContainer), serviceName, historyContainer, visibilityContainter)
}
