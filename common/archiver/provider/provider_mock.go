// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package provider

import (
	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/archiver"
)

// NewMockArchiverProvider creates a new instance of MockArchiverProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArchiverProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArchiverProvider {
	mock := &MockArchiverProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArchiverProvider is an autogenerated mock type for the ArchiverProvider type
type MockArchiverProvider struct {
	mock.Mock
}

type MockArchiverProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArchiverProvider) EXPECT() *MockArchiverProvider_Expecter {
	return &MockArchiverProvider_Expecter{mock: &_m.Mock}
}

// GetHistoryArchiver provides a mock function for the type MockArchiverProvider
func (_mock *MockArchiverProvider) GetHistoryArchiver(scheme string, serviceName string) (archiver.HistoryArchiver, error) {
	ret := _mock.Called(scheme, serviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryArchiver")
	}

	var r0 archiver.HistoryArchiver
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (archiver.HistoryArchiver, error)); ok {
		return returnFunc(scheme, serviceName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) archiver.HistoryArchiver); ok {
		r0 = returnFunc(scheme, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(archiver.HistoryArchiver)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(scheme, serviceName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArchiverProvider_GetHistoryArchiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistoryArchiver'
type MockArchiverProvider_GetHistoryArchiver_Call struct {
	*mock.Call
}

// GetHistoryArchiver is a helper method to define mock.On call
//   - scheme string
//   - serviceName string
func (_e *MockArchiverProvider_Expecter) GetHistoryArchiver(scheme interface{}, serviceName interface{}) *MockArchiverProvider_GetHistoryArchiver_Call {
	return &MockArchiverProvider_GetHistoryArchiver_Call{Call: _e.mock.On("GetHistoryArchiver", scheme, serviceName)}
}

func (_c *MockArchiverProvider_GetHistoryArchiver_Call) Run(run func(scheme string, serviceName string)) *MockArchiverProvider_GetHistoryArchiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArchiverProvider_GetHistoryArchiver_Call) Return(historyArchiver archiver.HistoryArchiver, err error) *MockArchiverProvider_GetHistoryArchiver_Call {
	_c.Call.Return(historyArchiver, err)
	return _c
}

func (_c *MockArchiverProvider_GetHistoryArchiver_Call) RunAndReturn(run func(scheme string, serviceName string) (archiver.HistoryArchiver, error)) *MockArchiverProvider_GetHistoryArchiver_Call {
	_c.Call.Return(run)
	return _c
}

// GetVisibilityArchiver provides a mock function for the type MockArchiverProvider
func (_mock *MockArchiverProvider) GetVisibilityArchiver(scheme string, serviceName string) (archiver.VisibilityArchiver, error) {
	ret := _mock.Called(scheme, serviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetVisibilityArchiver")
	}

	var r0 archiver.VisibilityArchiver
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (archiver.VisibilityArchiver, error)); ok {
		return returnFunc(scheme, serviceName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) archiver.VisibilityArchiver); ok {
		r0 = returnFunc(scheme, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(archiver.VisibilityArchiver)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(scheme, serviceName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArchiverProvider_GetVisibilityArchiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVisibilityArchiver'
type MockArchiverProvider_GetVisibilityArchiver_Call struct {
	*mock.Call
}

// GetVisibilityArchiver is a helper method to define mock.On call
//   - scheme string
//   - serviceName string
func (_e *MockArchiverProvider_Expecter) GetVisibilityArchiver(scheme interface{}, serviceName interface{}) *MockArchiverProvider_GetVisibilityArchiver_Call {
	return &MockArchiverProvider_GetVisibilityArchiver_Call{Call: _e.mock.On("GetVisibilityArchiver", scheme, serviceName)}
}

func (_c *MockArchiverProvider_GetVisibilityArchiver_Call) Run(run func(scheme string, serviceName string)) *MockArchiverProvider_GetVisibilityArchiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArchiverProvider_GetVisibilityArchiver_Call) Return(visibilityArchiver archiver.VisibilityArchiver, err error) *MockArchiverProvider_GetVisibilityArchiver_Call {
	_c.Call.Return(visibilityArchiver, err)
	return _c
}

func (_c *MockArchiverProvider_GetVisibilityArchiver_Call) RunAndReturn(run func(scheme string, serviceName string) (archiver.VisibilityArchiver, error)) *MockArchiverProvider_GetVisibilityArchiver_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBootstrapContainer provides a mock function for the type MockArchiverProvider
func (_mock *MockArchiverProvider) RegisterBootstrapContainer(serviceName string, historyContainer *archiver.HistoryBootstrapContainer, visibilityContainter *archiver.VisibilityBootstrapContainer) error {
	ret := _mock.Called(serviceName, historyContainer, visibilityContainter)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBootstrapContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, *archiver.HistoryBootstrapContainer, *archiver.VisibilityBootstrapContainer) error); ok {
		r0 = returnFunc(serviceName, historyContainer, visibilityContainter)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockArchiverProvider_RegisterBootstrapContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBootstrapContainer'
type MockArchiverProvider_RegisterBootstrapContainer_Call struct {
	*mock.Call
}

// RegisterBootstrapContainer is a helper method to define mock.On call
//   - serviceName string
//   - historyContainer *archiver.HistoryBootstrapContainer
//   - visibilityContainter *archiver.VisibilityBootstrapContainer
func (_e *MockArchiverProvider_Expecter) RegisterBootstrapContainer(serviceName interface{}, historyContainer interface{}, visibilityContainter interface{}) *MockArchiverProvider_RegisterBootstrapContainer_Call {
	return &MockArchiverProvider_RegisterBootstrapContainer_Call{Call: _e.mock.On("RegisterBootstrapContainer", serviceName, historyContainer, visibilityContainter)}
}

func (_c *MockArchiverProvider_RegisterBootstrapContainer_Call) Run(run func(serviceName string, historyContainer *archiver.HistoryBootstrapContainer, visibilityContainter *archiver.VisibilityBootstrapContainer)) *MockArchiverProvider_RegisterBootstrapContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *archiver.HistoryBootstrapContainer
		if args[1] != nil {
			arg1 = args[1].(*archiver.HistoryBootstrapContainer)
		}
		var arg2 *archiver.VisibilityBootstrapContainer
		if args[2] != nil {
			arg2 = args[2].(*archiver.VisibilityBootstrapContainer)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockArchiverProvider_RegisterBootstrapContainer_Call) Return(err error) *MockArchiverProvider_RegisterBootstrapContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockArchiverProvider_RegisterBootstrapContainer_Call) RunAndReturn(run func(serviceName string, historyContainer *archiver.HistoryBootstrapContainer, visibilityContainter *archiver.VisibilityBootstrapContainer) error) *MockArchiverProvider_RegisterBootstrapContainer_Call {
	_c.Call.Return(run)
	return _c
}
