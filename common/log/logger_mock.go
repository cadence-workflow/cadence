// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/log (interfaces: Logger)
//
// Generated by this command:
//
//	mockgen -package=log -destination=logger_mock.go -self_package=github.com/uber/cadence/common/log github.com/uber/cadence/common/log Logger
//

// Package log is a generated GoMock package.
package log

import (
	reflect "reflect"

	tag "github.com/uber/cadence/common/log/tag"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, tags ...tag.Tag) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// DebugOn mocks base method.
func (m *MockLogger) DebugOn() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugOn")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DebugOn indicates an expected call of DebugOn.
func (mr *MockLoggerMockRecorder) DebugOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugOn", reflect.TypeOf((*MockLogger)(nil).DebugOn))
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, tags ...tag.Tag) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(msg string, tags ...tag.Tag) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(msg any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), varargs...)
}

// Helper mocks base method.
func (m *MockLogger) Helper() Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Helper")
	ret0, _ := ret[0].(Logger)
	return ret0
}

// Helper indicates an expected call of Helper.
func (mr *MockLoggerMockRecorder) Helper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Helper", reflect.TypeOf((*MockLogger)(nil).Helper))
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, tags ...tag.Tag) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// SampleInfo mocks base method.
func (m *MockLogger) SampleInfo(msg string, sampleRate int, tags ...tag.Tag) {
	m.ctrl.T.Helper()
	varargs := []any{msg, sampleRate}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SampleInfo", varargs...)
}

// SampleInfo indicates an expected call of SampleInfo.
func (mr *MockLoggerMockRecorder) SampleInfo(msg, sampleRate any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg, sampleRate}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleInfo", reflect.TypeOf((*MockLogger)(nil).SampleInfo), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, tags ...tag.Tag) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// WithTags mocks base method.
func (m *MockLogger) WithTags(tags ...tag.Tag) Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithTags", varargs...)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// WithTags indicates an expected call of WithTags.
func (mr *MockLoggerMockRecorder) WithTags(tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTags", reflect.TypeOf((*MockLogger)(nil).WithTags), tags...)
}
