// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package timeout

// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"
	"time"

	"go.uber.org/yarpc"

	"github.com/uber/cadence/client/matching"
	"github.com/uber/cadence/common/future"
	"github.com/uber/cadence/common/persistence"
	"github.com/uber/cadence/common/types"
)

var _ matching.Client = (*matchingClient)(nil)

// matchingClient implements the matching.Client interface instrumented with timeouts
type matchingClient struct {
	client          matching.Client
	loadBalancer    matching.LoadBalancer
	longPollTimeout time.Duration
	peerResolver    matching.PeerResolver
	timeout         time.Duration
}

// NewMatchingClient creates a new matchingClient instance
func NewMatchingClient(
	client matching.Client,
	loadBalancer matching.LoadBalancer,
	longPollTimeout time.Duration,
	peerResolver matching.PeerResolver,
	timeout time.Duration,
) matching.Client {
	return &matchingClient{
		client:          client,
		loadBalancer:    loadBalancer,
		longPollTimeout: longPollTimeout,
		peerResolver:    peerResolver,
		timeout:         timeout,
	}
}

func (c *matchingClient) AddActivityTask(ctx context.Context, ap1 *types.AddActivityTaskRequest, p1 ...yarpc.CallOption) (err error) {
	partition := c.loadBalancer.PickWritePartition(
		ap1.GetDomainUUID(),
		*ap1.GetTaskList(),
		persistence.TaskListTypeActivity,
		ap1.GetForwardedFrom(),
	)
	ap1.TaskList.Name = partition
	peer, err := c.peerResolver.FromTaskList(ap1.TaskList.GetName())
	if err != nil {
		return err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.timeout)
	defer cancel()
	return c.client.AddActivityTask(ctx, ap1, p1...)
}

func (c *matchingClient) AddDecisionTask(ctx context.Context, ap1 *types.AddDecisionTaskRequest, p1 ...yarpc.CallOption) (err error) {
	partition := c.loadBalancer.PickWritePartition(
		ap1.GetDomainUUID(),
		*ap1.GetTaskList(),
		persistence.TaskListTypeDecision,
		ap1.GetForwardedFrom(),
	)
	ap1.TaskList.Name = partition
	peer, err := c.peerResolver.FromTaskList(ap1.TaskList.GetName())
	if err != nil {
		return err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.timeout)
	defer cancel()
	return c.client.AddDecisionTask(ctx, ap1, p1...)
}

func (c *matchingClient) CancelOutstandingPoll(ctx context.Context, cp1 *types.CancelOutstandingPollRequest, p1 ...yarpc.CallOption) (err error) {

	peer, err := c.peerResolver.FromTaskList(cp1.TaskList.GetName())
	if err != nil {
		return err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.timeout)
	defer cancel()
	return c.client.CancelOutstandingPoll(ctx, cp1, p1...)
}

func (c *matchingClient) DescribeTaskList(ctx context.Context, mp1 *types.MatchingDescribeTaskListRequest, p1 ...yarpc.CallOption) (dp1 *types.DescribeTaskListResponse, err error) {

	peer, err := c.peerResolver.FromTaskList(mp1.DescRequest.TaskList.GetName())
	if err != nil {
		return nil, err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.timeout)
	defer cancel()
	return c.client.DescribeTaskList(ctx, mp1, p1...)
}

func (c *matchingClient) ListTaskListPartitions(ctx context.Context, mp1 *types.MatchingListTaskListPartitionsRequest, p1 ...yarpc.CallOption) (lp1 *types.ListTaskListPartitionsResponse, err error) {

	peer, err := c.peerResolver.FromTaskList(mp1.TaskList.GetName())
	if err != nil {
		return nil, err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.timeout)
	defer cancel()
	return c.client.ListTaskListPartitions(ctx, mp1, p1...)
}

func (c *matchingClient) PollForActivityTask(ctx context.Context, mp1 *types.MatchingPollForActivityTaskRequest, p1 ...yarpc.CallOption) (pp1 *types.PollForActivityTaskResponse, err error) {
	partition := c.loadBalancer.PickReadPartition(
		mp1.GetDomainUUID(),
		*mp1.PollRequest.GetTaskList(),
		persistence.TaskListTypeActivity,
		mp1.GetForwardedFrom(),
	)
	mp1.PollRequest.TaskList.Name = partition
	peer, err := c.peerResolver.FromTaskList(mp1.PollRequest.TaskList.GetName())
	if err != nil {
		return nil, err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.longPollTimeout)
	defer cancel()
	return c.client.PollForActivityTask(ctx, mp1, p1...)
}

func (c *matchingClient) PollForDecisionTask(ctx context.Context, mp1 *types.MatchingPollForDecisionTaskRequest, p1 ...yarpc.CallOption) (mp2 *types.MatchingPollForDecisionTaskResponse, err error) {
	partition := c.loadBalancer.PickReadPartition(
		mp1.GetDomainUUID(),
		*mp1.PollRequest.GetTaskList(),
		persistence.TaskListTypeDecision,
		mp1.GetForwardedFrom(),
	)
	mp1.PollRequest.TaskList.Name = partition
	peer, err := c.peerResolver.FromTaskList(mp1.PollRequest.TaskList.GetName())
	if err != nil {
		return nil, err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.longPollTimeout)
	defer cancel()
	return c.client.PollForDecisionTask(ctx, mp1, p1...)
}

func (c *matchingClient) QueryWorkflow(ctx context.Context, mp1 *types.MatchingQueryWorkflowRequest, p1 ...yarpc.CallOption) (qp1 *types.QueryWorkflowResponse, err error) {
	partition := c.loadBalancer.PickReadPartition(
		mp1.GetDomainUUID(),
		*mp1.GetTaskList(),
		persistence.TaskListTypeDecision,
		mp1.GetForwardedFrom(),
	)
	mp1.TaskList.Name = partition
	peer, err := c.peerResolver.FromTaskList(mp1.TaskList.GetName())
	if err != nil {
		return nil, err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.timeout)
	defer cancel()
	return c.client.QueryWorkflow(ctx, mp1, p1...)
}

func (c *matchingClient) RespondQueryTaskCompleted(ctx context.Context, mp1 *types.MatchingRespondQueryTaskCompletedRequest, p1 ...yarpc.CallOption) (err error) {

	peer, err := c.peerResolver.FromTaskList(mp1.TaskList.GetName())
	if err != nil {
		return err
	}
	p1 = append(p1, yarpc.WithShardKey(peer))
	ctx, cancel := createContext(ctx, c.timeout)
	defer cancel()
	return c.client.RespondQueryTaskCompleted(ctx, mp1, p1...)
}

func (c *matchingClient) GetTaskListsByDomain(
	ctx context.Context,
	request *types.GetTaskListsByDomainRequest,
	opts ...yarpc.CallOption,
) (*types.GetTaskListsByDomainResponse, error) {
	peers, err := c.peerResolver.GetAllPeers()
	if err != nil {
		return nil, err
	}

	var futures []future.Future
	for _, peer := range peers {
		future, settable := future.NewFuture()
		settable.Set(c.client.GetTaskListsByDomain(ctx, request, append(opts, yarpc.WithShardKey(peer))...))
		futures = append(futures, future)
	}

	decisionTaskListMap := make(map[string]*types.DescribeTaskListResponse)
	activityTaskListMap := make(map[string]*types.DescribeTaskListResponse)
	for _, future := range futures {
		var resp *types.GetTaskListsByDomainResponse
		if err = future.Get(ctx, &resp); err != nil {
			return nil, err
		}
		for name, tl := range resp.GetDecisionTaskListMap() {
			if _, ok := decisionTaskListMap[name]; !ok {
				decisionTaskListMap[name] = tl
			} else {
				decisionTaskListMap[name].Pollers = append(decisionTaskListMap[name].Pollers, tl.GetPollers()...)
			}
		}
		for name, tl := range resp.GetActivityTaskListMap() {
			if _, ok := activityTaskListMap[name]; !ok {
				activityTaskListMap[name] = tl
			} else {
				activityTaskListMap[name].Pollers = append(activityTaskListMap[name].Pollers, tl.GetPollers()...)
			}
		}
	}

	return &types.GetTaskListsByDomainResponse{
		DecisionTaskListMap: decisionTaskListMap,
		ActivityTaskListMap: activityTaskListMap,
	}, nil
}
