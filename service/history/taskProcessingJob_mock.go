// The MIT License (MIT)
//
// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: taskProcessingJob.go

// Package history is a generated GoMock package.
package history

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocktaskProcessingJob is a mock of taskProcessingJob interface
type MocktaskProcessingJob struct {
	ctrl     *gomock.Controller
	recorder *MocktaskProcessingJobMockRecorder
}

// MocktaskProcessingJobMockRecorder is the mock recorder for MocktaskProcessingJob
type MocktaskProcessingJobMockRecorder struct {
	mock *MocktaskProcessingJob
}

// NewMocktaskProcessingJob creates a new mock instance
func NewMocktaskProcessingJob(ctrl *gomock.Controller) *MocktaskProcessingJob {
	mock := &MocktaskProcessingJob{ctrl: ctrl}
	mock.recorder = &MocktaskProcessingJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktaskProcessingJob) EXPECT() *MocktaskProcessingJobMockRecorder {
	return m.recorder
}

// Level mocks base method
func (m *MocktaskProcessingJob) Level() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level")
	ret0, _ := ret[0].(int)
	return ret0
}

// Level indicates an expected call of Level
func (mr *MocktaskProcessingJobMockRecorder) Level() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MocktaskProcessingJob)(nil).Level))
}

// AckLevel mocks base method
func (m *MocktaskProcessingJob) AckLevel() taskKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckLevel")
	ret0, _ := ret[0].(taskKey)
	return ret0
}

// AckLevel indicates an expected call of AckLevel
func (mr *MocktaskProcessingJobMockRecorder) AckLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckLevel", reflect.TypeOf((*MocktaskProcessingJob)(nil).AckLevel))
}

// ReadLevel mocks base method
func (m *MocktaskProcessingJob) ReadLevel() taskKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLevel")
	ret0, _ := ret[0].(taskKey)
	return ret0
}

// ReadLevel indicates an expected call of ReadLevel
func (mr *MocktaskProcessingJobMockRecorder) ReadLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLevel", reflect.TypeOf((*MocktaskProcessingJob)(nil).ReadLevel))
}

// MaxReadLevel mocks base method
func (m *MocktaskProcessingJob) MaxReadLevel() taskKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxReadLevel")
	ret0, _ := ret[0].(taskKey)
	return ret0
}

// MaxReadLevel indicates an expected call of MaxReadLevel
func (mr *MocktaskProcessingJobMockRecorder) MaxReadLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxReadLevel", reflect.TypeOf((*MocktaskProcessingJob)(nil).MaxReadLevel))
}

// DomainFilter mocks base method
func (m *MocktaskProcessingJob) DomainFilter() domainFilter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainFilter")
	ret0, _ := ret[0].(domainFilter)
	return ret0
}

// DomainFilter indicates an expected call of DomainFilter
func (mr *MocktaskProcessingJobMockRecorder) DomainFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainFilter", reflect.TypeOf((*MocktaskProcessingJob)(nil).DomainFilter))
}

// AddTasks mocks base method
func (m *MocktaskProcessingJob) AddTasks(arg0 []queueTask) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTasks", arg0)
}

// AddTasks indicates an expected call of AddTasks
func (mr *MocktaskProcessingJobMockRecorder) AddTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTasks", reflect.TypeOf((*MocktaskProcessingJob)(nil).AddTasks), arg0)
}

// Split mocks base method
func (m *MocktaskProcessingJob) Split(arg0 taskProcessingJobSplitPolicy) []taskProcessingJob {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", arg0)
	ret0, _ := ret[0].([]taskProcessingJob)
	return ret0
}

// Split indicates an expected call of Split
func (mr *MocktaskProcessingJobMockRecorder) Split(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MocktaskProcessingJob)(nil).Split), arg0)
}

// Merge mocks base method
func (m *MocktaskProcessingJob) Merge(arg0 taskProcessingJob) []taskProcessingJob {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0)
	ret0, _ := ret[0].([]taskProcessingJob)
	return ret0
}

// Merge indicates an expected call of Merge
func (mr *MocktaskProcessingJobMockRecorder) Merge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MocktaskProcessingJob)(nil).Merge), arg0)
}

// MocktaskProcessingJobSplitPolicy is a mock of taskProcessingJobSplitPolicy interface
type MocktaskProcessingJobSplitPolicy struct {
	ctrl     *gomock.Controller
	recorder *MocktaskProcessingJobSplitPolicyMockRecorder
}

// MocktaskProcessingJobSplitPolicyMockRecorder is the mock recorder for MocktaskProcessingJobSplitPolicy
type MocktaskProcessingJobSplitPolicyMockRecorder struct {
	mock *MocktaskProcessingJobSplitPolicy
}

// NewMocktaskProcessingJobSplitPolicy creates a new mock instance
func NewMocktaskProcessingJobSplitPolicy(ctrl *gomock.Controller) *MocktaskProcessingJobSplitPolicy {
	mock := &MocktaskProcessingJobSplitPolicy{ctrl: ctrl}
	mock.recorder = &MocktaskProcessingJobSplitPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktaskProcessingJobSplitPolicy) EXPECT() *MocktaskProcessingJobSplitPolicyMockRecorder {
	return m.recorder
}

// Evaluate mocks base method
func (m *MocktaskProcessingJobSplitPolicy) Evaluate(pendingTaskStats map[string]int, currentLevel int) map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evaluate", pendingTaskStats, currentLevel)
	ret0, _ := ret[0].(map[string]int)
	return ret0
}

// Evaluate indicates an expected call of Evaluate
func (mr *MocktaskProcessingJobSplitPolicyMockRecorder) Evaluate(pendingTaskStats, currentLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MocktaskProcessingJobSplitPolicy)(nil).Evaluate), pendingTaskStats, currentLevel)
}
