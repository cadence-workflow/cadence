// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/service/history/queuev2 (interfaces: PendingTaskTracker)
//
// Generated by this command:
//
//	mockgen -package queuev2 -destination pending_task_tracker_mock.go github.com/uber/cadence/service/history/queuev2 PendingTaskTracker
//

// Package queuev2 is a generated GoMock package.
package queuev2

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	persistence "github.com/uber/cadence/common/persistence"
	task "github.com/uber/cadence/service/history/task"
)

// MockPendingTaskTracker is a mock of PendingTaskTracker interface.
type MockPendingTaskTracker struct {
	ctrl     *gomock.Controller
	recorder *MockPendingTaskTrackerMockRecorder
	isgomock struct{}
}

// MockPendingTaskTrackerMockRecorder is the mock recorder for MockPendingTaskTracker.
type MockPendingTaskTrackerMockRecorder struct {
	mock *MockPendingTaskTracker
}

// NewMockPendingTaskTracker creates a new mock instance.
func NewMockPendingTaskTracker(ctrl *gomock.Controller) *MockPendingTaskTracker {
	mock := &MockPendingTaskTracker{ctrl: ctrl}
	mock.recorder = &MockPendingTaskTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPendingTaskTracker) EXPECT() *MockPendingTaskTrackerMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockPendingTaskTracker) AddTask(arg0 task.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTask", arg0)
}

// AddTask indicates an expected call of AddTask.
func (mr *MockPendingTaskTrackerMockRecorder) AddTask(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockPendingTaskTracker)(nil).AddTask), arg0)
}

// GetMinimumTaskKey mocks base method.
func (m *MockPendingTaskTracker) GetMinimumTaskKey() (persistence.HistoryTaskKey, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinimumTaskKey")
	ret0, _ := ret[0].(persistence.HistoryTaskKey)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMinimumTaskKey indicates an expected call of GetMinimumTaskKey.
func (mr *MockPendingTaskTrackerMockRecorder) GetMinimumTaskKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinimumTaskKey", reflect.TypeOf((*MockPendingTaskTracker)(nil).GetMinimumTaskKey))
}

// GetTasks mocks base method.
func (m *MockPendingTaskTracker) GetTasks() map[persistence.HistoryTaskKey]task.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks")
	ret0, _ := ret[0].(map[persistence.HistoryTaskKey]task.Task)
	return ret0
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockPendingTaskTrackerMockRecorder) GetTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockPendingTaskTracker)(nil).GetTasks))
}

// PruneAckedTasks mocks base method.
func (m *MockPendingTaskTracker) PruneAckedTasks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PruneAckedTasks")
}

// PruneAckedTasks indicates an expected call of PruneAckedTasks.
func (mr *MockPendingTaskTrackerMockRecorder) PruneAckedTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneAckedTasks", reflect.TypeOf((*MockPendingTaskTracker)(nil).PruneAckedTasks))
}
