// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: partitioning.go

// Package partition is a generated GoMock package.
package partition

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockPartitioner is a mock of Partitioner interface.
type MockPartitioner struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionerMockRecorder
}

// MockPartitionerMockRecorder is the mock recorder for MockPartitioner.
type MockPartitionerMockRecorder struct {
	mock *MockPartitioner
}

// NewMockPartitioner creates a new mock instance.
func NewMockPartitioner(ctrl *gomock.Controller) *MockPartitioner {
	mock := &MockPartitioner{ctrl: ctrl}
	mock.recorder = &MockPartitionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitioner) EXPECT() *MockPartitionerMockRecorder {
	return m.recorder
}

// GetTaskZoneByDomainID mocks base method.
func (m *MockPartitioner) GetTaskZoneByDomainID(ctx context.Context, DomainID string, partitionKey types.PartitionConfig) (*types.ZoneName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskZoneByDomainID", ctx, DomainID, partitionKey)
	ret0, _ := ret[0].(*types.ZoneName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskZoneByDomainID indicates an expected call of GetTaskZoneByDomainID.
func (mr *MockPartitionerMockRecorder) GetTaskZoneByDomainID(ctx, DomainID, partitionKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskZoneByDomainID", reflect.TypeOf((*MockPartitioner)(nil).GetTaskZoneByDomainID), ctx, DomainID, partitionKey)
}

// IsDrained mocks base method.
func (m *MockPartitioner) IsDrained(ctx context.Context, Domain string, Zone types.ZoneName) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDrained", ctx, Domain, Zone)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDrained indicates an expected call of IsDrained.
func (mr *MockPartitionerMockRecorder) IsDrained(ctx, Domain, Zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDrained", reflect.TypeOf((*MockPartitioner)(nil).IsDrained), ctx, Domain, Zone)
}

// IsDrainedByDomainID mocks base method.
func (m *MockPartitioner) IsDrainedByDomainID(ctx context.Context, DomainID string, Zone types.ZoneName) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDrainedByDomainID", ctx, DomainID, Zone)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDrainedByDomainID indicates an expected call of IsDrainedByDomainID.
func (mr *MockPartitionerMockRecorder) IsDrainedByDomainID(ctx, DomainID, Zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDrainedByDomainID", reflect.TypeOf((*MockPartitioner)(nil).IsDrainedByDomainID), ctx, DomainID, Zone)
}

// MockZoneState is a mock of ZoneState interface.
type MockZoneState struct {
	ctrl     *gomock.Controller
	recorder *MockZoneStateMockRecorder
}

// MockZoneStateMockRecorder is the mock recorder for MockZoneState.
type MockZoneStateMockRecorder struct {
	mock *MockZoneState
}

// NewMockZoneState creates a new mock instance.
func NewMockZoneState(ctrl *gomock.Controller) *MockZoneState {
	mock := &MockZoneState{ctrl: ctrl}
	mock.recorder = &MockZoneStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZoneState) EXPECT() *MockZoneStateMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockZoneState) Get(ctx context.Context, domain string, zone types.ZoneName) (*types.ZonePartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, domain, zone)
	ret0, _ := ret[0].(*types.ZonePartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockZoneStateMockRecorder) Get(ctx, domain, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZoneState)(nil).Get), ctx, domain, zone)
}

// GetByDomainID mocks base method.
func (m *MockZoneState) GetByDomainID(ctx context.Context, domainID string, zone types.ZoneName) (*types.ZonePartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDomainID", ctx, domainID, zone)
	ret0, _ := ret[0].(*types.ZonePartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDomainID indicates an expected call of GetByDomainID.
func (mr *MockZoneStateMockRecorder) GetByDomainID(ctx, domainID, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDomainID", reflect.TypeOf((*MockZoneState)(nil).GetByDomainID), ctx, domainID, zone)
}

// ListAll mocks base method.
func (m *MockZoneState) ListAll(ctx context.Context, domainID string) ([]types.ZonePartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, domainID)
	ret0, _ := ret[0].([]types.ZonePartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockZoneStateMockRecorder) ListAll(ctx, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockZoneState)(nil).ListAll), ctx, domainID)
}
