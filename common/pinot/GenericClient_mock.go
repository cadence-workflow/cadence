// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package pinot is a generated GoMock package.
package pinot

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockGenericClient is a mock of GenericClient interface.
type MockGenericClient struct {
	ctrl     *gomock.Controller
	recorder *MockGenericClientMockRecorder
}

// MockGenericClientMockRecorder is the mock recorder for MockGenericClient.
type MockGenericClientMockRecorder struct {
	mock *MockGenericClient
}

// NewMockGenericClient creates a new mock instance.
func NewMockGenericClient(ctrl *gomock.Controller) *MockGenericClient {
	mock := &MockGenericClient{ctrl: ctrl}
	mock.recorder = &MockGenericClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericClient) EXPECT() *MockGenericClientMockRecorder {
	return m.recorder
}

// CountByQuery mocks base method.
func (m *MockGenericClient) CountByQuery(query string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByQuery", query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByQuery indicates an expected call of CountByQuery.
func (mr *MockGenericClientMockRecorder) CountByQuery(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByQuery", reflect.TypeOf((*MockGenericClient)(nil).CountByQuery), query)
}

// Search mocks base method.
func (m *MockGenericClient) Search(request *SearchRequest) (*SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", request)
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockGenericClientMockRecorder) Search(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGenericClient)(nil).Search), request)
}

// MockGenericBackoff is a mock of GenericBackoff interface.
type MockGenericBackoff struct {
	ctrl     *gomock.Controller
	recorder *MockGenericBackoffMockRecorder
}

// MockGenericBackoffMockRecorder is the mock recorder for MockGenericBackoff.
type MockGenericBackoffMockRecorder struct {
	mock *MockGenericBackoff
}

// NewMockGenericBackoff creates a new mock instance.
func NewMockGenericBackoff(ctrl *gomock.Controller) *MockGenericBackoff {
	mock := &MockGenericBackoff{ctrl: ctrl}
	mock.recorder = &MockGenericBackoffMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericBackoff) EXPECT() *MockGenericBackoffMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockGenericBackoff) Next(retry int) (time.Duration, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", retry)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockGenericBackoffMockRecorder) Next(retry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockGenericBackoff)(nil).Next), retry)
}
