// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/service/history/queuev2 (interfaces: QueueReader)
//
// Generated by this command:
//
//	mockgen -package queuev2 -destination queue_reader_mock.go github.com/uber/cadence/service/history/queuev2 QueueReader
//

// Package queuev2 is a generated GoMock package.
package queuev2

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueueReader is a mock of QueueReader interface.
type MockQueueReader struct {
	ctrl     *gomock.Controller
	recorder *MockQueueReaderMockRecorder
	isgomock struct{}
}

// MockQueueReaderMockRecorder is the mock recorder for MockQueueReader.
type MockQueueReaderMockRecorder struct {
	mock *MockQueueReader
}

// NewMockQueueReader creates a new mock instance.
func NewMockQueueReader(ctrl *gomock.Controller) *MockQueueReader {
	mock := &MockQueueReader{ctrl: ctrl}
	mock.recorder = &MockQueueReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueReader) EXPECT() *MockQueueReaderMockRecorder {
	return m.recorder
}

// GetTask mocks base method.
func (m *MockQueueReader) GetTask(arg0 context.Context, arg1 *GetTaskRequest) (*GetTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(*GetTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockQueueReaderMockRecorder) GetTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockQueueReader)(nil).GetTask), arg0, arg1)
}
