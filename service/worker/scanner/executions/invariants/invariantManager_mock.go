// Code generated by mockery v1.0.0. DO NOT EDIT.

package invariants

import (
	"github.com/stretchr/testify/mock"
	"github.com/uber/cadence/service/worker/scanner/executions/common"
)

// MockInvariantManager is an autogenerated mock type for the InvariantManager type
type MockInvariantManager struct {
	mock.Mock
}

// InvariantTypes provides a mock function with given fields:
func (_m *MockInvariantManager) InvariantTypes() []common.InvariantType {
	ret := _m.Called()

	var r0 []common.InvariantType
	if rf, ok := ret.Get(0).(func() []common.InvariantType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.InvariantType)
		}
	}

	return r0
}

// RunChecks provides a mock function with given fields: _a0
func (_m *MockInvariantManager) RunChecks(_a0 common.Execution) common.ManagerCheckResult {
	ret := _m.Called(_a0)

	var r0 common.ManagerCheckResult
	if rf, ok := ret.Get(0).(func(common.Execution) common.ManagerCheckResult); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(common.ManagerCheckResult)
	}

	return r0
}

// RunFixes provides a mock function with given fields: _a0
func (_m *MockInvariantManager) RunFixes(_a0 common.Execution) common.ManagerFixResult {
	ret := _m.Called(_a0)

	var r0 common.ManagerFixResult
	if rf, ok := ret.Get(0).(func(common.Execution) common.ManagerFixResult); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(common.ManagerFixResult)
	}

	return r0
}
