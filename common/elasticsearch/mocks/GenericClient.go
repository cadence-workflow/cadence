// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/elasticsearch"
	"github.com/uber/cadence/common/elasticsearch/bulk"
)

// NewGenericClient creates a new instance of GenericClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericClient {
	mock := &GenericClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GenericClient is an autogenerated mock type for the GenericClient type
type GenericClient struct {
	mock.Mock
}

type GenericClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GenericClient) EXPECT() *GenericClient_Expecter {
	return &GenericClient_Expecter{mock: &_m.Mock}
}

// CountByQuery provides a mock function for the type GenericClient
func (_mock *GenericClient) CountByQuery(ctx context.Context, index string, query string) (int64, error) {
	ret := _mock.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for CountByQuery")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return returnFunc(ctx, index, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = returnFunc(ctx, index, query)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, index, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GenericClient_CountByQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByQuery'
type GenericClient_CountByQuery_Call struct {
	*mock.Call
}

// CountByQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *GenericClient_Expecter) CountByQuery(ctx interface{}, index interface{}, query interface{}) *GenericClient_CountByQuery_Call {
	return &GenericClient_CountByQuery_Call{Call: _e.mock.On("CountByQuery", ctx, index, query)}
}

func (_c *GenericClient_CountByQuery_Call) Run(run func(ctx context.Context, index string, query string)) *GenericClient_CountByQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GenericClient_CountByQuery_Call) Return(n int64, err error) *GenericClient_CountByQuery_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *GenericClient_CountByQuery_Call) RunAndReturn(run func(ctx context.Context, index string, query string) (int64, error)) *GenericClient_CountByQuery_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function for the type GenericClient
func (_mock *GenericClient) CreateIndex(ctx context.Context, index string) error {
	ret := _mock.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, index)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GenericClient_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type GenericClient_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
func (_e *GenericClient_Expecter) CreateIndex(ctx interface{}, index interface{}) *GenericClient_CreateIndex_Call {
	return &GenericClient_CreateIndex_Call{Call: _e.mock.On("CreateIndex", ctx, index)}
}

func (_c *GenericClient_CreateIndex_Call) Run(run func(ctx context.Context, index string)) *GenericClient_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GenericClient_CreateIndex_Call) Return(err error) *GenericClient_CreateIndex_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GenericClient_CreateIndex_Call) RunAndReturn(run func(ctx context.Context, index string) error) *GenericClient_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// IsNotFoundError provides a mock function for the type GenericClient
func (_mock *GenericClient) IsNotFoundError(err error) bool {
	ret := _mock.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsNotFoundError")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(error) bool); ok {
		r0 = returnFunc(err)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// GenericClient_IsNotFoundError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNotFoundError'
type GenericClient_IsNotFoundError_Call struct {
	*mock.Call
}

// IsNotFoundError is a helper method to define mock.On call
//   - err error
func (_e *GenericClient_Expecter) IsNotFoundError(err interface{}) *GenericClient_IsNotFoundError_Call {
	return &GenericClient_IsNotFoundError_Call{Call: _e.mock.On("IsNotFoundError", err)}
}

func (_c *GenericClient_IsNotFoundError_Call) Run(run func(err error)) *GenericClient_IsNotFoundError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GenericClient_IsNotFoundError_Call) Return(b bool) *GenericClient_IsNotFoundError_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *GenericClient_IsNotFoundError_Call) RunAndReturn(run func(err error) bool) *GenericClient_IsNotFoundError_Call {
	_c.Call.Return(run)
	return _c
}

// PutMapping provides a mock function for the type GenericClient
func (_mock *GenericClient) PutMapping(ctx context.Context, index string, root string, key string, valueType string) error {
	ret := _mock.Called(ctx, index, root, key, valueType)

	if len(ret) == 0 {
		panic("no return value specified for PutMapping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, index, root, key, valueType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GenericClient_PutMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMapping'
type GenericClient_PutMapping_Call struct {
	*mock.Call
}

// PutMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - root string
//   - key string
//   - valueType string
func (_e *GenericClient_Expecter) PutMapping(ctx interface{}, index interface{}, root interface{}, key interface{}, valueType interface{}) *GenericClient_PutMapping_Call {
	return &GenericClient_PutMapping_Call{Call: _e.mock.On("PutMapping", ctx, index, root, key, valueType)}
}

func (_c *GenericClient_PutMapping_Call) Run(run func(ctx context.Context, index string, root string, key string, valueType string)) *GenericClient_PutMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *GenericClient_PutMapping_Call) Return(err error) *GenericClient_PutMapping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GenericClient_PutMapping_Call) RunAndReturn(run func(ctx context.Context, index string, root string, key string, valueType string) error) *GenericClient_PutMapping_Call {
	_c.Call.Return(run)
	return _c
}

// RunBulkProcessor provides a mock function for the type GenericClient
func (_mock *GenericClient) RunBulkProcessor(ctx context.Context, p *bulk.BulkProcessorParameters) (bulk.GenericBulkProcessor, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for RunBulkProcessor")
	}

	var r0 bulk.GenericBulkProcessor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *bulk.BulkProcessorParameters) (bulk.GenericBulkProcessor, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *bulk.BulkProcessorParameters) bulk.GenericBulkProcessor); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bulk.GenericBulkProcessor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *bulk.BulkProcessorParameters) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GenericClient_RunBulkProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunBulkProcessor'
type GenericClient_RunBulkProcessor_Call struct {
	*mock.Call
}

// RunBulkProcessor is a helper method to define mock.On call
//   - ctx context.Context
//   - p *bulk.BulkProcessorParameters
func (_e *GenericClient_Expecter) RunBulkProcessor(ctx interface{}, p interface{}) *GenericClient_RunBulkProcessor_Call {
	return &GenericClient_RunBulkProcessor_Call{Call: _e.mock.On("RunBulkProcessor", ctx, p)}
}

func (_c *GenericClient_RunBulkProcessor_Call) Run(run func(ctx context.Context, p *bulk.BulkProcessorParameters)) *GenericClient_RunBulkProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *bulk.BulkProcessorParameters
		if args[1] != nil {
			arg1 = args[1].(*bulk.BulkProcessorParameters)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GenericClient_RunBulkProcessor_Call) Return(genericBulkProcessor bulk.GenericBulkProcessor, err error) *GenericClient_RunBulkProcessor_Call {
	_c.Call.Return(genericBulkProcessor, err)
	return _c
}

func (_c *GenericClient_RunBulkProcessor_Call) RunAndReturn(run func(ctx context.Context, p *bulk.BulkProcessorParameters) (bulk.GenericBulkProcessor, error)) *GenericClient_RunBulkProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// ScanByQuery provides a mock function for the type GenericClient
func (_mock *GenericClient) ScanByQuery(ctx context.Context, request *elasticsearch.ScanByQueryRequest) (*elasticsearch.SearchResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ScanByQuery")
	}

	var r0 *elasticsearch.SearchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *elasticsearch.ScanByQueryRequest) (*elasticsearch.SearchResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *elasticsearch.ScanByQueryRequest) *elasticsearch.SearchResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticsearch.SearchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *elasticsearch.ScanByQueryRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GenericClient_ScanByQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanByQuery'
type GenericClient_ScanByQuery_Call struct {
	*mock.Call
}

// ScanByQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - request *elasticsearch.ScanByQueryRequest
func (_e *GenericClient_Expecter) ScanByQuery(ctx interface{}, request interface{}) *GenericClient_ScanByQuery_Call {
	return &GenericClient_ScanByQuery_Call{Call: _e.mock.On("ScanByQuery", ctx, request)}
}

func (_c *GenericClient_ScanByQuery_Call) Run(run func(ctx context.Context, request *elasticsearch.ScanByQueryRequest)) *GenericClient_ScanByQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *elasticsearch.ScanByQueryRequest
		if args[1] != nil {
			arg1 = args[1].(*elasticsearch.ScanByQueryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GenericClient_ScanByQuery_Call) Return(v *elasticsearch.SearchResponse, err error) *GenericClient_ScanByQuery_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *GenericClient_ScanByQuery_Call) RunAndReturn(run func(ctx context.Context, request *elasticsearch.ScanByQueryRequest) (*elasticsearch.SearchResponse, error)) *GenericClient_ScanByQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type GenericClient
func (_mock *GenericClient) Search(ctx context.Context, request *elasticsearch.SearchRequest) (*elasticsearch.SearchResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *elasticsearch.SearchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *elasticsearch.SearchRequest) (*elasticsearch.SearchResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *elasticsearch.SearchRequest) *elasticsearch.SearchResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticsearch.SearchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *elasticsearch.SearchRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GenericClient_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type GenericClient_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - request *elasticsearch.SearchRequest
func (_e *GenericClient_Expecter) Search(ctx interface{}, request interface{}) *GenericClient_Search_Call {
	return &GenericClient_Search_Call{Call: _e.mock.On("Search", ctx, request)}
}

func (_c *GenericClient_Search_Call) Run(run func(ctx context.Context, request *elasticsearch.SearchRequest)) *GenericClient_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *elasticsearch.SearchRequest
		if args[1] != nil {
			arg1 = args[1].(*elasticsearch.SearchRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GenericClient_Search_Call) Return(v *elasticsearch.SearchResponse, err error) *GenericClient_Search_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *GenericClient_Search_Call) RunAndReturn(run func(ctx context.Context, request *elasticsearch.SearchRequest) (*elasticsearch.SearchResponse, error)) *GenericClient_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByQuery provides a mock function for the type GenericClient
func (_mock *GenericClient) SearchByQuery(ctx context.Context, request *elasticsearch.SearchByQueryRequest) (*elasticsearch.SearchResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchByQuery")
	}

	var r0 *elasticsearch.SearchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *elasticsearch.SearchByQueryRequest) (*elasticsearch.SearchResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *elasticsearch.SearchByQueryRequest) *elasticsearch.SearchResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticsearch.SearchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *elasticsearch.SearchByQueryRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GenericClient_SearchByQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByQuery'
type GenericClient_SearchByQuery_Call struct {
	*mock.Call
}

// SearchByQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - request *elasticsearch.SearchByQueryRequest
func (_e *GenericClient_Expecter) SearchByQuery(ctx interface{}, request interface{}) *GenericClient_SearchByQuery_Call {
	return &GenericClient_SearchByQuery_Call{Call: _e.mock.On("SearchByQuery", ctx, request)}
}

func (_c *GenericClient_SearchByQuery_Call) Run(run func(ctx context.Context, request *elasticsearch.SearchByQueryRequest)) *GenericClient_SearchByQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *elasticsearch.SearchByQueryRequest
		if args[1] != nil {
			arg1 = args[1].(*elasticsearch.SearchByQueryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GenericClient_SearchByQuery_Call) Return(v *elasticsearch.SearchResponse, err error) *GenericClient_SearchByQuery_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *GenericClient_SearchByQuery_Call) RunAndReturn(run func(ctx context.Context, request *elasticsearch.SearchByQueryRequest) (*elasticsearch.SearchResponse, error)) *GenericClient_SearchByQuery_Call {
	_c.Call.Return(run)
	return _c
}

// SearchForOneClosedExecution provides a mock function for the type GenericClient
func (_mock *GenericClient) SearchForOneClosedExecution(ctx context.Context, index string, request *elasticsearch.SearchForOneClosedExecutionRequest) (*elasticsearch.SearchForOneClosedExecutionResponse, error) {
	ret := _mock.Called(ctx, index, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchForOneClosedExecution")
	}

	var r0 *elasticsearch.SearchForOneClosedExecutionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *elasticsearch.SearchForOneClosedExecutionRequest) (*elasticsearch.SearchForOneClosedExecutionResponse, error)); ok {
		return returnFunc(ctx, index, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *elasticsearch.SearchForOneClosedExecutionRequest) *elasticsearch.SearchForOneClosedExecutionResponse); ok {
		r0 = returnFunc(ctx, index, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticsearch.SearchForOneClosedExecutionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *elasticsearch.SearchForOneClosedExecutionRequest) error); ok {
		r1 = returnFunc(ctx, index, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GenericClient_SearchForOneClosedExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchForOneClosedExecution'
type GenericClient_SearchForOneClosedExecution_Call struct {
	*mock.Call
}

// SearchForOneClosedExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - request *elasticsearch.SearchForOneClosedExecutionRequest
func (_e *GenericClient_Expecter) SearchForOneClosedExecution(ctx interface{}, index interface{}, request interface{}) *GenericClient_SearchForOneClosedExecution_Call {
	return &GenericClient_SearchForOneClosedExecution_Call{Call: _e.mock.On("SearchForOneClosedExecution", ctx, index, request)}
}

func (_c *GenericClient_SearchForOneClosedExecution_Call) Run(run func(ctx context.Context, index string, request *elasticsearch.SearchForOneClosedExecutionRequest)) *GenericClient_SearchForOneClosedExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *elasticsearch.SearchForOneClosedExecutionRequest
		if args[2] != nil {
			arg2 = args[2].(*elasticsearch.SearchForOneClosedExecutionRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GenericClient_SearchForOneClosedExecution_Call) Return(v *elasticsearch.SearchForOneClosedExecutionResponse, err error) *GenericClient_SearchForOneClosedExecution_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *GenericClient_SearchForOneClosedExecution_Call) RunAndReturn(run func(ctx context.Context, index string, request *elasticsearch.SearchForOneClosedExecutionRequest) (*elasticsearch.SearchForOneClosedExecutionResponse, error)) *GenericClient_SearchForOneClosedExecution_Call {
	_c.Call.Return(run)
	return _c
}

// SearchRaw provides a mock function for the type GenericClient
func (_mock *GenericClient) SearchRaw(ctx context.Context, index string, query string) (*elasticsearch.RawResponse, error) {
	ret := _mock.Called(ctx, index, query)

	if len(ret) == 0 {
		panic("no return value specified for SearchRaw")
	}

	var r0 *elasticsearch.RawResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*elasticsearch.RawResponse, error)); ok {
		return returnFunc(ctx, index, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *elasticsearch.RawResponse); ok {
		r0 = returnFunc(ctx, index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticsearch.RawResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, index, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GenericClient_SearchRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchRaw'
type GenericClient_SearchRaw_Call struct {
	*mock.Call
}

// SearchRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query string
func (_e *GenericClient_Expecter) SearchRaw(ctx interface{}, index interface{}, query interface{}) *GenericClient_SearchRaw_Call {
	return &GenericClient_SearchRaw_Call{Call: _e.mock.On("SearchRaw", ctx, index, query)}
}

func (_c *GenericClient_SearchRaw_Call) Run(run func(ctx context.Context, index string, query string)) *GenericClient_SearchRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GenericClient_SearchRaw_Call) Return(rawResponse *elasticsearch.RawResponse, err error) *GenericClient_SearchRaw_Call {
	_c.Call.Return(rawResponse, err)
	return _c
}

func (_c *GenericClient_SearchRaw_Call) RunAndReturn(run func(ctx context.Context, index string, query string) (*elasticsearch.RawResponse, error)) *GenericClient_SearchRaw_Call {
	_c.Call.Return(run)
	return _c
}
