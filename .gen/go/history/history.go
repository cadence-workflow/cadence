// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package history

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cadence/.gen/go/shared"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
// Attributes:
//  - Message
type EventAlreadyStartedError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewEventAlreadyStartedError() *EventAlreadyStartedError {
  return &EventAlreadyStartedError{}
}


func (p *EventAlreadyStartedError) GetMessage() string {
  return p.Message
}
func (p *EventAlreadyStartedError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *EventAlreadyStartedError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *EventAlreadyStartedError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EventAlreadyStartedError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EventAlreadyStartedError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *EventAlreadyStartedError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EventAlreadyStartedError(%+v)", *p)
}

func (p *EventAlreadyStartedError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
//  - Owner
type ShardOwnershipLostError struct {
  // unused fields # 1 to 9
  Message *string `thrift:"message,10" db:"message" json:"message,omitempty"`
  // unused fields # 11 to 19
  Owner *string `thrift:"owner,20" db:"owner" json:"owner,omitempty"`
}

func NewShardOwnershipLostError() *ShardOwnershipLostError {
  return &ShardOwnershipLostError{}
}

var ShardOwnershipLostError_Message_DEFAULT string
func (p *ShardOwnershipLostError) GetMessage() string {
  if !p.IsSetMessage() {
    return ShardOwnershipLostError_Message_DEFAULT
  }
return *p.Message
}
var ShardOwnershipLostError_Owner_DEFAULT string
func (p *ShardOwnershipLostError) GetOwner() string {
  if !p.IsSetOwner() {
    return ShardOwnershipLostError_Owner_DEFAULT
  }
return *p.Owner
}
func (p *ShardOwnershipLostError) IsSetMessage() bool {
  return p.Message != nil
}

func (p *ShardOwnershipLostError) IsSetOwner() bool {
  return p.Owner != nil
}

func (p *ShardOwnershipLostError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShardOwnershipLostError)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *ShardOwnershipLostError)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Owner = &v
}
  return nil
}

func (p *ShardOwnershipLostError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShardOwnershipLostError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShardOwnershipLostError) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:message: ", p), err) }
  }
  return err
}

func (p *ShardOwnershipLostError) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwner() {
    if err := oprot.WriteFieldBegin("owner", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:owner: ", p), err) }
    if err := oprot.WriteString(string(*p.Owner)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.owner (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:owner: ", p), err) }
  }
  return err
}

func (p *ShardOwnershipLostError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShardOwnershipLostError(%+v)", *p)
}

func (p *ShardOwnershipLostError) Error() string {
  return p.String()
}

// Attributes:
//  - DomainUUID
//  - StartRequest
type StartWorkflowExecutionRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  StartRequest *shared.StartWorkflowExecutionRequest `thrift:"startRequest,20" db:"startRequest" json:"startRequest,omitempty"`
}

func NewStartWorkflowExecutionRequest() *StartWorkflowExecutionRequest {
  return &StartWorkflowExecutionRequest{}
}

var StartWorkflowExecutionRequest_DomainUUID_DEFAULT string
func (p *StartWorkflowExecutionRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return StartWorkflowExecutionRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var StartWorkflowExecutionRequest_StartRequest_DEFAULT *shared.StartWorkflowExecutionRequest
func (p *StartWorkflowExecutionRequest) GetStartRequest() *shared.StartWorkflowExecutionRequest {
  if !p.IsSetStartRequest() {
    return StartWorkflowExecutionRequest_StartRequest_DEFAULT
  }
return p.StartRequest
}
func (p *StartWorkflowExecutionRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *StartWorkflowExecutionRequest) IsSetStartRequest() bool {
  return p.StartRequest != nil
}

func (p *StartWorkflowExecutionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.StartRequest = &shared.StartWorkflowExecutionRequest{}
  if err := p.StartRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartRequest), err)
  }
  return nil
}

func (p *StartWorkflowExecutionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartWorkflowExecutionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartWorkflowExecutionRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartRequest() {
    if err := oprot.WriteFieldBegin("startRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startRequest: ", p), err) }
    if err := p.StartRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startRequest: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartWorkflowExecutionRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - GetRequest
type GetWorkflowExecutionHistoryRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  GetRequest *shared.GetWorkflowExecutionHistoryRequest `thrift:"getRequest,20" db:"getRequest" json:"getRequest,omitempty"`
}

func NewGetWorkflowExecutionHistoryRequest() *GetWorkflowExecutionHistoryRequest {
  return &GetWorkflowExecutionHistoryRequest{}
}

var GetWorkflowExecutionHistoryRequest_DomainUUID_DEFAULT string
func (p *GetWorkflowExecutionHistoryRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return GetWorkflowExecutionHistoryRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var GetWorkflowExecutionHistoryRequest_GetRequest_DEFAULT *shared.GetWorkflowExecutionHistoryRequest
func (p *GetWorkflowExecutionHistoryRequest) GetGetRequest() *shared.GetWorkflowExecutionHistoryRequest {
  if !p.IsSetGetRequest() {
    return GetWorkflowExecutionHistoryRequest_GetRequest_DEFAULT
  }
return p.GetRequest
}
func (p *GetWorkflowExecutionHistoryRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *GetWorkflowExecutionHistoryRequest) IsSetGetRequest() bool {
  return p.GetRequest != nil
}

func (p *GetWorkflowExecutionHistoryRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWorkflowExecutionHistoryRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *GetWorkflowExecutionHistoryRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.GetRequest = &shared.GetWorkflowExecutionHistoryRequest{}
  if err := p.GetRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
  }
  return nil
}

func (p *GetWorkflowExecutionHistoryRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetWorkflowExecutionHistoryRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWorkflowExecutionHistoryRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *GetWorkflowExecutionHistoryRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetGetRequest() {
    if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:getRequest: ", p), err) }
    if err := p.GetRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:getRequest: ", p), err) }
  }
  return err
}

func (p *GetWorkflowExecutionHistoryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetWorkflowExecutionHistoryRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - CompleteRequest
type RespondDecisionTaskCompletedRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  CompleteRequest *shared.RespondDecisionTaskCompletedRequest `thrift:"completeRequest,20" db:"completeRequest" json:"completeRequest,omitempty"`
}

func NewRespondDecisionTaskCompletedRequest() *RespondDecisionTaskCompletedRequest {
  return &RespondDecisionTaskCompletedRequest{}
}

var RespondDecisionTaskCompletedRequest_DomainUUID_DEFAULT string
func (p *RespondDecisionTaskCompletedRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return RespondDecisionTaskCompletedRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var RespondDecisionTaskCompletedRequest_CompleteRequest_DEFAULT *shared.RespondDecisionTaskCompletedRequest
func (p *RespondDecisionTaskCompletedRequest) GetCompleteRequest() *shared.RespondDecisionTaskCompletedRequest {
  if !p.IsSetCompleteRequest() {
    return RespondDecisionTaskCompletedRequest_CompleteRequest_DEFAULT
  }
return p.CompleteRequest
}
func (p *RespondDecisionTaskCompletedRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *RespondDecisionTaskCompletedRequest) IsSetCompleteRequest() bool {
  return p.CompleteRequest != nil
}

func (p *RespondDecisionTaskCompletedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RespondDecisionTaskCompletedRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *RespondDecisionTaskCompletedRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.CompleteRequest = &shared.RespondDecisionTaskCompletedRequest{}
  if err := p.CompleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
  }
  return nil
}

func (p *RespondDecisionTaskCompletedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondDecisionTaskCompletedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RespondDecisionTaskCompletedRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *RespondDecisionTaskCompletedRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetCompleteRequest() {
    if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:completeRequest: ", p), err) }
    if err := p.CompleteRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:completeRequest: ", p), err) }
  }
  return err
}

func (p *RespondDecisionTaskCompletedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RespondDecisionTaskCompletedRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - HeartbeatRequest
type RecordActivityTaskHeartbeatRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  HeartbeatRequest *shared.RecordActivityTaskHeartbeatRequest `thrift:"heartbeatRequest,20" db:"heartbeatRequest" json:"heartbeatRequest,omitempty"`
}

func NewRecordActivityTaskHeartbeatRequest() *RecordActivityTaskHeartbeatRequest {
  return &RecordActivityTaskHeartbeatRequest{}
}

var RecordActivityTaskHeartbeatRequest_DomainUUID_DEFAULT string
func (p *RecordActivityTaskHeartbeatRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return RecordActivityTaskHeartbeatRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var RecordActivityTaskHeartbeatRequest_HeartbeatRequest_DEFAULT *shared.RecordActivityTaskHeartbeatRequest
func (p *RecordActivityTaskHeartbeatRequest) GetHeartbeatRequest() *shared.RecordActivityTaskHeartbeatRequest {
  if !p.IsSetHeartbeatRequest() {
    return RecordActivityTaskHeartbeatRequest_HeartbeatRequest_DEFAULT
  }
return p.HeartbeatRequest
}
func (p *RecordActivityTaskHeartbeatRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *RecordActivityTaskHeartbeatRequest) IsSetHeartbeatRequest() bool {
  return p.HeartbeatRequest != nil
}

func (p *RecordActivityTaskHeartbeatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.HeartbeatRequest = &shared.RecordActivityTaskHeartbeatRequest{}
  if err := p.HeartbeatRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HeartbeatRequest), err)
  }
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskHeartbeatRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeartbeatRequest() {
    if err := oprot.WriteFieldBegin("heartbeatRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:heartbeatRequest: ", p), err) }
    if err := p.HeartbeatRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HeartbeatRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:heartbeatRequest: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskHeartbeatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecordActivityTaskHeartbeatRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - CompleteRequest
type RespondActivityTaskCompletedRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  CompleteRequest *shared.RespondActivityTaskCompletedRequest `thrift:"completeRequest,20" db:"completeRequest" json:"completeRequest,omitempty"`
}

func NewRespondActivityTaskCompletedRequest() *RespondActivityTaskCompletedRequest {
  return &RespondActivityTaskCompletedRequest{}
}

var RespondActivityTaskCompletedRequest_DomainUUID_DEFAULT string
func (p *RespondActivityTaskCompletedRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return RespondActivityTaskCompletedRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var RespondActivityTaskCompletedRequest_CompleteRequest_DEFAULT *shared.RespondActivityTaskCompletedRequest
func (p *RespondActivityTaskCompletedRequest) GetCompleteRequest() *shared.RespondActivityTaskCompletedRequest {
  if !p.IsSetCompleteRequest() {
    return RespondActivityTaskCompletedRequest_CompleteRequest_DEFAULT
  }
return p.CompleteRequest
}
func (p *RespondActivityTaskCompletedRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *RespondActivityTaskCompletedRequest) IsSetCompleteRequest() bool {
  return p.CompleteRequest != nil
}

func (p *RespondActivityTaskCompletedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RespondActivityTaskCompletedRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *RespondActivityTaskCompletedRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.CompleteRequest = &shared.RespondActivityTaskCompletedRequest{}
  if err := p.CompleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
  }
  return nil
}

func (p *RespondActivityTaskCompletedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCompletedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RespondActivityTaskCompletedRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCompletedRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetCompleteRequest() {
    if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:completeRequest: ", p), err) }
    if err := p.CompleteRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:completeRequest: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCompletedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RespondActivityTaskCompletedRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - FailedRequest
type RespondActivityTaskFailedRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  FailedRequest *shared.RespondActivityTaskFailedRequest `thrift:"failedRequest,20" db:"failedRequest" json:"failedRequest,omitempty"`
}

func NewRespondActivityTaskFailedRequest() *RespondActivityTaskFailedRequest {
  return &RespondActivityTaskFailedRequest{}
}

var RespondActivityTaskFailedRequest_DomainUUID_DEFAULT string
func (p *RespondActivityTaskFailedRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return RespondActivityTaskFailedRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var RespondActivityTaskFailedRequest_FailedRequest_DEFAULT *shared.RespondActivityTaskFailedRequest
func (p *RespondActivityTaskFailedRequest) GetFailedRequest() *shared.RespondActivityTaskFailedRequest {
  if !p.IsSetFailedRequest() {
    return RespondActivityTaskFailedRequest_FailedRequest_DEFAULT
  }
return p.FailedRequest
}
func (p *RespondActivityTaskFailedRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *RespondActivityTaskFailedRequest) IsSetFailedRequest() bool {
  return p.FailedRequest != nil
}

func (p *RespondActivityTaskFailedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RespondActivityTaskFailedRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *RespondActivityTaskFailedRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.FailedRequest = &shared.RespondActivityTaskFailedRequest{}
  if err := p.FailedRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailedRequest), err)
  }
  return nil
}

func (p *RespondActivityTaskFailedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskFailedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RespondActivityTaskFailedRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskFailedRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailedRequest() {
    if err := oprot.WriteFieldBegin("failedRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:failedRequest: ", p), err) }
    if err := p.FailedRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailedRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:failedRequest: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskFailedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RespondActivityTaskFailedRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - CancelRequest
type RespondActivityTaskCanceledRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  CancelRequest *shared.RespondActivityTaskCanceledRequest `thrift:"cancelRequest,20" db:"cancelRequest" json:"cancelRequest,omitempty"`
}

func NewRespondActivityTaskCanceledRequest() *RespondActivityTaskCanceledRequest {
  return &RespondActivityTaskCanceledRequest{}
}

var RespondActivityTaskCanceledRequest_DomainUUID_DEFAULT string
func (p *RespondActivityTaskCanceledRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return RespondActivityTaskCanceledRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var RespondActivityTaskCanceledRequest_CancelRequest_DEFAULT *shared.RespondActivityTaskCanceledRequest
func (p *RespondActivityTaskCanceledRequest) GetCancelRequest() *shared.RespondActivityTaskCanceledRequest {
  if !p.IsSetCancelRequest() {
    return RespondActivityTaskCanceledRequest_CancelRequest_DEFAULT
  }
return p.CancelRequest
}
func (p *RespondActivityTaskCanceledRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *RespondActivityTaskCanceledRequest) IsSetCancelRequest() bool {
  return p.CancelRequest != nil
}

func (p *RespondActivityTaskCanceledRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RespondActivityTaskCanceledRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *RespondActivityTaskCanceledRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.CancelRequest = &shared.RespondActivityTaskCanceledRequest{}
  if err := p.CancelRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CancelRequest), err)
  }
  return nil
}

func (p *RespondActivityTaskCanceledRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCanceledRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RespondActivityTaskCanceledRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCanceledRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetCancelRequest() {
    if err := oprot.WriteFieldBegin("cancelRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:cancelRequest: ", p), err) }
    if err := p.CancelRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CancelRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:cancelRequest: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCanceledRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RespondActivityTaskCanceledRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - WorkflowExecution
//  - ScheduleId
//  - TaskId
//  - RequestId
//  - PollRequest
type RecordActivityTaskStartedRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  WorkflowExecution *shared.WorkflowExecution `thrift:"workflowExecution,20" db:"workflowExecution" json:"workflowExecution,omitempty"`
  // unused fields # 21 to 29
  ScheduleId *int64 `thrift:"scheduleId,30" db:"scheduleId" json:"scheduleId,omitempty"`
  // unused fields # 31 to 39
  TaskId *int64 `thrift:"taskId,40" db:"taskId" json:"taskId,omitempty"`
  // unused fields # 41 to 44
  RequestId *string `thrift:"requestId,45" db:"requestId" json:"requestId,omitempty"`
  // unused fields # 46 to 49
  PollRequest *shared.PollForActivityTaskRequest `thrift:"pollRequest,50" db:"pollRequest" json:"pollRequest,omitempty"`
}

func NewRecordActivityTaskStartedRequest() *RecordActivityTaskStartedRequest {
  return &RecordActivityTaskStartedRequest{}
}

var RecordActivityTaskStartedRequest_DomainUUID_DEFAULT string
func (p *RecordActivityTaskStartedRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return RecordActivityTaskStartedRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var RecordActivityTaskStartedRequest_WorkflowExecution_DEFAULT *shared.WorkflowExecution
func (p *RecordActivityTaskStartedRequest) GetWorkflowExecution() *shared.WorkflowExecution {
  if !p.IsSetWorkflowExecution() {
    return RecordActivityTaskStartedRequest_WorkflowExecution_DEFAULT
  }
return p.WorkflowExecution
}
var RecordActivityTaskStartedRequest_ScheduleId_DEFAULT int64
func (p *RecordActivityTaskStartedRequest) GetScheduleId() int64 {
  if !p.IsSetScheduleId() {
    return RecordActivityTaskStartedRequest_ScheduleId_DEFAULT
  }
return *p.ScheduleId
}
var RecordActivityTaskStartedRequest_TaskId_DEFAULT int64
func (p *RecordActivityTaskStartedRequest) GetTaskId() int64 {
  if !p.IsSetTaskId() {
    return RecordActivityTaskStartedRequest_TaskId_DEFAULT
  }
return *p.TaskId
}
var RecordActivityTaskStartedRequest_RequestId_DEFAULT string
func (p *RecordActivityTaskStartedRequest) GetRequestId() string {
  if !p.IsSetRequestId() {
    return RecordActivityTaskStartedRequest_RequestId_DEFAULT
  }
return *p.RequestId
}
var RecordActivityTaskStartedRequest_PollRequest_DEFAULT *shared.PollForActivityTaskRequest
func (p *RecordActivityTaskStartedRequest) GetPollRequest() *shared.PollForActivityTaskRequest {
  if !p.IsSetPollRequest() {
    return RecordActivityTaskStartedRequest_PollRequest_DEFAULT
  }
return p.PollRequest
}
func (p *RecordActivityTaskStartedRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetWorkflowExecution() bool {
  return p.WorkflowExecution != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetScheduleId() bool {
  return p.ScheduleId != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetTaskId() bool {
  return p.TaskId != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetRequestId() bool {
  return p.RequestId != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetPollRequest() bool {
  return p.PollRequest != nil
}

func (p *RecordActivityTaskStartedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 45:
      if err := p.ReadField45(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecordActivityTaskStartedRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *RecordActivityTaskStartedRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.WorkflowExecution = &shared.WorkflowExecution{}
  if err := p.WorkflowExecution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecution), err)
  }
  return nil
}

func (p *RecordActivityTaskStartedRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ScheduleId = &v
}
  return nil
}

func (p *RecordActivityTaskStartedRequest)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.TaskId = &v
}
  return nil
}

func (p *RecordActivityTaskStartedRequest)  ReadField45(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.RequestId = &v
}
  return nil
}

func (p *RecordActivityTaskStartedRequest)  ReadField50(iprot thrift.TProtocol) error {
  p.PollRequest = &shared.PollForActivityTaskRequest{}
  if err := p.PollRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
  }
  return nil
}

func (p *RecordActivityTaskStartedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskStartedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField45(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecordActivityTaskStartedRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskStartedRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecution() {
    if err := oprot.WriteFieldBegin("workflowExecution", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:workflowExecution: ", p), err) }
    if err := p.WorkflowExecution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:workflowExecution: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskStartedRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleId() {
    if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:scheduleId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduleId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:scheduleId: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskStartedRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskId() {
    if err := oprot.WriteFieldBegin("taskId", thrift.I64, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:taskId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TaskId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskId (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:taskId: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskStartedRequest) writeField45(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestId() {
    if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 45); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:requestId: ", p), err) }
    if err := oprot.WriteString(string(*p.RequestId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestId (45) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 45:requestId: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskStartedRequest) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetPollRequest() {
    if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:pollRequest: ", p), err) }
    if err := p.PollRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:pollRequest: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskStartedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecordActivityTaskStartedRequest(%+v)", *p)
}

// Attributes:
//  - StartedEvent
//  - ScheduledEvent
type RecordActivityTaskStartedResponse struct {
  // unused fields # 1 to 9
  StartedEvent *shared.HistoryEvent `thrift:"startedEvent,10" db:"startedEvent" json:"startedEvent,omitempty"`
  // unused fields # 11 to 19
  ScheduledEvent *shared.HistoryEvent `thrift:"scheduledEvent,20" db:"scheduledEvent" json:"scheduledEvent,omitempty"`
}

func NewRecordActivityTaskStartedResponse() *RecordActivityTaskStartedResponse {
  return &RecordActivityTaskStartedResponse{}
}

var RecordActivityTaskStartedResponse_StartedEvent_DEFAULT *shared.HistoryEvent
func (p *RecordActivityTaskStartedResponse) GetStartedEvent() *shared.HistoryEvent {
  if !p.IsSetStartedEvent() {
    return RecordActivityTaskStartedResponse_StartedEvent_DEFAULT
  }
return p.StartedEvent
}
var RecordActivityTaskStartedResponse_ScheduledEvent_DEFAULT *shared.HistoryEvent
func (p *RecordActivityTaskStartedResponse) GetScheduledEvent() *shared.HistoryEvent {
  if !p.IsSetScheduledEvent() {
    return RecordActivityTaskStartedResponse_ScheduledEvent_DEFAULT
  }
return p.ScheduledEvent
}
func (p *RecordActivityTaskStartedResponse) IsSetStartedEvent() bool {
  return p.StartedEvent != nil
}

func (p *RecordActivityTaskStartedResponse) IsSetScheduledEvent() bool {
  return p.ScheduledEvent != nil
}

func (p *RecordActivityTaskStartedResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecordActivityTaskStartedResponse)  ReadField10(iprot thrift.TProtocol) error {
  p.StartedEvent = &shared.HistoryEvent{}
  if err := p.StartedEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartedEvent), err)
  }
  return nil
}

func (p *RecordActivityTaskStartedResponse)  ReadField20(iprot thrift.TProtocol) error {
  p.ScheduledEvent = &shared.HistoryEvent{}
  if err := p.ScheduledEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ScheduledEvent), err)
  }
  return nil
}

func (p *RecordActivityTaskStartedResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskStartedResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecordActivityTaskStartedResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEvent() {
    if err := oprot.WriteFieldBegin("startedEvent", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:startedEvent: ", p), err) }
    if err := p.StartedEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartedEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:startedEvent: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskStartedResponse) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEvent() {
    if err := oprot.WriteFieldBegin("scheduledEvent", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:scheduledEvent: ", p), err) }
    if err := p.ScheduledEvent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ScheduledEvent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:scheduledEvent: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskStartedResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecordActivityTaskStartedResponse(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - WorkflowExecution
//  - ScheduleId
//  - TaskId
//  - RequestId
//  - PollRequest
type RecordDecisionTaskStartedRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  WorkflowExecution *shared.WorkflowExecution `thrift:"workflowExecution,20" db:"workflowExecution" json:"workflowExecution,omitempty"`
  // unused fields # 21 to 29
  ScheduleId *int64 `thrift:"scheduleId,30" db:"scheduleId" json:"scheduleId,omitempty"`
  // unused fields # 31 to 39
  TaskId *int64 `thrift:"taskId,40" db:"taskId" json:"taskId,omitempty"`
  // unused fields # 41 to 44
  RequestId *string `thrift:"requestId,45" db:"requestId" json:"requestId,omitempty"`
  // unused fields # 46 to 49
  PollRequest *shared.PollForDecisionTaskRequest `thrift:"pollRequest,50" db:"pollRequest" json:"pollRequest,omitempty"`
}

func NewRecordDecisionTaskStartedRequest() *RecordDecisionTaskStartedRequest {
  return &RecordDecisionTaskStartedRequest{}
}

var RecordDecisionTaskStartedRequest_DomainUUID_DEFAULT string
func (p *RecordDecisionTaskStartedRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return RecordDecisionTaskStartedRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var RecordDecisionTaskStartedRequest_WorkflowExecution_DEFAULT *shared.WorkflowExecution
func (p *RecordDecisionTaskStartedRequest) GetWorkflowExecution() *shared.WorkflowExecution {
  if !p.IsSetWorkflowExecution() {
    return RecordDecisionTaskStartedRequest_WorkflowExecution_DEFAULT
  }
return p.WorkflowExecution
}
var RecordDecisionTaskStartedRequest_ScheduleId_DEFAULT int64
func (p *RecordDecisionTaskStartedRequest) GetScheduleId() int64 {
  if !p.IsSetScheduleId() {
    return RecordDecisionTaskStartedRequest_ScheduleId_DEFAULT
  }
return *p.ScheduleId
}
var RecordDecisionTaskStartedRequest_TaskId_DEFAULT int64
func (p *RecordDecisionTaskStartedRequest) GetTaskId() int64 {
  if !p.IsSetTaskId() {
    return RecordDecisionTaskStartedRequest_TaskId_DEFAULT
  }
return *p.TaskId
}
var RecordDecisionTaskStartedRequest_RequestId_DEFAULT string
func (p *RecordDecisionTaskStartedRequest) GetRequestId() string {
  if !p.IsSetRequestId() {
    return RecordDecisionTaskStartedRequest_RequestId_DEFAULT
  }
return *p.RequestId
}
var RecordDecisionTaskStartedRequest_PollRequest_DEFAULT *shared.PollForDecisionTaskRequest
func (p *RecordDecisionTaskStartedRequest) GetPollRequest() *shared.PollForDecisionTaskRequest {
  if !p.IsSetPollRequest() {
    return RecordDecisionTaskStartedRequest_PollRequest_DEFAULT
  }
return p.PollRequest
}
func (p *RecordDecisionTaskStartedRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetWorkflowExecution() bool {
  return p.WorkflowExecution != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetScheduleId() bool {
  return p.ScheduleId != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetTaskId() bool {
  return p.TaskId != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetRequestId() bool {
  return p.RequestId != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetPollRequest() bool {
  return p.PollRequest != nil
}

func (p *RecordDecisionTaskStartedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 45:
      if err := p.ReadField45(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecordDecisionTaskStartedRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *RecordDecisionTaskStartedRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.WorkflowExecution = &shared.WorkflowExecution{}
  if err := p.WorkflowExecution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecution), err)
  }
  return nil
}

func (p *RecordDecisionTaskStartedRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ScheduleId = &v
}
  return nil
}

func (p *RecordDecisionTaskStartedRequest)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.TaskId = &v
}
  return nil
}

func (p *RecordDecisionTaskStartedRequest)  ReadField45(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.RequestId = &v
}
  return nil
}

func (p *RecordDecisionTaskStartedRequest)  ReadField50(iprot thrift.TProtocol) error {
  p.PollRequest = &shared.PollForDecisionTaskRequest{}
  if err := p.PollRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
  }
  return nil
}

func (p *RecordDecisionTaskStartedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordDecisionTaskStartedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField45(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecordDecisionTaskStartedRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecution() {
    if err := oprot.WriteFieldBegin("workflowExecution", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:workflowExecution: ", p), err) }
    if err := p.WorkflowExecution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:workflowExecution: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleId() {
    if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:scheduleId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduleId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:scheduleId: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskId() {
    if err := oprot.WriteFieldBegin("taskId", thrift.I64, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:taskId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TaskId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskId (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:taskId: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedRequest) writeField45(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestId() {
    if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 45); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:requestId: ", p), err) }
    if err := oprot.WriteString(string(*p.RequestId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestId (45) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 45:requestId: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedRequest) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetPollRequest() {
    if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:pollRequest: ", p), err) }
    if err := p.PollRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:pollRequest: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecordDecisionTaskStartedRequest(%+v)", *p)
}

// Attributes:
//  - WorkflowType
//  - PreviousStartedEventId
//  - StartedEventId
type RecordDecisionTaskStartedResponse struct {
  // unused fields # 1 to 9
  WorkflowType *shared.WorkflowType `thrift:"workflowType,10" db:"workflowType" json:"workflowType,omitempty"`
  // unused fields # 11 to 19
  PreviousStartedEventId *int64 `thrift:"previousStartedEventId,20" db:"previousStartedEventId" json:"previousStartedEventId,omitempty"`
  // unused fields # 21 to 29
  StartedEventId *int64 `thrift:"startedEventId,30" db:"startedEventId" json:"startedEventId,omitempty"`
}

func NewRecordDecisionTaskStartedResponse() *RecordDecisionTaskStartedResponse {
  return &RecordDecisionTaskStartedResponse{}
}

var RecordDecisionTaskStartedResponse_WorkflowType_DEFAULT *shared.WorkflowType
func (p *RecordDecisionTaskStartedResponse) GetWorkflowType() *shared.WorkflowType {
  if !p.IsSetWorkflowType() {
    return RecordDecisionTaskStartedResponse_WorkflowType_DEFAULT
  }
return p.WorkflowType
}
var RecordDecisionTaskStartedResponse_PreviousStartedEventId_DEFAULT int64
func (p *RecordDecisionTaskStartedResponse) GetPreviousStartedEventId() int64 {
  if !p.IsSetPreviousStartedEventId() {
    return RecordDecisionTaskStartedResponse_PreviousStartedEventId_DEFAULT
  }
return *p.PreviousStartedEventId
}
var RecordDecisionTaskStartedResponse_StartedEventId_DEFAULT int64
func (p *RecordDecisionTaskStartedResponse) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return RecordDecisionTaskStartedResponse_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
func (p *RecordDecisionTaskStartedResponse) IsSetWorkflowType() bool {
  return p.WorkflowType != nil
}

func (p *RecordDecisionTaskStartedResponse) IsSetPreviousStartedEventId() bool {
  return p.PreviousStartedEventId != nil
}

func (p *RecordDecisionTaskStartedResponse) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *RecordDecisionTaskStartedResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecordDecisionTaskStartedResponse)  ReadField10(iprot thrift.TProtocol) error {
  p.WorkflowType = &shared.WorkflowType{}
  if err := p.WorkflowType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowType), err)
  }
  return nil
}

func (p *RecordDecisionTaskStartedResponse)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.PreviousStartedEventId = &v
}
  return nil
}

func (p *RecordDecisionTaskStartedResponse)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *RecordDecisionTaskStartedResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordDecisionTaskStartedResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecordDecisionTaskStartedResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowType() {
    if err := oprot.WriteFieldBegin("workflowType", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:workflowType: ", p), err) }
    if err := p.WorkflowType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:workflowType: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedResponse) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreviousStartedEventId() {
    if err := oprot.WriteFieldBegin("previousStartedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:previousStartedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PreviousStartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.previousStartedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:previousStartedEventId: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedResponse) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:startedEventId: ", p), err) }
  }
  return err
}

func (p *RecordDecisionTaskStartedResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecordDecisionTaskStartedResponse(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - SignalRequest
type SignalWorkflowExecutionRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  SignalRequest *shared.SignalWorkflowExecutionRequest `thrift:"signalRequest,20" db:"signalRequest" json:"signalRequest,omitempty"`
}

func NewSignalWorkflowExecutionRequest() *SignalWorkflowExecutionRequest {
  return &SignalWorkflowExecutionRequest{}
}

var SignalWorkflowExecutionRequest_DomainUUID_DEFAULT string
func (p *SignalWorkflowExecutionRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return SignalWorkflowExecutionRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var SignalWorkflowExecutionRequest_SignalRequest_DEFAULT *shared.SignalWorkflowExecutionRequest
func (p *SignalWorkflowExecutionRequest) GetSignalRequest() *shared.SignalWorkflowExecutionRequest {
  if !p.IsSetSignalRequest() {
    return SignalWorkflowExecutionRequest_SignalRequest_DEFAULT
  }
return p.SignalRequest
}
func (p *SignalWorkflowExecutionRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *SignalWorkflowExecutionRequest) IsSetSignalRequest() bool {
  return p.SignalRequest != nil
}

func (p *SignalWorkflowExecutionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignalWorkflowExecutionRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *SignalWorkflowExecutionRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.SignalRequest = &shared.SignalWorkflowExecutionRequest{}
  if err := p.SignalRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SignalRequest), err)
  }
  return nil
}

func (p *SignalWorkflowExecutionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SignalWorkflowExecutionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignalWorkflowExecutionRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *SignalWorkflowExecutionRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetSignalRequest() {
    if err := oprot.WriteFieldBegin("signalRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:signalRequest: ", p), err) }
    if err := p.SignalRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SignalRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:signalRequest: ", p), err) }
  }
  return err
}

func (p *SignalWorkflowExecutionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SignalWorkflowExecutionRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - TerminateRequest
type TerminateWorkflowExecutionRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  TerminateRequest *shared.TerminateWorkflowExecutionRequest `thrift:"terminateRequest,20" db:"terminateRequest" json:"terminateRequest,omitempty"`
}

func NewTerminateWorkflowExecutionRequest() *TerminateWorkflowExecutionRequest {
  return &TerminateWorkflowExecutionRequest{}
}

var TerminateWorkflowExecutionRequest_DomainUUID_DEFAULT string
func (p *TerminateWorkflowExecutionRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return TerminateWorkflowExecutionRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var TerminateWorkflowExecutionRequest_TerminateRequest_DEFAULT *shared.TerminateWorkflowExecutionRequest
func (p *TerminateWorkflowExecutionRequest) GetTerminateRequest() *shared.TerminateWorkflowExecutionRequest {
  if !p.IsSetTerminateRequest() {
    return TerminateWorkflowExecutionRequest_TerminateRequest_DEFAULT
  }
return p.TerminateRequest
}
func (p *TerminateWorkflowExecutionRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *TerminateWorkflowExecutionRequest) IsSetTerminateRequest() bool {
  return p.TerminateRequest != nil
}

func (p *TerminateWorkflowExecutionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TerminateWorkflowExecutionRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *TerminateWorkflowExecutionRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.TerminateRequest = &shared.TerminateWorkflowExecutionRequest{}
  if err := p.TerminateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TerminateRequest), err)
  }
  return nil
}

func (p *TerminateWorkflowExecutionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TerminateWorkflowExecutionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TerminateWorkflowExecutionRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *TerminateWorkflowExecutionRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetTerminateRequest() {
    if err := oprot.WriteFieldBegin("terminateRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:terminateRequest: ", p), err) }
    if err := p.TerminateRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TerminateRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:terminateRequest: ", p), err) }
  }
  return err
}

func (p *TerminateWorkflowExecutionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TerminateWorkflowExecutionRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - CancelRequest
//  - ExternalInitiatedEventId
//  - ExternalWorkflowExecution
type RequestCancelWorkflowExecutionRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  CancelRequest *shared.RequestCancelWorkflowExecutionRequest `thrift:"cancelRequest,20" db:"cancelRequest" json:"cancelRequest,omitempty"`
  // unused fields # 21 to 29
  ExternalInitiatedEventId *int64 `thrift:"externalInitiatedEventId,30" db:"externalInitiatedEventId" json:"externalInitiatedEventId,omitempty"`
  // unused fields # 31 to 39
  ExternalWorkflowExecution *shared.WorkflowExecution `thrift:"externalWorkflowExecution,40" db:"externalWorkflowExecution" json:"externalWorkflowExecution,omitempty"`
}

func NewRequestCancelWorkflowExecutionRequest() *RequestCancelWorkflowExecutionRequest {
  return &RequestCancelWorkflowExecutionRequest{}
}

var RequestCancelWorkflowExecutionRequest_DomainUUID_DEFAULT string
func (p *RequestCancelWorkflowExecutionRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return RequestCancelWorkflowExecutionRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var RequestCancelWorkflowExecutionRequest_CancelRequest_DEFAULT *shared.RequestCancelWorkflowExecutionRequest
func (p *RequestCancelWorkflowExecutionRequest) GetCancelRequest() *shared.RequestCancelWorkflowExecutionRequest {
  if !p.IsSetCancelRequest() {
    return RequestCancelWorkflowExecutionRequest_CancelRequest_DEFAULT
  }
return p.CancelRequest
}
var RequestCancelWorkflowExecutionRequest_ExternalInitiatedEventId_DEFAULT int64
func (p *RequestCancelWorkflowExecutionRequest) GetExternalInitiatedEventId() int64 {
  if !p.IsSetExternalInitiatedEventId() {
    return RequestCancelWorkflowExecutionRequest_ExternalInitiatedEventId_DEFAULT
  }
return *p.ExternalInitiatedEventId
}
var RequestCancelWorkflowExecutionRequest_ExternalWorkflowExecution_DEFAULT *shared.WorkflowExecution
func (p *RequestCancelWorkflowExecutionRequest) GetExternalWorkflowExecution() *shared.WorkflowExecution {
  if !p.IsSetExternalWorkflowExecution() {
    return RequestCancelWorkflowExecutionRequest_ExternalWorkflowExecution_DEFAULT
  }
return p.ExternalWorkflowExecution
}
func (p *RequestCancelWorkflowExecutionRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *RequestCancelWorkflowExecutionRequest) IsSetCancelRequest() bool {
  return p.CancelRequest != nil
}

func (p *RequestCancelWorkflowExecutionRequest) IsSetExternalInitiatedEventId() bool {
  return p.ExternalInitiatedEventId != nil
}

func (p *RequestCancelWorkflowExecutionRequest) IsSetExternalWorkflowExecution() bool {
  return p.ExternalWorkflowExecution != nil
}

func (p *RequestCancelWorkflowExecutionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestCancelWorkflowExecutionRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *RequestCancelWorkflowExecutionRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.CancelRequest = &shared.RequestCancelWorkflowExecutionRequest{}
  if err := p.CancelRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CancelRequest), err)
  }
  return nil
}

func (p *RequestCancelWorkflowExecutionRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ExternalInitiatedEventId = &v
}
  return nil
}

func (p *RequestCancelWorkflowExecutionRequest)  ReadField40(iprot thrift.TProtocol) error {
  p.ExternalWorkflowExecution = &shared.WorkflowExecution{}
  if err := p.ExternalWorkflowExecution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExternalWorkflowExecution), err)
  }
  return nil
}

func (p *RequestCancelWorkflowExecutionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestCancelWorkflowExecutionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestCancelWorkflowExecutionRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *RequestCancelWorkflowExecutionRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetCancelRequest() {
    if err := oprot.WriteFieldBegin("cancelRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:cancelRequest: ", p), err) }
    if err := p.CancelRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CancelRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:cancelRequest: ", p), err) }
  }
  return err
}

func (p *RequestCancelWorkflowExecutionRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetExternalInitiatedEventId() {
    if err := oprot.WriteFieldBegin("externalInitiatedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:externalInitiatedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ExternalInitiatedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.externalInitiatedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:externalInitiatedEventId: ", p), err) }
  }
  return err
}

func (p *RequestCancelWorkflowExecutionRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetExternalWorkflowExecution() {
    if err := oprot.WriteFieldBegin("externalWorkflowExecution", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:externalWorkflowExecution: ", p), err) }
    if err := p.ExternalWorkflowExecution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExternalWorkflowExecution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:externalWorkflowExecution: ", p), err) }
  }
  return err
}

func (p *RequestCancelWorkflowExecutionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestCancelWorkflowExecutionRequest(%+v)", *p)
}

type HistoryService interface {  //HistoryService provides API to start a new long running workflow instance, as well as query and update the history
  //of workflow instances already created.
  //

  // StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
  // 'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
  // first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedError', if an instance already
  // exists with same workflowId.
  // 
  // 
  // Parameters:
  //  - StartRequest
  StartWorkflowExecution(startRequest *StartWorkflowExecutionRequest) (r *shared.StartWorkflowExecutionResponse, err error)
  // Returns the history of specified workflow execution.  It fails with 'EntityNotExistError' if speficied workflow
  // execution in unknown to the service.
  // 
  // 
  // Parameters:
  //  - GetRequest
  GetWorkflowExecutionHistory(getRequest *GetWorkflowExecutionHistoryRequest) (r *shared.GetWorkflowExecutionHistoryResponse, err error)
  // RecordDecisionTaskStarted is called by the Matchingservice before it hands a decision task to the application worker in response to
  // a PollForDecisionTask call. It records in the history the event that the decision task has started. It will return 'EventAlreadyStartedError',
  // if the workflow's execution history already includes a record of the event starting.
  // 
  // 
  // Parameters:
  //  - AddRequest
  RecordDecisionTaskStarted(addRequest *RecordDecisionTaskStartedRequest) (r *RecordDecisionTaskStartedResponse, err error)
  // RecordActivityTaskStarted is called by the Matchingservice before it hands a decision task to the application worker in response to
  // a PollForActivityTask call. It records in the history the event that the decision task has started. It will return 'EventAlreadyStartedError',
  // if the workflow's execution history already includes a record of the event starting.
  // 
  // 
  // Parameters:
  //  - AddRequest
  RecordActivityTaskStarted(addRequest *RecordActivityTaskStartedRequest) (r *RecordActivityTaskStartedResponse, err error)
  // RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
  // 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
  // potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
  // event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
  // for completing the DecisionTask.
  // 
  // 
  // Parameters:
  //  - CompleteRequest
  RespondDecisionTaskCompleted(completeRequest *RespondDecisionTaskCompletedRequest) (err error)
  // RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
  // to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
  // 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
  // fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
  // PollForActivityTask API call for heartbeating.
  // 
  // 
  // Parameters:
  //  - HeartbeatRequest
  RecordActivityTaskHeartbeat(heartbeatRequest *RecordActivityTaskHeartbeatRequest) (r *shared.RecordActivityTaskHeartbeatResponse, err error)
  // RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
  // result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
  // created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
  // PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
  // anymore due to activity timeout.
  // 
  // 
  // Parameters:
  //  - CompleteRequest
  RespondActivityTaskCompleted(completeRequest *RespondActivityTaskCompletedRequest) (err error)
  // RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
  // result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
  // created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
  // PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
  // anymore due to activity timeout.
  // 
  // 
  // Parameters:
  //  - FailRequest
  RespondActivityTaskFailed(failRequest *RespondActivityTaskFailedRequest) (err error)
  // RespondActivityTaskCanceled is called by application worker when it is successfully canceled an ActivityTask.  It will
  // result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
  // created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
  // PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
  // anymore due to activity timeout.
  // 
  // 
  // Parameters:
  //  - CanceledRequest
  RespondActivityTaskCanceled(canceledRequest *RespondActivityTaskCanceledRequest) (err error)
  // SignalWorkflowExecution is used to send a signal event to running workflow execution.  This results in
  // WorkflowExecutionSignaled event recorded in the history and a decision task being created for the execution.
  // 
  // 
  // Parameters:
  //  - SignalRequest
  SignalWorkflowExecution(signalRequest *SignalWorkflowExecutionRequest) (err error)
  // TerminateWorkflowExecution terminates an existing workflow execution by recording WorkflowExecutionTerminated event
  // in the history and immediately terminating the execution instance.
  // 
  // 
  // Parameters:
  //  - TerminateRequest
  TerminateWorkflowExecution(terminateRequest *TerminateWorkflowExecutionRequest) (err error)
  // RequestCancelWorkflowExecution is called by application worker when it wants to request cancellation of a workflow instance.
  // It will result in a new 'WorkflowExecutionCancelRequested' event being written to the workflow history and a new DecisionTask
  // created for the workflow instance so new decisions could be made. It fails with 'EntityNotExistsError' if the workflow is not valid
  // anymore due to completion or doesn't exist.
  // 
  // 
  // Parameters:
  //  - CancelRequest
  RequestCancelWorkflowExecution(cancelRequest *RequestCancelWorkflowExecutionRequest) (err error)
}

//HistoryService provides API to start a new long running workflow instance, as well as query and update the history
//of workflow instances already created.
//
type HistoryServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewHistoryServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HistoryServiceClient {
  return &HistoryServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewHistoryServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HistoryServiceClient {
  return &HistoryServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
// 'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
// first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedError', if an instance already
// exists with same workflowId.
// 
// 
// Parameters:
//  - StartRequest
func (p *HistoryServiceClient) StartWorkflowExecution(startRequest *StartWorkflowExecutionRequest) (r *shared.StartWorkflowExecutionResponse, err error) {
  if err = p.sendStartWorkflowExecution(startRequest); err != nil { return }
  return p.recvStartWorkflowExecution()
}

func (p *HistoryServiceClient) sendStartWorkflowExecution(startRequest *StartWorkflowExecutionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("StartWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceStartWorkflowExecutionArgs{
  StartRequest : startRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvStartWorkflowExecution() (value *shared.StartWorkflowExecutionResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "StartWorkflowExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "StartWorkflowExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "StartWorkflowExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "StartWorkflowExecution failed: invalid message type")
    return
  }
  result := HistoryServiceStartWorkflowExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.SessionAlreadyExistError != nil {
    err = result.SessionAlreadyExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  value = result.GetSuccess()
  return
}

// Returns the history of specified workflow execution.  It fails with 'EntityNotExistError' if speficied workflow
// execution in unknown to the service.
// 
// 
// Parameters:
//  - GetRequest
func (p *HistoryServiceClient) GetWorkflowExecutionHistory(getRequest *GetWorkflowExecutionHistoryRequest) (r *shared.GetWorkflowExecutionHistoryResponse, err error) {
  if err = p.sendGetWorkflowExecutionHistory(getRequest); err != nil { return }
  return p.recvGetWorkflowExecutionHistory()
}

func (p *HistoryServiceClient) sendGetWorkflowExecutionHistory(getRequest *GetWorkflowExecutionHistoryRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceGetWorkflowExecutionHistoryArgs{
  GetRequest : getRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvGetWorkflowExecutionHistory() (value *shared.GetWorkflowExecutionHistoryResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetWorkflowExecutionHistory" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetWorkflowExecutionHistory failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetWorkflowExecutionHistory failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetWorkflowExecutionHistory failed: invalid message type")
    return
  }
  result := HistoryServiceGetWorkflowExecutionHistoryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  value = result.GetSuccess()
  return
}

// RecordDecisionTaskStarted is called by the Matchingservice before it hands a decision task to the application worker in response to
// a PollForDecisionTask call. It records in the history the event that the decision task has started. It will return 'EventAlreadyStartedError',
// if the workflow's execution history already includes a record of the event starting.
// 
// 
// Parameters:
//  - AddRequest
func (p *HistoryServiceClient) RecordDecisionTaskStarted(addRequest *RecordDecisionTaskStartedRequest) (r *RecordDecisionTaskStartedResponse, err error) {
  if err = p.sendRecordDecisionTaskStarted(addRequest); err != nil { return }
  return p.recvRecordDecisionTaskStarted()
}

func (p *HistoryServiceClient) sendRecordDecisionTaskStarted(addRequest *RecordDecisionTaskStartedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RecordDecisionTaskStarted", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceRecordDecisionTaskStartedArgs{
  AddRequest : addRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvRecordDecisionTaskStarted() (value *RecordDecisionTaskStartedResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RecordDecisionTaskStarted" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RecordDecisionTaskStarted failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RecordDecisionTaskStarted failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RecordDecisionTaskStarted failed: invalid message type")
    return
  }
  result := HistoryServiceRecordDecisionTaskStartedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EventAlreadyStartedError != nil {
    err = result.EventAlreadyStartedError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  value = result.GetSuccess()
  return
}

// RecordActivityTaskStarted is called by the Matchingservice before it hands a decision task to the application worker in response to
// a PollForActivityTask call. It records in the history the event that the decision task has started. It will return 'EventAlreadyStartedError',
// if the workflow's execution history already includes a record of the event starting.
// 
// 
// Parameters:
//  - AddRequest
func (p *HistoryServiceClient) RecordActivityTaskStarted(addRequest *RecordActivityTaskStartedRequest) (r *RecordActivityTaskStartedResponse, err error) {
  if err = p.sendRecordActivityTaskStarted(addRequest); err != nil { return }
  return p.recvRecordActivityTaskStarted()
}

func (p *HistoryServiceClient) sendRecordActivityTaskStarted(addRequest *RecordActivityTaskStartedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RecordActivityTaskStarted", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceRecordActivityTaskStartedArgs{
  AddRequest : addRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvRecordActivityTaskStarted() (value *RecordActivityTaskStartedResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RecordActivityTaskStarted" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RecordActivityTaskStarted failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RecordActivityTaskStarted failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RecordActivityTaskStarted failed: invalid message type")
    return
  }
  result := HistoryServiceRecordActivityTaskStartedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EventAlreadyStartedError != nil {
    err = result.EventAlreadyStartedError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  value = result.GetSuccess()
  return
}

// RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
// 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
// potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
// event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
// for completing the DecisionTask.
// 
// 
// Parameters:
//  - CompleteRequest
func (p *HistoryServiceClient) RespondDecisionTaskCompleted(completeRequest *RespondDecisionTaskCompletedRequest) (err error) {
  if err = p.sendRespondDecisionTaskCompleted(completeRequest); err != nil { return }
  return p.recvRespondDecisionTaskCompleted()
}

func (p *HistoryServiceClient) sendRespondDecisionTaskCompleted(completeRequest *RespondDecisionTaskCompletedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceRespondDecisionTaskCompletedArgs{
  CompleteRequest : completeRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvRespondDecisionTaskCompleted() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RespondDecisionTaskCompleted" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondDecisionTaskCompleted failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondDecisionTaskCompleted failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondDecisionTaskCompleted failed: invalid message type")
    return
  }
  result := HistoryServiceRespondDecisionTaskCompletedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  return
}

// RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
// to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
// 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
// fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for heartbeating.
// 
// 
// Parameters:
//  - HeartbeatRequest
func (p *HistoryServiceClient) RecordActivityTaskHeartbeat(heartbeatRequest *RecordActivityTaskHeartbeatRequest) (r *shared.RecordActivityTaskHeartbeatResponse, err error) {
  if err = p.sendRecordActivityTaskHeartbeat(heartbeatRequest); err != nil { return }
  return p.recvRecordActivityTaskHeartbeat()
}

func (p *HistoryServiceClient) sendRecordActivityTaskHeartbeat(heartbeatRequest *RecordActivityTaskHeartbeatRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceRecordActivityTaskHeartbeatArgs{
  HeartbeatRequest : heartbeatRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvRecordActivityTaskHeartbeat() (value *shared.RecordActivityTaskHeartbeatResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RecordActivityTaskHeartbeat" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RecordActivityTaskHeartbeat failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RecordActivityTaskHeartbeat failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RecordActivityTaskHeartbeat failed: invalid message type")
    return
  }
  result := HistoryServiceRecordActivityTaskHeartbeatResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  value = result.GetSuccess()
  return
}

// RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
// result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
// created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
// 
// 
// Parameters:
//  - CompleteRequest
func (p *HistoryServiceClient) RespondActivityTaskCompleted(completeRequest *RespondActivityTaskCompletedRequest) (err error) {
  if err = p.sendRespondActivityTaskCompleted(completeRequest); err != nil { return }
  return p.recvRespondActivityTaskCompleted()
}

func (p *HistoryServiceClient) sendRespondActivityTaskCompleted(completeRequest *RespondActivityTaskCompletedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceRespondActivityTaskCompletedArgs{
  CompleteRequest : completeRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvRespondActivityTaskCompleted() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RespondActivityTaskCompleted" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskCompleted failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskCompleted failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskCompleted failed: invalid message type")
    return
  }
  result := HistoryServiceRespondActivityTaskCompletedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  return
}

// RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
// result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
// 
// 
// Parameters:
//  - FailRequest
func (p *HistoryServiceClient) RespondActivityTaskFailed(failRequest *RespondActivityTaskFailedRequest) (err error) {
  if err = p.sendRespondActivityTaskFailed(failRequest); err != nil { return }
  return p.recvRespondActivityTaskFailed()
}

func (p *HistoryServiceClient) sendRespondActivityTaskFailed(failRequest *RespondActivityTaskFailedRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceRespondActivityTaskFailedArgs{
  FailRequest : failRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvRespondActivityTaskFailed() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RespondActivityTaskFailed" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskFailed failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskFailed failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskFailed failed: invalid message type")
    return
  }
  result := HistoryServiceRespondActivityTaskFailedResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  return
}

// RespondActivityTaskCanceled is called by application worker when it is successfully canceled an ActivityTask.  It will
// result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
// 
// 
// Parameters:
//  - CanceledRequest
func (p *HistoryServiceClient) RespondActivityTaskCanceled(canceledRequest *RespondActivityTaskCanceledRequest) (err error) {
  if err = p.sendRespondActivityTaskCanceled(canceledRequest); err != nil { return }
  return p.recvRespondActivityTaskCanceled()
}

func (p *HistoryServiceClient) sendRespondActivityTaskCanceled(canceledRequest *RespondActivityTaskCanceledRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RespondActivityTaskCanceled", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceRespondActivityTaskCanceledArgs{
  CanceledRequest : canceledRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvRespondActivityTaskCanceled() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RespondActivityTaskCanceled" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskCanceled failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskCanceled failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskCanceled failed: invalid message type")
    return
  }
  result := HistoryServiceRespondActivityTaskCanceledResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  return
}

// SignalWorkflowExecution is used to send a signal event to running workflow execution.  This results in
// WorkflowExecutionSignaled event recorded in the history and a decision task being created for the execution.
// 
// 
// Parameters:
//  - SignalRequest
func (p *HistoryServiceClient) SignalWorkflowExecution(signalRequest *SignalWorkflowExecutionRequest) (err error) {
  if err = p.sendSignalWorkflowExecution(signalRequest); err != nil { return }
  return p.recvSignalWorkflowExecution()
}

func (p *HistoryServiceClient) sendSignalWorkflowExecution(signalRequest *SignalWorkflowExecutionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("SignalWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceSignalWorkflowExecutionArgs{
  SignalRequest : signalRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvSignalWorkflowExecution() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "SignalWorkflowExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SignalWorkflowExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SignalWorkflowExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SignalWorkflowExecution failed: invalid message type")
    return
  }
  result := HistoryServiceSignalWorkflowExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  return
}

// TerminateWorkflowExecution terminates an existing workflow execution by recording WorkflowExecutionTerminated event
// in the history and immediately terminating the execution instance.
// 
// 
// Parameters:
//  - TerminateRequest
func (p *HistoryServiceClient) TerminateWorkflowExecution(terminateRequest *TerminateWorkflowExecutionRequest) (err error) {
  if err = p.sendTerminateWorkflowExecution(terminateRequest); err != nil { return }
  return p.recvTerminateWorkflowExecution()
}

func (p *HistoryServiceClient) sendTerminateWorkflowExecution(terminateRequest *TerminateWorkflowExecutionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("TerminateWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceTerminateWorkflowExecutionArgs{
  TerminateRequest : terminateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvTerminateWorkflowExecution() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "TerminateWorkflowExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "TerminateWorkflowExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "TerminateWorkflowExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "TerminateWorkflowExecution failed: invalid message type")
    return
  }
  result := HistoryServiceTerminateWorkflowExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  return
}

// RequestCancelWorkflowExecution is called by application worker when it wants to request cancellation of a workflow instance.
// It will result in a new 'WorkflowExecutionCancelRequested' event being written to the workflow history and a new DecisionTask
// created for the workflow instance so new decisions could be made. It fails with 'EntityNotExistsError' if the workflow is not valid
// anymore due to completion or doesn't exist.
// 
// 
// Parameters:
//  - CancelRequest
func (p *HistoryServiceClient) RequestCancelWorkflowExecution(cancelRequest *RequestCancelWorkflowExecutionRequest) (err error) {
  if err = p.sendRequestCancelWorkflowExecution(cancelRequest); err != nil { return }
  return p.recvRequestCancelWorkflowExecution()
}

func (p *HistoryServiceClient) sendRequestCancelWorkflowExecution(cancelRequest *RequestCancelWorkflowExecutionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("RequestCancelWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := HistoryServiceRequestCancelWorkflowExecutionArgs{
  CancelRequest : cancelRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *HistoryServiceClient) recvRequestCancelWorkflowExecution() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "RequestCancelWorkflowExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RequestCancelWorkflowExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RequestCancelWorkflowExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RequestCancelWorkflowExecution failed: invalid message type")
    return
  }
  result := HistoryServiceRequestCancelWorkflowExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.EntityNotExistError != nil {
    err = result.EntityNotExistError
    return 
  } else   if result.ShardOwnershipLostError != nil {
    err = result.ShardOwnershipLostError
    return 
  }
  return
}


type HistoryServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler HistoryService
}

func (p *HistoryServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HistoryServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *HistoryServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHistoryServiceProcessor(handler HistoryService) *HistoryServiceProcessor {

  self24 := &HistoryServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["StartWorkflowExecution"] = &historyServiceProcessorStartWorkflowExecution{handler:handler}
  self24.processorMap["GetWorkflowExecutionHistory"] = &historyServiceProcessorGetWorkflowExecutionHistory{handler:handler}
  self24.processorMap["RecordDecisionTaskStarted"] = &historyServiceProcessorRecordDecisionTaskStarted{handler:handler}
  self24.processorMap["RecordActivityTaskStarted"] = &historyServiceProcessorRecordActivityTaskStarted{handler:handler}
  self24.processorMap["RespondDecisionTaskCompleted"] = &historyServiceProcessorRespondDecisionTaskCompleted{handler:handler}
  self24.processorMap["RecordActivityTaskHeartbeat"] = &historyServiceProcessorRecordActivityTaskHeartbeat{handler:handler}
  self24.processorMap["RespondActivityTaskCompleted"] = &historyServiceProcessorRespondActivityTaskCompleted{handler:handler}
  self24.processorMap["RespondActivityTaskFailed"] = &historyServiceProcessorRespondActivityTaskFailed{handler:handler}
  self24.processorMap["RespondActivityTaskCanceled"] = &historyServiceProcessorRespondActivityTaskCanceled{handler:handler}
  self24.processorMap["SignalWorkflowExecution"] = &historyServiceProcessorSignalWorkflowExecution{handler:handler}
  self24.processorMap["TerminateWorkflowExecution"] = &historyServiceProcessorTerminateWorkflowExecution{handler:handler}
  self24.processorMap["RequestCancelWorkflowExecution"] = &historyServiceProcessorRequestCancelWorkflowExecution{handler:handler}
return self24
}

func (p *HistoryServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x25.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x25

}

type historyServiceProcessorStartWorkflowExecution struct {
  handler HistoryService
}

func (p *historyServiceProcessorStartWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceStartWorkflowExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("StartWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceStartWorkflowExecutionResult{}
var retval *shared.StartWorkflowExecutionResponse
  var err2 error
  if retval, err2 = p.handler.StartWorkflowExecution(args.StartRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.WorkflowExecutionAlreadyStartedError:
  result.SessionAlreadyExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StartWorkflowExecution: " + err2.Error())
    oprot.WriteMessageBegin("StartWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("StartWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorGetWorkflowExecutionHistory struct {
  handler HistoryService
}

func (p *historyServiceProcessorGetWorkflowExecutionHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceGetWorkflowExecutionHistoryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceGetWorkflowExecutionHistoryResult{}
var retval *shared.GetWorkflowExecutionHistoryResponse
  var err2 error
  if retval, err2 = p.handler.GetWorkflowExecutionHistory(args.GetRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWorkflowExecutionHistory: " + err2.Error())
    oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorRecordDecisionTaskStarted struct {
  handler HistoryService
}

func (p *historyServiceProcessorRecordDecisionTaskStarted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceRecordDecisionTaskStartedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RecordDecisionTaskStarted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceRecordDecisionTaskStartedResult{}
var retval *RecordDecisionTaskStartedResponse
  var err2 error
  if retval, err2 = p.handler.RecordDecisionTaskStarted(args.AddRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *EventAlreadyStartedError:
  result.EventAlreadyStartedError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecordDecisionTaskStarted: " + err2.Error())
    oprot.WriteMessageBegin("RecordDecisionTaskStarted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("RecordDecisionTaskStarted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorRecordActivityTaskStarted struct {
  handler HistoryService
}

func (p *historyServiceProcessorRecordActivityTaskStarted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceRecordActivityTaskStartedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RecordActivityTaskStarted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceRecordActivityTaskStartedResult{}
var retval *RecordActivityTaskStartedResponse
  var err2 error
  if retval, err2 = p.handler.RecordActivityTaskStarted(args.AddRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *EventAlreadyStartedError:
  result.EventAlreadyStartedError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecordActivityTaskStarted: " + err2.Error())
    oprot.WriteMessageBegin("RecordActivityTaskStarted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("RecordActivityTaskStarted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorRespondDecisionTaskCompleted struct {
  handler HistoryService
}

func (p *historyServiceProcessorRespondDecisionTaskCompleted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceRespondDecisionTaskCompletedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceRespondDecisionTaskCompletedResult{}
  var err2 error
  if err2 = p.handler.RespondDecisionTaskCompleted(args.CompleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondDecisionTaskCompleted: " + err2.Error())
    oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorRecordActivityTaskHeartbeat struct {
  handler HistoryService
}

func (p *historyServiceProcessorRecordActivityTaskHeartbeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceRecordActivityTaskHeartbeatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceRecordActivityTaskHeartbeatResult{}
var retval *shared.RecordActivityTaskHeartbeatResponse
  var err2 error
  if retval, err2 = p.handler.RecordActivityTaskHeartbeat(args.HeartbeatRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecordActivityTaskHeartbeat: " + err2.Error())
    oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorRespondActivityTaskCompleted struct {
  handler HistoryService
}

func (p *historyServiceProcessorRespondActivityTaskCompleted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceRespondActivityTaskCompletedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceRespondActivityTaskCompletedResult{}
  var err2 error
  if err2 = p.handler.RespondActivityTaskCompleted(args.CompleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskCompleted: " + err2.Error())
    oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorRespondActivityTaskFailed struct {
  handler HistoryService
}

func (p *historyServiceProcessorRespondActivityTaskFailed) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceRespondActivityTaskFailedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceRespondActivityTaskFailedResult{}
  var err2 error
  if err2 = p.handler.RespondActivityTaskFailed(args.FailRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskFailed: " + err2.Error())
    oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorRespondActivityTaskCanceled struct {
  handler HistoryService
}

func (p *historyServiceProcessorRespondActivityTaskCanceled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceRespondActivityTaskCanceledArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RespondActivityTaskCanceled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceRespondActivityTaskCanceledResult{}
  var err2 error
  if err2 = p.handler.RespondActivityTaskCanceled(args.CanceledRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskCanceled: " + err2.Error())
    oprot.WriteMessageBegin("RespondActivityTaskCanceled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RespondActivityTaskCanceled", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorSignalWorkflowExecution struct {
  handler HistoryService
}

func (p *historyServiceProcessorSignalWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceSignalWorkflowExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SignalWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceSignalWorkflowExecutionResult{}
  var err2 error
  if err2 = p.handler.SignalWorkflowExecution(args.SignalRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SignalWorkflowExecution: " + err2.Error())
    oprot.WriteMessageBegin("SignalWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("SignalWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorTerminateWorkflowExecution struct {
  handler HistoryService
}

func (p *historyServiceProcessorTerminateWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceTerminateWorkflowExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("TerminateWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceTerminateWorkflowExecutionResult{}
  var err2 error
  if err2 = p.handler.TerminateWorkflowExecution(args.TerminateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TerminateWorkflowExecution: " + err2.Error())
    oprot.WriteMessageBegin("TerminateWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("TerminateWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type historyServiceProcessorRequestCancelWorkflowExecution struct {
  handler HistoryService
}

func (p *historyServiceProcessorRequestCancelWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HistoryServiceRequestCancelWorkflowExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RequestCancelWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HistoryServiceRequestCancelWorkflowExecutionResult{}
  var err2 error
  if err2 = p.handler.RequestCancelWorkflowExecution(args.CancelRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistError = v
    case *ShardOwnershipLostError:
  result.ShardOwnershipLostError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestCancelWorkflowExecution: " + err2.Error())
    oprot.WriteMessageBegin("RequestCancelWorkflowExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RequestCancelWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - StartRequest
type HistoryServiceStartWorkflowExecutionArgs struct {
  StartRequest *StartWorkflowExecutionRequest `thrift:"startRequest,1" db:"startRequest" json:"startRequest"`
}

func NewHistoryServiceStartWorkflowExecutionArgs() *HistoryServiceStartWorkflowExecutionArgs {
  return &HistoryServiceStartWorkflowExecutionArgs{}
}

var HistoryServiceStartWorkflowExecutionArgs_StartRequest_DEFAULT *StartWorkflowExecutionRequest
func (p *HistoryServiceStartWorkflowExecutionArgs) GetStartRequest() *StartWorkflowExecutionRequest {
  if !p.IsSetStartRequest() {
    return HistoryServiceStartWorkflowExecutionArgs_StartRequest_DEFAULT
  }
return p.StartRequest
}
func (p *HistoryServiceStartWorkflowExecutionArgs) IsSetStartRequest() bool {
  return p.StartRequest != nil
}

func (p *HistoryServiceStartWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.StartRequest = &StartWorkflowExecutionRequest{}
  if err := p.StartRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartRequest), err)
  }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartWorkflowExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startRequest: ", p), err) }
  if err := p.StartRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startRequest: ", p), err) }
  return err
}

func (p *HistoryServiceStartWorkflowExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceStartWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - SessionAlreadyExistError
//  - ShardOwnershipLostError
type HistoryServiceStartWorkflowExecutionResult struct {
  Success *shared.StartWorkflowExecutionResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  SessionAlreadyExistError *shared.WorkflowExecutionAlreadyStartedError `thrift:"sessionAlreadyExistError,3" db:"sessionAlreadyExistError" json:"sessionAlreadyExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceStartWorkflowExecutionResult() *HistoryServiceStartWorkflowExecutionResult {
  return &HistoryServiceStartWorkflowExecutionResult{}
}

var HistoryServiceStartWorkflowExecutionResult_Success_DEFAULT *shared.StartWorkflowExecutionResponse
func (p *HistoryServiceStartWorkflowExecutionResult) GetSuccess() *shared.StartWorkflowExecutionResponse {
  if !p.IsSetSuccess() {
    return HistoryServiceStartWorkflowExecutionResult_Success_DEFAULT
  }
return p.Success
}
var HistoryServiceStartWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceStartWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceStartWorkflowExecutionResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceStartWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceStartWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceStartWorkflowExecutionResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceStartWorkflowExecutionResult_SessionAlreadyExistError_DEFAULT *shared.WorkflowExecutionAlreadyStartedError
func (p *HistoryServiceStartWorkflowExecutionResult) GetSessionAlreadyExistError() *shared.WorkflowExecutionAlreadyStartedError {
  if !p.IsSetSessionAlreadyExistError() {
    return HistoryServiceStartWorkflowExecutionResult_SessionAlreadyExistError_DEFAULT
  }
return p.SessionAlreadyExistError
}
var HistoryServiceStartWorkflowExecutionResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceStartWorkflowExecutionResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceStartWorkflowExecutionResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceStartWorkflowExecutionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) IsSetSessionAlreadyExistError() bool {
  return p.SessionAlreadyExistError != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.StartWorkflowExecutionResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.SessionAlreadyExistError = &shared.WorkflowExecutionAlreadyStartedError{}
  if err := p.SessionAlreadyExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionAlreadyExistError), err)
  }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartWorkflowExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionAlreadyExistError() {
    if err := oprot.WriteFieldBegin("sessionAlreadyExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sessionAlreadyExistError: ", p), err) }
    if err := p.SessionAlreadyExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionAlreadyExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sessionAlreadyExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceStartWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type HistoryServiceGetWorkflowExecutionHistoryArgs struct {
  GetRequest *GetWorkflowExecutionHistoryRequest `thrift:"getRequest,1" db:"getRequest" json:"getRequest"`
}

func NewHistoryServiceGetWorkflowExecutionHistoryArgs() *HistoryServiceGetWorkflowExecutionHistoryArgs {
  return &HistoryServiceGetWorkflowExecutionHistoryArgs{}
}

var HistoryServiceGetWorkflowExecutionHistoryArgs_GetRequest_DEFAULT *GetWorkflowExecutionHistoryRequest
func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) GetGetRequest() *GetWorkflowExecutionHistoryRequest {
  if !p.IsSetGetRequest() {
    return HistoryServiceGetWorkflowExecutionHistoryArgs_GetRequest_DEFAULT
  }
return p.GetRequest
}
func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) IsSetGetRequest() bool {
  return p.GetRequest != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetRequest = &GetWorkflowExecutionHistoryRequest{}
  if err := p.GetRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
  }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetWorkflowExecutionHistory_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err) }
  if err := p.GetRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err) }
  return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceGetWorkflowExecutionHistoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceGetWorkflowExecutionHistoryResult struct {
  Success *shared.GetWorkflowExecutionHistoryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceGetWorkflowExecutionHistoryResult() *HistoryServiceGetWorkflowExecutionHistoryResult {
  return &HistoryServiceGetWorkflowExecutionHistoryResult{}
}

var HistoryServiceGetWorkflowExecutionHistoryResult_Success_DEFAULT *shared.GetWorkflowExecutionHistoryResponse
func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetSuccess() *shared.GetWorkflowExecutionHistoryResponse {
  if !p.IsSetSuccess() {
    return HistoryServiceGetWorkflowExecutionHistoryResult_Success_DEFAULT
  }
return p.Success
}
var HistoryServiceGetWorkflowExecutionHistoryResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceGetWorkflowExecutionHistoryResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceGetWorkflowExecutionHistoryResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceGetWorkflowExecutionHistoryResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceGetWorkflowExecutionHistoryResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceGetWorkflowExecutionHistoryResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceGetWorkflowExecutionHistoryResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceGetWorkflowExecutionHistoryResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.GetWorkflowExecutionHistoryResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetWorkflowExecutionHistory_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceGetWorkflowExecutionHistoryResult(%+v)", *p)
}

// Attributes:
//  - AddRequest
type HistoryServiceRecordDecisionTaskStartedArgs struct {
  AddRequest *RecordDecisionTaskStartedRequest `thrift:"addRequest,1" db:"addRequest" json:"addRequest"`
}

func NewHistoryServiceRecordDecisionTaskStartedArgs() *HistoryServiceRecordDecisionTaskStartedArgs {
  return &HistoryServiceRecordDecisionTaskStartedArgs{}
}

var HistoryServiceRecordDecisionTaskStartedArgs_AddRequest_DEFAULT *RecordDecisionTaskStartedRequest
func (p *HistoryServiceRecordDecisionTaskStartedArgs) GetAddRequest() *RecordDecisionTaskStartedRequest {
  if !p.IsSetAddRequest() {
    return HistoryServiceRecordDecisionTaskStartedArgs_AddRequest_DEFAULT
  }
return p.AddRequest
}
func (p *HistoryServiceRecordDecisionTaskStartedArgs) IsSetAddRequest() bool {
  return p.AddRequest != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AddRequest = &RecordDecisionTaskStartedRequest{}
  if err := p.AddRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddRequest), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordDecisionTaskStarted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addRequest: ", p), err) }
  if err := p.AddRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addRequest: ", p), err) }
  return err
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRecordDecisionTaskStartedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EventAlreadyStartedError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceRecordDecisionTaskStartedResult struct {
  Success *RecordDecisionTaskStartedResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EventAlreadyStartedError *EventAlreadyStartedError `thrift:"eventAlreadyStartedError,3" db:"eventAlreadyStartedError" json:"eventAlreadyStartedError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,4" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,5" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceRecordDecisionTaskStartedResult() *HistoryServiceRecordDecisionTaskStartedResult {
  return &HistoryServiceRecordDecisionTaskStartedResult{}
}

var HistoryServiceRecordDecisionTaskStartedResult_Success_DEFAULT *RecordDecisionTaskStartedResponse
func (p *HistoryServiceRecordDecisionTaskStartedResult) GetSuccess() *RecordDecisionTaskStartedResponse {
  if !p.IsSetSuccess() {
    return HistoryServiceRecordDecisionTaskStartedResult_Success_DEFAULT
  }
return p.Success
}
var HistoryServiceRecordDecisionTaskStartedResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceRecordDecisionTaskStartedResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceRecordDecisionTaskStartedResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceRecordDecisionTaskStartedResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceRecordDecisionTaskStartedResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceRecordDecisionTaskStartedResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceRecordDecisionTaskStartedResult_EventAlreadyStartedError_DEFAULT *EventAlreadyStartedError
func (p *HistoryServiceRecordDecisionTaskStartedResult) GetEventAlreadyStartedError() *EventAlreadyStartedError {
  if !p.IsSetEventAlreadyStartedError() {
    return HistoryServiceRecordDecisionTaskStartedResult_EventAlreadyStartedError_DEFAULT
  }
return p.EventAlreadyStartedError
}
var HistoryServiceRecordDecisionTaskStartedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceRecordDecisionTaskStartedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceRecordDecisionTaskStartedResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceRecordDecisionTaskStartedResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceRecordDecisionTaskStartedResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceRecordDecisionTaskStartedResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetEventAlreadyStartedError() bool {
  return p.EventAlreadyStartedError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RecordDecisionTaskStartedResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EventAlreadyStartedError = &EventAlreadyStartedError{}
  if err := p.EventAlreadyStartedError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EventAlreadyStartedError), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult)  ReadField4(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult)  ReadField5(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordDecisionTaskStarted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEventAlreadyStartedError() {
    if err := oprot.WriteFieldBegin("eventAlreadyStartedError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventAlreadyStartedError: ", p), err) }
    if err := p.EventAlreadyStartedError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EventAlreadyStartedError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventAlreadyStartedError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRecordDecisionTaskStartedResult(%+v)", *p)
}

// Attributes:
//  - AddRequest
type HistoryServiceRecordActivityTaskStartedArgs struct {
  AddRequest *RecordActivityTaskStartedRequest `thrift:"addRequest,1" db:"addRequest" json:"addRequest"`
}

func NewHistoryServiceRecordActivityTaskStartedArgs() *HistoryServiceRecordActivityTaskStartedArgs {
  return &HistoryServiceRecordActivityTaskStartedArgs{}
}

var HistoryServiceRecordActivityTaskStartedArgs_AddRequest_DEFAULT *RecordActivityTaskStartedRequest
func (p *HistoryServiceRecordActivityTaskStartedArgs) GetAddRequest() *RecordActivityTaskStartedRequest {
  if !p.IsSetAddRequest() {
    return HistoryServiceRecordActivityTaskStartedArgs_AddRequest_DEFAULT
  }
return p.AddRequest
}
func (p *HistoryServiceRecordActivityTaskStartedArgs) IsSetAddRequest() bool {
  return p.AddRequest != nil
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AddRequest = &RecordActivityTaskStartedRequest{}
  if err := p.AddRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddRequest), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskStarted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addRequest: ", p), err) }
  if err := p.AddRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addRequest: ", p), err) }
  return err
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRecordActivityTaskStartedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EventAlreadyStartedError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceRecordActivityTaskStartedResult struct {
  Success *RecordActivityTaskStartedResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EventAlreadyStartedError *EventAlreadyStartedError `thrift:"eventAlreadyStartedError,3" db:"eventAlreadyStartedError" json:"eventAlreadyStartedError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,4" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,5" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceRecordActivityTaskStartedResult() *HistoryServiceRecordActivityTaskStartedResult {
  return &HistoryServiceRecordActivityTaskStartedResult{}
}

var HistoryServiceRecordActivityTaskStartedResult_Success_DEFAULT *RecordActivityTaskStartedResponse
func (p *HistoryServiceRecordActivityTaskStartedResult) GetSuccess() *RecordActivityTaskStartedResponse {
  if !p.IsSetSuccess() {
    return HistoryServiceRecordActivityTaskStartedResult_Success_DEFAULT
  }
return p.Success
}
var HistoryServiceRecordActivityTaskStartedResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceRecordActivityTaskStartedResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceRecordActivityTaskStartedResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceRecordActivityTaskStartedResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceRecordActivityTaskStartedResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceRecordActivityTaskStartedResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceRecordActivityTaskStartedResult_EventAlreadyStartedError_DEFAULT *EventAlreadyStartedError
func (p *HistoryServiceRecordActivityTaskStartedResult) GetEventAlreadyStartedError() *EventAlreadyStartedError {
  if !p.IsSetEventAlreadyStartedError() {
    return HistoryServiceRecordActivityTaskStartedResult_EventAlreadyStartedError_DEFAULT
  }
return p.EventAlreadyStartedError
}
var HistoryServiceRecordActivityTaskStartedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceRecordActivityTaskStartedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceRecordActivityTaskStartedResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceRecordActivityTaskStartedResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceRecordActivityTaskStartedResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceRecordActivityTaskStartedResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetEventAlreadyStartedError() bool {
  return p.EventAlreadyStartedError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RecordActivityTaskStartedResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EventAlreadyStartedError = &EventAlreadyStartedError{}
  if err := p.EventAlreadyStartedError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EventAlreadyStartedError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult)  ReadField4(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult)  ReadField5(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskStarted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEventAlreadyStartedError() {
    if err := oprot.WriteFieldBegin("eventAlreadyStartedError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventAlreadyStartedError: ", p), err) }
    if err := p.EventAlreadyStartedError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EventAlreadyStartedError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventAlreadyStartedError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRecordActivityTaskStartedResult(%+v)", *p)
}

// Attributes:
//  - CompleteRequest
type HistoryServiceRespondDecisionTaskCompletedArgs struct {
  CompleteRequest *RespondDecisionTaskCompletedRequest `thrift:"completeRequest,1" db:"completeRequest" json:"completeRequest"`
}

func NewHistoryServiceRespondDecisionTaskCompletedArgs() *HistoryServiceRespondDecisionTaskCompletedArgs {
  return &HistoryServiceRespondDecisionTaskCompletedArgs{}
}

var HistoryServiceRespondDecisionTaskCompletedArgs_CompleteRequest_DEFAULT *RespondDecisionTaskCompletedRequest
func (p *HistoryServiceRespondDecisionTaskCompletedArgs) GetCompleteRequest() *RespondDecisionTaskCompletedRequest {
  if !p.IsSetCompleteRequest() {
    return HistoryServiceRespondDecisionTaskCompletedArgs_CompleteRequest_DEFAULT
  }
return p.CompleteRequest
}
func (p *HistoryServiceRespondDecisionTaskCompletedArgs) IsSetCompleteRequest() bool {
  return p.CompleteRequest != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CompleteRequest = &RespondDecisionTaskCompletedRequest{}
  if err := p.CompleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
  }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondDecisionTaskCompleted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:completeRequest: ", p), err) }
  if err := p.CompleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:completeRequest: ", p), err) }
  return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRespondDecisionTaskCompletedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceRespondDecisionTaskCompletedResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceRespondDecisionTaskCompletedResult() *HistoryServiceRespondDecisionTaskCompletedResult {
  return &HistoryServiceRespondDecisionTaskCompletedResult{}
}

var HistoryServiceRespondDecisionTaskCompletedResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceRespondDecisionTaskCompletedResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceRespondDecisionTaskCompletedResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceRespondDecisionTaskCompletedResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceRespondDecisionTaskCompletedResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceRespondDecisionTaskCompletedResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceRespondDecisionTaskCompletedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceRespondDecisionTaskCompletedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceRespondDecisionTaskCompletedResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceRespondDecisionTaskCompletedResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceRespondDecisionTaskCompletedResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceRespondDecisionTaskCompletedResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceRespondDecisionTaskCompletedResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondDecisionTaskCompleted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRespondDecisionTaskCompletedResult(%+v)", *p)
}

// Attributes:
//  - HeartbeatRequest
type HistoryServiceRecordActivityTaskHeartbeatArgs struct {
  HeartbeatRequest *RecordActivityTaskHeartbeatRequest `thrift:"heartbeatRequest,1" db:"heartbeatRequest" json:"heartbeatRequest"`
}

func NewHistoryServiceRecordActivityTaskHeartbeatArgs() *HistoryServiceRecordActivityTaskHeartbeatArgs {
  return &HistoryServiceRecordActivityTaskHeartbeatArgs{}
}

var HistoryServiceRecordActivityTaskHeartbeatArgs_HeartbeatRequest_DEFAULT *RecordActivityTaskHeartbeatRequest
func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) GetHeartbeatRequest() *RecordActivityTaskHeartbeatRequest {
  if !p.IsSetHeartbeatRequest() {
    return HistoryServiceRecordActivityTaskHeartbeatArgs_HeartbeatRequest_DEFAULT
  }
return p.HeartbeatRequest
}
func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) IsSetHeartbeatRequest() bool {
  return p.HeartbeatRequest != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.HeartbeatRequest = &RecordActivityTaskHeartbeatRequest{}
  if err := p.HeartbeatRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HeartbeatRequest), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("heartbeatRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:heartbeatRequest: ", p), err) }
  if err := p.HeartbeatRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HeartbeatRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:heartbeatRequest: ", p), err) }
  return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRecordActivityTaskHeartbeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceRecordActivityTaskHeartbeatResult struct {
  Success *shared.RecordActivityTaskHeartbeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceRecordActivityTaskHeartbeatResult() *HistoryServiceRecordActivityTaskHeartbeatResult {
  return &HistoryServiceRecordActivityTaskHeartbeatResult{}
}

var HistoryServiceRecordActivityTaskHeartbeatResult_Success_DEFAULT *shared.RecordActivityTaskHeartbeatResponse
func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetSuccess() *shared.RecordActivityTaskHeartbeatResponse {
  if !p.IsSetSuccess() {
    return HistoryServiceRecordActivityTaskHeartbeatResult_Success_DEFAULT
  }
return p.Success
}
var HistoryServiceRecordActivityTaskHeartbeatResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceRecordActivityTaskHeartbeatResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceRecordActivityTaskHeartbeatResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceRecordActivityTaskHeartbeatResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceRecordActivityTaskHeartbeatResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceRecordActivityTaskHeartbeatResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceRecordActivityTaskHeartbeatResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceRecordActivityTaskHeartbeatResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.RecordActivityTaskHeartbeatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRecordActivityTaskHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - CompleteRequest
type HistoryServiceRespondActivityTaskCompletedArgs struct {
  CompleteRequest *RespondActivityTaskCompletedRequest `thrift:"completeRequest,1" db:"completeRequest" json:"completeRequest"`
}

func NewHistoryServiceRespondActivityTaskCompletedArgs() *HistoryServiceRespondActivityTaskCompletedArgs {
  return &HistoryServiceRespondActivityTaskCompletedArgs{}
}

var HistoryServiceRespondActivityTaskCompletedArgs_CompleteRequest_DEFAULT *RespondActivityTaskCompletedRequest
func (p *HistoryServiceRespondActivityTaskCompletedArgs) GetCompleteRequest() *RespondActivityTaskCompletedRequest {
  if !p.IsSetCompleteRequest() {
    return HistoryServiceRespondActivityTaskCompletedArgs_CompleteRequest_DEFAULT
  }
return p.CompleteRequest
}
func (p *HistoryServiceRespondActivityTaskCompletedArgs) IsSetCompleteRequest() bool {
  return p.CompleteRequest != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CompleteRequest = &RespondActivityTaskCompletedRequest{}
  if err := p.CompleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCompleted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:completeRequest: ", p), err) }
  if err := p.CompleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:completeRequest: ", p), err) }
  return err
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRespondActivityTaskCompletedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceRespondActivityTaskCompletedResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceRespondActivityTaskCompletedResult() *HistoryServiceRespondActivityTaskCompletedResult {
  return &HistoryServiceRespondActivityTaskCompletedResult{}
}

var HistoryServiceRespondActivityTaskCompletedResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceRespondActivityTaskCompletedResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceRespondActivityTaskCompletedResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceRespondActivityTaskCompletedResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceRespondActivityTaskCompletedResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceRespondActivityTaskCompletedResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceRespondActivityTaskCompletedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceRespondActivityTaskCompletedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceRespondActivityTaskCompletedResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceRespondActivityTaskCompletedResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceRespondActivityTaskCompletedResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceRespondActivityTaskCompletedResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceRespondActivityTaskCompletedResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCompleted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRespondActivityTaskCompletedResult(%+v)", *p)
}

// Attributes:
//  - FailRequest
type HistoryServiceRespondActivityTaskFailedArgs struct {
  FailRequest *RespondActivityTaskFailedRequest `thrift:"failRequest,1" db:"failRequest" json:"failRequest"`
}

func NewHistoryServiceRespondActivityTaskFailedArgs() *HistoryServiceRespondActivityTaskFailedArgs {
  return &HistoryServiceRespondActivityTaskFailedArgs{}
}

var HistoryServiceRespondActivityTaskFailedArgs_FailRequest_DEFAULT *RespondActivityTaskFailedRequest
func (p *HistoryServiceRespondActivityTaskFailedArgs) GetFailRequest() *RespondActivityTaskFailedRequest {
  if !p.IsSetFailRequest() {
    return HistoryServiceRespondActivityTaskFailedArgs_FailRequest_DEFAULT
  }
return p.FailRequest
}
func (p *HistoryServiceRespondActivityTaskFailedArgs) IsSetFailRequest() bool {
  return p.FailRequest != nil
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.FailRequest = &RespondActivityTaskFailedRequest{}
  if err := p.FailRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailRequest), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskFailed_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("failRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failRequest: ", p), err) }
  if err := p.FailRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failRequest: ", p), err) }
  return err
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRespondActivityTaskFailedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceRespondActivityTaskFailedResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceRespondActivityTaskFailedResult() *HistoryServiceRespondActivityTaskFailedResult {
  return &HistoryServiceRespondActivityTaskFailedResult{}
}

var HistoryServiceRespondActivityTaskFailedResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceRespondActivityTaskFailedResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceRespondActivityTaskFailedResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceRespondActivityTaskFailedResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceRespondActivityTaskFailedResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceRespondActivityTaskFailedResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceRespondActivityTaskFailedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceRespondActivityTaskFailedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceRespondActivityTaskFailedResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceRespondActivityTaskFailedResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceRespondActivityTaskFailedResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceRespondActivityTaskFailedResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceRespondActivityTaskFailedResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskFailed_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskFailedResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskFailedResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskFailedResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskFailedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRespondActivityTaskFailedResult(%+v)", *p)
}

// Attributes:
//  - CanceledRequest
type HistoryServiceRespondActivityTaskCanceledArgs struct {
  CanceledRequest *RespondActivityTaskCanceledRequest `thrift:"canceledRequest,1" db:"canceledRequest" json:"canceledRequest"`
}

func NewHistoryServiceRespondActivityTaskCanceledArgs() *HistoryServiceRespondActivityTaskCanceledArgs {
  return &HistoryServiceRespondActivityTaskCanceledArgs{}
}

var HistoryServiceRespondActivityTaskCanceledArgs_CanceledRequest_DEFAULT *RespondActivityTaskCanceledRequest
func (p *HistoryServiceRespondActivityTaskCanceledArgs) GetCanceledRequest() *RespondActivityTaskCanceledRequest {
  if !p.IsSetCanceledRequest() {
    return HistoryServiceRespondActivityTaskCanceledArgs_CanceledRequest_DEFAULT
  }
return p.CanceledRequest
}
func (p *HistoryServiceRespondActivityTaskCanceledArgs) IsSetCanceledRequest() bool {
  return p.CanceledRequest != nil
}

func (p *HistoryServiceRespondActivityTaskCanceledArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CanceledRequest = &RespondActivityTaskCanceledRequest{}
  if err := p.CanceledRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CanceledRequest), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCanceled_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("canceledRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:canceledRequest: ", p), err) }
  if err := p.CanceledRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CanceledRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:canceledRequest: ", p), err) }
  return err
}

func (p *HistoryServiceRespondActivityTaskCanceledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRespondActivityTaskCanceledArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceRespondActivityTaskCanceledResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceRespondActivityTaskCanceledResult() *HistoryServiceRespondActivityTaskCanceledResult {
  return &HistoryServiceRespondActivityTaskCanceledResult{}
}

var HistoryServiceRespondActivityTaskCanceledResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceRespondActivityTaskCanceledResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceRespondActivityTaskCanceledResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceRespondActivityTaskCanceledResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceRespondActivityTaskCanceledResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceRespondActivityTaskCanceledResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceRespondActivityTaskCanceledResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceRespondActivityTaskCanceledResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceRespondActivityTaskCanceledResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceRespondActivityTaskCanceledResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceRespondActivityTaskCanceledResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceRespondActivityTaskCanceledResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceRespondActivityTaskCanceledResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCanceled_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRespondActivityTaskCanceledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRespondActivityTaskCanceledResult(%+v)", *p)
}

// Attributes:
//  - SignalRequest
type HistoryServiceSignalWorkflowExecutionArgs struct {
  SignalRequest *SignalWorkflowExecutionRequest `thrift:"signalRequest,1" db:"signalRequest" json:"signalRequest"`
}

func NewHistoryServiceSignalWorkflowExecutionArgs() *HistoryServiceSignalWorkflowExecutionArgs {
  return &HistoryServiceSignalWorkflowExecutionArgs{}
}

var HistoryServiceSignalWorkflowExecutionArgs_SignalRequest_DEFAULT *SignalWorkflowExecutionRequest
func (p *HistoryServiceSignalWorkflowExecutionArgs) GetSignalRequest() *SignalWorkflowExecutionRequest {
  if !p.IsSetSignalRequest() {
    return HistoryServiceSignalWorkflowExecutionArgs_SignalRequest_DEFAULT
  }
return p.SignalRequest
}
func (p *HistoryServiceSignalWorkflowExecutionArgs) IsSetSignalRequest() bool {
  return p.SignalRequest != nil
}

func (p *HistoryServiceSignalWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SignalRequest = &SignalWorkflowExecutionRequest{}
  if err := p.SignalRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SignalRequest), err)
  }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SignalWorkflowExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signalRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:signalRequest: ", p), err) }
  if err := p.SignalRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SignalRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:signalRequest: ", p), err) }
  return err
}

func (p *HistoryServiceSignalWorkflowExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceSignalWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceSignalWorkflowExecutionResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceSignalWorkflowExecutionResult() *HistoryServiceSignalWorkflowExecutionResult {
  return &HistoryServiceSignalWorkflowExecutionResult{}
}

var HistoryServiceSignalWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceSignalWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceSignalWorkflowExecutionResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceSignalWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceSignalWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceSignalWorkflowExecutionResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceSignalWorkflowExecutionResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceSignalWorkflowExecutionResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceSignalWorkflowExecutionResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceSignalWorkflowExecutionResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceSignalWorkflowExecutionResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceSignalWorkflowExecutionResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceSignalWorkflowExecutionResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SignalWorkflowExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceSignalWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceSignalWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceSignalWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceSignalWorkflowExecutionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceSignalWorkflowExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceSignalWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - TerminateRequest
type HistoryServiceTerminateWorkflowExecutionArgs struct {
  TerminateRequest *TerminateWorkflowExecutionRequest `thrift:"terminateRequest,1" db:"terminateRequest" json:"terminateRequest"`
}

func NewHistoryServiceTerminateWorkflowExecutionArgs() *HistoryServiceTerminateWorkflowExecutionArgs {
  return &HistoryServiceTerminateWorkflowExecutionArgs{}
}

var HistoryServiceTerminateWorkflowExecutionArgs_TerminateRequest_DEFAULT *TerminateWorkflowExecutionRequest
func (p *HistoryServiceTerminateWorkflowExecutionArgs) GetTerminateRequest() *TerminateWorkflowExecutionRequest {
  if !p.IsSetTerminateRequest() {
    return HistoryServiceTerminateWorkflowExecutionArgs_TerminateRequest_DEFAULT
  }
return p.TerminateRequest
}
func (p *HistoryServiceTerminateWorkflowExecutionArgs) IsSetTerminateRequest() bool {
  return p.TerminateRequest != nil
}

func (p *HistoryServiceTerminateWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.TerminateRequest = &TerminateWorkflowExecutionRequest{}
  if err := p.TerminateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TerminateRequest), err)
  }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TerminateWorkflowExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("terminateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:terminateRequest: ", p), err) }
  if err := p.TerminateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TerminateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:terminateRequest: ", p), err) }
  return err
}

func (p *HistoryServiceTerminateWorkflowExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceTerminateWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceTerminateWorkflowExecutionResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceTerminateWorkflowExecutionResult() *HistoryServiceTerminateWorkflowExecutionResult {
  return &HistoryServiceTerminateWorkflowExecutionResult{}
}

var HistoryServiceTerminateWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceTerminateWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceTerminateWorkflowExecutionResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceTerminateWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceTerminateWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceTerminateWorkflowExecutionResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceTerminateWorkflowExecutionResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceTerminateWorkflowExecutionResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceTerminateWorkflowExecutionResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceTerminateWorkflowExecutionResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceTerminateWorkflowExecutionResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceTerminateWorkflowExecutionResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceTerminateWorkflowExecutionResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TerminateWorkflowExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceTerminateWorkflowExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceTerminateWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - CancelRequest
type HistoryServiceRequestCancelWorkflowExecutionArgs struct {
  CancelRequest *RequestCancelWorkflowExecutionRequest `thrift:"cancelRequest,1" db:"cancelRequest" json:"cancelRequest"`
}

func NewHistoryServiceRequestCancelWorkflowExecutionArgs() *HistoryServiceRequestCancelWorkflowExecutionArgs {
  return &HistoryServiceRequestCancelWorkflowExecutionArgs{}
}

var HistoryServiceRequestCancelWorkflowExecutionArgs_CancelRequest_DEFAULT *RequestCancelWorkflowExecutionRequest
func (p *HistoryServiceRequestCancelWorkflowExecutionArgs) GetCancelRequest() *RequestCancelWorkflowExecutionRequest {
  if !p.IsSetCancelRequest() {
    return HistoryServiceRequestCancelWorkflowExecutionArgs_CancelRequest_DEFAULT
  }
return p.CancelRequest
}
func (p *HistoryServiceRequestCancelWorkflowExecutionArgs) IsSetCancelRequest() bool {
  return p.CancelRequest != nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CancelRequest = &RequestCancelWorkflowExecutionRequest{}
  if err := p.CancelRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CancelRequest), err)
  }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestCancelWorkflowExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cancelRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cancelRequest: ", p), err) }
  if err := p.CancelRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CancelRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cancelRequest: ", p), err) }
  return err
}

func (p *HistoryServiceRequestCancelWorkflowExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRequestCancelWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
//  - ShardOwnershipLostError
type HistoryServiceRequestCancelWorkflowExecutionResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  EntityNotExistError *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
  ShardOwnershipLostError *ShardOwnershipLostError `thrift:"shardOwnershipLostError,4" db:"shardOwnershipLostError" json:"shardOwnershipLostError,omitempty"`
}

func NewHistoryServiceRequestCancelWorkflowExecutionResult() *HistoryServiceRequestCancelWorkflowExecutionResult {
  return &HistoryServiceRequestCancelWorkflowExecutionResult{}
}

var HistoryServiceRequestCancelWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *HistoryServiceRequestCancelWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return HistoryServiceRequestCancelWorkflowExecutionResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var HistoryServiceRequestCancelWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *HistoryServiceRequestCancelWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return HistoryServiceRequestCancelWorkflowExecutionResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var HistoryServiceRequestCancelWorkflowExecutionResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError
func (p *HistoryServiceRequestCancelWorkflowExecutionResult) GetEntityNotExistError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistError() {
    return HistoryServiceRequestCancelWorkflowExecutionResult_EntityNotExistError_DEFAULT
  }
return p.EntityNotExistError
}
var HistoryServiceRequestCancelWorkflowExecutionResult_ShardOwnershipLostError_DEFAULT *ShardOwnershipLostError
func (p *HistoryServiceRequestCancelWorkflowExecutionResult) GetShardOwnershipLostError() *ShardOwnershipLostError {
  if !p.IsSetShardOwnershipLostError() {
    return HistoryServiceRequestCancelWorkflowExecutionResult_ShardOwnershipLostError_DEFAULT
  }
return p.ShardOwnershipLostError
}
func (p *HistoryServiceRequestCancelWorkflowExecutionResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) IsSetEntityNotExistError() bool {
  return p.EntityNotExistError != nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) IsSetShardOwnershipLostError() bool {
  return p.ShardOwnershipLostError != nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
  }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.ShardOwnershipLostError = &ShardOwnershipLostError{}
  if err := p.ShardOwnershipLostError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShardOwnershipLostError), err)
  }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestCancelWorkflowExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistError() {
    if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err) }
    if err := p.EntityNotExistError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetShardOwnershipLostError() {
    if err := oprot.WriteFieldBegin("shardOwnershipLostError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardOwnershipLostError: ", p), err) }
    if err := p.ShardOwnershipLostError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShardOwnershipLostError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardOwnershipLostError: ", p), err) }
  }
  return err
}

func (p *HistoryServiceRequestCancelWorkflowExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryServiceRequestCancelWorkflowExecutionResult(%+v)", *p)
}


