// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/persistence"
)

// NewVisibilityManager creates a new instance of VisibilityManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVisibilityManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *VisibilityManager {
	mock := &VisibilityManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VisibilityManager is an autogenerated mock type for the VisibilityManager type
type VisibilityManager struct {
	mock.Mock
}

type VisibilityManager_Expecter struct {
	mock *mock.Mock
}

func (_m *VisibilityManager) EXPECT() *VisibilityManager_Expecter {
	return &VisibilityManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) Close() {
	_mock.Called()
	return
}

// VisibilityManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type VisibilityManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *VisibilityManager_Expecter) Close() *VisibilityManager_Close_Call {
	return &VisibilityManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *VisibilityManager_Close_Call) Run(run func()) *VisibilityManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VisibilityManager_Close_Call) Return() *VisibilityManager_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *VisibilityManager_Close_Call) RunAndReturn(run func()) *VisibilityManager_Close_Call {
	_c.Run(run)
	return _c
}

// CountWorkflowExecutions provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) CountWorkflowExecutions(ctx context.Context, request *persistence.CountWorkflowExecutionsRequest) (*persistence.CountWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CountWorkflowExecutions")
	}

	var r0 *persistence.CountWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.CountWorkflowExecutionsRequest) (*persistence.CountWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.CountWorkflowExecutionsRequest) *persistence.CountWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.CountWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.CountWorkflowExecutionsRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_CountWorkflowExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountWorkflowExecutions'
type VisibilityManager_CountWorkflowExecutions_Call struct {
	*mock.Call
}

// CountWorkflowExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.CountWorkflowExecutionsRequest
func (_e *VisibilityManager_Expecter) CountWorkflowExecutions(ctx interface{}, request interface{}) *VisibilityManager_CountWorkflowExecutions_Call {
	return &VisibilityManager_CountWorkflowExecutions_Call{Call: _e.mock.On("CountWorkflowExecutions", ctx, request)}
}

func (_c *VisibilityManager_CountWorkflowExecutions_Call) Run(run func(ctx context.Context, request *persistence.CountWorkflowExecutionsRequest)) *VisibilityManager_CountWorkflowExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.CountWorkflowExecutionsRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.CountWorkflowExecutionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_CountWorkflowExecutions_Call) Return(countWorkflowExecutionsResponse *persistence.CountWorkflowExecutionsResponse, err error) *VisibilityManager_CountWorkflowExecutions_Call {
	_c.Call.Return(countWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_CountWorkflowExecutions_Call) RunAndReturn(run func(ctx context.Context, request *persistence.CountWorkflowExecutionsRequest) (*persistence.CountWorkflowExecutionsResponse, error)) *VisibilityManager_CountWorkflowExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUninitializedWorkflowExecution provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) DeleteUninitializedWorkflowExecution(ctx context.Context, request *persistence.VisibilityDeleteWorkflowExecutionRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUninitializedWorkflowExecution")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.VisibilityDeleteWorkflowExecutionRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VisibilityManager_DeleteUninitializedWorkflowExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUninitializedWorkflowExecution'
type VisibilityManager_DeleteUninitializedWorkflowExecution_Call struct {
	*mock.Call
}

// DeleteUninitializedWorkflowExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.VisibilityDeleteWorkflowExecutionRequest
func (_e *VisibilityManager_Expecter) DeleteUninitializedWorkflowExecution(ctx interface{}, request interface{}) *VisibilityManager_DeleteUninitializedWorkflowExecution_Call {
	return &VisibilityManager_DeleteUninitializedWorkflowExecution_Call{Call: _e.mock.On("DeleteUninitializedWorkflowExecution", ctx, request)}
}

func (_c *VisibilityManager_DeleteUninitializedWorkflowExecution_Call) Run(run func(ctx context.Context, request *persistence.VisibilityDeleteWorkflowExecutionRequest)) *VisibilityManager_DeleteUninitializedWorkflowExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.VisibilityDeleteWorkflowExecutionRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.VisibilityDeleteWorkflowExecutionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_DeleteUninitializedWorkflowExecution_Call) Return(err error) *VisibilityManager_DeleteUninitializedWorkflowExecution_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VisibilityManager_DeleteUninitializedWorkflowExecution_Call) RunAndReturn(run func(ctx context.Context, request *persistence.VisibilityDeleteWorkflowExecutionRequest) error) *VisibilityManager_DeleteUninitializedWorkflowExecution_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflowExecution provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) DeleteWorkflowExecution(ctx context.Context, request *persistence.VisibilityDeleteWorkflowExecutionRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflowExecution")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.VisibilityDeleteWorkflowExecutionRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VisibilityManager_DeleteWorkflowExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflowExecution'
type VisibilityManager_DeleteWorkflowExecution_Call struct {
	*mock.Call
}

// DeleteWorkflowExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.VisibilityDeleteWorkflowExecutionRequest
func (_e *VisibilityManager_Expecter) DeleteWorkflowExecution(ctx interface{}, request interface{}) *VisibilityManager_DeleteWorkflowExecution_Call {
	return &VisibilityManager_DeleteWorkflowExecution_Call{Call: _e.mock.On("DeleteWorkflowExecution", ctx, request)}
}

func (_c *VisibilityManager_DeleteWorkflowExecution_Call) Run(run func(ctx context.Context, request *persistence.VisibilityDeleteWorkflowExecutionRequest)) *VisibilityManager_DeleteWorkflowExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.VisibilityDeleteWorkflowExecutionRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.VisibilityDeleteWorkflowExecutionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_DeleteWorkflowExecution_Call) Return(err error) *VisibilityManager_DeleteWorkflowExecution_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VisibilityManager_DeleteWorkflowExecution_Call) RunAndReturn(run func(ctx context.Context, request *persistence.VisibilityDeleteWorkflowExecutionRequest) error) *VisibilityManager_DeleteWorkflowExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetClosedWorkflowExecution provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) GetClosedWorkflowExecution(ctx context.Context, request *persistence.GetClosedWorkflowExecutionRequest) (*persistence.GetClosedWorkflowExecutionResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetClosedWorkflowExecution")
	}

	var r0 *persistence.GetClosedWorkflowExecutionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetClosedWorkflowExecutionRequest) (*persistence.GetClosedWorkflowExecutionResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetClosedWorkflowExecutionRequest) *persistence.GetClosedWorkflowExecutionResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.GetClosedWorkflowExecutionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.GetClosedWorkflowExecutionRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_GetClosedWorkflowExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClosedWorkflowExecution'
type VisibilityManager_GetClosedWorkflowExecution_Call struct {
	*mock.Call
}

// GetClosedWorkflowExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.GetClosedWorkflowExecutionRequest
func (_e *VisibilityManager_Expecter) GetClosedWorkflowExecution(ctx interface{}, request interface{}) *VisibilityManager_GetClosedWorkflowExecution_Call {
	return &VisibilityManager_GetClosedWorkflowExecution_Call{Call: _e.mock.On("GetClosedWorkflowExecution", ctx, request)}
}

func (_c *VisibilityManager_GetClosedWorkflowExecution_Call) Run(run func(ctx context.Context, request *persistence.GetClosedWorkflowExecutionRequest)) *VisibilityManager_GetClosedWorkflowExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.GetClosedWorkflowExecutionRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.GetClosedWorkflowExecutionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_GetClosedWorkflowExecution_Call) Return(getClosedWorkflowExecutionResponse *persistence.GetClosedWorkflowExecutionResponse, err error) *VisibilityManager_GetClosedWorkflowExecution_Call {
	_c.Call.Return(getClosedWorkflowExecutionResponse, err)
	return _c
}

func (_c *VisibilityManager_GetClosedWorkflowExecution_Call) RunAndReturn(run func(ctx context.Context, request *persistence.GetClosedWorkflowExecutionRequest) (*persistence.GetClosedWorkflowExecutionResponse, error)) *VisibilityManager_GetClosedWorkflowExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// VisibilityManager_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type VisibilityManager_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *VisibilityManager_Expecter) GetName() *VisibilityManager_GetName_Call {
	return &VisibilityManager_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *VisibilityManager_GetName_Call) Run(run func()) *VisibilityManager_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VisibilityManager_GetName_Call) Return(s string) *VisibilityManager_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *VisibilityManager_GetName_Call) RunAndReturn(run func() string) *VisibilityManager_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// ListClosedWorkflowExecutions provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ListClosedWorkflowExecutions(ctx context.Context, request *persistence.ListWorkflowExecutionsRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListClosedWorkflowExecutions")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListWorkflowExecutionsRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ListClosedWorkflowExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClosedWorkflowExecutions'
type VisibilityManager_ListClosedWorkflowExecutions_Call struct {
	*mock.Call
}

// ListClosedWorkflowExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListWorkflowExecutionsRequest
func (_e *VisibilityManager_Expecter) ListClosedWorkflowExecutions(ctx interface{}, request interface{}) *VisibilityManager_ListClosedWorkflowExecutions_Call {
	return &VisibilityManager_ListClosedWorkflowExecutions_Call{Call: _e.mock.On("ListClosedWorkflowExecutions", ctx, request)}
}

func (_c *VisibilityManager_ListClosedWorkflowExecutions_Call) Run(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsRequest)) *VisibilityManager_ListClosedWorkflowExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListWorkflowExecutionsRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListWorkflowExecutionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ListClosedWorkflowExecutions_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ListClosedWorkflowExecutions_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ListClosedWorkflowExecutions_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ListClosedWorkflowExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListClosedWorkflowExecutionsByStatus provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ListClosedWorkflowExecutionsByStatus(ctx context.Context, request *persistence.ListClosedWorkflowExecutionsByStatusRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListClosedWorkflowExecutionsByStatus")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListClosedWorkflowExecutionsByStatusRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListClosedWorkflowExecutionsByStatusRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListClosedWorkflowExecutionsByStatusRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClosedWorkflowExecutionsByStatus'
type VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call struct {
	*mock.Call
}

// ListClosedWorkflowExecutionsByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListClosedWorkflowExecutionsByStatusRequest
func (_e *VisibilityManager_Expecter) ListClosedWorkflowExecutionsByStatus(ctx interface{}, request interface{}) *VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call {
	return &VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call{Call: _e.mock.On("ListClosedWorkflowExecutionsByStatus", ctx, request)}
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call) Run(run func(ctx context.Context, request *persistence.ListClosedWorkflowExecutionsByStatusRequest)) *VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListClosedWorkflowExecutionsByStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListClosedWorkflowExecutionsByStatusRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListClosedWorkflowExecutionsByStatusRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ListClosedWorkflowExecutionsByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListClosedWorkflowExecutionsByType provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ListClosedWorkflowExecutionsByType(ctx context.Context, request *persistence.ListWorkflowExecutionsByTypeRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListClosedWorkflowExecutionsByType")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByTypeRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByTypeRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListWorkflowExecutionsByTypeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ListClosedWorkflowExecutionsByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClosedWorkflowExecutionsByType'
type VisibilityManager_ListClosedWorkflowExecutionsByType_Call struct {
	*mock.Call
}

// ListClosedWorkflowExecutionsByType is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListWorkflowExecutionsByTypeRequest
func (_e *VisibilityManager_Expecter) ListClosedWorkflowExecutionsByType(ctx interface{}, request interface{}) *VisibilityManager_ListClosedWorkflowExecutionsByType_Call {
	return &VisibilityManager_ListClosedWorkflowExecutionsByType_Call{Call: _e.mock.On("ListClosedWorkflowExecutionsByType", ctx, request)}
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByType_Call) Run(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByTypeRequest)) *VisibilityManager_ListClosedWorkflowExecutionsByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListWorkflowExecutionsByTypeRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListWorkflowExecutionsByTypeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByType_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ListClosedWorkflowExecutionsByType_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByType_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByTypeRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ListClosedWorkflowExecutionsByType_Call {
	_c.Call.Return(run)
	return _c
}

// ListClosedWorkflowExecutionsByWorkflowID provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ListClosedWorkflowExecutionsByWorkflowID(ctx context.Context, request *persistence.ListWorkflowExecutionsByWorkflowIDRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListClosedWorkflowExecutionsByWorkflowID")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByWorkflowIDRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByWorkflowIDRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListWorkflowExecutionsByWorkflowIDRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClosedWorkflowExecutionsByWorkflowID'
type VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call struct {
	*mock.Call
}

// ListClosedWorkflowExecutionsByWorkflowID is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListWorkflowExecutionsByWorkflowIDRequest
func (_e *VisibilityManager_Expecter) ListClosedWorkflowExecutionsByWorkflowID(ctx interface{}, request interface{}) *VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call {
	return &VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call{Call: _e.mock.On("ListClosedWorkflowExecutionsByWorkflowID", ctx, request)}
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call) Run(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByWorkflowIDRequest)) *VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListWorkflowExecutionsByWorkflowIDRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListWorkflowExecutionsByWorkflowIDRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByWorkflowIDRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ListClosedWorkflowExecutionsByWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenWorkflowExecutions provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ListOpenWorkflowExecutions(ctx context.Context, request *persistence.ListWorkflowExecutionsRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenWorkflowExecutions")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListWorkflowExecutionsRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ListOpenWorkflowExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenWorkflowExecutions'
type VisibilityManager_ListOpenWorkflowExecutions_Call struct {
	*mock.Call
}

// ListOpenWorkflowExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListWorkflowExecutionsRequest
func (_e *VisibilityManager_Expecter) ListOpenWorkflowExecutions(ctx interface{}, request interface{}) *VisibilityManager_ListOpenWorkflowExecutions_Call {
	return &VisibilityManager_ListOpenWorkflowExecutions_Call{Call: _e.mock.On("ListOpenWorkflowExecutions", ctx, request)}
}

func (_c *VisibilityManager_ListOpenWorkflowExecutions_Call) Run(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsRequest)) *VisibilityManager_ListOpenWorkflowExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListWorkflowExecutionsRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListWorkflowExecutionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ListOpenWorkflowExecutions_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ListOpenWorkflowExecutions_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ListOpenWorkflowExecutions_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ListOpenWorkflowExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenWorkflowExecutionsByType provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ListOpenWorkflowExecutionsByType(ctx context.Context, request *persistence.ListWorkflowExecutionsByTypeRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenWorkflowExecutionsByType")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByTypeRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByTypeRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListWorkflowExecutionsByTypeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ListOpenWorkflowExecutionsByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenWorkflowExecutionsByType'
type VisibilityManager_ListOpenWorkflowExecutionsByType_Call struct {
	*mock.Call
}

// ListOpenWorkflowExecutionsByType is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListWorkflowExecutionsByTypeRequest
func (_e *VisibilityManager_Expecter) ListOpenWorkflowExecutionsByType(ctx interface{}, request interface{}) *VisibilityManager_ListOpenWorkflowExecutionsByType_Call {
	return &VisibilityManager_ListOpenWorkflowExecutionsByType_Call{Call: _e.mock.On("ListOpenWorkflowExecutionsByType", ctx, request)}
}

func (_c *VisibilityManager_ListOpenWorkflowExecutionsByType_Call) Run(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByTypeRequest)) *VisibilityManager_ListOpenWorkflowExecutionsByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListWorkflowExecutionsByTypeRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListWorkflowExecutionsByTypeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ListOpenWorkflowExecutionsByType_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ListOpenWorkflowExecutionsByType_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ListOpenWorkflowExecutionsByType_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByTypeRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ListOpenWorkflowExecutionsByType_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenWorkflowExecutionsByWorkflowID provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ListOpenWorkflowExecutionsByWorkflowID(ctx context.Context, request *persistence.ListWorkflowExecutionsByWorkflowIDRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenWorkflowExecutionsByWorkflowID")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByWorkflowIDRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByWorkflowIDRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListWorkflowExecutionsByWorkflowIDRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenWorkflowExecutionsByWorkflowID'
type VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call struct {
	*mock.Call
}

// ListOpenWorkflowExecutionsByWorkflowID is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListWorkflowExecutionsByWorkflowIDRequest
func (_e *VisibilityManager_Expecter) ListOpenWorkflowExecutionsByWorkflowID(ctx interface{}, request interface{}) *VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call {
	return &VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call{Call: _e.mock.On("ListOpenWorkflowExecutionsByWorkflowID", ctx, request)}
}

func (_c *VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call) Run(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByWorkflowIDRequest)) *VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListWorkflowExecutionsByWorkflowIDRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListWorkflowExecutionsByWorkflowIDRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByWorkflowIDRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ListOpenWorkflowExecutionsByWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflowExecutions provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ListWorkflowExecutions(ctx context.Context, request *persistence.ListWorkflowExecutionsByQueryRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowExecutions")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByQueryRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByQueryRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListWorkflowExecutionsByQueryRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ListWorkflowExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflowExecutions'
type VisibilityManager_ListWorkflowExecutions_Call struct {
	*mock.Call
}

// ListWorkflowExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListWorkflowExecutionsByQueryRequest
func (_e *VisibilityManager_Expecter) ListWorkflowExecutions(ctx interface{}, request interface{}) *VisibilityManager_ListWorkflowExecutions_Call {
	return &VisibilityManager_ListWorkflowExecutions_Call{Call: _e.mock.On("ListWorkflowExecutions", ctx, request)}
}

func (_c *VisibilityManager_ListWorkflowExecutions_Call) Run(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByQueryRequest)) *VisibilityManager_ListWorkflowExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListWorkflowExecutionsByQueryRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListWorkflowExecutionsByQueryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ListWorkflowExecutions_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ListWorkflowExecutions_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ListWorkflowExecutions_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByQueryRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ListWorkflowExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// RecordWorkflowExecutionClosed provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) RecordWorkflowExecutionClosed(ctx context.Context, request *persistence.RecordWorkflowExecutionClosedRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RecordWorkflowExecutionClosed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.RecordWorkflowExecutionClosedRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VisibilityManager_RecordWorkflowExecutionClosed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordWorkflowExecutionClosed'
type VisibilityManager_RecordWorkflowExecutionClosed_Call struct {
	*mock.Call
}

// RecordWorkflowExecutionClosed is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.RecordWorkflowExecutionClosedRequest
func (_e *VisibilityManager_Expecter) RecordWorkflowExecutionClosed(ctx interface{}, request interface{}) *VisibilityManager_RecordWorkflowExecutionClosed_Call {
	return &VisibilityManager_RecordWorkflowExecutionClosed_Call{Call: _e.mock.On("RecordWorkflowExecutionClosed", ctx, request)}
}

func (_c *VisibilityManager_RecordWorkflowExecutionClosed_Call) Run(run func(ctx context.Context, request *persistence.RecordWorkflowExecutionClosedRequest)) *VisibilityManager_RecordWorkflowExecutionClosed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.RecordWorkflowExecutionClosedRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.RecordWorkflowExecutionClosedRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_RecordWorkflowExecutionClosed_Call) Return(err error) *VisibilityManager_RecordWorkflowExecutionClosed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VisibilityManager_RecordWorkflowExecutionClosed_Call) RunAndReturn(run func(ctx context.Context, request *persistence.RecordWorkflowExecutionClosedRequest) error) *VisibilityManager_RecordWorkflowExecutionClosed_Call {
	_c.Call.Return(run)
	return _c
}

// RecordWorkflowExecutionStarted provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) RecordWorkflowExecutionStarted(ctx context.Context, request *persistence.RecordWorkflowExecutionStartedRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RecordWorkflowExecutionStarted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.RecordWorkflowExecutionStartedRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VisibilityManager_RecordWorkflowExecutionStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordWorkflowExecutionStarted'
type VisibilityManager_RecordWorkflowExecutionStarted_Call struct {
	*mock.Call
}

// RecordWorkflowExecutionStarted is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.RecordWorkflowExecutionStartedRequest
func (_e *VisibilityManager_Expecter) RecordWorkflowExecutionStarted(ctx interface{}, request interface{}) *VisibilityManager_RecordWorkflowExecutionStarted_Call {
	return &VisibilityManager_RecordWorkflowExecutionStarted_Call{Call: _e.mock.On("RecordWorkflowExecutionStarted", ctx, request)}
}

func (_c *VisibilityManager_RecordWorkflowExecutionStarted_Call) Run(run func(ctx context.Context, request *persistence.RecordWorkflowExecutionStartedRequest)) *VisibilityManager_RecordWorkflowExecutionStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.RecordWorkflowExecutionStartedRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.RecordWorkflowExecutionStartedRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_RecordWorkflowExecutionStarted_Call) Return(err error) *VisibilityManager_RecordWorkflowExecutionStarted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VisibilityManager_RecordWorkflowExecutionStarted_Call) RunAndReturn(run func(ctx context.Context, request *persistence.RecordWorkflowExecutionStartedRequest) error) *VisibilityManager_RecordWorkflowExecutionStarted_Call {
	_c.Call.Return(run)
	return _c
}

// RecordWorkflowExecutionUninitialized provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) RecordWorkflowExecutionUninitialized(ctx context.Context, request *persistence.RecordWorkflowExecutionUninitializedRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RecordWorkflowExecutionUninitialized")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.RecordWorkflowExecutionUninitializedRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VisibilityManager_RecordWorkflowExecutionUninitialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordWorkflowExecutionUninitialized'
type VisibilityManager_RecordWorkflowExecutionUninitialized_Call struct {
	*mock.Call
}

// RecordWorkflowExecutionUninitialized is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.RecordWorkflowExecutionUninitializedRequest
func (_e *VisibilityManager_Expecter) RecordWorkflowExecutionUninitialized(ctx interface{}, request interface{}) *VisibilityManager_RecordWorkflowExecutionUninitialized_Call {
	return &VisibilityManager_RecordWorkflowExecutionUninitialized_Call{Call: _e.mock.On("RecordWorkflowExecutionUninitialized", ctx, request)}
}

func (_c *VisibilityManager_RecordWorkflowExecutionUninitialized_Call) Run(run func(ctx context.Context, request *persistence.RecordWorkflowExecutionUninitializedRequest)) *VisibilityManager_RecordWorkflowExecutionUninitialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.RecordWorkflowExecutionUninitializedRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.RecordWorkflowExecutionUninitializedRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_RecordWorkflowExecutionUninitialized_Call) Return(err error) *VisibilityManager_RecordWorkflowExecutionUninitialized_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VisibilityManager_RecordWorkflowExecutionUninitialized_Call) RunAndReturn(run func(ctx context.Context, request *persistence.RecordWorkflowExecutionUninitializedRequest) error) *VisibilityManager_RecordWorkflowExecutionUninitialized_Call {
	_c.Call.Return(run)
	return _c
}

// ScanWorkflowExecutions provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) ScanWorkflowExecutions(ctx context.Context, request *persistence.ListWorkflowExecutionsByQueryRequest) (*persistence.ListWorkflowExecutionsResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ScanWorkflowExecutions")
	}

	var r0 *persistence.ListWorkflowExecutionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByQueryRequest) (*persistence.ListWorkflowExecutionsResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListWorkflowExecutionsByQueryRequest) *persistence.ListWorkflowExecutionsResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListWorkflowExecutionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListWorkflowExecutionsByQueryRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VisibilityManager_ScanWorkflowExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanWorkflowExecutions'
type VisibilityManager_ScanWorkflowExecutions_Call struct {
	*mock.Call
}

// ScanWorkflowExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListWorkflowExecutionsByQueryRequest
func (_e *VisibilityManager_Expecter) ScanWorkflowExecutions(ctx interface{}, request interface{}) *VisibilityManager_ScanWorkflowExecutions_Call {
	return &VisibilityManager_ScanWorkflowExecutions_Call{Call: _e.mock.On("ScanWorkflowExecutions", ctx, request)}
}

func (_c *VisibilityManager_ScanWorkflowExecutions_Call) Run(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByQueryRequest)) *VisibilityManager_ScanWorkflowExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListWorkflowExecutionsByQueryRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListWorkflowExecutionsByQueryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_ScanWorkflowExecutions_Call) Return(listWorkflowExecutionsResponse *persistence.ListWorkflowExecutionsResponse, err error) *VisibilityManager_ScanWorkflowExecutions_Call {
	_c.Call.Return(listWorkflowExecutionsResponse, err)
	return _c
}

func (_c *VisibilityManager_ScanWorkflowExecutions_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListWorkflowExecutionsByQueryRequest) (*persistence.ListWorkflowExecutionsResponse, error)) *VisibilityManager_ScanWorkflowExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertWorkflowExecution provides a mock function for the type VisibilityManager
func (_mock *VisibilityManager) UpsertWorkflowExecution(ctx context.Context, request *persistence.UpsertWorkflowExecutionRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpsertWorkflowExecution")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.UpsertWorkflowExecutionRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VisibilityManager_UpsertWorkflowExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWorkflowExecution'
type VisibilityManager_UpsertWorkflowExecution_Call struct {
	*mock.Call
}

// UpsertWorkflowExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.UpsertWorkflowExecutionRequest
func (_e *VisibilityManager_Expecter) UpsertWorkflowExecution(ctx interface{}, request interface{}) *VisibilityManager_UpsertWorkflowExecution_Call {
	return &VisibilityManager_UpsertWorkflowExecution_Call{Call: _e.mock.On("UpsertWorkflowExecution", ctx, request)}
}

func (_c *VisibilityManager_UpsertWorkflowExecution_Call) Run(run func(ctx context.Context, request *persistence.UpsertWorkflowExecutionRequest)) *VisibilityManager_UpsertWorkflowExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.UpsertWorkflowExecutionRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.UpsertWorkflowExecutionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VisibilityManager_UpsertWorkflowExecution_Call) Return(err error) *VisibilityManager_UpsertWorkflowExecution_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VisibilityManager_UpsertWorkflowExecution_Call) RunAndReturn(run func(ctx context.Context, request *persistence.UpsertWorkflowExecutionRequest) error) *VisibilityManager_UpsertWorkflowExecution_Call {
	_c.Call.Return(run)
	return _c
}
