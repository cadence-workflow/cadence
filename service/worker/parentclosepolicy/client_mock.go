// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package parentclosepolicy

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientMock is an autogenerated mock type for the Client type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// SendParentClosePolicyRequest provides a mock function for the type ClientMock
func (_mock *ClientMock) SendParentClosePolicyRequest(context1 context.Context, request Request) error {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for SendParentClosePolicyRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Request) error); ok {
		r0 = returnFunc(context1, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ClientMock_SendParentClosePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendParentClosePolicyRequest'
type ClientMock_SendParentClosePolicyRequest_Call struct {
	*mock.Call
}

// SendParentClosePolicyRequest is a helper method to define mock.On call
//   - context1 context.Context
//   - request Request
func (_e *ClientMock_Expecter) SendParentClosePolicyRequest(context1 interface{}, request interface{}) *ClientMock_SendParentClosePolicyRequest_Call {
	return &ClientMock_SendParentClosePolicyRequest_Call{Call: _e.mock.On("SendParentClosePolicyRequest", context1, request)}
}

func (_c *ClientMock_SendParentClosePolicyRequest_Call) Run(run func(context1 context.Context, request Request)) *ClientMock_SendParentClosePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 Request
		if args[1] != nil {
			arg1 = args[1].(Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ClientMock_SendParentClosePolicyRequest_Call) Return(err error) *ClientMock_SendParentClosePolicyRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ClientMock_SendParentClosePolicyRequest_Call) RunAndReturn(run func(context1 context.Context, request Request) error) *ClientMock_SendParentClosePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}
