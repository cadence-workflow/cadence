// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/service/history/queuev2 (interfaces: Mitigator)
//
// Generated by this command:
//
//	mockgen -package queuev2 -destination mitigator_mock.go github.com/uber/cadence/service/history/queuev2 Mitigator
//

// Package queuev2 is a generated GoMock package.
package queuev2

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMitigator is a mock of Mitigator interface.
type MockMitigator struct {
	ctrl     *gomock.Controller
	recorder *MockMitigatorMockRecorder
	isgomock struct{}
}

// MockMitigatorMockRecorder is the mock recorder for MockMitigator.
type MockMitigatorMockRecorder struct {
	mock *MockMitigator
}

// NewMockMitigator creates a new mock instance.
func NewMockMitigator(ctrl *gomock.Controller) *MockMitigator {
	mock := &MockMitigator{ctrl: ctrl}
	mock.recorder = &MockMitigatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMitigator) EXPECT() *MockMitigatorMockRecorder {
	return m.recorder
}

// Mitigate mocks base method.
func (m *MockMitigator) Mitigate(arg0 Alert) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Mitigate", arg0)
}

// Mitigate indicates an expected call of Mitigate.
func (mr *MockMitigatorMockRecorder) Mitigate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mitigate", reflect.TypeOf((*MockMitigator)(nil).Mitigate), arg0)
}
