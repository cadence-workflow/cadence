// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/archiver/gcloud/connector (interfaces: GcloudStorageClient)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/GcloudStorageClient.go github.com/uber/cadence/common/archiver/gcloud/connector GcloudStorageClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	connector "github.com/uber/cadence/common/archiver/gcloud/connector"
	gomock "go.uber.org/mock/gomock"
)

// MockGcloudStorageClient is a mock of GcloudStorageClient interface.
type MockGcloudStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockGcloudStorageClientMockRecorder
	isgomock struct{}
}

// MockGcloudStorageClientMockRecorder is the mock recorder for MockGcloudStorageClient.
type MockGcloudStorageClientMockRecorder struct {
	mock *MockGcloudStorageClient
}

// NewMockGcloudStorageClient creates a new mock instance.
func NewMockGcloudStorageClient(ctrl *gomock.Controller) *MockGcloudStorageClient {
	mock := &MockGcloudStorageClient{ctrl: ctrl}
	mock.recorder = &MockGcloudStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcloudStorageClient) EXPECT() *MockGcloudStorageClientMockRecorder {
	return m.recorder
}

// Bucket mocks base method.
func (m *MockGcloudStorageClient) Bucket(URI string) connector.BucketHandleWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket", URI)
	ret0, _ := ret[0].(connector.BucketHandleWrapper)
	return ret0
}

// Bucket indicates an expected call of Bucket.
func (mr *MockGcloudStorageClientMockRecorder) Bucket(URI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockGcloudStorageClient)(nil).Bucket), URI)
}
