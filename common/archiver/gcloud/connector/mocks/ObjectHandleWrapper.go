// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"cloud.google.com/go/storage"
	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/archiver/gcloud/connector"
)

// NewObjectHandleWrapper creates a new instance of ObjectHandleWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObjectHandleWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObjectHandleWrapper {
	mock := &ObjectHandleWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ObjectHandleWrapper is an autogenerated mock type for the ObjectHandleWrapper type
type ObjectHandleWrapper struct {
	mock.Mock
}

type ObjectHandleWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *ObjectHandleWrapper) EXPECT() *ObjectHandleWrapper_Expecter {
	return &ObjectHandleWrapper_Expecter{mock: &_m.Mock}
}

// Attrs provides a mock function for the type ObjectHandleWrapper
func (_mock *ObjectHandleWrapper) Attrs(ctx context.Context) (*storage.ObjectAttrs, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Attrs")
	}

	var r0 *storage.ObjectAttrs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*storage.ObjectAttrs, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *storage.ObjectAttrs); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectAttrs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ObjectHandleWrapper_Attrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attrs'
type ObjectHandleWrapper_Attrs_Call struct {
	*mock.Call
}

// Attrs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ObjectHandleWrapper_Expecter) Attrs(ctx interface{}) *ObjectHandleWrapper_Attrs_Call {
	return &ObjectHandleWrapper_Attrs_Call{Call: _e.mock.On("Attrs", ctx)}
}

func (_c *ObjectHandleWrapper_Attrs_Call) Run(run func(ctx context.Context)) *ObjectHandleWrapper_Attrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ObjectHandleWrapper_Attrs_Call) Return(objectAttrs *storage.ObjectAttrs, err error) *ObjectHandleWrapper_Attrs_Call {
	_c.Call.Return(objectAttrs, err)
	return _c
}

func (_c *ObjectHandleWrapper_Attrs_Call) RunAndReturn(run func(ctx context.Context) (*storage.ObjectAttrs, error)) *ObjectHandleWrapper_Attrs_Call {
	_c.Call.Return(run)
	return _c
}

// NewReader provides a mock function for the type ObjectHandleWrapper
func (_mock *ObjectHandleWrapper) NewReader(ctx context.Context) (connector.ReaderWrapper, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewReader")
	}

	var r0 connector.ReaderWrapper
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (connector.ReaderWrapper, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) connector.ReaderWrapper); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connector.ReaderWrapper)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ObjectHandleWrapper_NewReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewReader'
type ObjectHandleWrapper_NewReader_Call struct {
	*mock.Call
}

// NewReader is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ObjectHandleWrapper_Expecter) NewReader(ctx interface{}) *ObjectHandleWrapper_NewReader_Call {
	return &ObjectHandleWrapper_NewReader_Call{Call: _e.mock.On("NewReader", ctx)}
}

func (_c *ObjectHandleWrapper_NewReader_Call) Run(run func(ctx context.Context)) *ObjectHandleWrapper_NewReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ObjectHandleWrapper_NewReader_Call) Return(readerWrapper connector.ReaderWrapper, err error) *ObjectHandleWrapper_NewReader_Call {
	_c.Call.Return(readerWrapper, err)
	return _c
}

func (_c *ObjectHandleWrapper_NewReader_Call) RunAndReturn(run func(ctx context.Context) (connector.ReaderWrapper, error)) *ObjectHandleWrapper_NewReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter provides a mock function for the type ObjectHandleWrapper
func (_mock *ObjectHandleWrapper) NewWriter(ctx context.Context) connector.WriterWrapper {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewWriter")
	}

	var r0 connector.WriterWrapper
	if returnFunc, ok := ret.Get(0).(func(context.Context) connector.WriterWrapper); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connector.WriterWrapper)
		}
	}
	return r0
}

// ObjectHandleWrapper_NewWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWriter'
type ObjectHandleWrapper_NewWriter_Call struct {
	*mock.Call
}

// NewWriter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ObjectHandleWrapper_Expecter) NewWriter(ctx interface{}) *ObjectHandleWrapper_NewWriter_Call {
	return &ObjectHandleWrapper_NewWriter_Call{Call: _e.mock.On("NewWriter", ctx)}
}

func (_c *ObjectHandleWrapper_NewWriter_Call) Run(run func(ctx context.Context)) *ObjectHandleWrapper_NewWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ObjectHandleWrapper_NewWriter_Call) Return(writerWrapper connector.WriterWrapper) *ObjectHandleWrapper_NewWriter_Call {
	_c.Call.Return(writerWrapper)
	return _c
}

func (_c *ObjectHandleWrapper_NewWriter_Call) RunAndReturn(run func(ctx context.Context) connector.WriterWrapper) *ObjectHandleWrapper_NewWriter_Call {
	_c.Call.Return(run)
	return _c
}
