// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/service/history/queuev2 (interfaces: Monitor)
//
// Generated by this command:
//
//	mockgen -package queuev2 -destination monitor_mock.go github.com/uber/cadence/service/history/queuev2 Monitor
//

// Package queuev2 is a generated GoMock package.
package queuev2

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMonitor is a mock of Monitor interface.
type MockMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorMockRecorder
	isgomock struct{}
}

// MockMonitorMockRecorder is the mock recorder for MockMonitor.
type MockMonitorMockRecorder struct {
	mock *MockMonitor
}

// NewMockMonitor creates a new mock instance.
func NewMockMonitor(ctrl *gomock.Controller) *MockMonitor {
	mock := &MockMonitor{ctrl: ctrl}
	mock.recorder = &MockMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor) EXPECT() *MockMonitorMockRecorder {
	return m.recorder
}

// GetSlicePendingTaskCount mocks base method.
func (m *MockMonitor) GetSlicePendingTaskCount(arg0 VirtualSlice) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlicePendingTaskCount", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSlicePendingTaskCount indicates an expected call of GetSlicePendingTaskCount.
func (mr *MockMonitorMockRecorder) GetSlicePendingTaskCount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlicePendingTaskCount", reflect.TypeOf((*MockMonitor)(nil).GetSlicePendingTaskCount), arg0)
}

// GetTotalPendingTaskCount mocks base method.
func (m *MockMonitor) GetTotalPendingTaskCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPendingTaskCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTotalPendingTaskCount indicates an expected call of GetTotalPendingTaskCount.
func (mr *MockMonitorMockRecorder) GetTotalPendingTaskCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPendingTaskCount", reflect.TypeOf((*MockMonitor)(nil).GetTotalPendingTaskCount))
}

// RemoveSlice mocks base method.
func (m *MockMonitor) RemoveSlice(arg0 VirtualSlice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSlice", arg0)
}

// RemoveSlice indicates an expected call of RemoveSlice.
func (mr *MockMonitorMockRecorder) RemoveSlice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSlice", reflect.TypeOf((*MockMonitor)(nil).RemoveSlice), arg0)
}

// SetSlicePendingTaskCount mocks base method.
func (m *MockMonitor) SetSlicePendingTaskCount(arg0 VirtualSlice, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSlicePendingTaskCount", arg0, arg1)
}

// SetSlicePendingTaskCount indicates an expected call of SetSlicePendingTaskCount.
func (mr *MockMonitorMockRecorder) SetSlicePendingTaskCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlicePendingTaskCount", reflect.TypeOf((*MockMonitor)(nil).SetSlicePendingTaskCount), arg0, arg1)
}
