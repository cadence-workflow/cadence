// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: uber/cadence/history/v1/service.proto

package historyv1

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// HistoryAPIYARPCClient is the YARPC client-side interface for the HistoryAPI service.
type HistoryAPIYARPCClient interface {
	StartWorkflowExecution(context.Context, *StartWorkflowExecutionRequest, ...yarpc.CallOption) (*StartWorkflowExecutionResponse, error)
	SignalWorkflowExecution(context.Context, *SignalWorkflowExecutionRequest, ...yarpc.CallOption) (*SignalWorkflowExecutionResponse, error)
	SignalWithStartWorkflowExecution(context.Context, *SignalWithStartWorkflowExecutionRequest, ...yarpc.CallOption) (*SignalWithStartWorkflowExecutionResponse, error)
	ResetWorkflowExecution(context.Context, *ResetWorkflowExecutionRequest, ...yarpc.CallOption) (*ResetWorkflowExecutionResponse, error)
	TerminateWorkflowExecution(context.Context, *TerminateWorkflowExecutionRequest, ...yarpc.CallOption) (*TerminateWorkflowExecutionResponse, error)
	DescribeWorkflowExecution(context.Context, *DescribeWorkflowExecutionRequest, ...yarpc.CallOption) (*DescribeWorkflowExecutionResponse, error)
	QueryWorkflow(context.Context, *QueryWorkflowRequest, ...yarpc.CallOption) (*QueryWorkflowResponse, error)
	ResetStickyTaskList(context.Context, *ResetStickyTaskListRequest, ...yarpc.CallOption) (*ResetStickyTaskListResponse, error)
	GetMutableState(context.Context, *GetMutableStateRequest, ...yarpc.CallOption) (*GetMutableStateResponse, error)
	PollMutableState(context.Context, *PollMutableStateRequest, ...yarpc.CallOption) (*PollMutableStateResponse, error)
	RecordDecisionTaskStarted(context.Context, *RecordDecisionTaskStartedRequest, ...yarpc.CallOption) (*RecordDecisionTaskStartedResponse, error)
	RespondDecisionTaskCompleted(context.Context, *RespondDecisionTaskCompletedRequest, ...yarpc.CallOption) (*RespondDecisionTaskCompletedResponse, error)
	RespondDecisionTaskFailed(context.Context, *RespondDecisionTaskFailedRequest, ...yarpc.CallOption) (*RespondDecisionTaskFailedResponse, error)
	RecordActivityTaskStarted(context.Context, *RecordActivityTaskStartedRequest, ...yarpc.CallOption) (*RecordActivityTaskStartedResponse, error)
	RespondActivityTaskCompleted(context.Context, *RespondActivityTaskCompletedRequest, ...yarpc.CallOption) (*RespondActivityTaskCompletedResponse, error)
	RespondActivityTaskFailed(context.Context, *RespondActivityTaskFailedRequest, ...yarpc.CallOption) (*RespondActivityTaskFailedResponse, error)
	RespondActivityTaskCanceled(context.Context, *RespondActivityTaskCanceledRequest, ...yarpc.CallOption) (*RespondActivityTaskCanceledResponse, error)
	RecordActivityTaskHeartbeat(context.Context, *RecordActivityTaskHeartbeatRequest, ...yarpc.CallOption) (*RecordActivityTaskHeartbeatResponse, error)
	RequestCancelWorkflowExecution(context.Context, *RequestCancelWorkflowExecutionRequest, ...yarpc.CallOption) (*RequestCancelWorkflowExecutionResponse, error)
	RemoveSignalMutableState(context.Context, *RemoveSignalMutableStateRequest, ...yarpc.CallOption) (*RemoveSignalMutableStateResponse, error)
	ScheduleDecisionTask(context.Context, *ScheduleDecisionTaskRequest, ...yarpc.CallOption) (*ScheduleDecisionTaskResponse, error)
	RecordChildExecutionCompleted(context.Context, *RecordChildExecutionCompletedRequest, ...yarpc.CallOption) (*RecordChildExecutionCompletedResponse, error)
	ReplicateEventsV2(context.Context, *ReplicateEventsV2Request, ...yarpc.CallOption) (*ReplicateEventsV2Response, error)
	SyncShardStatus(context.Context, *SyncShardStatusRequest, ...yarpc.CallOption) (*SyncShardStatusResponse, error)
	SyncActivity(context.Context, *SyncActivityRequest, ...yarpc.CallOption) (*SyncActivityResponse, error)
	DescribeMutableState(context.Context, *DescribeMutableStateRequest, ...yarpc.CallOption) (*DescribeMutableStateResponse, error)
	DescribeHistoryHost(context.Context, *DescribeHistoryHostRequest, ...yarpc.CallOption) (*DescribeHistoryHostResponse, error)
	CloseShard(context.Context, *CloseShardRequest, ...yarpc.CallOption) (*CloseShardResponse, error)
	RemoveTask(context.Context, *RemoveTaskRequest, ...yarpc.CallOption) (*RemoveTaskResponse, error)
	ResetQueue(context.Context, *ResetQueueRequest, ...yarpc.CallOption) (*ResetQueueResponse, error)
	DescribeQueue(context.Context, *DescribeQueueRequest, ...yarpc.CallOption) (*DescribeQueueResponse, error)
	GetReplicationMessages(context.Context, *GetReplicationMessagesRequest, ...yarpc.CallOption) (*GetReplicationMessagesResponse, error)
	GetDLQReplicationMessages(context.Context, *GetDLQReplicationMessagesRequest, ...yarpc.CallOption) (*GetDLQReplicationMessagesResponse, error)
	ReapplyEvents(context.Context, *ReapplyEventsRequest, ...yarpc.CallOption) (*ReapplyEventsResponse, error)
	RefreshWorkflowTasks(context.Context, *RefreshWorkflowTasksRequest, ...yarpc.CallOption) (*RefreshWorkflowTasksResponse, error)
	CountDLQMessages(context.Context, *CountDLQMessagesRequest, ...yarpc.CallOption) (*CountDLQMessagesResponse, error)
	ReadDLQMessages(context.Context, *ReadDLQMessagesRequest, ...yarpc.CallOption) (*ReadDLQMessagesResponse, error)
	PurgeDLQMessages(context.Context, *PurgeDLQMessagesRequest, ...yarpc.CallOption) (*PurgeDLQMessagesResponse, error)
	MergeDLQMessages(context.Context, *MergeDLQMessagesRequest, ...yarpc.CallOption) (*MergeDLQMessagesResponse, error)
	NotifyFailoverMarkers(context.Context, *NotifyFailoverMarkersRequest, ...yarpc.CallOption) (*NotifyFailoverMarkersResponse, error)
	GetCrossClusterTasks(context.Context, *GetCrossClusterTasksRequest, ...yarpc.CallOption) (*GetCrossClusterTasksResponse, error)
	RespondCrossClusterTasksCompleted(context.Context, *RespondCrossClusterTasksCompletedRequest, ...yarpc.CallOption) (*RespondCrossClusterTasksCompletedResponse, error)
	GetFailoverInfo(context.Context, *GetFailoverInfoRequest, ...yarpc.CallOption) (*GetFailoverInfoResponse, error)
}

func newHistoryAPIYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) HistoryAPIYARPCClient {
	return &_HistoryAPIYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.cadence.history.v1.HistoryAPI",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewHistoryAPIYARPCClient builds a new YARPC client for the HistoryAPI service.
func NewHistoryAPIYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) HistoryAPIYARPCClient {
	return newHistoryAPIYARPCClient(clientConfig, nil, options...)
}

// HistoryAPIYARPCServer is the YARPC server-side interface for the HistoryAPI service.
type HistoryAPIYARPCServer interface {
	StartWorkflowExecution(context.Context, *StartWorkflowExecutionRequest) (*StartWorkflowExecutionResponse, error)
	SignalWorkflowExecution(context.Context, *SignalWorkflowExecutionRequest) (*SignalWorkflowExecutionResponse, error)
	SignalWithStartWorkflowExecution(context.Context, *SignalWithStartWorkflowExecutionRequest) (*SignalWithStartWorkflowExecutionResponse, error)
	ResetWorkflowExecution(context.Context, *ResetWorkflowExecutionRequest) (*ResetWorkflowExecutionResponse, error)
	TerminateWorkflowExecution(context.Context, *TerminateWorkflowExecutionRequest) (*TerminateWorkflowExecutionResponse, error)
	DescribeWorkflowExecution(context.Context, *DescribeWorkflowExecutionRequest) (*DescribeWorkflowExecutionResponse, error)
	QueryWorkflow(context.Context, *QueryWorkflowRequest) (*QueryWorkflowResponse, error)
	ResetStickyTaskList(context.Context, *ResetStickyTaskListRequest) (*ResetStickyTaskListResponse, error)
	GetMutableState(context.Context, *GetMutableStateRequest) (*GetMutableStateResponse, error)
	PollMutableState(context.Context, *PollMutableStateRequest) (*PollMutableStateResponse, error)
	RecordDecisionTaskStarted(context.Context, *RecordDecisionTaskStartedRequest) (*RecordDecisionTaskStartedResponse, error)
	RespondDecisionTaskCompleted(context.Context, *RespondDecisionTaskCompletedRequest) (*RespondDecisionTaskCompletedResponse, error)
	RespondDecisionTaskFailed(context.Context, *RespondDecisionTaskFailedRequest) (*RespondDecisionTaskFailedResponse, error)
	RecordActivityTaskStarted(context.Context, *RecordActivityTaskStartedRequest) (*RecordActivityTaskStartedResponse, error)
	RespondActivityTaskCompleted(context.Context, *RespondActivityTaskCompletedRequest) (*RespondActivityTaskCompletedResponse, error)
	RespondActivityTaskFailed(context.Context, *RespondActivityTaskFailedRequest) (*RespondActivityTaskFailedResponse, error)
	RespondActivityTaskCanceled(context.Context, *RespondActivityTaskCanceledRequest) (*RespondActivityTaskCanceledResponse, error)
	RecordActivityTaskHeartbeat(context.Context, *RecordActivityTaskHeartbeatRequest) (*RecordActivityTaskHeartbeatResponse, error)
	RequestCancelWorkflowExecution(context.Context, *RequestCancelWorkflowExecutionRequest) (*RequestCancelWorkflowExecutionResponse, error)
	RemoveSignalMutableState(context.Context, *RemoveSignalMutableStateRequest) (*RemoveSignalMutableStateResponse, error)
	ScheduleDecisionTask(context.Context, *ScheduleDecisionTaskRequest) (*ScheduleDecisionTaskResponse, error)
	RecordChildExecutionCompleted(context.Context, *RecordChildExecutionCompletedRequest) (*RecordChildExecutionCompletedResponse, error)
	ReplicateEventsV2(context.Context, *ReplicateEventsV2Request) (*ReplicateEventsV2Response, error)
	SyncShardStatus(context.Context, *SyncShardStatusRequest) (*SyncShardStatusResponse, error)
	SyncActivity(context.Context, *SyncActivityRequest) (*SyncActivityResponse, error)
	DescribeMutableState(context.Context, *DescribeMutableStateRequest) (*DescribeMutableStateResponse, error)
	DescribeHistoryHost(context.Context, *DescribeHistoryHostRequest) (*DescribeHistoryHostResponse, error)
	CloseShard(context.Context, *CloseShardRequest) (*CloseShardResponse, error)
	RemoveTask(context.Context, *RemoveTaskRequest) (*RemoveTaskResponse, error)
	ResetQueue(context.Context, *ResetQueueRequest) (*ResetQueueResponse, error)
	DescribeQueue(context.Context, *DescribeQueueRequest) (*DescribeQueueResponse, error)
	GetReplicationMessages(context.Context, *GetReplicationMessagesRequest) (*GetReplicationMessagesResponse, error)
	GetDLQReplicationMessages(context.Context, *GetDLQReplicationMessagesRequest) (*GetDLQReplicationMessagesResponse, error)
	ReapplyEvents(context.Context, *ReapplyEventsRequest) (*ReapplyEventsResponse, error)
	RefreshWorkflowTasks(context.Context, *RefreshWorkflowTasksRequest) (*RefreshWorkflowTasksResponse, error)
	CountDLQMessages(context.Context, *CountDLQMessagesRequest) (*CountDLQMessagesResponse, error)
	ReadDLQMessages(context.Context, *ReadDLQMessagesRequest) (*ReadDLQMessagesResponse, error)
	PurgeDLQMessages(context.Context, *PurgeDLQMessagesRequest) (*PurgeDLQMessagesResponse, error)
	MergeDLQMessages(context.Context, *MergeDLQMessagesRequest) (*MergeDLQMessagesResponse, error)
	NotifyFailoverMarkers(context.Context, *NotifyFailoverMarkersRequest) (*NotifyFailoverMarkersResponse, error)
	GetCrossClusterTasks(context.Context, *GetCrossClusterTasksRequest) (*GetCrossClusterTasksResponse, error)
	RespondCrossClusterTasksCompleted(context.Context, *RespondCrossClusterTasksCompletedRequest) (*RespondCrossClusterTasksCompletedResponse, error)
	GetFailoverInfo(context.Context, *GetFailoverInfoRequest) (*GetFailoverInfoResponse, error)
}

type buildHistoryAPIYARPCProceduresParams struct {
	Server      HistoryAPIYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildHistoryAPIYARPCProcedures(params buildHistoryAPIYARPCProceduresParams) []transport.Procedure {
	handler := &_HistoryAPIYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.cadence.history.v1.HistoryAPI",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "StartWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.StartWorkflowExecution,
							NewRequest:  newHistoryAPIServiceStartWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SignalWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SignalWorkflowExecution,
							NewRequest:  newHistoryAPIServiceSignalWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SignalWithStartWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SignalWithStartWorkflowExecution,
							NewRequest:  newHistoryAPIServiceSignalWithStartWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResetWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResetWorkflowExecution,
							NewRequest:  newHistoryAPIServiceResetWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "TerminateWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.TerminateWorkflowExecution,
							NewRequest:  newHistoryAPIServiceTerminateWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeWorkflowExecution,
							NewRequest:  newHistoryAPIServiceDescribeWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "QueryWorkflow",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.QueryWorkflow,
							NewRequest:  newHistoryAPIServiceQueryWorkflowYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResetStickyTaskList",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResetStickyTaskList,
							NewRequest:  newHistoryAPIServiceResetStickyTaskListYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetMutableState",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetMutableState,
							NewRequest:  newHistoryAPIServiceGetMutableStateYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "PollMutableState",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.PollMutableState,
							NewRequest:  newHistoryAPIServicePollMutableStateYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RecordDecisionTaskStarted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RecordDecisionTaskStarted,
							NewRequest:  newHistoryAPIServiceRecordDecisionTaskStartedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondDecisionTaskCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondDecisionTaskCompleted,
							NewRequest:  newHistoryAPIServiceRespondDecisionTaskCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondDecisionTaskFailed",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondDecisionTaskFailed,
							NewRequest:  newHistoryAPIServiceRespondDecisionTaskFailedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RecordActivityTaskStarted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RecordActivityTaskStarted,
							NewRequest:  newHistoryAPIServiceRecordActivityTaskStartedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCompleted,
							NewRequest:  newHistoryAPIServiceRespondActivityTaskCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskFailed",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskFailed,
							NewRequest:  newHistoryAPIServiceRespondActivityTaskFailedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCanceled",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCanceled,
							NewRequest:  newHistoryAPIServiceRespondActivityTaskCanceledYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RecordActivityTaskHeartbeat",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RecordActivityTaskHeartbeat,
							NewRequest:  newHistoryAPIServiceRecordActivityTaskHeartbeatYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RequestCancelWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RequestCancelWorkflowExecution,
							NewRequest:  newHistoryAPIServiceRequestCancelWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RemoveSignalMutableState",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RemoveSignalMutableState,
							NewRequest:  newHistoryAPIServiceRemoveSignalMutableStateYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ScheduleDecisionTask",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ScheduleDecisionTask,
							NewRequest:  newHistoryAPIServiceScheduleDecisionTaskYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RecordChildExecutionCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RecordChildExecutionCompleted,
							NewRequest:  newHistoryAPIServiceRecordChildExecutionCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ReplicateEventsV2",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ReplicateEventsV2,
							NewRequest:  newHistoryAPIServiceReplicateEventsV2YARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SyncShardStatus",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SyncShardStatus,
							NewRequest:  newHistoryAPIServiceSyncShardStatusYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SyncActivity",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SyncActivity,
							NewRequest:  newHistoryAPIServiceSyncActivityYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeMutableState",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeMutableState,
							NewRequest:  newHistoryAPIServiceDescribeMutableStateYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeHistoryHost",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeHistoryHost,
							NewRequest:  newHistoryAPIServiceDescribeHistoryHostYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "CloseShard",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.CloseShard,
							NewRequest:  newHistoryAPIServiceCloseShardYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RemoveTask",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RemoveTask,
							NewRequest:  newHistoryAPIServiceRemoveTaskYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResetQueue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResetQueue,
							NewRequest:  newHistoryAPIServiceResetQueueYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeQueue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeQueue,
							NewRequest:  newHistoryAPIServiceDescribeQueueYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetReplicationMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetReplicationMessages,
							NewRequest:  newHistoryAPIServiceGetReplicationMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetDLQReplicationMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetDLQReplicationMessages,
							NewRequest:  newHistoryAPIServiceGetDLQReplicationMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ReapplyEvents",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ReapplyEvents,
							NewRequest:  newHistoryAPIServiceReapplyEventsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RefreshWorkflowTasks",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RefreshWorkflowTasks,
							NewRequest:  newHistoryAPIServiceRefreshWorkflowTasksYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "CountDLQMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.CountDLQMessages,
							NewRequest:  newHistoryAPIServiceCountDLQMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ReadDLQMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ReadDLQMessages,
							NewRequest:  newHistoryAPIServiceReadDLQMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "PurgeDLQMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.PurgeDLQMessages,
							NewRequest:  newHistoryAPIServicePurgeDLQMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "MergeDLQMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.MergeDLQMessages,
							NewRequest:  newHistoryAPIServiceMergeDLQMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "NotifyFailoverMarkers",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.NotifyFailoverMarkers,
							NewRequest:  newHistoryAPIServiceNotifyFailoverMarkersYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetCrossClusterTasks",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetCrossClusterTasks,
							NewRequest:  newHistoryAPIServiceGetCrossClusterTasksYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondCrossClusterTasksCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondCrossClusterTasksCompleted,
							NewRequest:  newHistoryAPIServiceRespondCrossClusterTasksCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetFailoverInfo",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetFailoverInfo,
							NewRequest:  newHistoryAPIServiceGetFailoverInfoYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// BuildHistoryAPIYARPCProcedures prepares an implementation of the HistoryAPI service for YARPC registration.
func BuildHistoryAPIYARPCProcedures(server HistoryAPIYARPCServer) []transport.Procedure {
	return buildHistoryAPIYARPCProcedures(buildHistoryAPIYARPCProceduresParams{Server: server})
}

// FxHistoryAPIYARPCClientParams defines the input
// for NewFxHistoryAPIYARPCClient. It provides the
// paramaters to get a HistoryAPIYARPCClient in an
// Fx application.
type FxHistoryAPIYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxHistoryAPIYARPCClientResult defines the output
// of NewFxHistoryAPIYARPCClient. It provides a
// HistoryAPIYARPCClient to an Fx application.
type FxHistoryAPIYARPCClientResult struct {
	fx.Out

	Client HistoryAPIYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxHistoryAPIYARPCClient provides a HistoryAPIYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    historyv1.NewFxHistoryAPIYARPCClient("service-name"),
//    ...
//  )
func NewFxHistoryAPIYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxHistoryAPIYARPCClientParams) FxHistoryAPIYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxHistoryAPIYARPCClientResult{
			Client: newHistoryAPIYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxHistoryAPIYARPCProceduresParams defines the input
// for NewFxHistoryAPIYARPCProcedures. It provides the
// paramaters to get HistoryAPIYARPCServer procedures in an
// Fx application.
type FxHistoryAPIYARPCProceduresParams struct {
	fx.In

	Server      HistoryAPIYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxHistoryAPIYARPCProceduresResult defines the output
// of NewFxHistoryAPIYARPCProcedures. It provides
// HistoryAPIYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxHistoryAPIYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxHistoryAPIYARPCProcedures provides HistoryAPIYARPCServer procedures to an Fx application.
// It expects a HistoryAPIYARPCServer to be present in the container.
//
//  fx.Provide(
//    historyv1.NewFxHistoryAPIYARPCProcedures(),
//    ...
//  )
func NewFxHistoryAPIYARPCProcedures() interface{} {
	return func(params FxHistoryAPIYARPCProceduresParams) FxHistoryAPIYARPCProceduresResult {
		return FxHistoryAPIYARPCProceduresResult{
			Procedures: buildHistoryAPIYARPCProcedures(buildHistoryAPIYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.cadence.history.v1.HistoryAPI",
				FileDescriptors: yarpcFileDescriptorClosurefee8ff76963a38ed,
			},
		}
	}
}

type _HistoryAPIYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_HistoryAPIYARPCCaller) StartWorkflowExecution(ctx context.Context, request *StartWorkflowExecutionRequest, options ...yarpc.CallOption) (*StartWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "StartWorkflowExecution", request, newHistoryAPIServiceStartWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*StartWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceStartWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) SignalWorkflowExecution(ctx context.Context, request *SignalWorkflowExecutionRequest, options ...yarpc.CallOption) (*SignalWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SignalWorkflowExecution", request, newHistoryAPIServiceSignalWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SignalWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceSignalWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) SignalWithStartWorkflowExecution(ctx context.Context, request *SignalWithStartWorkflowExecutionRequest, options ...yarpc.CallOption) (*SignalWithStartWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SignalWithStartWorkflowExecution", request, newHistoryAPIServiceSignalWithStartWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SignalWithStartWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceSignalWithStartWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) ResetWorkflowExecution(ctx context.Context, request *ResetWorkflowExecutionRequest, options ...yarpc.CallOption) (*ResetWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResetWorkflowExecution", request, newHistoryAPIServiceResetWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResetWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceResetWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) TerminateWorkflowExecution(ctx context.Context, request *TerminateWorkflowExecutionRequest, options ...yarpc.CallOption) (*TerminateWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "TerminateWorkflowExecution", request, newHistoryAPIServiceTerminateWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*TerminateWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceTerminateWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) DescribeWorkflowExecution(ctx context.Context, request *DescribeWorkflowExecutionRequest, options ...yarpc.CallOption) (*DescribeWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeWorkflowExecution", request, newHistoryAPIServiceDescribeWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceDescribeWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) QueryWorkflow(ctx context.Context, request *QueryWorkflowRequest, options ...yarpc.CallOption) (*QueryWorkflowResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "QueryWorkflow", request, newHistoryAPIServiceQueryWorkflowYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*QueryWorkflowResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceQueryWorkflowYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) ResetStickyTaskList(ctx context.Context, request *ResetStickyTaskListRequest, options ...yarpc.CallOption) (*ResetStickyTaskListResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResetStickyTaskList", request, newHistoryAPIServiceResetStickyTaskListYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResetStickyTaskListResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceResetStickyTaskListYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) GetMutableState(ctx context.Context, request *GetMutableStateRequest, options ...yarpc.CallOption) (*GetMutableStateResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetMutableState", request, newHistoryAPIServiceGetMutableStateYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetMutableStateResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceGetMutableStateYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) PollMutableState(ctx context.Context, request *PollMutableStateRequest, options ...yarpc.CallOption) (*PollMutableStateResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "PollMutableState", request, newHistoryAPIServicePollMutableStateYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*PollMutableStateResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServicePollMutableStateYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RecordDecisionTaskStarted(ctx context.Context, request *RecordDecisionTaskStartedRequest, options ...yarpc.CallOption) (*RecordDecisionTaskStartedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RecordDecisionTaskStarted", request, newHistoryAPIServiceRecordDecisionTaskStartedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RecordDecisionTaskStartedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRecordDecisionTaskStartedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RespondDecisionTaskCompleted(ctx context.Context, request *RespondDecisionTaskCompletedRequest, options ...yarpc.CallOption) (*RespondDecisionTaskCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondDecisionTaskCompleted", request, newHistoryAPIServiceRespondDecisionTaskCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondDecisionTaskCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRespondDecisionTaskCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RespondDecisionTaskFailed(ctx context.Context, request *RespondDecisionTaskFailedRequest, options ...yarpc.CallOption) (*RespondDecisionTaskFailedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondDecisionTaskFailed", request, newHistoryAPIServiceRespondDecisionTaskFailedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondDecisionTaskFailedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRespondDecisionTaskFailedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RecordActivityTaskStarted(ctx context.Context, request *RecordActivityTaskStartedRequest, options ...yarpc.CallOption) (*RecordActivityTaskStartedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RecordActivityTaskStarted", request, newHistoryAPIServiceRecordActivityTaskStartedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RecordActivityTaskStartedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRecordActivityTaskStartedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RespondActivityTaskCompleted(ctx context.Context, request *RespondActivityTaskCompletedRequest, options ...yarpc.CallOption) (*RespondActivityTaskCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCompleted", request, newHistoryAPIServiceRespondActivityTaskCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRespondActivityTaskCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RespondActivityTaskFailed(ctx context.Context, request *RespondActivityTaskFailedRequest, options ...yarpc.CallOption) (*RespondActivityTaskFailedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskFailed", request, newHistoryAPIServiceRespondActivityTaskFailedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskFailedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRespondActivityTaskFailedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RespondActivityTaskCanceled(ctx context.Context, request *RespondActivityTaskCanceledRequest, options ...yarpc.CallOption) (*RespondActivityTaskCanceledResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCanceled", request, newHistoryAPIServiceRespondActivityTaskCanceledYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCanceledResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRespondActivityTaskCanceledYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RecordActivityTaskHeartbeat(ctx context.Context, request *RecordActivityTaskHeartbeatRequest, options ...yarpc.CallOption) (*RecordActivityTaskHeartbeatResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RecordActivityTaskHeartbeat", request, newHistoryAPIServiceRecordActivityTaskHeartbeatYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RecordActivityTaskHeartbeatResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRecordActivityTaskHeartbeatYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RequestCancelWorkflowExecution(ctx context.Context, request *RequestCancelWorkflowExecutionRequest, options ...yarpc.CallOption) (*RequestCancelWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RequestCancelWorkflowExecution", request, newHistoryAPIServiceRequestCancelWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RequestCancelWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRequestCancelWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RemoveSignalMutableState(ctx context.Context, request *RemoveSignalMutableStateRequest, options ...yarpc.CallOption) (*RemoveSignalMutableStateResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RemoveSignalMutableState", request, newHistoryAPIServiceRemoveSignalMutableStateYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RemoveSignalMutableStateResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRemoveSignalMutableStateYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) ScheduleDecisionTask(ctx context.Context, request *ScheduleDecisionTaskRequest, options ...yarpc.CallOption) (*ScheduleDecisionTaskResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ScheduleDecisionTask", request, newHistoryAPIServiceScheduleDecisionTaskYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ScheduleDecisionTaskResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceScheduleDecisionTaskYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RecordChildExecutionCompleted(ctx context.Context, request *RecordChildExecutionCompletedRequest, options ...yarpc.CallOption) (*RecordChildExecutionCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RecordChildExecutionCompleted", request, newHistoryAPIServiceRecordChildExecutionCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RecordChildExecutionCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRecordChildExecutionCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) ReplicateEventsV2(ctx context.Context, request *ReplicateEventsV2Request, options ...yarpc.CallOption) (*ReplicateEventsV2Response, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ReplicateEventsV2", request, newHistoryAPIServiceReplicateEventsV2YARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ReplicateEventsV2Response)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceReplicateEventsV2YARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) SyncShardStatus(ctx context.Context, request *SyncShardStatusRequest, options ...yarpc.CallOption) (*SyncShardStatusResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SyncShardStatus", request, newHistoryAPIServiceSyncShardStatusYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SyncShardStatusResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceSyncShardStatusYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) SyncActivity(ctx context.Context, request *SyncActivityRequest, options ...yarpc.CallOption) (*SyncActivityResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SyncActivity", request, newHistoryAPIServiceSyncActivityYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SyncActivityResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceSyncActivityYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) DescribeMutableState(ctx context.Context, request *DescribeMutableStateRequest, options ...yarpc.CallOption) (*DescribeMutableStateResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeMutableState", request, newHistoryAPIServiceDescribeMutableStateYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeMutableStateResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceDescribeMutableStateYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) DescribeHistoryHost(ctx context.Context, request *DescribeHistoryHostRequest, options ...yarpc.CallOption) (*DescribeHistoryHostResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeHistoryHost", request, newHistoryAPIServiceDescribeHistoryHostYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeHistoryHostResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceDescribeHistoryHostYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) CloseShard(ctx context.Context, request *CloseShardRequest, options ...yarpc.CallOption) (*CloseShardResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "CloseShard", request, newHistoryAPIServiceCloseShardYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*CloseShardResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceCloseShardYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RemoveTask(ctx context.Context, request *RemoveTaskRequest, options ...yarpc.CallOption) (*RemoveTaskResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RemoveTask", request, newHistoryAPIServiceRemoveTaskYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RemoveTaskResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRemoveTaskYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) ResetQueue(ctx context.Context, request *ResetQueueRequest, options ...yarpc.CallOption) (*ResetQueueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResetQueue", request, newHistoryAPIServiceResetQueueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResetQueueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceResetQueueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) DescribeQueue(ctx context.Context, request *DescribeQueueRequest, options ...yarpc.CallOption) (*DescribeQueueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeQueue", request, newHistoryAPIServiceDescribeQueueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeQueueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceDescribeQueueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) GetReplicationMessages(ctx context.Context, request *GetReplicationMessagesRequest, options ...yarpc.CallOption) (*GetReplicationMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetReplicationMessages", request, newHistoryAPIServiceGetReplicationMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetReplicationMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceGetReplicationMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) GetDLQReplicationMessages(ctx context.Context, request *GetDLQReplicationMessagesRequest, options ...yarpc.CallOption) (*GetDLQReplicationMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetDLQReplicationMessages", request, newHistoryAPIServiceGetDLQReplicationMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetDLQReplicationMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceGetDLQReplicationMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) ReapplyEvents(ctx context.Context, request *ReapplyEventsRequest, options ...yarpc.CallOption) (*ReapplyEventsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ReapplyEvents", request, newHistoryAPIServiceReapplyEventsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ReapplyEventsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceReapplyEventsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RefreshWorkflowTasks(ctx context.Context, request *RefreshWorkflowTasksRequest, options ...yarpc.CallOption) (*RefreshWorkflowTasksResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RefreshWorkflowTasks", request, newHistoryAPIServiceRefreshWorkflowTasksYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RefreshWorkflowTasksResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRefreshWorkflowTasksYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) CountDLQMessages(ctx context.Context, request *CountDLQMessagesRequest, options ...yarpc.CallOption) (*CountDLQMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "CountDLQMessages", request, newHistoryAPIServiceCountDLQMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*CountDLQMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceCountDLQMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) ReadDLQMessages(ctx context.Context, request *ReadDLQMessagesRequest, options ...yarpc.CallOption) (*ReadDLQMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ReadDLQMessages", request, newHistoryAPIServiceReadDLQMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ReadDLQMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceReadDLQMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) PurgeDLQMessages(ctx context.Context, request *PurgeDLQMessagesRequest, options ...yarpc.CallOption) (*PurgeDLQMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "PurgeDLQMessages", request, newHistoryAPIServicePurgeDLQMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*PurgeDLQMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServicePurgeDLQMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) MergeDLQMessages(ctx context.Context, request *MergeDLQMessagesRequest, options ...yarpc.CallOption) (*MergeDLQMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "MergeDLQMessages", request, newHistoryAPIServiceMergeDLQMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*MergeDLQMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceMergeDLQMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) NotifyFailoverMarkers(ctx context.Context, request *NotifyFailoverMarkersRequest, options ...yarpc.CallOption) (*NotifyFailoverMarkersResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "NotifyFailoverMarkers", request, newHistoryAPIServiceNotifyFailoverMarkersYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*NotifyFailoverMarkersResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceNotifyFailoverMarkersYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) GetCrossClusterTasks(ctx context.Context, request *GetCrossClusterTasksRequest, options ...yarpc.CallOption) (*GetCrossClusterTasksResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetCrossClusterTasks", request, newHistoryAPIServiceGetCrossClusterTasksYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetCrossClusterTasksResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceGetCrossClusterTasksYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) RespondCrossClusterTasksCompleted(ctx context.Context, request *RespondCrossClusterTasksCompletedRequest, options ...yarpc.CallOption) (*RespondCrossClusterTasksCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondCrossClusterTasksCompleted", request, newHistoryAPIServiceRespondCrossClusterTasksCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondCrossClusterTasksCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceRespondCrossClusterTasksCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HistoryAPIYARPCCaller) GetFailoverInfo(ctx context.Context, request *GetFailoverInfoRequest, options ...yarpc.CallOption) (*GetFailoverInfoResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetFailoverInfo", request, newHistoryAPIServiceGetFailoverInfoYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetFailoverInfoResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHistoryAPIServiceGetFailoverInfoYARPCResponse, responseMessage)
	}
	return response, err
}

type _HistoryAPIYARPCHandler struct {
	server HistoryAPIYARPCServer
}

func (h *_HistoryAPIYARPCHandler) StartWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *StartWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*StartWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceStartWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.StartWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) SignalWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SignalWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SignalWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceSignalWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SignalWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) SignalWithStartWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SignalWithStartWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SignalWithStartWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceSignalWithStartWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SignalWithStartWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) ResetWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResetWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResetWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceResetWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResetWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) TerminateWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *TerminateWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*TerminateWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceTerminateWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.TerminateWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) DescribeWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceDescribeWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) QueryWorkflow(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *QueryWorkflowRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*QueryWorkflowRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceQueryWorkflowYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.QueryWorkflow(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) ResetStickyTaskList(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResetStickyTaskListRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResetStickyTaskListRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceResetStickyTaskListYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResetStickyTaskList(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) GetMutableState(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetMutableStateRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetMutableStateRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceGetMutableStateYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetMutableState(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) PollMutableState(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *PollMutableStateRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*PollMutableStateRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServicePollMutableStateYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.PollMutableState(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RecordDecisionTaskStarted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RecordDecisionTaskStartedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RecordDecisionTaskStartedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRecordDecisionTaskStartedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RecordDecisionTaskStarted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RespondDecisionTaskCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondDecisionTaskCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondDecisionTaskCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRespondDecisionTaskCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondDecisionTaskCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RespondDecisionTaskFailed(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondDecisionTaskFailedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondDecisionTaskFailedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRespondDecisionTaskFailedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondDecisionTaskFailed(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RecordActivityTaskStarted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RecordActivityTaskStartedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RecordActivityTaskStartedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRecordActivityTaskStartedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RecordActivityTaskStarted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RespondActivityTaskCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRespondActivityTaskCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RespondActivityTaskFailed(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskFailedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskFailedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRespondActivityTaskFailedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskFailed(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RespondActivityTaskCanceled(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCanceledRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCanceledRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRespondActivityTaskCanceledYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCanceled(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RecordActivityTaskHeartbeat(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RecordActivityTaskHeartbeatRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RecordActivityTaskHeartbeatRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRecordActivityTaskHeartbeatYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RecordActivityTaskHeartbeat(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RequestCancelWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RequestCancelWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RequestCancelWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRequestCancelWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RequestCancelWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RemoveSignalMutableState(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RemoveSignalMutableStateRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RemoveSignalMutableStateRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRemoveSignalMutableStateYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RemoveSignalMutableState(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) ScheduleDecisionTask(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ScheduleDecisionTaskRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ScheduleDecisionTaskRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceScheduleDecisionTaskYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ScheduleDecisionTask(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RecordChildExecutionCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RecordChildExecutionCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RecordChildExecutionCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRecordChildExecutionCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RecordChildExecutionCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) ReplicateEventsV2(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ReplicateEventsV2Request
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ReplicateEventsV2Request)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceReplicateEventsV2YARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ReplicateEventsV2(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) SyncShardStatus(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SyncShardStatusRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SyncShardStatusRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceSyncShardStatusYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SyncShardStatus(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) SyncActivity(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SyncActivityRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SyncActivityRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceSyncActivityYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SyncActivity(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) DescribeMutableState(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeMutableStateRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeMutableStateRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceDescribeMutableStateYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeMutableState(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) DescribeHistoryHost(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeHistoryHostRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeHistoryHostRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceDescribeHistoryHostYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeHistoryHost(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) CloseShard(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *CloseShardRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*CloseShardRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceCloseShardYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.CloseShard(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RemoveTask(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RemoveTaskRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RemoveTaskRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRemoveTaskYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RemoveTask(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) ResetQueue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResetQueueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResetQueueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceResetQueueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResetQueue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) DescribeQueue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeQueueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeQueueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceDescribeQueueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeQueue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) GetReplicationMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetReplicationMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetReplicationMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceGetReplicationMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetReplicationMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) GetDLQReplicationMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetDLQReplicationMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetDLQReplicationMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceGetDLQReplicationMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetDLQReplicationMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) ReapplyEvents(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ReapplyEventsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ReapplyEventsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceReapplyEventsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ReapplyEvents(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RefreshWorkflowTasks(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RefreshWorkflowTasksRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RefreshWorkflowTasksRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRefreshWorkflowTasksYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RefreshWorkflowTasks(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) CountDLQMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *CountDLQMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*CountDLQMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceCountDLQMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.CountDLQMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) ReadDLQMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ReadDLQMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ReadDLQMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceReadDLQMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ReadDLQMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) PurgeDLQMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *PurgeDLQMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*PurgeDLQMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServicePurgeDLQMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.PurgeDLQMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) MergeDLQMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *MergeDLQMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*MergeDLQMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceMergeDLQMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.MergeDLQMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) NotifyFailoverMarkers(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *NotifyFailoverMarkersRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*NotifyFailoverMarkersRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceNotifyFailoverMarkersYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.NotifyFailoverMarkers(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) GetCrossClusterTasks(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetCrossClusterTasksRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetCrossClusterTasksRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceGetCrossClusterTasksYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetCrossClusterTasks(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) RespondCrossClusterTasksCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondCrossClusterTasksCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondCrossClusterTasksCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceRespondCrossClusterTasksCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondCrossClusterTasksCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HistoryAPIYARPCHandler) GetFailoverInfo(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetFailoverInfoRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetFailoverInfoRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHistoryAPIServiceGetFailoverInfoYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetFailoverInfo(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newHistoryAPIServiceStartWorkflowExecutionYARPCRequest() proto.Message {
	return &StartWorkflowExecutionRequest{}
}

func newHistoryAPIServiceStartWorkflowExecutionYARPCResponse() proto.Message {
	return &StartWorkflowExecutionResponse{}
}

func newHistoryAPIServiceSignalWorkflowExecutionYARPCRequest() proto.Message {
	return &SignalWorkflowExecutionRequest{}
}

func newHistoryAPIServiceSignalWorkflowExecutionYARPCResponse() proto.Message {
	return &SignalWorkflowExecutionResponse{}
}

func newHistoryAPIServiceSignalWithStartWorkflowExecutionYARPCRequest() proto.Message {
	return &SignalWithStartWorkflowExecutionRequest{}
}

func newHistoryAPIServiceSignalWithStartWorkflowExecutionYARPCResponse() proto.Message {
	return &SignalWithStartWorkflowExecutionResponse{}
}

func newHistoryAPIServiceResetWorkflowExecutionYARPCRequest() proto.Message {
	return &ResetWorkflowExecutionRequest{}
}

func newHistoryAPIServiceResetWorkflowExecutionYARPCResponse() proto.Message {
	return &ResetWorkflowExecutionResponse{}
}

func newHistoryAPIServiceTerminateWorkflowExecutionYARPCRequest() proto.Message {
	return &TerminateWorkflowExecutionRequest{}
}

func newHistoryAPIServiceTerminateWorkflowExecutionYARPCResponse() proto.Message {
	return &TerminateWorkflowExecutionResponse{}
}

func newHistoryAPIServiceDescribeWorkflowExecutionYARPCRequest() proto.Message {
	return &DescribeWorkflowExecutionRequest{}
}

func newHistoryAPIServiceDescribeWorkflowExecutionYARPCResponse() proto.Message {
	return &DescribeWorkflowExecutionResponse{}
}

func newHistoryAPIServiceQueryWorkflowYARPCRequest() proto.Message {
	return &QueryWorkflowRequest{}
}

func newHistoryAPIServiceQueryWorkflowYARPCResponse() proto.Message {
	return &QueryWorkflowResponse{}
}

func newHistoryAPIServiceResetStickyTaskListYARPCRequest() proto.Message {
	return &ResetStickyTaskListRequest{}
}

func newHistoryAPIServiceResetStickyTaskListYARPCResponse() proto.Message {
	return &ResetStickyTaskListResponse{}
}

func newHistoryAPIServiceGetMutableStateYARPCRequest() proto.Message {
	return &GetMutableStateRequest{}
}

func newHistoryAPIServiceGetMutableStateYARPCResponse() proto.Message {
	return &GetMutableStateResponse{}
}

func newHistoryAPIServicePollMutableStateYARPCRequest() proto.Message {
	return &PollMutableStateRequest{}
}

func newHistoryAPIServicePollMutableStateYARPCResponse() proto.Message {
	return &PollMutableStateResponse{}
}

func newHistoryAPIServiceRecordDecisionTaskStartedYARPCRequest() proto.Message {
	return &RecordDecisionTaskStartedRequest{}
}

func newHistoryAPIServiceRecordDecisionTaskStartedYARPCResponse() proto.Message {
	return &RecordDecisionTaskStartedResponse{}
}

func newHistoryAPIServiceRespondDecisionTaskCompletedYARPCRequest() proto.Message {
	return &RespondDecisionTaskCompletedRequest{}
}

func newHistoryAPIServiceRespondDecisionTaskCompletedYARPCResponse() proto.Message {
	return &RespondDecisionTaskCompletedResponse{}
}

func newHistoryAPIServiceRespondDecisionTaskFailedYARPCRequest() proto.Message {
	return &RespondDecisionTaskFailedRequest{}
}

func newHistoryAPIServiceRespondDecisionTaskFailedYARPCResponse() proto.Message {
	return &RespondDecisionTaskFailedResponse{}
}

func newHistoryAPIServiceRecordActivityTaskStartedYARPCRequest() proto.Message {
	return &RecordActivityTaskStartedRequest{}
}

func newHistoryAPIServiceRecordActivityTaskStartedYARPCResponse() proto.Message {
	return &RecordActivityTaskStartedResponse{}
}

func newHistoryAPIServiceRespondActivityTaskCompletedYARPCRequest() proto.Message {
	return &RespondActivityTaskCompletedRequest{}
}

func newHistoryAPIServiceRespondActivityTaskCompletedYARPCResponse() proto.Message {
	return &RespondActivityTaskCompletedResponse{}
}

func newHistoryAPIServiceRespondActivityTaskFailedYARPCRequest() proto.Message {
	return &RespondActivityTaskFailedRequest{}
}

func newHistoryAPIServiceRespondActivityTaskFailedYARPCResponse() proto.Message {
	return &RespondActivityTaskFailedResponse{}
}

func newHistoryAPIServiceRespondActivityTaskCanceledYARPCRequest() proto.Message {
	return &RespondActivityTaskCanceledRequest{}
}

func newHistoryAPIServiceRespondActivityTaskCanceledYARPCResponse() proto.Message {
	return &RespondActivityTaskCanceledResponse{}
}

func newHistoryAPIServiceRecordActivityTaskHeartbeatYARPCRequest() proto.Message {
	return &RecordActivityTaskHeartbeatRequest{}
}

func newHistoryAPIServiceRecordActivityTaskHeartbeatYARPCResponse() proto.Message {
	return &RecordActivityTaskHeartbeatResponse{}
}

func newHistoryAPIServiceRequestCancelWorkflowExecutionYARPCRequest() proto.Message {
	return &RequestCancelWorkflowExecutionRequest{}
}

func newHistoryAPIServiceRequestCancelWorkflowExecutionYARPCResponse() proto.Message {
	return &RequestCancelWorkflowExecutionResponse{}
}

func newHistoryAPIServiceRemoveSignalMutableStateYARPCRequest() proto.Message {
	return &RemoveSignalMutableStateRequest{}
}

func newHistoryAPIServiceRemoveSignalMutableStateYARPCResponse() proto.Message {
	return &RemoveSignalMutableStateResponse{}
}

func newHistoryAPIServiceScheduleDecisionTaskYARPCRequest() proto.Message {
	return &ScheduleDecisionTaskRequest{}
}

func newHistoryAPIServiceScheduleDecisionTaskYARPCResponse() proto.Message {
	return &ScheduleDecisionTaskResponse{}
}

func newHistoryAPIServiceRecordChildExecutionCompletedYARPCRequest() proto.Message {
	return &RecordChildExecutionCompletedRequest{}
}

func newHistoryAPIServiceRecordChildExecutionCompletedYARPCResponse() proto.Message {
	return &RecordChildExecutionCompletedResponse{}
}

func newHistoryAPIServiceReplicateEventsV2YARPCRequest() proto.Message {
	return &ReplicateEventsV2Request{}
}

func newHistoryAPIServiceReplicateEventsV2YARPCResponse() proto.Message {
	return &ReplicateEventsV2Response{}
}

func newHistoryAPIServiceSyncShardStatusYARPCRequest() proto.Message {
	return &SyncShardStatusRequest{}
}

func newHistoryAPIServiceSyncShardStatusYARPCResponse() proto.Message {
	return &SyncShardStatusResponse{}
}

func newHistoryAPIServiceSyncActivityYARPCRequest() proto.Message {
	return &SyncActivityRequest{}
}

func newHistoryAPIServiceSyncActivityYARPCResponse() proto.Message {
	return &SyncActivityResponse{}
}

func newHistoryAPIServiceDescribeMutableStateYARPCRequest() proto.Message {
	return &DescribeMutableStateRequest{}
}

func newHistoryAPIServiceDescribeMutableStateYARPCResponse() proto.Message {
	return &DescribeMutableStateResponse{}
}

func newHistoryAPIServiceDescribeHistoryHostYARPCRequest() proto.Message {
	return &DescribeHistoryHostRequest{}
}

func newHistoryAPIServiceDescribeHistoryHostYARPCResponse() proto.Message {
	return &DescribeHistoryHostResponse{}
}

func newHistoryAPIServiceCloseShardYARPCRequest() proto.Message {
	return &CloseShardRequest{}
}

func newHistoryAPIServiceCloseShardYARPCResponse() proto.Message {
	return &CloseShardResponse{}
}

func newHistoryAPIServiceRemoveTaskYARPCRequest() proto.Message {
	return &RemoveTaskRequest{}
}

func newHistoryAPIServiceRemoveTaskYARPCResponse() proto.Message {
	return &RemoveTaskResponse{}
}

func newHistoryAPIServiceResetQueueYARPCRequest() proto.Message {
	return &ResetQueueRequest{}
}

func newHistoryAPIServiceResetQueueYARPCResponse() proto.Message {
	return &ResetQueueResponse{}
}

func newHistoryAPIServiceDescribeQueueYARPCRequest() proto.Message {
	return &DescribeQueueRequest{}
}

func newHistoryAPIServiceDescribeQueueYARPCResponse() proto.Message {
	return &DescribeQueueResponse{}
}

func newHistoryAPIServiceGetReplicationMessagesYARPCRequest() proto.Message {
	return &GetReplicationMessagesRequest{}
}

func newHistoryAPIServiceGetReplicationMessagesYARPCResponse() proto.Message {
	return &GetReplicationMessagesResponse{}
}

func newHistoryAPIServiceGetDLQReplicationMessagesYARPCRequest() proto.Message {
	return &GetDLQReplicationMessagesRequest{}
}

func newHistoryAPIServiceGetDLQReplicationMessagesYARPCResponse() proto.Message {
	return &GetDLQReplicationMessagesResponse{}
}

func newHistoryAPIServiceReapplyEventsYARPCRequest() proto.Message {
	return &ReapplyEventsRequest{}
}

func newHistoryAPIServiceReapplyEventsYARPCResponse() proto.Message {
	return &ReapplyEventsResponse{}
}

func newHistoryAPIServiceRefreshWorkflowTasksYARPCRequest() proto.Message {
	return &RefreshWorkflowTasksRequest{}
}

func newHistoryAPIServiceRefreshWorkflowTasksYARPCResponse() proto.Message {
	return &RefreshWorkflowTasksResponse{}
}

func newHistoryAPIServiceCountDLQMessagesYARPCRequest() proto.Message {
	return &CountDLQMessagesRequest{}
}

func newHistoryAPIServiceCountDLQMessagesYARPCResponse() proto.Message {
	return &CountDLQMessagesResponse{}
}

func newHistoryAPIServiceReadDLQMessagesYARPCRequest() proto.Message {
	return &ReadDLQMessagesRequest{}
}

func newHistoryAPIServiceReadDLQMessagesYARPCResponse() proto.Message {
	return &ReadDLQMessagesResponse{}
}

func newHistoryAPIServicePurgeDLQMessagesYARPCRequest() proto.Message {
	return &PurgeDLQMessagesRequest{}
}

func newHistoryAPIServicePurgeDLQMessagesYARPCResponse() proto.Message {
	return &PurgeDLQMessagesResponse{}
}

func newHistoryAPIServiceMergeDLQMessagesYARPCRequest() proto.Message {
	return &MergeDLQMessagesRequest{}
}

func newHistoryAPIServiceMergeDLQMessagesYARPCResponse() proto.Message {
	return &MergeDLQMessagesResponse{}
}

func newHistoryAPIServiceNotifyFailoverMarkersYARPCRequest() proto.Message {
	return &NotifyFailoverMarkersRequest{}
}

func newHistoryAPIServiceNotifyFailoverMarkersYARPCResponse() proto.Message {
	return &NotifyFailoverMarkersResponse{}
}

func newHistoryAPIServiceGetCrossClusterTasksYARPCRequest() proto.Message {
	return &GetCrossClusterTasksRequest{}
}

func newHistoryAPIServiceGetCrossClusterTasksYARPCResponse() proto.Message {
	return &GetCrossClusterTasksResponse{}
}

func newHistoryAPIServiceRespondCrossClusterTasksCompletedYARPCRequest() proto.Message {
	return &RespondCrossClusterTasksCompletedRequest{}
}

func newHistoryAPIServiceRespondCrossClusterTasksCompletedYARPCResponse() proto.Message {
	return &RespondCrossClusterTasksCompletedResponse{}
}

func newHistoryAPIServiceGetFailoverInfoYARPCRequest() proto.Message {
	return &GetFailoverInfoRequest{}
}

func newHistoryAPIServiceGetFailoverInfoYARPCResponse() proto.Message {
	return &GetFailoverInfoResponse{}
}

var (
	emptyHistoryAPIServiceStartWorkflowExecutionYARPCRequest             = &StartWorkflowExecutionRequest{}
	emptyHistoryAPIServiceStartWorkflowExecutionYARPCResponse            = &StartWorkflowExecutionResponse{}
	emptyHistoryAPIServiceSignalWorkflowExecutionYARPCRequest            = &SignalWorkflowExecutionRequest{}
	emptyHistoryAPIServiceSignalWorkflowExecutionYARPCResponse           = &SignalWorkflowExecutionResponse{}
	emptyHistoryAPIServiceSignalWithStartWorkflowExecutionYARPCRequest   = &SignalWithStartWorkflowExecutionRequest{}
	emptyHistoryAPIServiceSignalWithStartWorkflowExecutionYARPCResponse  = &SignalWithStartWorkflowExecutionResponse{}
	emptyHistoryAPIServiceResetWorkflowExecutionYARPCRequest             = &ResetWorkflowExecutionRequest{}
	emptyHistoryAPIServiceResetWorkflowExecutionYARPCResponse            = &ResetWorkflowExecutionResponse{}
	emptyHistoryAPIServiceTerminateWorkflowExecutionYARPCRequest         = &TerminateWorkflowExecutionRequest{}
	emptyHistoryAPIServiceTerminateWorkflowExecutionYARPCResponse        = &TerminateWorkflowExecutionResponse{}
	emptyHistoryAPIServiceDescribeWorkflowExecutionYARPCRequest          = &DescribeWorkflowExecutionRequest{}
	emptyHistoryAPIServiceDescribeWorkflowExecutionYARPCResponse         = &DescribeWorkflowExecutionResponse{}
	emptyHistoryAPIServiceQueryWorkflowYARPCRequest                      = &QueryWorkflowRequest{}
	emptyHistoryAPIServiceQueryWorkflowYARPCResponse                     = &QueryWorkflowResponse{}
	emptyHistoryAPIServiceResetStickyTaskListYARPCRequest                = &ResetStickyTaskListRequest{}
	emptyHistoryAPIServiceResetStickyTaskListYARPCResponse               = &ResetStickyTaskListResponse{}
	emptyHistoryAPIServiceGetMutableStateYARPCRequest                    = &GetMutableStateRequest{}
	emptyHistoryAPIServiceGetMutableStateYARPCResponse                   = &GetMutableStateResponse{}
	emptyHistoryAPIServicePollMutableStateYARPCRequest                   = &PollMutableStateRequest{}
	emptyHistoryAPIServicePollMutableStateYARPCResponse                  = &PollMutableStateResponse{}
	emptyHistoryAPIServiceRecordDecisionTaskStartedYARPCRequest          = &RecordDecisionTaskStartedRequest{}
	emptyHistoryAPIServiceRecordDecisionTaskStartedYARPCResponse         = &RecordDecisionTaskStartedResponse{}
	emptyHistoryAPIServiceRespondDecisionTaskCompletedYARPCRequest       = &RespondDecisionTaskCompletedRequest{}
	emptyHistoryAPIServiceRespondDecisionTaskCompletedYARPCResponse      = &RespondDecisionTaskCompletedResponse{}
	emptyHistoryAPIServiceRespondDecisionTaskFailedYARPCRequest          = &RespondDecisionTaskFailedRequest{}
	emptyHistoryAPIServiceRespondDecisionTaskFailedYARPCResponse         = &RespondDecisionTaskFailedResponse{}
	emptyHistoryAPIServiceRecordActivityTaskStartedYARPCRequest          = &RecordActivityTaskStartedRequest{}
	emptyHistoryAPIServiceRecordActivityTaskStartedYARPCResponse         = &RecordActivityTaskStartedResponse{}
	emptyHistoryAPIServiceRespondActivityTaskCompletedYARPCRequest       = &RespondActivityTaskCompletedRequest{}
	emptyHistoryAPIServiceRespondActivityTaskCompletedYARPCResponse      = &RespondActivityTaskCompletedResponse{}
	emptyHistoryAPIServiceRespondActivityTaskFailedYARPCRequest          = &RespondActivityTaskFailedRequest{}
	emptyHistoryAPIServiceRespondActivityTaskFailedYARPCResponse         = &RespondActivityTaskFailedResponse{}
	emptyHistoryAPIServiceRespondActivityTaskCanceledYARPCRequest        = &RespondActivityTaskCanceledRequest{}
	emptyHistoryAPIServiceRespondActivityTaskCanceledYARPCResponse       = &RespondActivityTaskCanceledResponse{}
	emptyHistoryAPIServiceRecordActivityTaskHeartbeatYARPCRequest        = &RecordActivityTaskHeartbeatRequest{}
	emptyHistoryAPIServiceRecordActivityTaskHeartbeatYARPCResponse       = &RecordActivityTaskHeartbeatResponse{}
	emptyHistoryAPIServiceRequestCancelWorkflowExecutionYARPCRequest     = &RequestCancelWorkflowExecutionRequest{}
	emptyHistoryAPIServiceRequestCancelWorkflowExecutionYARPCResponse    = &RequestCancelWorkflowExecutionResponse{}
	emptyHistoryAPIServiceRemoveSignalMutableStateYARPCRequest           = &RemoveSignalMutableStateRequest{}
	emptyHistoryAPIServiceRemoveSignalMutableStateYARPCResponse          = &RemoveSignalMutableStateResponse{}
	emptyHistoryAPIServiceScheduleDecisionTaskYARPCRequest               = &ScheduleDecisionTaskRequest{}
	emptyHistoryAPIServiceScheduleDecisionTaskYARPCResponse              = &ScheduleDecisionTaskResponse{}
	emptyHistoryAPIServiceRecordChildExecutionCompletedYARPCRequest      = &RecordChildExecutionCompletedRequest{}
	emptyHistoryAPIServiceRecordChildExecutionCompletedYARPCResponse     = &RecordChildExecutionCompletedResponse{}
	emptyHistoryAPIServiceReplicateEventsV2YARPCRequest                  = &ReplicateEventsV2Request{}
	emptyHistoryAPIServiceReplicateEventsV2YARPCResponse                 = &ReplicateEventsV2Response{}
	emptyHistoryAPIServiceSyncShardStatusYARPCRequest                    = &SyncShardStatusRequest{}
	emptyHistoryAPIServiceSyncShardStatusYARPCResponse                   = &SyncShardStatusResponse{}
	emptyHistoryAPIServiceSyncActivityYARPCRequest                       = &SyncActivityRequest{}
	emptyHistoryAPIServiceSyncActivityYARPCResponse                      = &SyncActivityResponse{}
	emptyHistoryAPIServiceDescribeMutableStateYARPCRequest               = &DescribeMutableStateRequest{}
	emptyHistoryAPIServiceDescribeMutableStateYARPCResponse              = &DescribeMutableStateResponse{}
	emptyHistoryAPIServiceDescribeHistoryHostYARPCRequest                = &DescribeHistoryHostRequest{}
	emptyHistoryAPIServiceDescribeHistoryHostYARPCResponse               = &DescribeHistoryHostResponse{}
	emptyHistoryAPIServiceCloseShardYARPCRequest                         = &CloseShardRequest{}
	emptyHistoryAPIServiceCloseShardYARPCResponse                        = &CloseShardResponse{}
	emptyHistoryAPIServiceRemoveTaskYARPCRequest                         = &RemoveTaskRequest{}
	emptyHistoryAPIServiceRemoveTaskYARPCResponse                        = &RemoveTaskResponse{}
	emptyHistoryAPIServiceResetQueueYARPCRequest                         = &ResetQueueRequest{}
	emptyHistoryAPIServiceResetQueueYARPCResponse                        = &ResetQueueResponse{}
	emptyHistoryAPIServiceDescribeQueueYARPCRequest                      = &DescribeQueueRequest{}
	emptyHistoryAPIServiceDescribeQueueYARPCResponse                     = &DescribeQueueResponse{}
	emptyHistoryAPIServiceGetReplicationMessagesYARPCRequest             = &GetReplicationMessagesRequest{}
	emptyHistoryAPIServiceGetReplicationMessagesYARPCResponse            = &GetReplicationMessagesResponse{}
	emptyHistoryAPIServiceGetDLQReplicationMessagesYARPCRequest          = &GetDLQReplicationMessagesRequest{}
	emptyHistoryAPIServiceGetDLQReplicationMessagesYARPCResponse         = &GetDLQReplicationMessagesResponse{}
	emptyHistoryAPIServiceReapplyEventsYARPCRequest                      = &ReapplyEventsRequest{}
	emptyHistoryAPIServiceReapplyEventsYARPCResponse                     = &ReapplyEventsResponse{}
	emptyHistoryAPIServiceRefreshWorkflowTasksYARPCRequest               = &RefreshWorkflowTasksRequest{}
	emptyHistoryAPIServiceRefreshWorkflowTasksYARPCResponse              = &RefreshWorkflowTasksResponse{}
	emptyHistoryAPIServiceCountDLQMessagesYARPCRequest                   = &CountDLQMessagesRequest{}
	emptyHistoryAPIServiceCountDLQMessagesYARPCResponse                  = &CountDLQMessagesResponse{}
	emptyHistoryAPIServiceReadDLQMessagesYARPCRequest                    = &ReadDLQMessagesRequest{}
	emptyHistoryAPIServiceReadDLQMessagesYARPCResponse                   = &ReadDLQMessagesResponse{}
	emptyHistoryAPIServicePurgeDLQMessagesYARPCRequest                   = &PurgeDLQMessagesRequest{}
	emptyHistoryAPIServicePurgeDLQMessagesYARPCResponse                  = &PurgeDLQMessagesResponse{}
	emptyHistoryAPIServiceMergeDLQMessagesYARPCRequest                   = &MergeDLQMessagesRequest{}
	emptyHistoryAPIServiceMergeDLQMessagesYARPCResponse                  = &MergeDLQMessagesResponse{}
	emptyHistoryAPIServiceNotifyFailoverMarkersYARPCRequest              = &NotifyFailoverMarkersRequest{}
	emptyHistoryAPIServiceNotifyFailoverMarkersYARPCResponse             = &NotifyFailoverMarkersResponse{}
	emptyHistoryAPIServiceGetCrossClusterTasksYARPCRequest               = &GetCrossClusterTasksRequest{}
	emptyHistoryAPIServiceGetCrossClusterTasksYARPCResponse              = &GetCrossClusterTasksResponse{}
	emptyHistoryAPIServiceRespondCrossClusterTasksCompletedYARPCRequest  = &RespondCrossClusterTasksCompletedRequest{}
	emptyHistoryAPIServiceRespondCrossClusterTasksCompletedYARPCResponse = &RespondCrossClusterTasksCompletedResponse{}
	emptyHistoryAPIServiceGetFailoverInfoYARPCRequest                    = &GetFailoverInfoRequest{}
	emptyHistoryAPIServiceGetFailoverInfoYARPCResponse                   = &GetFailoverInfoResponse{}
)

var yarpcFileDescriptorClosurefee8ff76963a38ed = [][]byte{
	// uber/cadence/history/v1/service.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3c, 0x4d, 0x6f, 0x1c, 0x47,
		0x76, 0x68, 0x8e, 0xf8, 0xf5, 0x48, 0x0e, 0xc9, 0x12, 0x3f, 0x86, 0x43, 0x89, 0x22, 0xdb, 0x96,
		0x4d, 0xcb, 0xeb, 0xa1, 0x45, 0xdb, 0xfa, 0xb2, 0xbc, 0x5a, 0x89, 0x94, 0xe4, 0x31, 0xf4, 0xd9,
		0x64, 0xe4, 0x24, 0x48, 0xdc, 0xdb, 0xec, 0xae, 0x21, 0x3b, 0xea, 0xe9, 0x1e, 0x75, 0xf7, 0x90,
		0x1a, 0x1f, 0x02, 0x07, 0x1b, 0x04, 0xd8, 0x45, 0x90, 0xdd, 0x2c, 0x36, 0x41, 0x80, 0x00, 0x0b,
		0x04, 0x1b, 0x60, 0xb3, 0x46, 0x6e, 0xc9, 0x2d, 0xc8, 0x29, 0x40, 0x90, 0xbf, 0x90, 0x53, 0x2e,
		0x9b, 0x43, 0x02, 0xe4, 0x94, 0x3d, 0x07, 0x41, 0x7d, 0x74, 0x4f, 0x7f, 0x54, 0x57, 0x0f, 0xc9,
		0x00, 0xf2, 0x3a, 0xbe, 0x4d, 0x57, 0xd5, 0x7b, 0xf5, 0xea, 0xd5, 0xab, 0x57, 0xef, 0xab, 0x06,
		0x2e, 0x76, 0xf7, 0xb0, 0xbf, 0x61, 0x1a, 0x16, 0x76, 0x4d, 0xbc, 0x71, 0x60, 0x07, 0xa1, 0xe7,
		0xf7, 0x36, 0x0e, 0x2f, 0x6f, 0x04, 0xd8, 0x3f, 0xb4, 0x4d, 0xdc, 0xe8, 0xf8, 0x5e, 0xe8, 0xa1,
		0x45, 0x32, 0xac, 0xc1, 0x87, 0x35, 0xf8, 0xb0, 0xc6, 0xe1, 0xe5, 0xfa, 0xca, 0xbe, 0xe7, 0xed,
		0x3b, 0x78, 0x83, 0x0e, 0xdb, 0xeb, 0xb6, 0x36, 0xac, 0xae, 0x6f, 0x84, 0xb6, 0xe7, 0x32, 0xc0,
		0xfa, 0x85, 0x6c, 0x7f, 0x68, 0xb7, 0x71, 0x10, 0x1a, 0xed, 0x0e, 0x1f, 0x90, 0x43, 0x70, 0xe4,
		0x1b, 0x9d, 0x0e, 0xf6, 0x03, 0xde, 0xbf, 0x9a, 0x22, 0xd0, 0xe8, 0xd8, 0x84, 0x38, 0xd3, 0x6b,
		0xb7, 0xe3, 0x29, 0xd6, 0x44, 0x23, 0x22, 0x12, 0x39, 0x15, 0xa2, 0x21, 0x2f, 0xba, 0x38, 0x1e,
		0xa0, 0x8a, 0x06, 0x84, 0x46, 0xf0, 0xdc, 0xb1, 0x83, 0x50, 0x36, 0xe6, 0xc8, 0xf3, 0x9f, 0xb7,
		0x1c, 0xef, 0x88, 0x8f, 0xb9, 0x24, 0x1a, 0xc3, 0x59, 0xa9, 0x67, 0xc6, 0xae, 0x97, 0x8d, 0xc5,
		0x3e, 0x1f, 0xf9, 0x5a, 0x7a, 0xa4, 0xd5, 0xb6, 0x5d, 0xca, 0x05, 0xa7, 0x1b, 0x84, 0x65, 0x83,
		0xd2, 0x8c, 0x58, 0x13, 0x0f, 0x7a, 0xd1, 0xc5, 0x5d, 0xbe, 0xd5, 0xf5, 0x37, 0xc5, 0x43, 0x7c,
		0xdc, 0x71, 0x6c, 0x33, 0xb9, 0xb5, 0xaf, 0xa7, 0x06, 0x06, 0x07, 0x86, 0x8f, 0xad, 0xfc, 0x8c,
		0x17, 0x0b, 0x46, 0xa5, 0x99, 0xa1, 0xfe, 0xcd, 0x30, 0x9c, 0xdf, 0x09, 0x0d, 0x3f, 0xfc, 0x94,
		0xb7, 0xdf, 0x7d, 0x89, 0xcd, 0x2e, 0x99, 0x4d, 0xc3, 0x2f, 0xba, 0x38, 0x08, 0xd1, 0x03, 0x18,
		0xf5, 0xd9, 0xcf, 0x9a, 0xb2, 0xaa, 0xac, 0x4f, 0x6c, 0x6e, 0x36, 0x52, 0x42, 0x69, 0x74, 0xec,
		0xc6, 0xe1, 0xe5, 0x86, 0x14, 0x89, 0x16, 0xa1, 0x40, 0xcb, 0x30, 0x6e, 0x79, 0x6d, 0xc3, 0x76,
		0x75, 0xdb, 0xaa, 0x0d, 0xad, 0x2a, 0xeb, 0xe3, 0xda, 0x18, 0x6b, 0x68, 0x5a, 0xe8, 0x77, 0x60,
		0xbe, 0x63, 0xf8, 0xd8, 0x0d, 0x75, 0x1c, 0x21, 0xd0, 0x6d, 0xb7, 0xe5, 0xd5, 0x2a, 0x74, 0xe2,
		0x75, 0xe1, 0xc4, 0x4f, 0x28, 0x44, 0x3c, 0x63, 0xd3, 0x6d, 0x79, 0xda, 0xd9, 0x4e, 0xbe, 0x11,
		0xd5, 0x60, 0xd4, 0x08, 0x43, 0xdc, 0xee, 0x84, 0xb5, 0x33, 0xab, 0xca, 0xfa, 0xb0, 0x16, 0x7d,
		0xa2, 0x2d, 0x98, 0xc6, 0x2f, 0x3b, 0x36, 0x3b, 0x40, 0x3a, 0x39, 0x29, 0xb5, 0x61, 0x3a, 0x63,
		0xbd, 0xc1, 0x4e, 0x49, 0x23, 0x3a, 0x25, 0x8d, 0xdd, 0xe8, 0x18, 0x69, 0xd5, 0x3e, 0x08, 0x69,
		0x44, 0x2d, 0x58, 0x32, 0x3d, 0x37, 0xb4, 0xdd, 0x2e, 0xd6, 0x8d, 0x40, 0x77, 0xf1, 0x91, 0x6e,
		0xbb, 0x76, 0x68, 0x1b, 0xa1, 0xe7, 0xd7, 0x46, 0x56, 0x95, 0xf5, 0xea, 0xe6, 0xdb, 0xc2, 0x05,
		0x6c, 0x71, 0xa8, 0xdb, 0xc1, 0x23, 0x7c, 0xd4, 0x8c, 0x40, 0xb4, 0x05, 0x53, 0xd8, 0x8e, 0x9a,
		0x30, 0x1b, 0xf5, 0x58, 0x7a, 0xcb, 0xb0, 0x9d, 0xae, 0x8f, 0x6b, 0xa3, 0x94, 0xdc, 0x73, 0x42,
		0xfc, 0xf7, 0xd8, 0x18, 0x6d, 0x26, 0x06, 0xe3, 0x2d, 0x48, 0x83, 0x05, 0xc7, 0x08, 0x42, 0xdd,
		0xf4, 0xda, 0x1d, 0x07, 0xd3, 0xc5, 0xfb, 0x38, 0xe8, 0x3a, 0x61, 0x6d, 0x4c, 0x82, 0xef, 0x89,
		0xd1, 0x73, 0x3c, 0xc3, 0xd2, 0xe6, 0x08, 0xec, 0x56, 0x0c, 0xaa, 0x51, 0x48, 0xf4, 0x9b, 0xb0,
		0xdc, 0xb2, 0xfd, 0x20, 0xd4, 0x2d, 0x6c, 0xda, 0x01, 0xe5, 0xa7, 0x11, 0x3c, 0xd7, 0xf7, 0x0c,
		0xf3, 0xb9, 0xd7, 0x6a, 0xd5, 0xc6, 0x29, 0xe2, 0xa5, 0x1c, 0x5f, 0xb7, 0xb9, 0xfa, 0xd2, 0x6a,
		0x14, 0x7a, 0x9b, 0x03, 0xef, 0x1a, 0xc1, 0xf3, 0x3b, 0x0c, 0x54, 0xbd, 0x0a, 0x2b, 0x45, 0x42,
		0x16, 0x74, 0x3c, 0x37, 0xc0, 0x68, 0x1e, 0x46, 0xfc, 0x2e, 0x95, 0x2c, 0x85, 0x4a, 0xd6, 0xb0,
		0xdf, 0x75, 0x9b, 0x96, 0xfa, 0xd7, 0x43, 0xb0, 0xb2, 0x63, 0xef, 0xbb, 0x86, 0x53, 0x28, 0xe4,
		0x0f, 0xb3, 0x42, 0xfe, 0x9e, 0x58, 0xc8, 0xa5, 0x58, 0x06, 0x94, 0xf2, 0x16, 0x2c, 0xe3, 0x97,
		0x21, 0xf6, 0x5d, 0xc3, 0x89, 0x55, 0x53, 0x5f, 0xe0, 0xb9, 0xac, 0xbf, 0x21, 0x9c, 0x3f, 0x3f,
		0xf3, 0x52, 0x84, 0x2a, 0xd7, 0x85, 0x1a, 0x70, 0xd6, 0x3c, 0xb0, 0x1d, 0xab, 0x3f, 0x89, 0xe7,
		0x3a, 0x3d, 0x2a, 0xfb, 0x63, 0xda, 0x2c, 0xed, 0x8a, 0x80, 0x1e, 0xbb, 0x4e, 0x4f, 0x5d, 0x83,
		0x0b, 0x85, 0xeb, 0x63, 0x0c, 0x56, 0x7f, 0xaa, 0xc0, 0x9b, 0x7c, 0x8c, 0x1d, 0x1e, 0xc8, 0xf5,
		0xc6, 0xb3, 0x2c, 0x4b, 0x6f, 0xca, 0x58, 0x5a, 0x86, 0x6e, 0x30, 0xde, 0xaa, 0xb7, 0x61, 0xbd,
		0x1c, 0xa1, 0x5c, 0x5a, 0x7e, 0xa0, 0xc0, 0x79, 0x0d, 0x07, 0xf8, 0xd4, 0x1a, 0x51, 0x8a, 0x64,
		0xc0, 0xf5, 0x5c, 0x85, 0x95, 0x22, 0x34, 0xf2, 0x55, 0x7c, 0x39, 0x04, 0x6b, 0xbb, 0xd8, 0x6f,
		0xdb, 0xae, 0x11, 0xe2, 0xc2, 0x95, 0x3c, 0xc9, 0xae, 0xe4, 0x8a, 0x70, 0x25, 0xa5, 0x88, 0x7e,
		0xcd, 0x25, 0xff, 0x75, 0x50, 0x65, 0x4b, 0xe4, 0xc2, 0xff, 0x23, 0x05, 0x56, 0xb7, 0x71, 0x60,
		0xfa, 0xf6, 0x5e, 0x31, 0x47, 0x1f, 0x67, 0x39, 0xfa, 0x81, 0x70, 0x39, 0x65, 0x78, 0x06, 0x14,
		0x8f, 0xff, 0xa9, 0xc0, 0x9a, 0x04, 0x15, 0x17, 0x11, 0x07, 0x16, 0xfb, 0xf7, 0xa9, 0xe9, 0xb9,
		0x2d, 0x7b, 0x9f, 0x6b, 0x5b, 0xa9, 0xb2, 0xcb, 0x21, 0xdc, 0x4a, 0x82, 0x6a, 0x0b, 0x58, 0xd8,
		0x8e, 0xf6, 0x60, 0x31, 0xbf, 0xb7, 0xec, 0x1a, 0x1f, 0xa2, 0xb3, 0x5d, 0x1a, 0x6c, 0x36, 0x7a,
		0x91, 0xcf, 0x1f, 0x89, 0x9a, 0xd1, 0xa7, 0x80, 0x3a, 0xd8, 0xb5, 0x6c, 0x77, 0x5f, 0x37, 0xcc,
		0xd0, 0x3e, 0xb4, 0x43, 0x1b, 0x07, 0xb5, 0xca, 0x6a, 0xa5, 0xd8, 0x4a, 0x60, 0xc3, 0x6f, 0xb3,
		0xd1, 0x3d, 0x8a, 0x7c, 0xb6, 0x93, 0x6a, 0xb4, 0x71, 0x80, 0x7e, 0x0b, 0x66, 0x22, 0xc4, 0x54,
		0x4c, 0x7c, 0xec, 0xd6, 0xce, 0x50, 0xb4, 0x0d, 0x19, 0xda, 0x2d, 0x32, 0x36, 0x4d, 0xf9, 0x74,
		0x27, 0xd1, 0xe5, 0x63, 0x17, 0xed, 0xf4, 0x51, 0x47, 0x57, 0x23, 0xb7, 0x32, 0xa4, 0x14, 0x47,
		0x37, 0x61, 0x0a, 0x69, 0xd4, 0xa8, 0xbe, 0x84, 0xb9, 0xa7, 0xc4, 0x9c, 0x8e, 0xb8, 0x17, 0x89,
		0xe1, 0x56, 0x56, 0x0c, 0xdf, 0x12, 0xce, 0x21, 0x82, 0x1d, 0x50, 0xf4, 0x7e, 0xa6, 0xc0, 0x7c,
		0x06, 0x9c, 0x8b, 0xdb, 0x2d, 0x98, 0xa4, 0x26, 0x7e, 0x64, 0x4b, 0x28, 0x03, 0xd8, 0x12, 0x13,
		0x14, 0x82, 0x9b, 0x10, 0x4d, 0xa8, 0x46, 0x08, 0x7e, 0x0f, 0x9b, 0x21, 0xb6, 0xb8, 0xe0, 0xa8,
		0xc5, 0x6b, 0xd0, 0xf8, 0x48, 0x6d, 0xea, 0x45, 0xf2, 0x53, 0xfd, 0x43, 0x05, 0xea, 0x54, 0x81,
		0xee, 0x84, 0xb6, 0xf9, 0xbc, 0x47, 0xcc, 0x89, 0x07, 0x76, 0x10, 0x46, 0x6c, 0x6a, 0x66, 0xd9,
		0xb4, 0x51, 0xac, 0xc9, 0x85, 0x18, 0x06, 0x64, 0xd6, 0x79, 0x58, 0x16, 0xe2, 0xe0, 0x9a, 0xe5,
		0xbf, 0x15, 0x58, 0xb8, 0x8f, 0xc3, 0x87, 0xdd, 0xd0, 0xd8, 0x73, 0xf0, 0x4e, 0x68, 0x84, 0x58,
		0x13, 0xa1, 0x55, 0x32, 0xfa, 0xf4, 0x37, 0x00, 0x09, 0xd4, 0xe8, 0xd0, 0xb1, 0xd4, 0xe8, 0x6c,
		0xee, 0x84, 0xa1, 0xf7, 0x60, 0x01, 0xbf, 0xec, 0x50, 0x06, 0xea, 0x2e, 0x7e, 0x19, 0xea, 0xf8,
		0x90, 0xd8, 0xe4, 0xb6, 0x45, 0x35, 0x74, 0x45, 0x3b, 0x1b, 0xf5, 0x3e, 0xc2, 0x2f, 0xc3, 0xbb,
		0xa4, 0xaf, 0x69, 0xa1, 0x77, 0x61, 0xce, 0xec, 0xfa, 0xd4, 0x78, 0xdf, 0xf3, 0x0d, 0xd7, 0x3c,
		0xd0, 0x43, 0xef, 0x39, 0x3d, 0x3d, 0xca, 0xfa, 0xa4, 0x86, 0x78, 0xdf, 0x1d, 0xda, 0xb5, 0x4b,
		0x7a, 0xd4, 0x9f, 0x8c, 0xc3, 0x62, 0x6e, 0xd5, 0x5c, 0x86, 0xc4, 0x2b, 0x53, 0x4e, 0xbb, 0xb2,
		0x7b, 0x30, 0x15, 0xa3, 0x0d, 0x7b, 0x1d, 0xcc, 0x79, 0xb5, 0x26, 0xc5, 0xb8, 0xdb, 0xeb, 0x60,
		0x6d, 0xf2, 0x28, 0xf1, 0x85, 0x54, 0x98, 0x12, 0x31, 0x66, 0xc2, 0x4d, 0x30, 0xe4, 0x19, 0x2c,
		0x75, 0x7c, 0x7c, 0x68, 0x7b, 0xdd, 0x40, 0x0f, 0x88, 0x25, 0x82, 0xad, 0xfe, 0xf8, 0x33, 0x74,
		0xde, 0xe5, 0x9c, 0x19, 0xdc, 0x74, 0xc3, 0x2b, 0xef, 0x3f, 0x33, 0x9c, 0x2e, 0xd6, 0x16, 0x22,
		0xe8, 0x1d, 0x06, 0x1c, 0xe1, 0x7d, 0x07, 0xce, 0x52, 0xa3, 0x9d, 0x59, 0xd9, 0x31, 0xc6, 0x61,
		0x4a, 0xc1, 0x0c, 0xe9, 0xba, 0x47, 0x7a, 0xa2, 0xe1, 0x37, 0x60, 0x9c, 0x1a, 0xe0, 0xc4, 0xa1,
		0xa6, 0x6e, 0xc8, 0xc4, 0xe6, 0x79, 0xf1, 0x25, 0x1f, 0x49, 0xe5, 0x58, 0xc8, 0x7f, 0xa1, 0xfb,
		0x30, 0x13, 0x50, 0x89, 0xd5, 0xfb, 0x28, 0x46, 0x07, 0x41, 0x51, 0x0d, 0x52, 0x82, 0x8e, 0xde,
		0x87, 0x05, 0xd3, 0xb1, 0x09, 0xa5, 0x8e, 0xbd, 0xe7, 0x1b, 0x7e, 0x4f, 0x3f, 0xc4, 0x3e, 0xd5,
		0x80, 0x63, 0x54, 0xa4, 0xe7, 0x58, 0xef, 0x03, 0xd6, 0xf9, 0x8c, 0xf5, 0x25, 0xa0, 0x5a, 0xd8,
		0x08, 0xbb, 0x3e, 0x8e, 0xa1, 0xc6, 0x93, 0x50, 0xf7, 0x58, 0x67, 0x04, 0x75, 0x01, 0x26, 0x38,
		0x94, 0xdd, 0xee, 0x38, 0x35, 0xa0, 0x43, 0x81, 0x35, 0x35, 0xdb, 0x1d, 0x07, 0x05, 0x70, 0x29,
		0xbb, 0x2a, 0x3d, 0x30, 0x0f, 0xb0, 0xd5, 0x75, 0xb0, 0x1e, 0x7a, 0x6c, 0xb3, 0xa8, 0x17, 0xe8,
		0x75, 0xc3, 0xda, 0x44, 0x99, 0xc3, 0xf2, 0x7a, 0x7a, 0xad, 0x3b, 0x1c, 0xd3, 0xae, 0x47, 0xf7,
		0x6d, 0x97, 0xa1, 0x21, 0x26, 0x09, 0xdb, 0x2a, 0xe2, 0xa3, 0xf7, 0x17, 0x32, 0x49, 0x1d, 0xd1,
		0x59, 0xda, 0xb5, 0x43, 0x7a, 0xa2, 0x55, 0x14, 0x1d, 0xa7, 0xa9, 0xa2, 0xe3, 0x84, 0x1e, 0x40,
		0x35, 0x96, 0xed, 0x80, 0x1c, 0xa6, 0x5a, 0x95, 0x3a, 0x9d, 0x17, 0xd3, 0x5b, 0xc5, 0x22, 0x01,
		0x49, 0xf9, 0x66, 0x27, 0x2f, 0x3e, 0x18, 0xf4, 0x13, 0x99, 0x30, 0x17, 0x63, 0x33, 0x1d, 0x2f,
		0xc0, 0x1c, 0xe7, 0x34, 0xc5, 0x79, 0x79, 0x40, 0x83, 0x81, 0x00, 0x12, 0x7c, 0xdd, 0x40, 0x8b,
		0xcf, 0x73, 0xdc, 0x48, 0x4e, 0xf9, 0x2c, 0x67, 0x84, 0xce, 0x82, 0x17, 0xe4, 0x16, 0x9f, 0x11,
		0xdd, 0x89, 0x7d, 0xaa, 0x39, 0x83, 0x3e, 0x8e, 0xc6, 0x6b, 0x33, 0x87, 0x99, 0x16, 0x74, 0x13,
		0x96, 0x6d, 0x72, 0xe6, 0x32, 0x7b, 0x8c, 0x5d, 0xa2, 0x67, 0xac, 0xda, 0x2c, 0x35, 0x03, 0x17,
		0xed, 0x20, 0xad, 0x8d, 0xef, 0xb2, 0x6e, 0xf5, 0x57, 0x0a, 0x2c, 0x3e, 0xf1, 0x1c, 0xe7, 0xff,
		0x99, 0x36, 0xfe, 0xf9, 0x18, 0xd4, 0xf2, 0xcb, 0xfe, 0x46, 0x1d, 0x7f, 0xa3, 0x8e, 0xbf, 0x8e,
		0xea, 0xb8, 0xe8, 0x7c, 0x4c, 0x16, 0xaa, 0x57, 0xa1, 0xae, 0x9a, 0x3a, 0xb5, 0xae, 0xfa, 0xf5,
		0xd3, 0xda, 0xea, 0x3f, 0x0d, 0xc1, 0xaa, 0x86, 0x4d, 0xcf, 0xb7, 0x92, 0x51, 0x3a, 0x7e, 0x2c,
		0x5e, 0xa5, 0xa6, 0xbc, 0x00, 0x13, 0xb1, 0xe0, 0xc4, 0x4a, 0x00, 0xa2, 0xa6, 0xa6, 0x85, 0x16,
		0x61, 0x94, 0xca, 0x18, 0x3f, 0xf1, 0x15, 0x6d, 0x84, 0x7c, 0x36, 0x2d, 0x74, 0x1e, 0x80, 0xdb,
		0xf1, 0xd1, 0xd9, 0x1d, 0xd7, 0xc6, 0x79, 0x4b, 0xd3, 0x42, 0x1a, 0x4c, 0x76, 0x3c, 0xc7, 0xd1,
		0x23, 0x5f, 0x61, 0x44, 0xe2, 0x2b, 0x10, 0x1d, 0x7a, 0xcf, 0xf3, 0x93, 0xac, 0x89, 0x7c, 0x85,
		0x09, 0x82, 0x84, 0x7f, 0xa8, 0xff, 0x36, 0x0a, 0x6b, 0x12, 0x2e, 0x72, 0xc5, 0x9b, 0xd3, 0x90,
		0xca, 0xc9, 0x34, 0xa4, 0x54, 0xfb, 0x0d, 0x9d, 0x5c, 0xfb, 0x7d, 0x0b, 0x50, 0xc4, 0x5f, 0x2b,
		0xab, 0x7e, 0x67, 0xe2, 0x9e, 0x68, 0xf4, 0x3a, 0x51, 0x60, 0x02, 0xd5, 0x5b, 0x21, 0x1a, 0x2a,
		0x85, 0x37, 0xa7, 0xd1, 0x87, 0xf3, 0x1a, 0x3d, 0x11, 0xcf, 0x1f, 0x49, 0xc7, 0xf3, 0xaf, 0x41,
		0x8d, 0xab, 0x94, 0x7e, 0x00, 0x22, 0xba, 0xfd, 0x47, 0xe9, 0xed, 0xbf, 0xc0, 0xfa, 0x63, 0xd9,
		0xe1, 0x97, 0x3f, 0xd2, 0x60, 0x2a, 0x8e, 0x5b, 0xd3, 0x90, 0x05, 0x0b, 0x84, 0xbf, 0x53, 0x74,
		0x1a, 0x77, 0x7d, 0xc3, 0x0d, 0x88, 0x2a, 0x4b, 0xb9, 0xe9, 0x93, 0x56, 0xe2, 0x0b, 0x7d, 0x06,
		0xe7, 0x04, 0x01, 0x91, 0xbe, 0x0a, 0x1f, 0x1f, 0x44, 0x85, 0x2f, 0xe5, 0xc4, 0x3d, 0xd6, 0xe6,
		0x05, 0xa6, 0x25, 0x14, 0x99, 0x96, 0x6b, 0x30, 0x99, 0xd2, 0x79, 0x13, 0x54, 0xe7, 0x4d, 0xec,
		0x25, 0x94, 0xdd, 0x6d, 0xa8, 0xf6, 0xb7, 0x95, 0xe6, 0x43, 0x26, 0x4b, 0xf3, 0x21, 0x53, 0x31,
		0x04, 0x4d, 0x87, 0x7c, 0x04, 0x93, 0xd1, 0x5e, 0x53, 0x04, 0x53, 0xa5, 0x08, 0x26, 0xf8, 0x78,
		0x0a, 0x6e, 0xc0, 0x28, 0xf1, 0xe4, 0x89, 0x92, 0xad, 0xd2, 0xf8, 0xcb, 0xfd, 0x46, 0x41, 0x2a,
		0xb4, 0x51, 0x7a, 0x8a, 0x68, 0x88, 0xc0, 0xc6, 0xc1, 0x5d, 0x37, 0xf4, 0x7b, 0x5a, 0x84, 0xb7,
		0xfe, 0x19, 0x4c, 0x26, 0x3b, 0xd0, 0x0c, 0x54, 0x9e, 0xe3, 0x1e, 0x57, 0x56, 0xe4, 0x27, 0xba,
		0x06, 0xc3, 0x87, 0x44, 0xfc, 0xa5, 0xf1, 0x87, 0xe8, 0xd4, 0xb1, 0x38, 0x04, 0x03, 0xb8, 0x31,
		0x74, 0x4d, 0x49, 0xe8, 0xc9, 0x28, 0xea, 0xf4, 0x8d, 0x9e, 0xcc, 0xe9, 0xc9, 0x24, 0x6b, 0x84,
		0x7a, 0xf2, 0x97, 0x95, 0x48, 0x4f, 0x0a, 0xb9, 0xc8, 0xf5, 0xe4, 0x27, 0x30, 0x9d, 0xd1, 0x43,
		0x52, 0x4d, 0xc9, 0xee, 0xdf, 0x1e, 0xd5, 0x24, 0x5a, 0x35, 0xad, 0xa7, 0x72, 0x92, 0x3b, 0x74,
		0x3c, 0xc9, 0x4d, 0xa8, 0xa5, 0x4a, 0x5a, 0x2d, 0x7d, 0x06, 0x2b, 0xe9, 0x53, 0xa5, 0x7b, 0x2d,
		0x3d, 0x3c, 0xb0, 0x03, 0x3d, 0x99, 0x97, 0x94, 0x4f, 0x55, 0x4f, 0x9d, 0xb2, 0xc7, 0xad, 0xdd,
		0x03, 0x3b, 0xb8, 0xcd, 0xf1, 0x37, 0x61, 0xf6, 0x00, 0x1b, 0x7e, 0xb8, 0x87, 0x8d, 0x50, 0xb7,
		0x70, 0x68, 0xd8, 0x4e, 0xc0, 0x43, 0x8c, 0xf2, 0xe8, 0xdb, 0x4c, 0x0c, 0xb6, 0xcd, 0xa0, 0xf2,
		0xf7, 0xce, 0xc8, 0xc9, 0xee, 0x9d, 0x37, 0x61, 0x3a, 0xc6, 0xc3, 0xc4, 0x9a, 0x2a, 0xe0, 0x71,
		0x2d, 0xb6, 0x7a, 0xb6, 0x69, 0xab, 0xfa, 0xe7, 0x0a, 0xbc, 0xc6, 0x76, 0x33, 0x75, 0x92, 0x79,
		0x7a, 0xb1, 0x7f, 0x5e, 0xb4, 0x6c, 0xc4, 0xee, 0x5a, 0x51, 0xc4, 0xae, 0x0c, 0xd5, 0x80, 0xa1,
		0xbb, 0xbf, 0xab, 0xc0, 0xeb, 0x72, 0x6c, 0x5c, 0x04, 0x71, 0xff, 0x72, 0xf3, 0x79, 0x1b, 0x27,
		0xf1, 0xc6, 0xc9, 0x55, 0x97, 0x36, 0x1d, 0x64, 0x24, 0xfd, 0x67, 0x0a, 0xac, 0xf4, 0x63, 0xde,
		0xc4, 0x40, 0xb6, 0xec, 0xa0, 0x63, 0x84, 0xe6, 0x81, 0xee, 0x78, 0xa6, 0xe1, 0x38, 0xbd, 0xda,
		0x10, 0x55, 0x98, 0x9f, 0x49, 0x66, 0x2d, 0x5f, 0x4e, 0xa3, 0x1f, 0x14, 0xdf, 0xf5, 0xb6, 0xf9,
		0x0c, 0x0f, 0xd8, 0x04, 0x4c, 0x8f, 0x2e, 0x1b, 0xc5, 0x23, 0xea, 0xbf, 0x0f, 0xab, 0x65, 0x08,
		0x04, 0xfa, 0x76, 0x3b, 0xad, 0x6f, 0xc5, 0x21, 0xf7, 0x48, 0x0d, 0x50, 0x5c, 0x11, 0x62, 0x7a,
		0xed, 0x26, 0x74, 0xef, 0x8f, 0x14, 0xa2, 0x7b, 0x73, 0xcb, 0xbc, 0x67, 0xd8, 0x4e, 0x5f, 0x96,
		0x06, 0xcc, 0xd5, 0x94, 0xe1, 0x19, 0x50, 0x90, 0x5e, 0x23, 0x7a, 0xac, 0x10, 0x13, 0x8f, 0x04,
		0xff, 0x44, 0x01, 0x35, 0xaf, 0xed, 0x3e, 0x8e, 0x8e, 0x67, 0x44, 0xf9, 0xd3, 0x2c, 0xe5, 0x57,
		0x0b, 0x28, 0x2f, 0xc3, 0x34, 0x20, 0xed, 0x4f, 0xc8, 0xe1, 0x94, 0xe0, 0xe2, 0xb2, 0xf9, 0x16,
		0xcc, 0x98, 0x86, 0x6b, 0xe2, 0xf8, 0x06, 0xc0, 0xec, 0x4e, 0x1b, 0xd3, 0xa6, 0x59, 0xbb, 0x16,
		0x35, 0x27, 0xcf, 0x7b, 0x12, 0xe7, 0x29, 0xcf, 0xbb, 0x0c, 0xd5, 0x80, 0x4b, 0x7d, 0x23, 0x3e,
		0xee, 0x05, 0xc8, 0x12, 0xd9, 0x40, 0xc1, 0xc0, 0xd3, 0x48, 0x58, 0x21, 0x9e, 0x63, 0x4b, 0x98,
		0x08, 0x53, 0x4a, 0xc2, 0xf2, 0x0b, 0xa4, 0xfb, 0xd3, 0xa7, 0x7c, 0x60, 0x09, 0x2b, 0xc3, 0x34,
		0x20, 0xed, 0x17, 0xc5, 0xe2, 0x10, 0xe3, 0xe2, 0xd4, 0xff, 0xbd, 0x02, 0x17, 0x34, 0xdc, 0xf6,
		0x0e, 0x31, 0x4b, 0xf3, 0x7f, 0x55, 0x82, 0x74, 0x69, 0xc3, 0xa8, 0x92, 0x31, 0x8c, 0x54, 0x95,
		0xc8, 0x4a, 0x11, 0xd5, 0x7c, 0x69, 0xff, 0x30, 0x04, 0x17, 0xf9, 0x12, 0xd8, 0xb2, 0x0b, 0x73,
		0xcc, 0xd2, 0x05, 0x1a, 0x50, 0x4d, 0x9f, 0x41, 0xbe, 0xb8, 0x1b, 0x05, 0xfb, 0x37, 0xc0, 0x84,
		0xda, 0x54, 0xea, 0xf4, 0xa2, 0x3d, 0x58, 0x8c, 0xd3, 0xf8, 0xc2, 0x42, 0x2d, 0x71, 0x86, 0xf7,
		0x2e, 0x87, 0xc9, 0x64, 0x78, 0xb1, 0xa8, 0xf9, 0xd8, 0x29, 0xfc, 0x75, 0x78, 0xa3, 0x6c, 0x2d,
		0x9c, 0xcf, 0xff, 0xa8, 0xc0, 0x72, 0x14, 0x15, 0x12, 0x78, 0xe9, 0xaf, 0x44, 0x7c, 0x2e, 0xc1,
		0xac, 0x1d, 0xe8, 0xe9, 0xba, 0x29, 0xca, 0xcb, 0x31, 0x6d, 0xda, 0x0e, 0xee, 0x25, 0x2b, 0xa2,
		0xd4, 0x15, 0x38, 0x27, 0x26, 0x9f, 0xaf, 0xef, 0x97, 0x43, 0x44, 0x83, 0x11, 0x65, 0x9d, 0xce,
		0x4a, 0xe7, 0x54, 0xeb, 0xab, 0x58, 0xe8, 0x1a, 0x4c, 0xf2, 0xa2, 0x38, 0x6c, 0x25, 0x02, 0xb5,
		0x71, 0x5b, 0xd3, 0x42, 0x9f, 0xc2, 0x59, 0x33, 0x22, 0x35, 0x31, 0xf5, 0x99, 0x63, 0x4d, 0x8d,
		0x62, 0x14, 0xfd, 0xb9, 0x1f, 0xc0, 0x4c, 0xa2, 0xd0, 0x8d, 0x39, 0x09, 0xc3, 0x83, 0x3a, 0x09,
		0xd3, 0x7d, 0x50, 0xda, 0xa0, 0xbe, 0x49, 0x4e, 0xab, 0x94, 0xcb, 0x7c, 0x3f, 0xfe, 0x63, 0x08,
		0x6a, 0x1a, 0x2f, 0xe2, 0xc4, 0x14, 0x36, 0x78, 0xb6, 0xf9, 0x2a, 0xf7, 0xe0, 0x77, 0x61, 0x3e,
		0x1d, 0xc9, 0xec, 0xe9, 0x76, 0x88, 0xdb, 0x51, 0xfd, 0x44, 0xb6, 0x52, 0xc0, 0x6a, 0xdb, 0x6e,
		0x2e, 0x98, 0xd9, 0x6b, 0x86, 0xb8, 0xad, 0x9d, 0x3d, 0xcc, 0xb5, 0x05, 0xe8, 0x03, 0x18, 0xa1,
		0xbc, 0x0d, 0xf8, 0x96, 0x89, 0x03, 0x1b, 0xdb, 0x46, 0x68, 0xdc, 0x71, 0xbc, 0x3d, 0x8d, 0x0f,
		0x46, 0x5b, 0x50, 0x75, 0xf1, 0x91, 0xee, 0x77, 0xf9, 0xd6, 0x44, 0x9e, 0x4b, 0x09, 0xf8, 0xa4,
		0x8b, 0x8f, 0xb4, 0x2e, 0xdb, 0x93, 0x40, 0x5d, 0x86, 0x25, 0x01, 0xab, 0xf9, 0x46, 0xfc, 0x40,
		0x81, 0x85, 0x9d, 0x9e, 0x6b, 0xee, 0x1c, 0x18, 0xbe, 0xc5, 0xe3, 0x9b, 0x7c, 0x1b, 0x2e, 0x42,
		0x35, 0xf0, 0xba, 0xbe, 0x89, 0x75, 0x5e, 0xdb, 0xcb, 0xf7, 0x62, 0x8a, 0xb5, 0x6e, 0xb1, 0x46,
		0xb4, 0x04, 0x63, 0x01, 0x01, 0x8e, 0x2e, 0xb0, 0x61, 0x6d, 0x94, 0x7e, 0x37, 0x2d, 0xd4, 0x80,
		0x33, 0xd4, 0x59, 0xac, 0x94, 0x7a, 0x70, 0x74, 0x9c, 0xba, 0x04, 0x8b, 0x39, 0x5a, 0x38, 0x9d,
		0xff, 0x32, 0x0c, 0x67, 0x49, 0x5f, 0x74, 0x11, 0xbe, 0x4a, 0x59, 0xa9, 0xc1, 0x68, 0x14, 0x4f,
		0x62, 0x47, 0x35, 0xfa, 0x24, 0x27, 0xb9, 0xef, 0xcc, 0xc6, 0x81, 0x82, 0x38, 0xb0, 0x40, 0x78,
		0x92, 0x8f, 0x22, 0x0d, 0x1f, 0x37, 0x8a, 0x74, 0x1e, 0x20, 0x72, 0xaa, 0x6c, 0x8b, 0x3a, 0xa1,
		0x15, 0x6d, 0x9c, 0xb7, 0x34, 0xad, 0x9c, 0xab, 0x3e, 0x7a, 0x3c, 0x57, 0xfd, 0x13, 0x9e, 0xbb,
		0xe9, 0x7b, 0xcd, 0x14, 0xcb, 0x58, 0x29, 0x96, 0x59, 0x02, 0x16, 0xdb, 0xbf, 0x14, 0xd7, 0x15,
		0x18, 0x8d, 0x5c, 0xee, 0xf1, 0x01, 0x5c, 0xee, 0x68, 0x70, 0x32, 0x5c, 0x00, 0xe9, 0x70, 0xc1,
		0x2d, 0x98, 0x64, 0x99, 0x25, 0x5e, 0xe3, 0x3b, 0x31, 0x40, 0x8d, 0xef, 0x04, 0x4d, 0x38, 0xf1,
		0xf2, 0xde, 0x77, 0x81, 0x96, 0xe8, 0xf2, 0x9a, 0x76, 0xdd, 0xb6, 0xb0, 0x1b, 0xda, 0x61, 0x8f,
		0xc6, 0xf2, 0xc6, 0x35, 0x44, 0xfa, 0x3e, 0xa5, 0x5d, 0x4d, 0xde, 0x83, 0x1e, 0xc1, 0x74, 0x46,
		0x35, 0xf0, 0xb8, 0xdd, 0xc5, 0x81, 0x94, 0x82, 0x56, 0x4d, 0x2b, 0x04, 0x75, 0x01, 0xe6, 0xd2,
		0x92, 0xcc, 0x45, 0xfc, 0x4f, 0x15, 0x58, 0x8e, 0xea, 0xd6, 0xbe, 0x22, 0x26, 0x9c, 0xfa, 0x27,
		0x0a, 0x9c, 0x13, 0xd3, 0xc4, 0xbd, 0x9b, 0xf7, 0x60, 0xa1, 0xcd, 0xda, 0x59, 0x56, 0x45, 0xb7,
		0x5d, 0xdd, 0x34, 0xcc, 0x03, 0xcc, 0x29, 0x3c, 0xdb, 0x4e, 0x40, 0x35, 0xdd, 0x2d, 0xd2, 0x85,
		0xae, 0xc3, 0x52, 0x0e, 0xc8, 0x32, 0x42, 0x63, 0xcf, 0x08, 0x30, 0x37, 0x82, 0x17, 0xd2, 0x70,
		0xdb, 0xbc, 0x57, 0x3d, 0x07, 0xf5, 0x88, 0x1e, 0xce, 0xcf, 0x8f, 0xbd, 0xb8, 0xf0, 0x48, 0xfd,
		0x83, 0xa1, 0x3e, 0x0b, 0x53, 0xdd, 0x9c, 0xda, 0x75, 0x98, 0x71, 0xbb, 0xed, 0x3d, 0xec, 0xeb,
		0x5e, 0x4b, 0xa7, 0x5a, 0x2a, 0xa0, 0x74, 0x0e, 0x6b, 0x55, 0xd6, 0xfe, 0xb8, 0x45, 0x95, 0x4f,
		0x40, 0x98, 0x1d, 0x69, 0xb5, 0x80, 0xc6, 0x0e, 0x86, 0xb5, 0x31, 0xae, 0xd6, 0x02, 0xd4, 0x84,
		0x49, 0xbe, 0x13, 0x6c, 0xa9, 0xe2, 0x1a, 0xcd, 0x48, 0x1c, 0x58, 0x30, 0x87, 0xae, 0x9c, 0x1a,
		0x77, 0x13, 0x56, 0xbf, 0x01, 0x5d, 0x81, 0x45, 0x36, 0x8f, 0xe9, 0xb9, 0xa1, 0xef, 0x39, 0x0e,
		0xf6, 0x29, 0x4f, 0xba, 0xec, 0xa6, 0x18, 0xd7, 0xe6, 0x69, 0xf7, 0x56, 0xdc, 0xcb, 0xf4, 0x22,
		0x3d, 0x21, 0x96, 0xe5, 0xe3, 0x20, 0xe0, 0x11, 0xc7, 0xe8, 0x53, 0x6d, 0xc0, 0x2c, 0xcb, 0x4b,
		0x11, 0xb8, 0x48, 0x76, 0x92, 0x4a, 0x5a, 0x49, 0x29, 0x69, 0x75, 0x0e, 0x50, 0x72, 0x3c, 0x17,
		0xc6, 0xff, 0x52, 0x60, 0x96, 0x59, 0xe7, 0x49, 0x33, 0xb0, 0x18, 0x0d, 0xba, 0xc9, 0x73, 0xb8,
		0x71, 0xca, 0xba, 0xba, 0x79, 0xa1, 0x80, 0x21, 0x04, 0x23, 0x0d, 0x8b, 0xd1, 0x2c, 0x2e, 0x0d,
		0x89, 0x25, 0x82, 0xab, 0x95, 0x54, 0x70, 0x75, 0x0b, 0xa6, 0x0f, 0xed, 0xc0, 0xde, 0xb3, 0x1d,
		0x3b, 0xec, 0x31, 0x4d, 0x54, 0x1e, 0x0f, 0xac, 0xf6, 0x41, 0xa8, 0x1a, 0x5a, 0x83, 0x49, 0x7e,
		0x85, 0xe9, 0xae, 0xc1, 0x35, 0xee, 0xb8, 0x36, 0xc1, 0xdb, 0x1e, 0x19, 0x6d, 0x4c, 0xb8, 0x90,
		0x5c, 0x2e, 0xe7, 0xc2, 0x0f, 0x29, 0x17, 0x02, 0x1c, 0x3e, 0xed, 0xe2, 0x2e, 0x1e, 0x80, 0x0b,
		0xd9, 0x99, 0x86, 0x72, 0x33, 0xa5, 0x19, 0x55, 0x39, 0x26, 0xa3, 0x18, 0x9d, 0x7d, 0x82, 0x38,
		0x9d, 0x3f, 0x56, 0x60, 0x2e, 0x92, 0xfb, 0xaf, 0x0c, 0xa9, 0x8f, 0x61, 0x3e, 0x43, 0x13, 0x3f,
		0x85, 0x57, 0x60, 0xb1, 0xe3, 0x7b, 0x26, 0x0e, 0x02, 0xdb, 0xdd, 0xd7, 0xe9, 0x73, 0x1f, 0xa6,
		0x07, 0xc8, 0x61, 0xac, 0x10, 0x99, 0xef, 0x77, 0x53, 0x48, 0xaa, 0x04, 0x02, 0xf5, 0x7b, 0x0a,
		0x9c, 0xbf, 0x8f, 0x43, 0xad, 0xff, 0xf8, 0xe7, 0x21, 0x0e, 0x02, 0x63, 0x1f, 0xc7, 0x26, 0xcb,
		0x2d, 0x18, 0xa1, 0xe9, 0x1b, 0x86, 0x68, 0x62, 0xf3, 0xcd, 0x02, 0x6a, 0x13, 0x28, 0x68, 0x6e,
		0x47, 0xe3, 0x60, 0x03, 0x30, 0x85, 0xe8, 0x98, 0x95, 0x22, 0x2a, 0xf8, 0x02, 0x5f, 0x40, 0x95,
		0x71, 0xbd, 0xcd, 0x7b, 0x38, 0x39, 0x9f, 0x14, 0x46, 0x1f, 0xe5, 0x08, 0x1b, 0xf4, 0x6c, 0x46,
		0xad, 0x2c, 0xd2, 0x38, 0x15, 0x24, 0xdb, 0xea, 0x0e, 0xa0, 0xfc, 0xa0, 0x64, 0x34, 0x71, 0x98,
		0x45, 0x13, 0xbf, 0x93, 0x8e, 0x26, 0x5e, 0x2a, 0x67, 0x50, 0x4c, 0x4c, 0x22, 0x92, 0xd8, 0x86,
		0xd5, 0xfb, 0x38, 0xdc, 0x7e, 0xf0, 0x54, 0xb2, 0x17, 0x4d, 0x00, 0x76, 0xa4, 0xdd, 0x96, 0x17,
		0x31, 0x60, 0x80, 0xe9, 0x88, 0x20, 0x51, 0x35, 0x49, 0x45, 0x8f, 0xfc, 0x0a, 0xd4, 0x97, 0xb0,
		0x26, 0x99, 0x8e, 0x33, 0x7d, 0x07, 0x66, 0x13, 0xcf, 0xc2, 0x68, 0x2a, 0x31, 0x9a, 0xf6, 0x8d,
		0xc1, 0xa6, 0xd5, 0x66, 0xfc, 0x74, 0x43, 0xa0, 0xfe, 0xab, 0x02, 0x73, 0x1a, 0x36, 0x3a, 0x1d,
		0x87, 0xb9, 0x3c, 0xf1, 0xea, 0x16, 0x60, 0x84, 0x87, 0xee, 0xd9, 0x3d, 0xc7, 0xbf, 0xe4, 0xa5,
		0xfe, 0xe2, 0x4b, 0xba, 0x72, 0x5a, 0x7b, 0xf4, 0x64, 0xce, 0x85, 0xba, 0x08, 0xf3, 0x99, 0xa5,
		0x71, 0x6d, 0xf2, 0x0b, 0x05, 0x96, 0x35, 0xdc, 0xf2, 0x71, 0x70, 0x10, 0x67, 0x31, 0x08, 0x37,
		0xbe, 0x82, 0x6b, 0x27, 0x8e, 0xbf, 0x98, 0x54, 0xbe, 0x96, 0xeb, 0xb0, 0xb8, 0xe5, 0x75, 0x5d,
		0x22, 0x3c, 0x59, 0x01, 0x5d, 0x01, 0x68, 0x79, 0xbe, 0x89, 0xef, 0xe1, 0xd0, 0x3c, 0xe0, 0x21,
		0xd9, 0x44, 0x8b, 0x6a, 0x40, 0x2d, 0x0f, 0xca, 0x85, 0xed, 0x2e, 0x8c, 0x62, 0x37, 0xa4, 0x99,
		0x58, 0x26, 0x62, 0x6f, 0x17, 0x88, 0x18, 0xb7, 0x42, 0xb6, 0x1f, 0x3c, 0xa5, 0xb8, 0x78, 0xb6,
		0x95, 0xc3, 0xaa, 0xbf, 0x18, 0x82, 0x05, 0x0d, 0x1b, 0x96, 0x80, 0xba, 0x4d, 0x38, 0x13, 0xd7,
		0x36, 0x54, 0x37, 0x57, 0x8a, 0x6c, 0x8b, 0x07, 0x4f, 0xa9, 0xd6, 0xa5, 0x63, 0x65, 0xae, 0x58,
		0xde, 0x99, 0xab, 0x88, 0x9c, 0xb9, 0x5d, 0xa8, 0xd9, 0x2e, 0x19, 0x61, 0x1f, 0x62, 0x1d, 0xbb,
		0xb1, 0x06, 0x1b, 0xb0, 0x1e, 0x6c, 0x3e, 0x06, 0xbe, 0xeb, 0x46, 0xaa, 0xa8, 0x69, 0x11, 0xc1,
		0xe8, 0x10, 0x24, 0x81, 0xfd, 0x39, 0xbb, 0x7c, 0x87, 0xb5, 0x31, 0xd2, 0xb0, 0x63, 0x7f, 0x8e,
		0xd1, 0x1b, 0x30, 0x4d, 0xab, 0x1a, 0xe8, 0x08, 0x96, 0x7c, 0x1f, 0xa1, 0xc9, 0x77, 0x5a, 0xec,
		0xf0, 0xc4, 0xd8, 0xc7, 0xac, 0x16, 0xef, 0x6f, 0x87, 0x60, 0x31, 0xc7, 0x2b, 0xbe, 0x1d, 0x27,
		0x61, 0x96, 0x50, 0x5f, 0x0c, 0x9d, 0x4e, 0x5f, 0xa0, 0xef, 0xc2, 0x42, 0x0e, 0x69, 0x14, 0x04,
		0x3c, 0xae, 0x02, 0x9c, 0xcb, 0x62, 0xa7, 0x31, 0x40, 0x01, 0xbb, 0xce, 0x88, 0xd8, 0xf5, 0xef,
		0x0a, 0x2c, 0x3e, 0xe9, 0xfa, 0xfb, 0xf8, 0xeb, 0x2d, 0x5b, 0x6a, 0x1d, 0x6a, 0xf9, 0x65, 0xf2,
		0xc3, 0xff, 0xe5, 0x10, 0x2c, 0x3e, 0xc4, 0x5f, 0x7b, 0x1e, 0xfc, 0xdf, 0x9c, 0xaf, 0x3b, 0x50,
		0xcb, 0xf3, 0x8a, 0x9f, 0x2f, 0x01, 0x0e, 0x45, 0x84, 0xe3, 0x0b, 0x05, 0xce, 0x3d, 0xf2, 0x42,
		0xbb, 0xd5, 0x23, 0xee, 0xb6, 0x77, 0x88, 0xfd, 0x87, 0x06, 0xf1, 0xa5, 0x63, 0xae, 0x7f, 0x17,
		0x16, 0x5a, 0xbc, 0x47, 0x6f, 0xd3, 0x2e, 0x3d, 0x65, 0xb0, 0x15, 0x9d, 0x8f, 0x34, 0x3a, 0x66,
		0xb3, 0xcd, 0xb5, 0xf2, 0x8d, 0x81, 0x7a, 0x01, 0xce, 0x17, 0x50, 0xc0, 0x85, 0xc2, 0x80, 0xe5,
		0xfb, 0x38, 0xdc, 0xf2, 0xbd, 0x20, 0xe0, 0xbb, 0x92, 0xba, 0xdc, 0x52, 0x8e, 0x9f, 0x92, 0x71,
		0xfc, 0x2e, 0x42, 0x35, 0x34, 0xfc, 0x7d, 0x1c, 0xc6, 0xbb, 0xcc, 0xae, 0xb9, 0x29, 0xd6, 0xca,
		0xf1, 0xa9, 0xbf, 0xaa, 0xc0, 0x39, 0xf1, 0x1c, 0x9c, 0x9f, 0x6d, 0x82, 0x87, 0xa8, 0x86, 0xbd,
		0x1e, 0x73, 0x43, 0xf9, 0xf2, 0xef, 0xcb, 0x0c, 0xc4, 0x42, 0x74, 0xd4, 0xf8, 0x0e, 0xee, 0xf4,
		0xa8, 0x01, 0xc8, 0x6e, 0x98, 0xc9, 0x30, 0xd1, 0x84, 0xbe, 0x50, 0x60, 0xbe, 0x45, 0x33, 0x5e,
		0xba, 0x69, 0x74, 0x03, 0xdc, 0x9f, 0x96, 0xe9, 0xbb, 0x87, 0x27, 0x9b, 0x96, 0x25, 0xd1, 0xb6,
		0x08, 0xc6, 0xd4, 0xe4, 0xa8, 0x95, 0xeb, 0xa8, 0x77, 0x60, 0x36, 0x47, 0xa5, 0xc0, 0x3c, 0xbd,
		0x9b, 0x36, 0x4f, 0x37, 0x0a, 0xc4, 0x21, 0x4b, 0x13, 0xdf, 0xbc, 0xa4, 0x8d, 0x5a, 0xef, 0xc0,
		0x62, 0x01, 0x81, 0x82, 0x79, 0x6f, 0x25, 0xe7, 0xad, 0x16, 0x86, 0x7b, 0xef, 0xe3, 0xb0, 0x9f,
		0x3d, 0xa4, 0x78, 0x93, 0x56, 0xf1, 0x7f, 0x2a, 0xb0, 0xce, 0xf3, 0x75, 0x39, 0xa6, 0xe5, 0x12,
		0x0d, 0x12, 0xcf, 0x6c, 0x30, 0x29, 0x43, 0xcf, 0x98, 0x10, 0xc5, 0x85, 0x15, 0x51, 0xac, 0x7a,
		0x70, 0xa6, 0xf1, 0x72, 0x8a, 0xa9, 0x30, 0xf1, 0x15, 0xa0, 0xd7, 0x61, 0xaa, 0x45, 0x0c, 0xa0,
		0x47, 0x98, 0xd9, 0x52, 0x3c, 0xbf, 0x94, 0x6e, 0x54, 0x7d, 0x78, 0x6b, 0x80, 0xb5, 0xc6, 0xe6,
		0xd2, 0x70, 0x64, 0x8f, 0x9f, 0x6c, 0x5b, 0x29, 0xb4, 0xfa, 0x01, 0x7d, 0x11, 0x16, 0x1d, 0x6c,
		0x7a, 0x49, 0x0e, 0x10, 0x1b, 0x53, 0x43, 0xfa, 0xa4, 0x2a, 0x0d, 0x16, 0x1b, 0x0e, 0xf3, 0xfd,
		0xbc, 0x4a, 0x14, 0x88, 0xe9, 0xf2, 0x42, 0xa9, 0x61, 0xad, 0x9f, 0x74, 0xd9, 0x61, 0x51, 0x98,
		0xae, 0x4b, 0xe3, 0xe2, 0xd1, 0x9b, 0x45, 0x1e, 0x42, 0x62, 0xf1, 0xa1, 0x29, 0xde, 0xca, 0x22,
		0x48, 0x9b, 0xff, 0xfc, 0x0e, 0x00, 0xb7, 0xfe, 0x6e, 0x3f, 0x69, 0xa2, 0xef, 0x2b, 0xb0, 0x20,
		0x7e, 0x7b, 0x8d, 0xae, 0x14, 0x1e, 0x3f, 0xe9, 0xeb, 0xef, 0xfa, 0xd5, 0x63, 0xc3, 0xf1, 0x55,
		0xff, 0xb1, 0x02, 0x8b, 0x05, 0xaf, 0xda, 0x91, 0x04, 0xa9, 0xf4, 0x9d, 0x7f, 0xfd, 0xda, 0xf1,
		0x01, 0x39, 0x39, 0x3f, 0x57, 0x60, 0xb5, 0xec, 0x81, 0x3a, 0xfa, 0x4e, 0x19, 0xfa, 0xb2, 0xc7,
		0xf2, 0xf5, 0xdb, 0xa7, 0xc0, 0xc0, 0x29, 0x25, 0x9b, 0x28, 0x7e, 0x7a, 0x2e, 0xd9, 0x44, 0xe9,
		0x93, 0x77, 0xc9, 0x26, 0x96, 0xbc, 0x71, 0xff, 0x33, 0x05, 0xea, 0xc5, 0x0f, 0xb4, 0x51, 0x71,
		0x7d, 0x55, 0xe9, 0xc3, 0xf5, 0xfa, 0x87, 0x27, 0x82, 0xe5, 0x74, 0xfd, 0x58, 0x81, 0xa5, 0xc2,
		0xe7, 0xd7, 0xe8, 0x7a, 0x21, 0xea, 0xb2, 0xd7, 0xdf, 0xf5, 0x1b, 0x27, 0x01, 0xe5, 0x44, 0xb9,
		0x30, 0x95, 0x7a, 0x97, 0x8b, 0xde, 0x29, 0x44, 0x26, 0x7a, 0xfe, 0x5b, 0x6f, 0x0c, 0x3a, 0x9c,
		0xcf, 0xf7, 0x85, 0x02, 0x67, 0x05, 0x8f, 0x5b, 0xd1, 0x7b, 0xf2, 0xdd, 0x16, 0x3e, 0xa7, 0xad,
		0xbf, 0x7f, 0x3c, 0x20, 0x4e, 0x42, 0x08, 0xd3, 0x99, 0x87, 0xa4, 0x68, 0x43, 0x76, 0xcf, 0x0b,
		0x52, 0x0e, 0xf5, 0x77, 0x07, 0x07, 0xe0, 0xb3, 0x1e, 0xc1, 0x4c, 0xf6, 0xc1, 0x14, 0x2a, 0xc6,
		0x52, 0xf0, 0xa4, 0xac, 0x7e, 0xf9, 0x18, 0x10, 0x09, 0xb1, 0x2b, 0xac, 0x1c, 0x94, 0x88, 0x5d,
		0xd9, 0xa3, 0x8d, 0xfa, 0x29, 0x0a, 0x15, 0xd1, 0x5f, 0x2a, 0x70, 0x4e, 0x56, 0x58, 0x88, 0x6e,
		0x9e, 0xb0, 0x1e, 0x91, 0x91, 0xf6, 0xd1, 0xa9, 0xaa, 0x19, 0x39, 0xcb, 0x0a, 0xaa, 0xef, 0xa4,
		0x2c, 0x93, 0xd7, 0xfe, 0x49, 0x59, 0x56, 0x52, 0xec, 0x97, 0xd8, 0x47, 0x41, 0x69, 0x73, 0xe9,
		0x3e, 0x16, 0x17, 0x95, 0x97, 0xee, 0xa3, 0xac, 0x92, 0x3a, 0xb1, 0x8f, 0xc2, 0x02, 0xb8, 0xf2,
		0x7d, 0x94, 0x15, 0xe1, 0x95, 0xef, 0xa3, 0xb4, 0xea, 0x2e, 0xb9, 0x8f, 0xf9, 0x1a, 0xb7, 0xf2,
		0x7d, 0x2c, 0xac, 0xb0, 0x2b, 0xdf, 0xc7, 0xe2, 0x92, 0x3a, 0xf4, 0x17, 0x34, 0x88, 0x58, 0x58,
		0xbc, 0x86, 0x3e, 0x3c, 0xd6, 0x9a, 0xd3, 0xe5, 0x73, 0xf5, 0x9b, 0x27, 0x03, 0x4e, 0x91, 0x56,
		0x58, 0xb9, 0x29, 0x25, 0xad, 0xac, 0x76, 0x54, 0x4a, 0x5a, 0x79, 0xb1, 0xe8, 0x5f, 0x29, 0xb0,
		0x22, 0x2f, 0xd9, 0x42, 0xdf, 0x96, 0x4c, 0x30, 0x40, 0xdd, 0x5a, 0xfd, 0xd6, 0x89, 0xe1, 0x39,
		0x8d, 0x3f, 0x54, 0xa0, 0x56, 0x54, 0xb8, 0x87, 0xae, 0x49, 0xb0, 0x4b, 0x2b, 0x14, 0xeb, 0xd7,
		0x4f, 0x00, 0xc9, 0x29, 0xfa, 0x9e, 0x02, 0x73, 0xa2, 0xf2, 0x2f, 0x54, 0x7c, 0x73, 0x4a, 0x8a,
		0xdd, 0xea, 0x1f, 0x1c, 0x13, 0x8a, 0x53, 0xf1, 0x53, 0xfa, 0x1f, 0x49, 0x92, 0xea, 0x27, 0xf4,
		0x51, 0x89, 0x6c, 0xc8, 0x6b, 0xd3, 0xea, 0xdf, 0x3e, 0x29, 0x38, 0x27, 0xf0, 0x73, 0x98, 0xcd,
		0x15, 0x02, 0xa1, 0xcb, 0x12, 0xa4, 0xe2, 0xfa, 0xac, 0xfa, 0xe6, 0x71, 0x40, 0xfa, 0xd6, 0x48,
		0xa6, 0xb4, 0x47, 0x62, 0x8d, 0x88, 0x0b, 0x92, 0x24, 0xd6, 0x48, 0x41, 0xd5, 0x10, 0x7a, 0x0e,
		0x93, 0xc9, 0x52, 0x0b, 0xf4, 0x2d, 0x29, 0x86, 0x4c, 0x6d, 0x51, 0xfd, 0x9d, 0x01, 0x47, 0x27,
		0xa4, 0x50, 0x54, 0x2b, 0x21, 0x91, 0x42, 0x49, 0xb9, 0x87, 0x44, 0x0a, 0xa5, 0x05, 0x19, 0xc4,
		0xf2, 0x14, 0x94, 0x40, 0x48, 0x2c, 0xcf, 0xe2, 0x7a, 0x8a, 0xfa, 0xfb, 0xc7, 0x03, 0x8a, 0x1f,
		0x7d, 0x40, 0xbf, 0xa2, 0x00, 0x5d, 0x2a, 0xc4, 0x91, 0x2b, 0x53, 0xa8, 0xbf, 0x3d, 0xd0, 0xd8,
		0xfe, 0x34, 0xfd, 0x94, 0xbd, 0x64, 0x9a, 0x5c, 0x19, 0x83, 0x64, 0x9a, 0x7c, 0x0d, 0x00, 0x9b,
		0x26, 0xca, 0xb8, 0x4b, 0xa7, 0xc9, 0xd4, 0x09, 0x48, 0xa7, 0xc9, 0xa6, 0xf0, 0x89, 0x87, 0x92,
		0xca, 0x96, 0x4b, 0x3c, 0x14, 0x51, 0xa6, 0x5f, 0xe2, 0xa1, 0x88, 0x93, 0xf0, 0xdf, 0x67, 0x7f,
		0xaf, 0x23, 0xc8, 0xa8, 0x4a, 0x5c, 0x59, 0x69, 0xf6, 0x5d, 0xe2, 0xca, 0x96, 0xe4, 0xcb, 0x89,
		0x01, 0x53, 0x98, 0xe0, 0x95, 0x18, 0x30, 0x65, 0x39, 0x68, 0x89, 0x01, 0x53, 0x9e, 0x4f, 0x76,
		0x61, 0x2a, 0x95, 0x1e, 0x95, 0x6c, 0x88, 0x28, 0x43, 0x2c, 0xd9, 0x10, 0x61, 0xd6, 0x95, 0xaa,
		0x0f, 0x51, 0x2a, 0x13, 0xc9, 0xdc, 0xbf, 0xc2, 0x24, 0xad, 0x44, 0x7d, 0xc8, 0xf2, 0xa5, 0xc4,
		0x7f, 0xcb, 0x26, 0x3d, 0x25, 0xfe, 0x5b, 0x41, 0x6a, 0x55, 0xe2, 0xbf, 0x15, 0x66, 0x54, 0x43,
		0x98, 0xce, 0x64, 0xf7, 0x24, 0x17, 0x84, 0x38, 0x67, 0x2a, 0xb9, 0x20, 0x8a, 0x12, 0x87, 0xc4,
		0x5d, 0xcd, 0x64, 0x8f, 0x64, 0xee, 0xaa, 0x38, 0x9f, 0x26, 0x73, 0x57, 0x0b, 0x52, 0x53, 0x64,
		0xe2, 0x6c, 0xb6, 0x45, 0x32, 0x71, 0x41, 0x12, 0x4b, 0x32, 0x71, 0x61, 0x2a, 0xe7, 0x8f, 0x14,
		0x98, 0x17, 0x26, 0x48, 0x50, 0xb1, 0xc4, 0xc8, 0x52, 0x3a, 0xf5, 0x2b, 0xc7, 0x05, 0x4b, 0xc8,
		0xbb, 0x28, 0xbd, 0x20, 0x91, 0x77, 0x49, 0xde, 0x46, 0x22, 0xef, 0xd2, 0x4c, 0xcc, 0x97, 0x4a,
		0xfc, 0x3e, 0xa8, 0x38, 0x8e, 0x8d, 0x6e, 0x97, 0xf9, 0x1b, 0xa5, 0xf1, 0xfe, 0xfa, 0x9d, 0xd3,
		0xa0, 0x48, 0x85, 0x74, 0x92, 0x81, 0x6c, 0x79, 0x48, 0x47, 0x10, 0x29, 0x97, 0x87, 0x74, 0x44,
		0x31, 0xf2, 0x3b, 0xd7, 0x7f, 0xfb, 0xea, 0xbe, 0x1d, 0x1e, 0x74, 0xf7, 0x1a, 0xa6, 0xd7, 0xde,
		0x48, 0xfd, 0x83, 0x72, 0x63, 0x1f, 0xbb, 0xec, 0xcf, 0xb2, 0x13, 0xff, 0xd6, 0xfd, 0x21, 0xff,
		0x79, 0x78, 0x79, 0x6f, 0x84, 0xf6, 0xbd, 0xf7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x15, 0xd0,
		0xca, 0x61, 0xd9, 0x5b, 0x00, 0x00,
	},
	// google/protobuf/duration.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0x29, 0x2d, 0x4a,
		0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0x56,
		0x5c, 0x1c, 0x2e, 0x50, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa9, 0xc9, 0xf9, 0x79, 0x29, 0xc5,
		0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x5e, 0x62, 0x5e,
		0x7e, 0xb1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xe3, 0xd4, 0xcc, 0xc8, 0x25, 0x9c,
		0x9c, 0x9f, 0xab, 0x87, 0x66, 0xa6, 0x13, 0x2f, 0xcc, 0xc4, 0x00, 0x90, 0x48, 0x00, 0x63, 0x94,
		0x21, 0x54, 0x45, 0x7a, 0x7e, 0x4e, 0x62, 0x5e, 0xba, 0x5e, 0x7e, 0x51, 0x3a, 0xc2, 0x81, 0x25,
		0x95, 0x05, 0xa9, 0xc5, 0xfa, 0xd9, 0x79, 0xf9, 0xe5, 0x79, 0x70, 0xc7, 0x16, 0x24, 0xfd, 0x60,
		0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce, 0x1d, 0xa2, 0x39, 0x00, 0xaa,
		0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4, 0x35, 0x89, 0x0d, 0x6c, 0x94,
		0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xef, 0x8a, 0xb4, 0xc3, 0xfb, 0x00, 0x00, 0x00,
	},
	// google/protobuf/timestamp.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc9, 0xcc, 0x4d,
		0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0xd0, 0x03, 0x0b, 0x09, 0xf1, 0x43, 0x14, 0xe8, 0xc1, 0x14, 0x28,
		0x59, 0x73, 0x71, 0x86, 0xc0, 0xd4, 0x08, 0x49, 0x70, 0xb1, 0x17, 0xa7, 0x26, 0xe7, 0xe7, 0xa5,
		0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x79, 0x89,
		0x79, 0xf9, 0xc5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x53, 0x2b, 0x23, 0x97,
		0x70, 0x72, 0x7e, 0xae, 0x1e, 0x9a, 0xa1, 0x4e, 0x7c, 0x70, 0x23, 0x03, 0x40, 0x42, 0x01, 0x8c,
		0x51, 0x46, 0x50, 0x25, 0xe9, 0xf9, 0x39, 0x89, 0x79, 0xe9, 0x7a, 0xf9, 0x45, 0xe9, 0x48, 0x6e,
		0xac, 0x2c, 0x48, 0x2d, 0xd6, 0xcf, 0xce, 0xcb, 0x2f, 0xcf, 0x43, 0xb8, 0xb7, 0x20, 0xe9, 0x07,
		0x23, 0xe3, 0x22, 0x26, 0x66, 0xf7, 0x00, 0xa7, 0x55, 0x4c, 0x72, 0xee, 0x10, 0xdd, 0x01, 0x50,
		0x2d, 0x7a, 0xe1, 0xa9, 0x39, 0x39, 0xde, 0x20, 0x0d, 0x21, 0x20, 0xbd, 0x49, 0x6c, 0x60, 0xb3,
		0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x65, 0xce, 0x7d, 0xff, 0x00, 0x00, 0x00,
	},
	// google/protobuf/wrappers.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x2f, 0x4a, 0x2c,
		0x28, 0x48, 0x2d, 0x2a, 0xd6, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0xca,
		0x5c, 0xdc, 0x2e, 0xf9, 0xa5, 0x49, 0x39, 0xa9, 0x61, 0x89, 0x39, 0xa5, 0xa9, 0x42, 0x22, 0x5c,
		0xac, 0x65, 0x20, 0x86, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x63, 0x10, 0x84, 0xa3, 0xa4, 0xc4, 0xc5,
		0xe5, 0x96, 0x93, 0x9f, 0x58, 0x82, 0x45, 0x0d, 0x13, 0x92, 0x1a, 0xcf, 0xbc, 0x12, 0x33, 0x13,
		0x2c, 0x6a, 0x98, 0x61, 0x6a, 0x94, 0xb9, 0xb8, 0x43, 0x71, 0x29, 0x62, 0x41, 0x35, 0xc8, 0xd8,
		0x08, 0x8b, 0x1a, 0x56, 0x34, 0x83, 0xb0, 0x2a, 0xe2, 0x85, 0x29, 0x52, 0xe4, 0xe2, 0x74, 0xca,
		0xcf, 0xcf, 0xc1, 0xa2, 0x84, 0x03, 0xc9, 0x9c, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0x74, 0x2c, 0x8a,
		0x38, 0x91, 0x1c, 0xe4, 0x54, 0x59, 0x92, 0x5a, 0x8c, 0x45, 0x0d, 0x0f, 0x54, 0x8d, 0x53, 0x33,
		0x23, 0x97, 0x70, 0x72, 0x7e, 0xae, 0x1e, 0x5a, 0xf0, 0x3a, 0xf1, 0x86, 0x43, 0xc3, 0x3f, 0x00,
		0x24, 0x12, 0xc0, 0x18, 0x65, 0x08, 0x55, 0x91, 0x9e, 0x9f, 0x93, 0x98, 0x97, 0xae, 0x97, 0x5f,
		0x94, 0x8e, 0x88, 0xab, 0x92, 0xca, 0x82, 0xd4, 0x62, 0xfd, 0xec, 0xbc, 0xfc, 0xf2, 0x3c, 0x78,
		0xbc, 0x15, 0x24, 0xfd, 0x60, 0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce,
		0x1d, 0xa2, 0x39, 0x00, 0xaa, 0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4,
		0x35, 0x89, 0x0d, 0x6c, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x92, 0x48, 0x30, 0x06,
		0x02, 0x00, 0x00,
	},
	// uber/cadence/api/v1/common.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
		0x14, 0x9e, 0xe2, 0xd8, 0x49, 0x8f, 0xdd, 0xd4, 0x63, 0xd6, 0xd4, 0xc9, 0xfe, 0x3c, 0x03, 0x43,
		0xb3, 0x01, 0x93, 0x10, 0xf7, 0xa6, 0x58, 0x51, 0x0c, 0x4e, 0xec, 0xac, 0x6a, 0xb7, 0xc4, 0x90,
		0x8d, 0x66, 0xdb, 0xc5, 0x04, 0x5a, 0x3c, 0x72, 0x39, 0x4b, 0xa4, 0x40, 0x51, 0x4e, 0x7c, 0xb7,
		0x27, 0xd9, 0xc5, 0x5e, 0x69, 0x2f, 0x34, 0x48, 0xa2, 0x63, 0xa7, 0xf3, 0x90, 0x9b, 0x61, 0x77,
		0xe4, 0xf9, 0x7e, 0xce, 0x47, 0xe1, 0x90, 0x82, 0x76, 0x36, 0x41, 0xe5, 0x04, 0x94, 0xa1, 0x08,
		0xd0, 0xa1, 0x09, 0x77, 0xe6, 0x27, 0x4e, 0x20, 0xe3, 0x58, 0x0a, 0x3b, 0x51, 0x52, 0x4b, 0xb2,
		0x9f, 0x33, 0x6c, 0xc3, 0xb0, 0x69, 0xc2, 0xed, 0xf9, 0xc9, 0xd1, 0x67, 0x53, 0x29, 0xa7, 0x11,
		0x3a, 0x05, 0x65, 0x92, 0x85, 0x0e, 0xcb, 0x14, 0xd5, 0x7c, 0x29, 0xea, 0xbc, 0x81, 0x0f, 0xaf,
		0xa4, 0x9a, 0x85, 0x91, 0xbc, 0x1e, 0xdc, 0x60, 0x90, 0xe5, 0x10, 0xf9, 0x1c, 0xea, 0xd7, 0xa6,
		0xe8, 0x73, 0xd6, 0xb2, 0xda, 0xd6, 0xf1, 0x03, 0x0f, 0x96, 0x25, 0x97, 0x91, 0xc7, 0x50, 0x53,
		0x99, 0xc8, 0xb1, 0xad, 0x02, 0xab, 0xaa, 0x4c, 0xb8, 0xac, 0xd3, 0x81, 0xc6, 0xd2, 0x6c, 0xbc,
		0x48, 0x90, 0x10, 0xd8, 0x16, 0x34, 0x46, 0x63, 0x50, 0xac, 0x73, 0x4e, 0x2f, 0xd0, 0x7c, 0xce,
		0xf5, 0xe2, 0x5f, 0x39, 0x9f, 0xc2, 0xce, 0x90, 0x2e, 0x22, 0x49, 0x59, 0x0e, 0x33, 0xaa, 0x69,
		0x01, 0x37, 0xbc, 0x62, 0xdd, 0x79, 0x01, 0x3b, 0xe7, 0x94, 0x47, 0x99, 0x42, 0x72, 0x00, 0x35,
		0x85, 0x34, 0x95, 0xc2, 0xe8, 0xcd, 0x8e, 0xb4, 0x60, 0x87, 0xa1, 0xa6, 0x3c, 0x4a, 0x8b, 0x84,
		0x0d, 0x6f, 0xb9, 0xed, 0xfc, 0x61, 0xc1, 0xf6, 0x8f, 0x18, 0x4b, 0xf2, 0x12, 0x6a, 0x21, 0xc7,
		0x88, 0xa5, 0x2d, 0xab, 0x5d, 0x39, 0xae, 0x77, 0xbf, 0xb4, 0x37, 0x7c, 0x3f, 0x3b, 0xa7, 0xda,
		0xe7, 0x05, 0x6f, 0x20, 0xb4, 0x5a, 0x78, 0x46, 0x74, 0x74, 0x05, 0xf5, 0xb5, 0x32, 0x69, 0x42,
		0x65, 0x86, 0x0b, 0x93, 0x22, 0x5f, 0x92, 0x2e, 0x54, 0xe7, 0x34, 0xca, 0xb0, 0x08, 0x50, 0xef,
		0x7e, 0xb2, 0xd1, 0xde, 0x1c, 0xd3, 0x2b, 0xa9, 0xdf, 0x6e, 0x3d, 0xb7, 0x3a, 0x7f, 0x5a, 0x50,
		0x7b, 0x85, 0x94, 0xa1, 0x22, 0xdf, 0xbd, 0x17, 0xf1, 0xe9, 0x46, 0x8f, 0x92, 0xfc, 0xff, 0x86,
		0xfc, 0xcb, 0x82, 0xe6, 0x08, 0xa9, 0x0a, 0xde, 0xf5, 0xb4, 0x56, 0x7c, 0x92, 0x69, 0x4c, 0x89,
		0x0f, 0x7b, 0x5c, 0x30, 0xbc, 0x41, 0xe6, 0xdf, 0x89, 0xfd, 0x7c, 0xa3, 0xeb, 0xfb, 0x72, 0xdb,
		0x2d, 0xb5, 0xeb, 0xe7, 0x78, 0xc8, 0xd7, 0x6b, 0x47, 0xbf, 0x02, 0xf9, 0x27, 0xe9, 0x3f, 0x3c,
		0x55, 0x08, 0xbb, 0x7d, 0xaa, 0xe9, 0x69, 0x24, 0x27, 0xe4, 0x1c, 0x1e, 0xa2, 0x08, 0x24, 0xe3,
		0x62, 0xea, 0xeb, 0x45, 0x52, 0x0e, 0xe8, 0x5e, 0xf7, 0x8b, 0x8d, 0x5e, 0x03, 0xc3, 0xcc, 0x27,
		0xda, 0x6b, 0xe0, 0xda, 0xee, 0x76, 0x80, 0xb7, 0xd6, 0x06, 0x78, 0x58, 0x5e, 0x3a, 0x54, 0x6f,
		0x51, 0xa5, 0x5c, 0x0a, 0x57, 0x84, 0x32, 0x27, 0xf2, 0x38, 0x89, 0x96, 0x17, 0x21, 0x5f, 0x93,
		0xa7, 0xf0, 0x28, 0x44, 0xaa, 0x33, 0x85, 0xfe, 0xbc, 0xa4, 0x9a, 0x0b, 0xb7, 0x67, 0xca, 0xc6,
		0xa0, 0xf3, 0x06, 0x9e, 0x8c, 0xb2, 0x24, 0x91, 0x4a, 0x23, 0x3b, 0x8b, 0x38, 0x0a, 0x6d, 0x90,
		0x34, 0xbf, 0xab, 0x53, 0xe9, 0xa7, 0x6c, 0x66, 0x9c, 0xab, 0x53, 0x39, 0x62, 0x33, 0x72, 0x08,
		0xbb, 0xbf, 0xd1, 0x39, 0x2d, 0x80, 0xd2, 0x73, 0x27, 0xdf, 0x8f, 0xd8, 0xac, 0xf3, 0x7b, 0x05,
		0xea, 0x1e, 0x6a, 0xb5, 0x18, 0xca, 0x88, 0x07, 0x0b, 0xd2, 0x87, 0x26, 0x17, 0x5c, 0x73, 0x1a,
		0xf9, 0x5c, 0x68, 0x54, 0x73, 0x5a, 0xa6, 0xac, 0x77, 0x0f, 0xed, 0xf2, 0x79, 0xb1, 0x97, 0xcf,
		0x8b, 0xdd, 0x37, 0xcf, 0x8b, 0xf7, 0xc8, 0x48, 0x5c, 0xa3, 0x20, 0x0e, 0xec, 0x4f, 0x68, 0x30,
		0x93, 0x61, 0xe8, 0x07, 0x12, 0xc3, 0x90, 0x07, 0x79, 0xcc, 0xa2, 0xb7, 0xe5, 0x11, 0x03, 0x9d,
		0xad, 0x90, 0xbc, 0x6d, 0x4c, 0x6f, 0x78, 0x9c, 0xc5, 0xab, 0xb6, 0x95, 0x7b, 0xdb, 0x1a, 0xc9,
		0x6d, 0xdb, 0xaf, 0x56, 0x2e, 0x54, 0x6b, 0x8c, 0x13, 0x9d, 0xb6, 0xb6, 0xdb, 0xd6, 0x71, 0xf5,
		0x96, 0xda, 0x33, 0x65, 0xf2, 0x12, 0x3e, 0x16, 0x52, 0xf8, 0x2a, 0x3f, 0x3a, 0x9d, 0x44, 0xe8,
		0xa3, 0x52, 0x52, 0xf9, 0xe5, 0x93, 0x92, 0xb6, 0xaa, 0xed, 0xca, 0xf1, 0x03, 0xaf, 0x25, 0xa4,
		0xf0, 0x96, 0x8c, 0x41, 0x4e, 0xf0, 0x4a, 0x9c, 0xbc, 0x86, 0x7d, 0xbc, 0x49, 0x78, 0x19, 0x64,
		0x15, 0xb9, 0x76, 0x5f, 0x64, 0xb2, 0x52, 0x2d, 0x53, 0x7f, 0x7d, 0x0d, 0x8d, 0xf5, 0x99, 0x22,
		0x87, 0xf0, 0x78, 0x70, 0x71, 0x76, 0xd9, 0x77, 0x2f, 0xbe, 0xf7, 0xc7, 0x3f, 0x0f, 0x07, 0xbe,
		0x7b, 0xf1, 0xb6, 0xf7, 0x83, 0xdb, 0x6f, 0x7e, 0x40, 0x8e, 0xe0, 0xe0, 0x2e, 0x34, 0x7e, 0xe5,
		0xb9, 0xe7, 0x63, 0xef, 0xaa, 0x69, 0x91, 0x03, 0x20, 0x77, 0xb1, 0xd7, 0xa3, 0xcb, 0x8b, 0xe6,
		0x16, 0x69, 0xc1, 0x47, 0x77, 0xeb, 0x43, 0xef, 0x72, 0x7c, 0xf9, 0xac, 0x59, 0x39, 0xfd, 0x09,
		0x9e, 0x04, 0x32, 0xde, 0x34, 0xe4, 0xa7, 0xbb, 0xbd, 0x84, 0x0f, 0xf3, 0xf4, 0x43, 0xeb, 0x97,
		0x93, 0x29, 0xd7, 0xef, 0xb2, 0x89, 0x1d, 0xc8, 0xd8, 0x59, 0xff, 0x31, 0x7d, 0xc3, 0x59, 0xe4,
		0x4c, 0x65, 0xf9, 0xbb, 0x31, 0x7f, 0xa9, 0x17, 0x34, 0xe1, 0xf3, 0x93, 0x49, 0xad, 0xa8, 0x3d,
		0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x8c, 0x5b, 0xe4, 0xc9, 0x06, 0x00, 0x00,
	},
	// uber/cadence/api/v1/history.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x5f, 0x6c, 0x1c, 0x57,
		0xd5, 0xef, 0xec, 0xda, 0xbb, 0xde, 0xb3, 0x8e, 0x63, 0xdf, 0x24, 0x8e, 0x9d, 0xbf, 0xce, 0x24,
		0x4d, 0x5c, 0xc7, 0x59, 0x27, 0x4e, 0x9a, 0x7c, 0x69, 0xbe, 0xb6, 0x9f, 0xe3, 0xd8, 0xea, 0x4a,
		0xfe, 0x92, 0x68, 0xe2, 0xa4, 0x05, 0x21, 0x2d, 0xe3, 0x99, 0xeb, 0x78, 0xe4, 0xdd, 0x9d, 0xed,
		0xcc, 0xac, 0x37, 0x46, 0xe2, 0x89, 0x07, 0x24, 0xd4, 0x0a, 0xaa, 0x0a, 0x89, 0x0a, 0x10, 0x08,
		0x09, 0xd4, 0x22, 0xa4, 0x22, 0x10, 0x02, 0xc4, 0x0b, 0x20, 0x21, 0x90, 0x40, 0x85, 0x27, 0x5e,
		0x78, 0x80, 0x07, 0x1e, 0xe8, 0x1b, 0x0f, 0x94, 0x37, 0x24, 0x34, 0x77, 0xee, 0xec, 0xce, 0x9f,
		0x7b, 0x67, 0xee, 0xac, 0x37, 0x2d, 0xa8, 0x79, 0xf3, 0xdc, 0x39, 0xf7, 0xcc, 0xef, 0x9e, 0x7b,
		0xce, 0xb9, 0xe7, 0x9e, 0x73, 0xd6, 0x70, 0xaa, 0xbd, 0x81, 0xad, 0x05, 0x4d, 0xd5, 0x71, 0x53,
		0xc3, 0x0b, 0x6a, 0xcb, 0x58, 0xd8, 0xb9, 0xb4, 0xb0, 0x65, 0xd8, 0x8e, 0x69, 0xed, 0x56, 0x5a,
		0x96, 0xe9, 0x98, 0xe8, 0x80, 0x4b, 0x52, 0xa1, 0x24, 0x15, 0xb5, 0x65, 0x54, 0x76, 0x2e, 0x1d,
		0x39, 0xf1, 0xd0, 0x34, 0x1f, 0xd6, 0xf1, 0x02, 0x21, 0xd9, 0x68, 0x6f, 0x2e, 0xe8, 0x6d, 0x4b,
		0x75, 0x0c, 0xb3, 0xe9, 0x4d, 0x3a, 0x72, 0x32, 0xfa, 0xde, 0x31, 0x1a, 0xd8, 0x76, 0xd4, 0x46,
		0x8b, 0x12, 0xcc, 0xb0, 0x3e, 0xac, 0x99, 0x8d, 0x46, 0x97, 0x85, 0xcc, 0xa2, 0x70, 0x54, 0x7b,
		0xbb, 0x6e, 0xd8, 0x4e, 0x12, 0x4d, 0xc7, 0xb4, 0xb6, 0x37, 0xeb, 0x66, 0xc7, 0xa3, 0x91, 0x6f,
		0x41, 0xf1, 0x25, 0x6f, 0x41, 0xe8, 0x3a, 0x14, 0xf0, 0x0e, 0x6e, 0x3a, 0xf6, 0x94, 0x34, 0x93,
		0x9f, 0x2d, 0x2f, 0x9e, 0xaa, 0x30, 0xd6, 0x56, 0xa1, 0xd4, 0x2b, 0x2e, 0xa5, 0x42, 0x27, 0xc8,
		0xef, 0x5f, 0x83, 0xd1, 0xe0, 0x0b, 0x34, 0x0d, 0x23, 0xe4, 0x55, 0xcd, 0xd0, 0xa7, 0xa4, 0x19,
		0x69, 0x36, 0xaf, 0x14, 0xc9, 0x73, 0x55, 0x47, 0xd7, 0x01, 0xbc, 0x57, 0xee, 0xa2, 0xa7, 0x72,
		0x33, 0xd2, 0x6c, 0x79, 0xf1, 0x48, 0xc5, 0x93, 0x48, 0xc5, 0x97, 0x48, 0x65, 0xdd, 0x97, 0x88,
		0x52, 0x22, 0xd4, 0xee, 0x33, 0x9a, 0x82, 0xe2, 0x0e, 0xb6, 0x6c, 0xc3, 0x6c, 0x4e, 0xe5, 0x3d,
		0xa6, 0xf4, 0x11, 0x1d, 0x86, 0xa2, 0xbb, 0x78, 0xf7, 0x73, 0x43, 0xe4, 0x4d, 0xc1, 0x7d, 0xac,
		0xea, 0xe8, 0x6b, 0x12, 0x9c, 0xf7, 0x97, 0x5c, 0xc3, 0x8f, 0xb0, 0xd6, 0x76, 0xf7, 0xa1, 0x66,
		0x3b, 0xaa, 0xe5, 0x60, 0xbd, 0xe6, 0x21, 0x51, 0x1d, 0xc7, 0x32, 0x36, 0xda, 0x0e, 0xb6, 0xa7,
		0x86, 0x09, 0x9e, 0xff, 0x65, 0x2e, 0xfd, 0x65, 0xca, 0x67, 0xc5, 0x67, 0x73, 0xcf, 0xe3, 0x42,
		0x96, 0xbc, 0xd4, 0xe5, 0xf1, 0xd2, 0x53, 0xca, 0xb9, 0x8e, 0x18, 0x29, 0xfa, 0x96, 0x04, 0x17,
		0x18, 0xf0, 0x34, 0xb3, 0xd1, 0xaa, 0x63, 0x26, 0xc0, 0x02, 0x01, 0xf8, 0x82, 0x18, 0xc0, 0x65,
		0x9f, 0x4f, 0x1c, 0xe2, 0x33, 0x1d, 0x51, 0x62, 0xf4, 0x96, 0x04, 0x73, 0x0c, 0x90, 0x9b, 0xaa,
		0x51, 0x67, 0x21, 0x2c, 0x12, 0x84, 0x37, 0xc4, 0x10, 0xae, 0x12, 0x26, 0x71, 0x78, 0x67, 0x3b,
		0x42, 0x94, 0xe8, 0x9b, 0x6c, 0x01, 0xba, 0xba, 0xa5, 0xd7, 0xcc, 0xb6, 0x13, 0x87, 0x37, 0x42,
		0xe0, 0x3d, 0x2f, 0x06, 0xcf, 0x55, 0x3b, 0xfd, 0x4e, 0xdb, 0x89, 0x03, 0x9c, 0xed, 0x08, 0xd2,
		0xa2, 0x37, 0x25, 0x98, 0xd5, 0xb1, 0x66, 0xd8, 0x04, 0x98, 0xab, 0xa5, 0xb6, 0xb6, 0x85, 0xf5,
		0x36, 0x53, 0x78, 0x25, 0x82, 0xee, 0x3a, 0x13, 0xdd, 0x2d, 0xca, 0x64, 0x5d, 0xb5, 0xb7, 0xef,
		0xf9, 0x2c, 0xe2, 0xc8, 0xce, 0xe8, 0x02, 0x74, 0xe8, 0x75, 0x09, 0xce, 0x46, 0x50, 0xf1, 0x6c,
		0x02, 0x08, 0xa6, 0x6b, 0xe9, 0x98, 0x78, 0xe6, 0x20, 0xeb, 0xa9, 0x54, 0x0c, 0x29, 0x25, 0x18,
		0x41, 0x59, 0x50, 0x4a, 0x09, 0xfa, 0x1f, 0x92, 0x12, 0x57, 0xf5, 0xdf, 0x88, 0xa1, 0x4a, 0xd0,
		0xac, 0x51, 0x82, 0xea, 0x7f, 0x52, 0x51, 0xf1, 0x95, 0xea, 0xb4, 0x9e, 0x4e, 0x86, 0xbe, 0x20,
		0xc1, 0xd3, 0x61, 0x4c, 0x3c, 0x4b, 0xdc, 0x47, 0x00, 0x5d, 0x4d, 0x05, 0xc4, 0x33, 0xc2, 0x53,
		0x7a, 0x1a, 0x11, 0xd9, 0x36, 0x55, 0x73, 0x8c, 0x1d, 0xc3, 0xd9, 0x4d, 0x55, 0xee, 0xb1, 0x84,
		0x6d, 0x5b, 0xa2, 0x4c, 0xd2, 0x94, 0x5b, 0x15, 0xa0, 0x23, 0xca, 0x1d, 0x41, 0xc5, 0x53, 0xee,
		0xfd, 0x09, 0xca, 0x1d, 0xc2, 0xc4, 0x55, 0x6e, 0x35, 0x95, 0x8a, 0x21, 0xa5, 0x04, 0xe5, 0x1e,
		0x17, 0x94, 0x52, 0x92, 0x72, 0xab, 0x02, 0x74, 0x44, 0x91, 0xc2, 0xa8, 0x78, 0x8a, 0x34, 0x91,
		0xa0, 0x48, 0x41, 0x48, 0x5c, 0x45, 0x52, 0xd3, 0x88, 0x88, 0xa5, 0x85, 0xc1, 0x24, 0x58, 0x1a,
		0x4a, 0xb0, 0xb4, 0x20, 0x9e, 0x04, 0x4b, 0x53, 0xd3, 0xc9, 0x50, 0x07, 0x4e, 0xb8, 0x20, 0x2c,
		0xbe, 0xf6, 0x1c, 0x20, 0x40, 0x2e, 0x32, 0x81, 0xb8, 0x5c, 0x2d, 0xae, 0xda, 0x1c, 0x75, 0xf8,
		0xaf, 0xd1, 0xab, 0x70, 0xcc, 0xfb, 0xf0, 0xa6, 0x61, 0xb1, 0x3e, 0x7b, 0x90, 0x7c, 0xb6, 0xc2,
		0xff, 0xec, 0xaa, 0x3b, 0x2f, 0xfe, 0xd1, 0x69, 0x87, 0xf7, 0x12, 0x7d, 0x47, 0x82, 0x85, 0x88,
		0x8a, 0xaa, 0x4d, 0x0d, 0xd7, 0x6b, 0x16, 0x7e, 0xb5, 0x8d, 0x6d, 0xe6, 0xea, 0x0f, 0x11, 0x18,
		0x2f, 0xa6, 0x6b, 0x2a, 0xe1, 0xa4, 0xf8, 0x8c, 0xe2, 0xb8, 0xe6, 0x54, 0x61, 0x6a, 0xf4, 0x43,
		0x09, 0xae, 0x50, 0x4c, 0x3e, 0x44, 0x31, 0x25, 0x9e, 0x24, 0x68, 0x97, 0x99, 0x68, 0xe9, 0xd7,
		0xbc, 0x4f, 0x8b, 0x68, 0x74, 0xc5, 0xca, 0x34, 0x03, 0x7d, 0x49, 0x82, 0x73, 0x2c, 0xf1, 0xb2,
		0x80, 0x1e, 0x16, 0xd4, 0xee, 0x65, 0xca, 0x21, 0x45, 0xbb, 0x39, 0x64, 0xe8, 0x33, 0x70, 0xd2,
		0x53, 0x32, 0x3e, 0x92, 0x29, 0x82, 0xe4, 0x12, 0x5f, 0xcf, 0xf8, 0x10, 0x3c, 0x05, 0xe6, 0x7d,
		0xfb, 0xf3, 0x12, 0x9c, 0xa1, 0x9b, 0x47, 0x15, 0x9d, 0xb3, 0x69, 0xd3, 0x04, 0xc1, 0xb3, 0x4c,
		0x04, 0x1e, 0x73, 0x4f, 0xdf, 0x39, 0xdb, 0x34, 0xa3, 0xa5, 0xd0, 0xa0, 0xcf, 0xc2, 0x4c, 0x43,
		0xb5, 0xb6, 0xb1, 0x55, 0xb3, 0xb0, 0x66, 0x5a, 0x3a, 0x0b, 0xc4, 0x11, 0x02, 0x62, 0x91, 0x09,
		0xe2, 0xff, 0xc9, 0x64, 0x85, 0xce, 0x8d, 0x23, 0x38, 0xde, 0x48, 0x22, 0x40, 0xdf, 0x90, 0x60,
		0x9e, 0x75, 0x3f, 0x31, 0x1e, 0x36, 0x55, 0xa6, 0x40, 0x8e, 0x66, 0x09, 0x5f, 0xef, 0x51, 0x36,
		0x22, 0xe1, 0x2b, 0x87, 0x16, 0x7d, 0x5b, 0x82, 0x0a, 0x2b, 0xc2, 0xc6, 0x56, 0xc3, 0x68, 0xaa,
		0x4c, 0xbf, 0x70, 0x2c, 0xc1, 0x2f, 0xc4, 0x43, 0xec, 0x2e, 0x23, 0x86, 0x5f, 0xe8, 0x08, 0x53,
		0xa3, 0x1f, 0x49, 0x70, 0x85, 0x75, 0x95, 0x4a, 0xf5, 0x62, 0xc7, 0x09, 0xda, 0x5b, 0x82, 0x37,
		0xaa, 0x34, 0x57, 0xb6, 0xd0, 0xc9, 0x36, 0x85, 0xa7, 0x01, 0x7c, 0xa3, 0x3c, 0x91, 0x45, 0x03,
		0xf8, 0x06, 0x3a, 0xdb, 0x11, 0xa4, 0x45, 0x7f, 0x95, 0x60, 0x25, 0xe2, 0x71, 0xf1, 0x23, 0x07,
		0x5b, 0x4d, 0xb5, 0x5e, 0x63, 0x20, 0x37, 0x9a, 0x86, 0x63, 0xb0, 0x15, 0xe3, 0x24, 0x81, 0x7e,
		0x2f, 0xdd, 0x05, 0xaf, 0x50, 0xfe, 0xb1, 0xf5, 0x54, 0x7d, 0xe6, 0xf1, 0x05, 0xbd, 0x60, 0xed,
		0x89, 0x03, 0xfa, 0x93, 0x04, 0x37, 0x33, 0x2c, 0x93, 0xe7, 0xb1, 0x66, 0xc8, 0x1a, 0xef, 0xee,
		0x61, 0x8d, 0x3c, 0x67, 0x76, 0xc3, 0xea, 0x7f, 0x3a, 0x7a, 0x4f, 0x82, 0xe7, 0x93, 0x96, 0x93,
		0x6e, 0x27, 0xa7, 0xc8, 0xc2, 0xd6, 0x98, 0x0b, 0xe3, 0x82, 0x49, 0xb5, 0x97, 0x6b, 0xb8, 0xbf,
		0xa9, 0x24, 0x0e, 0x60, 0xa6, 0x4e, 0x9a, 0x8e, 0xd1, 0x6c, 0x63, 0xbd, 0xa6, 0xda, 0xb5, 0x26,
		0xee, 0xc4, 0xd7, 0x21, 0x27, 0xc4, 0x01, 0x8c, 0x0c, 0x0a, 0x65, 0xb7, 0x64, 0xdf, 0xc6, 0x1d,
		0x46, 0x1c, 0xd0, 0xc9, 0x34, 0x03, 0xfd, 0x52, 0x82, 0xeb, 0x24, 0x9a, 0xac, 0x69, 0x5b, 0x46,
		0x5d, 0xcf, 0x68, 0x3f, 0xa7, 0x09, 0xf4, 0x97, 0x98, 0xd0, 0x49, 0x28, 0xb9, 0xec, 0x32, 0xcd,
		0x62, 0x34, 0x97, 0xed, 0xec, 0xd3, 0xd0, 0x4f, 0x25, 0xb8, 0x9a, 0xb2, 0x08, 0x9e, 0x75, 0x9c,
		0x21, 0x2b, 0x58, 0xc9, 0xba, 0x02, 0x9e, 0x49, 0x5c, 0xb4, 0x33, 0xce, 0x41, 0xdf, 0x93, 0xe0,
		0x12, 0x17, 0x35, 0x37, 0xce, 0x7f, 0x9a, 0xc0, 0x5e, 0x62, 0x87, 0x21, 0xcc, 0xaf, 0x73, 0x03,
		0xff, 0x79, 0x2d, 0x03, 0x3d, 0xfa, 0x81, 0x04, 0x97, 0xb9, 0x70, 0x13, 0x2e, 0x91, 0x67, 0x13,
		0x94, 0x9c, 0x0d, 0x38, 0xe1, 0x3a, 0x59, 0xd1, 0x32, 0xcd, 0x40, 0xef, 0x48, 0x70, 0x31, 0xb3,
		0x66, 0x9c, 0x23, 0x88, 0xff, 0x2f, 0x03, 0x62, 0x9e, 0x52, 0x9c, 0xd7, 0x32, 0xe8, 0xc3, 0xbb,
		0x12, 0x2c, 0xf2, 0x05, 0xcc, 0x3d, 0x84, 0x67, 0x09, 0xda, 0x9b, 0x59, 0xe4, 0xcb, 0x3d, 0x89,
		0x2f, 0x68, 0x59, 0x26, 0xa0, 0xef, 0x27, 0xa9, 0x44, 0xc2, 0xa5, 0xf9, 0x99, 0xcc, 0x90, 0xf9,
		0xd7, 0x67, 0x0e, 0x64, 0xde, 0x45, 0xda, 0x8d, 0xcd, 0xf8, 0x90, 0x13, 0x22, 0xc9, 0xb9, 0x84,
		0xd8, 0x8c, 0x83, 0x39, 0x21, 0x9c, 0x5c, 0xd0, 0xb2, 0x4d, 0x21, 0x87, 0xa6, 0x17, 0x8a, 0xf7,
		0x1b, 0xf1, 0x9c, 0x4f, 0x38, 0x34, 0xbd, 0x88, 0xbb, 0x9f, 0x50, 0xe7, 0x9a, 0xdd, 0xdf, 0x54,
		0xf4, 0x2b, 0x09, 0x9e, 0x13, 0x58, 0x10, 0xcf, 0x46, 0xe7, 0xc9, 0x6a, 0xaa, 0xfd, 0xac, 0x86,
		0x67, 0xac, 0x57, 0xec, 0x3e, 0xe6, 0xa1, 0x9f, 0x48, 0xf0, 0x6c, 0xd2, 0x02, 0xf8, 0xf7, 0xa7,
		0x0b, 0x09, 0x07, 0x10, 0x17, 0x04, 0xff, 0x1e, 0x75, 0x11, 0x67, 0x9c, 0x43, 0x1c, 0x4e, 0xbb,
		0x65, 0x63, 0xcb, 0xe9, 0x01, 0xb7, 0xb1, 0x6a, 0x69, 0x5b, 0x01, 0x98, 0x71, 0xdc, 0x95, 0x04,
		0xeb, 0xbd, 0x4f, 0xd8, 0xf9, 0x08, 0xee, 0x11, 0x66, 0xbd, 0x2f, 0x32, 0xac, 0xb7, 0x9d, 0x65,
		0xc2, 0xcd, 0x51, 0x80, 0x1e, 0x10, 0xf9, 0x2f, 0x65, 0x38, 0x27, 0x7a, 0x7a, 0xad, 0xc2, 0xbe,
		0xee, 0x1a, 0x9d, 0xdd, 0x16, 0x26, 0xb5, 0x40, 0x5e, 0x65, 0xd1, 0x67, 0xba, 0xbe, 0xdb, 0xc2,
		0xca, 0x68, 0x27, 0xf0, 0x84, 0x3e, 0x05, 0x87, 0x5a, 0xaa, 0xe5, 0x4a, 0x24, 0x68, 0x74, 0x9b,
		0x26, 0x2d, 0x1f, 0xce, 0x32, 0xf9, 0xdd, 0x25, 0x33, 0x02, 0x36, 0xb1, 0x69, 0x2a, 0x07, 0x5a,
		0xf1, 0x41, 0xf4, 0x1c, 0x94, 0x48, 0x46, 0xa6, 0x6e, 0xd8, 0x0e, 0x29, 0x2c, 0x96, 0x17, 0x8f,
		0xb3, 0x53, 0x1e, 0xaa, 0xbd, 0xbd, 0x66, 0xd8, 0x8e, 0x32, 0xe2, 0xd0, 0xbf, 0xd0, 0x22, 0x0c,
		0x1b, 0xcd, 0x56, 0xdb, 0x21, 0x65, 0xc7, 0xf2, 0xe2, 0x31, 0x0e, 0x92, 0xdd, 0xba, 0xa9, 0xea,
		0x8a, 0x47, 0x8a, 0x54, 0x98, 0x89, 0x84, 0x1c, 0x35, 0xc7, 0xac, 0x69, 0x75, 0xd3, 0xc6, 0xc4,
		0x7f, 0x9b, 0x6d, 0x87, 0xd6, 0x21, 0xa7, 0x63, 0x75, 0xd1, 0x5b, 0xb4, 0x92, 0xac, 0x1c, 0xc3,
		0x21, 0xd9, 0xaf, 0x9b, 0xcb, 0xee, 0xfc, 0x75, 0x6f, 0x3a, 0x7a, 0x19, 0x8e, 0xf6, 0xd2, 0xde,
		0x71, 0xee, 0x85, 0x34, 0xee, 0x87, 0x1d, 0x3f, 0x99, 0x1d, 0x61, 0x7c, 0x03, 0x8e, 0xf4, 0x22,
		0xec, 0xde, 0x2a, 0xac, 0x76, 0xb3, 0x66, 0xe8, 0xa4, 0xf4, 0x57, 0x52, 0x0e, 0x77, 0x29, 0xba,
		0x72, 0x56, 0xda, 0xcd, 0xaa, 0x8e, 0xaa, 0x50, 0xa2, 0xae, 0xd2, 0xb4, 0x48, 0x1d, 0x6e, 0x6c,
		0xf1, 0x3c, 0xdb, 0xb5, 0x53, 0x06, 0x24, 0x84, 0xae, 0xfa, 0x53, 0x94, 0xde, 0x6c, 0x54, 0x85,
		0x89, 0x1e, 0x0e, 0xd7, 0x5d, 0xb5, 0x2d, 0x4c, 0x8b, 0x67, 0xec, 0x3d, 0x58, 0xf5, 0x68, 0x94,
		0xf1, 0xee, 0x34, 0x3a, 0x82, 0x14, 0x98, 0xac, 0xab, 0xee, 0x9d, 0xcf, 0x0b, 0x67, 0xc8, 0x72,
		0xb0, 0xdd, 0xae, 0x3b, 0xb4, 0xf0, 0x95, 0xbc, 0xa7, 0x07, 0xdd, 0xb9, 0xcb, 0xdd, 0xa9, 0x0a,
		0x99, 0x89, 0xae, 0xc3, 0xb4, 0x69, 0x19, 0x0f, 0x0d, 0xcf, 0xd1, 0x46, 0xa4, 0x54, 0x26, 0x52,
		0x9a, 0xf4, 0x09, 0x22, 0x42, 0x3a, 0x02, 0x23, 0x86, 0x8e, 0x9b, 0x8e, 0xe1, 0xec, 0x92, 0x8a,
		0x52, 0x49, 0xe9, 0x3e, 0xa3, 0xcb, 0x30, 0xb9, 0x69, 0x58, 0xb6, 0x13, 0xe7, 0xb9, 0x8f, 0x50,
		0x1e, 0x20, 0x6f, 0x23, 0x0c, 0x97, 0x61, 0xd4, 0xc2, 0x8e, 0xb5, 0x5b, 0x6b, 0x99, 0x75, 0x43,
		0xdb, 0xa5, 0x55, 0x98, 0x19, 0xce, 0x05, 0xd5, 0xb1, 0x76, 0xef, 0x12, 0x3a, 0xa5, 0x6c, 0xf5,
		0x1e, 0xd0, 0x14, 0x14, 0x55, 0xc7, 0xc1, 0x8d, 0x96, 0x43, 0x2a, 0x26, 0xc3, 0x8a, 0xff, 0x88,
		0x96, 0x61, 0x3f, 0x7e, 0xd4, 0x32, 0x3c, 0xc5, 0xf1, 0x8a, 0xfa, 0xe3, 0xa9, 0x45, 0xfd, 0xb1,
		0xde, 0x14, 0x52, 0xd9, 0x3f, 0x0d, 0xfb, 0x34, 0xcb, 0xb5, 0x06, 0x5a, 0xd1, 0x21, 0x15, 0x87,
		0x92, 0x32, 0xea, 0x0e, 0xfa, 0x55, 0x1e, 0xf4, 0x0a, 0x1c, 0xf5, 0x56, 0x1f, 0xae, 0x7e, 0x6d,
		0xa8, 0xda, 0xb6, 0xb9, 0xb9, 0x49, 0x8b, 0x02, 0x09, 0x4a, 0x3d, 0x45, 0x66, 0x07, 0x0b, 0x5f,
		0x37, 0xbd, 0xa9, 0xe8, 0x02, 0x0c, 0x35, 0x70, 0xc3, 0xa4, 0xe9, 0xfc, 0x69, 0x76, 0xa2, 0x0f,
		0x37, 0x4c, 0x85, 0x90, 0x21, 0x05, 0x26, 0x62, 0x1e, 0x9b, 0xe6, 0xe4, 0x9f, 0x66, 0x9f, 0x8d,
		0x11, 0x0f, 0xab, 0x8c, 0xdb, 0x91, 0x11, 0x74, 0x1f, 0x26, 0x5b, 0x16, 0xde, 0xa9, 0xa9, 0x6d,
		0xc7, 0x74, 0xf5, 0x0f, 0x3b, 0xb5, 0x96, 0x69, 0x34, 0x1d, 0x3f, 0xcb, 0xce, 0xdb, 0x2f, 0x1b,
		0x3b, 0x77, 0x09, 0x9d, 0x72, 0xc0, 0x9d, 0xbf, 0xd4, 0x76, 0xcc, 0xc0, 0x20, 0xba, 0x0c, 0x85,
		0x2d, 0xac, 0xea, 0xd8, 0xa2, 0xe9, 0xef, 0xa3, 0xec, 0xa6, 0x0e, 0x42, 0xa2, 0x50, 0x52, 0xf9,
		0x1d, 0x09, 0x9e, 0x11, 0x8f, 0xf6, 0xaf, 0x40, 0x81, 0xda, 0x8b, 0x24, 0x60, 0x2f, 0x94, 0x16,
		0xad, 0xc2, 0x4c, 0x72, 0xb9, 0xd7, 0xd0, 0x89, 0x77, 0xcf, 0x2b, 0xc7, 0xf8, 0x95, 0xda, 0xaa,
		0x2e, 0xbf, 0x2d, 0xc1, 0x59, 0xc1, 0xa0, 0xe1, 0x2a, 0x14, 0x7d, 0x4f, 0x21, 0x09, 0x78, 0x0a,
		0x9f, 0x78, 0x60, 0x50, 0x4d, 0x98, 0x15, 0x8e, 0x98, 0x97, 0x61, 0x94, 0x3a, 0xeb, 0xde, 0xc1,
		0x39, 0xc6, 0x51, 0x02, 0xea, 0x9b, 0xc9, 0xb9, 0x59, 0x76, 0x7a, 0x0f, 0xf2, 0xef, 0x24, 0x38,
		0x23, 0xd2, 0x34, 0x10, 0x3e, 0x01, 0xa5, 0x6c, 0x27, 0xe0, 0x6d, 0x98, 0xe4, 0x9c, 0x32, 0xb9,
		0x34, 0x83, 0x3c, 0x60, 0x33, 0x4e, 0x98, 0x80, 0xa7, 0xc9, 0x87, 0x3c, 0x8d, 0xfc, 0xba, 0x04,
		0x72, 0x7a, 0xbf, 0x01, 0x9a, 0x07, 0x14, 0xad, 0x41, 0x77, 0xbb, 0x90, 0xc6, 0xed, 0x90, 0x08,
		0x22, 0xee, 0x36, 0x17, 0x71, 0xb7, 0xc7, 0x01, 0xfc, 0x84, 0xa0, 0xa1, 0x13, 0x34, 0x25, 0xa5,
		0x44, 0x47, 0xaa, 0xba, 0xfc, 0xf7, 0x88, 0x78, 0xb9, 0x16, 0x92, 0x0d, 0xd1, 0x2c, 0x8c, 0x87,
		0xf3, 0x10, 0x5d, 0xf5, 0x1a, 0xb3, 0x03, 0x2b, 0x8e, 0x60, 0xcf, 0x47, 0xb0, 0x9f, 0x83, 0xfd,
		0x1b, 0x46, 0x53, 0xb5, 0x76, 0x6b, 0xda, 0x16, 0xd6, 0xb6, 0xed, 0x76, 0x83, 0x84, 0x28, 0x25,
		0x65, 0xcc, 0x1b, 0x5e, 0xa6, 0xa3, 0xe8, 0x3c, 0x4c, 0x84, 0xb3, 0x67, 0xf8, 0x91, 0x17, 0x7e,
		0x8c, 0x2a, 0xe3, 0x38, 0x98, 0xd4, 0xc2, 0x8f, 0x1c, 0xf9, 0xb5, 0x3c, 0x9c, 0x16, 0x68, 0x65,
		0x78, 0x6c, 0x2b, 0x8e, 0x9a, 0x45, 0xbe, 0x0f, 0xb3, 0x40, 0x27, 0xa0, 0xbc, 0xa1, 0xda, 0xd8,
		0x3f, 0x3a, 0x3d, 0xb1, 0x94, 0xdc, 0x21, 0xef, 0xc0, 0x3c, 0x06, 0xd0, 0xc4, 0x1d, 0xff, 0xf5,
		0xb0, 0x27, 0xd8, 0x26, 0xee, 0x78, 0x6f, 0xe7, 0x01, 0x6d, 0x9a, 0xd6, 0x36, 0x45, 0xea, 0xf7,
		0xa3, 0x15, 0xbc, 0xa5, 0xb9, 0x6f, 0x08, 0xd6, 0x07, 0xb4, 0x31, 0x6d, 0xd2, 0x75, 0x8e, 0xaa,
		0x6d, 0x36, 0x69, 0x6c, 0x44, 0x9f, 0xd0, 0x2d, 0x18, 0xd6, 0xd4, 0xb6, 0x8d, 0x69, 0x18, 0x54,
		0x11, 0x6e, 0x1a, 0x59, 0x76, 0x67, 0x29, 0xde, 0x64, 0xf9, 0xed, 0x3c, 0x9c, 0x4a, 0x6d, 0xe4,
		0x78, 0x6c, 0x9b, 0x71, 0xd3, 0x5f, 0x83, 0xb7, 0x0b, 0xf3, 0x82, 0x7d, 0x26, 0xc1, 0x15, 0x04,
		0x7d, 0xf2, 0x50, 0x16, 0x9f, 0x1c, 0x54, 0xfd, 0xe1, 0x88, 0xea, 0x47, 0xf6, 0xb7, 0x90, 0xbc,
		0xbf, 0x45, 0xa1, 0xfd, 0x1d, 0xe1, 0xec, 0x2f, 0xc3, 0xcc, 0x4a, 0x2c, 0x33, 0x93, 0xbf, 0x5e,
		0x80, 0x33, 0x22, 0x3d, 0x2e, 0xe8, 0x24, 0x94, 0xbb, 0x85, 0x62, 0xba, 0x4d, 0x25, 0x05, 0xfc,
		0xa1, 0xaa, 0xee, 0x5e, 0xaa, 0x7a, 0x95, 0x64, 0xd7, 0x08, 0x72, 0x09, 0x97, 0xaa, 0xee, 0x27,
		0xc9, 0xa5, 0x4a, 0x0d, 0x3c, 0xb9, 0xaa, 0xa9, 0x9b, 0x0d, 0xd5, 0x68, 0x52, 0xdf, 0x41, 0x9f,
		0xc2, 0x87, 0xc1, 0x50, 0x9f, 0xd7, 0xa1, 0x82, 0xf8, 0x75, 0x68, 0x1d, 0xa6, 0x7d, 0x25, 0x8c,
		0x9f, 0x21, 0xc5, 0xb4, 0x33, 0x64, 0xd2, 0x9f, 0x1b, 0x39, 0x46, 0x22, 0x5c, 0xe9, 0x11, 0x45,
		0xb9, 0x8e, 0x64, 0xe0, 0xea, 0xdd, 0x82, 0x28, 0x57, 0xfe, 0x61, 0x57, 0xea, 0xeb, 0xb0, 0x5b,
		0x85, 0x89, 0x2d, 0xac, 0x5a, 0xce, 0x06, 0x56, 0x7b, 0xe8, 0x20, 0x8d, 0xd5, 0x78, 0x77, 0x4e,
		0x8f, 0x4f, 0x7a, 0x88, 0x52, 0x4e, 0x0f, 0x51, 0x62, 0x77, 0x85, 0xd1, 0x7e, 0xee, 0x0a, 0xbd,
		0x98, 0x73, 0x9f, 0x78, 0xcc, 0xf9, 0x37, 0x09, 0xe4, 0xf4, 0x7e, 0xab, 0x0f, 0xed, 0x70, 0x0f,
		0x86, 0x21, 0x43, 0xe1, 0x0b, 0xcf, 0x8b, 0x30, 0x4a, 0xee, 0x8b, 0xbe, 0xdf, 0x1a, 0x16, 0xf0,
		0x5b, 0x65, 0x77, 0x06, 0x7d, 0x90, 0xff, 0x20, 0x85, 0x5d, 0xc1, 0x80, 0x23, 0x6b, 0xb6, 0x88,
		0x72, 0x19, 0xdc, 0x7d, 0x3e, 0x35, 0xda, 0x18, 0x0a, 0x0b, 0x53, 0xfe, 0xbd, 0x04, 0xa7, 0xd2,
		0x9b, 0x60, 0xfa, 0x0d, 0xc0, 0x3f, 0x8a, 0x15, 0xfd, 0x2c, 0x07, 0xa7, 0x05, 0x5a, 0xc9, 0xdc,
		0x35, 0xe9, 0xd8, 0x51, 0x8d, 0xba, 0x2d, 0xb4, 0x49, 0x3e, 0xf1, 0x63, 0x5b, 0x53, 0x34, 0x42,
		0x1a, 0xea, 0x27, 0x42, 0xda, 0xb3, 0x8a, 0x7f, 0x59, 0x82, 0x39, 0xf1, 0x0e, 0x30, 0x91, 0x33,
		0x6f, 0x30, 0x57, 0xb0, 0x77, 0x25, 0xc8, 0xd8, 0xeb, 0x95, 0x8e, 0xed, 0xa0, 0x1f, 0x06, 0x79,
		0x1e, 0x86, 0x06, 0x36, 0x22, 0x88, 0xf3, 0x02, 0x88, 0xdf, 0x8a, 0xe8, 0x21, 0xaf, 0x2a, 0xd4,
		0xaf, 0x1e, 0xae, 0xc2, 0x4c, 0x5d, 0x75, 0x02, 0x3d, 0x0f, 0xd1, 0x0e, 0x80, 0x9e, 0x64, 0x3d,
		0x3a, 0xd6, 0x56, 0x7a, 0x61, 0x13, 0x43, 0x9f, 0xf3, 0x19, 0xf4, 0x79, 0x28, 0xd5, 0x46, 0x23,
		0x81, 0x9e, 0xfc, 0x9e, 0x04, 0x47, 0x13, 0xba, 0x2c, 0xd1, 0x34, 0x8c, 0x78, 0xdd, 0x65, 0xdd,
		0x7d, 0x2b, 0x92, 0xe7, 0xaa, 0x8e, 0xd6, 0xe0, 0x50, 0xf7, 0x20, 0xdf, 0x34, 0xac, 0x0c, 0x97,
		0x56, 0x44, 0xcf, 0xf1, 0x55, 0xc3, 0xc2, 0x59, 0x8e, 0x5f, 0x91, 0xcd, 0xfe, 0x34, 0x4c, 0x73,
		0xdb, 0x37, 0x93, 0x56, 0x23, 0x1c, 0xb3, 0xcb, 0xbf, 0x96, 0xe0, 0x58, 0x52, 0xe7, 0xde, 0x40,
		0xbe, 0x32, 0x28, 0x79, 0x24, 0x3a, 0xe8, 0x1f, 0x4b, 0x30, 0x93, 0xd6, 0x01, 0x98, 0xb4, 0x9a,
		0xc7, 0x6a, 0xb6, 0x89, 0xc8, 0xff, 0x55, 0x84, 0x8c, 0x8d, 0x26, 0x68, 0x01, 0x0e, 0x92, 0x5e,
		0x96, 0x68, 0xda, 0xd7, 0x5b, 0xd3, 0x44, 0x13, 0x77, 0x22, 0x49, 0xdf, 0x58, 0xe5, 0x25, 0xd7,
		0x5f, 0xe5, 0xe5, 0x49, 0x6d, 0x44, 0xbc, 0x36, 0x22, 0xa2, 0x3b, 0x45, 0x01, 0xdd, 0xb9, 0x03,
		0x93, 0x34, 0xa7, 0x4d, 0x31, 0x1a, 0x4d, 0x07, 0x5b, 0x3b, 0x6a, 0x3d, 0xfd, 0xde, 0x72, 0x90,
		0x4e, 0x24, 0xf0, 0xaa, 0x74, 0x5a, 0xb8, 0xee, 0x52, 0xda, 0x53, 0xdd, 0x25, 0x10, 0xc2, 0x41,
		0x96, 0x10, 0x8e, 0x5f, 0x64, 0x29, 0xf7, 0x5d, 0x64, 0xe9, 0xdd, 0x33, 0x46, 0x85, 0xef, 0x19,
		0xdd, 0x54, 0xff, 0xbe, 0x3d, 0xa4, 0xfa, 0xc7, 0xf6, 0x94, 0xea, 0x77, 0x7d, 0xf0, 0x42, 0xd6,
		0x6e, 0xb7, 0xae, 0xb7, 0x92, 0x82, 0xde, 0x2a, 0xe9, 0x7e, 0xb3, 0x01, 0x87, 0xbb, 0x15, 0xf2,
		0x48, 0xd5, 0xd4, 0xb3, 0xe3, 0xb9, 0xc4, 0x1a, 0x78, 0xb8, 0x6e, 0x7a, 0x08, 0xb3, 0x86, 0xe5,
		0xef, 0x4a, 0x8c, 0x94, 0x36, 0xef, 0x64, 0x11, 0x31, 0x0f, 0x49, 0xc0, 0x3c, 0x02, 0x91, 0x4e,
		0x2e, 0x43, 0xa4, 0x23, 0x7f, 0x20, 0xc1, 0xf1, 0xc4, 0x6e, 0x6d, 0x37, 0xd4, 0xa3, 0xbd, 0xe0,
		0x4d, 0xb5, 0xe1, 0x8b, 0x1a, 0xbc, 0xa1, 0xdb, 0x6a, 0x03, 0xf7, 0xfb, 0xe9, 0x81, 0x9d, 0x2a,
		0x3d, 0x8d, 0x1f, 0x12, 0xbf, 0x59, 0x7f, 0x95, 0xb5, 0x49, 0xbc, 0xee, 0x84, 0x93, 0x50, 0xa6,
		0xfd, 0x21, 0x41, 0x11, 0x78, 0x43, 0x44, 0x04, 0x5d, 0xa7, 0x9e, 0x13, 0x77, 0xea, 0x09, 0x79,
		0x6a, 0xf9, 0x2b, 0x12, 0xcc, 0x65, 0xe8, 0xc8, 0xe9, 0xe5, 0x53, 0xa5, 0x50, 0x3e, 0xb5, 0xdf,
		0x9d, 0x49, 0x82, 0xf6, 0x8b, 0x1c, 0xbc, 0xb0, 0xb7, 0xae, 0xe4, 0x81, 0xe9, 0x7c, 0x2f, 0x57,
		0x97, 0x0b, 0xe5, 0xea, 0xee, 0x03, 0x8a, 0x77, 0xbf, 0x50, 0xfb, 0x3e, 0x2b, 0xd6, 0xe1, 0xaa,
		0x4c, 0xc4, 0x5a, 0x58, 0xd1, 0x14, 0x14, 0x35, 0xb3, 0xe9, 0x58, 0x66, 0x9d, 0x28, 0xda, 0xa8,
		0xe2, 0x3f, 0xa2, 0x0a, 0x1c, 0x88, 0x34, 0x72, 0x99, 0xcd, 0xba, 0x17, 0x99, 0x8f, 0x28, 0x13,
		0xa1, 0xfe, 0xaa, 0x3b, 0xcd, 0xfa, 0xae, 0xfc, 0x66, 0x1e, 0x6e, 0xec, 0xa1, 0xeb, 0x19, 0xdd,
		0x0f, 0xfa, 0xbd, 0x31, 0xce, 0x6f, 0x0a, 0x84, 0x38, 0x87, 0xd2, 0xce, 0x03, 0xba, 0x4f, 0x72,
		0x73, 0xa8, 0xec, 0x7d, 0x19, 0xda, 0xeb, 0xbe, 0xcc, 0x03, 0x8a, 0xf6, 0x9a, 0xd1, 0x0a, 0x45,
		0x5e, 0x19, 0x37, 0x42, 0x4a, 0xe8, 0xa5, 0xb0, 0xfc, 0x5d, 0x2c, 0x84, 0x76, 0x51, 0xfe, 0xa3,
		0x04, 0xd7, 0xfa, 0x6c, 0xd9, 0xe6, 0x60, 0x90, 0x38, 0x18, 0x3e, 0x5c, 0xc5, 0x95, 0xbf, 0x98,
		0x87, 0x6b, 0x7d, 0xb6, 0xd5, 0xfd, 0xb7, 0xda, 0x6a, 0xc4, 0x63, 0x0f, 0xf1, 0x3d, 0xf6, 0xb0,
		0xb8, 0xc7, 0xe6, 0xaa, 0x0e, 0xcf, 0x01, 0x14, 0x79, 0x0e, 0xe0, 0xb5, 0x3c, 0x5c, 0xe9, 0xa7,
		0x35, 0x50, 0xcc, 0xf2, 0x85, 0x38, 0x3f, 0xb1, 0xfc, 0x9e, 0xe5, 0xbf, 0x2f, 0xc1, 0xc5, 0xac,
		0x6d, 0x8e, 0xff, 0xd1, 0x26, 0xcf, 0x3f, 0xab, 0xe4, 0xdf, 0x4a, 0x70, 0x21, 0x53, 0x6b, 0xe4,
		0xc0, 0x5c, 0x00, 0xf3, 0xd6, 0x90, 0xdb, 0xdb, 0xad, 0xe1, 0xcf, 0x23, 0x70, 0xb9, 0x8f, 0xdf,
		0x78, 0x04, 0xb6, 0x43, 0x0a, 0x6d, 0xc7, 0x49, 0x28, 0x77, 0xb7, 0x83, 0xea, 0x7c, 0x49, 0x01,
		0x7f, 0x88, 0x95, 0x42, 0xc8, 0x0f, 0x20, 0x85, 0xd0, 0x6f, 0x3d, 0x71, 0x78, 0xb0, 0x29, 0x84,
		0xc2, 0x63, 0x4d, 0x21, 0x14, 0xfb, 0x4e, 0x21, 0x3c, 0x00, 0xda, 0xa1, 0x4a, 0x39, 0xd2, 0x32,
		0x9c, 0xd7, 0x24, 0x70, 0x36, 0xa1, 0xcd, 0x95, 0x70, 0xa1, 0xc5, 0xb8, 0x89, 0x56, 0x74, 0x28,
		0x68, 0x24, 0xa5, 0xb0, 0x3f, 0x17, 0x51, 0x79, 0x10, 0x50, 0x79, 0x0d, 0xa6, 0x02, 0xea, 0x54,
		0xb3, 0x70, 0xbb, 0x07, 0xbf, 0x4c, 0xe0, 0xcf, 0x25, 0x2a, 0x4e, 0x55, 0x57, 0xdc, 0x29, 0x74,
		0x09, 0x87, 0x3a, 0xac, 0xe1, 0x58, 0x79, 0x72, 0x5f, 0x3f, 0xe5, 0xc9, 0x58, 0xaf, 0xe1, 0x18,
		0xa3, 0xd7, 0xb0, 0x77, 0xd3, 0xda, 0x9f, 0x3d, 0xb7, 0x30, 0xbe, 0x87, 0xdc, 0xc2, 0xc4, 0xde,
		0xda, 0x08, 0x9f, 0x83, 0xb2, 0x8e, 0xeb, 0xea, 0xae, 0xa7, 0x9a, 0xe9, 0x3d, 0x91, 0x40, 0xa8,
		0x89, 0x2a, 0xca, 0x6f, 0xe4, 0xe1, 0x62, 0xd6, 0xdf, 0x60, 0x7d, 0xf4, 0xee, 0x65, 0xcd, 0x8f,
		0x13, 0xbc, 0x4a, 0xd7, 0xd5, 0xcc, 0x3f, 0x20, 0x0a, 0x85, 0x07, 0x01, 0x43, 0x19, 0x0e, 0x1b,
		0x0a, 0xfb, 0x10, 0x2c, 0x70, 0x0e, 0xc1, 0x01, 0xe5, 0x02, 0xe5, 0xdf, 0xe4, 0x60, 0x3e, 0xcb,
		0x0f, 0xcc, 0xb8, 0xfb, 0xc1, 0x3e, 0x7d, 0x73, 0x7b, 0x3d, 0x7d, 0x07, 0xb5, 0x8b, 0x6c, 0xe9,
		0x0e, 0x71, 0xa4, 0xdb, 0xb3, 0xce, 0x61, 0xf1, 0x3c, 0xc8, 0x07, 0x39, 0xc8, 0xf8, 0xd3, 0xb7,
		0x8f, 0x87, 0x30, 0x59, 0x65, 0x9d, 0x61, 0x66, 0x59, 0xa7, 0xd7, 0x8f, 0x50, 0x10, 0xef, 0x47,
		0x90, 0xff, 0x91, 0x83, 0xf3, 0x83, 0xf0, 0x28, 0x1f, 0x53, 0xa1, 0x07, 0x32, 0xee, 0x85, 0x0c,
		0x19, 0x77, 0xf9, 0x9f, 0x39, 0xb8, 0x90, 0xe9, 0x97, 0x88, 0x4f, 0x04, 0x1f, 0x13, 0xbc, 0x9f,
		0x52, 0x2c, 0x64, 0xc9, 0x33, 0x7f, 0x2e, 0xcf, 0x13, 0x3c, 0xaf, 0x87, 0xe4, 0x89, 0xe0, 0x13,
		0x5b, 0x58, 0x0a, 0xfd, 0xf4, 0xbe, 0xff, 0x3c, 0x07, 0x0b, 0x19, 0x7f, 0x21, 0xfa, 0x64, 0x1f,
		0x42, 0xfb, 0x30, 0xe7, 0xc0, 0x7e, 0xf2, 0xe7, 0xaa, 0x51, 0x77, 0xb0, 0x45, 0x3e, 0x75, 0x1c,
		0xa6, 0x57, 0x1e, 0xac, 0xdc, 0x5e, 0xaf, 0xad, 0x56, 0xd7, 0xd6, 0x57, 0x94, 0xda, 0xfa, 0x27,
		0xee, 0xae, 0xd4, 0xaa, 0xb7, 0x1f, 0x2c, 0xad, 0x55, 0x6f, 0x8d, 0x3f, 0x85, 0x4e, 0xc2, 0xd1,
		0xf8, 0xeb, 0xa5, 0xb5, 0xb5, 0x1a, 0x19, 0x1d, 0x97, 0xd0, 0x29, 0x38, 0x1e, 0x27, 0x58, 0x5e,
		0xbb, 0x73, 0x6f, 0x85, 0x92, 0xe4, 0x6e, 0xbe, 0x02, 0x87, 0x35, 0xb3, 0xc1, 0x92, 0xc1, 0xcd,
		0x91, 0xa5, 0x96, 0x71, 0xd7, 0x0d, 0x61, 0xef, 0x4a, 0x9f, 0xbc, 0xf4, 0xd0, 0x70, 0xb6, 0xda,
		0x1b, 0x15, 0xcd, 0x6c, 0x2c, 0x04, 0xff, 0xcf, 0xe9, 0x05, 0x43, 0xaf, 0x2f, 0x3c, 0x34, 0xbd,
		0xff, 0xad, 0x4a, 0xff, 0xe9, 0xe9, 0x0d, 0xb5, 0x65, 0xec, 0x5c, 0xda, 0x28, 0x90, 0xb1, 0xcb,
		0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x63, 0xa5, 0x41, 0x73, 0xd7, 0x55, 0x00, 0x00,
	},
	// uber/cadence/api/v1/tasklist.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x72, 0xe3, 0x34,
		0x14, 0xc6, 0x4d, 0x77, 0x49, 0x15, 0x9a, 0x35, 0x82, 0xdd, 0x6d, 0xb2, 0x2c, 0x04, 0x5f, 0xec,
		0x74, 0x76, 0xc0, 0x9e, 0x94, 0xe1, 0x8a, 0x0b, 0x26, 0x4d, 0x3a, 0xac, 0x27, 0x69, 0x36, 0x63,
		0x7b, 0x3b, 0x94, 0x1b, 0x21, 0x5b, 0xda, 0x44, 0xe3, 0x1f, 0x79, 0x24, 0x39, 0x6d, 0x5e, 0x84,
		0x87, 0xe1, 0x89, 0x78, 0x0c, 0x46, 0xb2, 0x13, 0x42, 0x1b, 0xb8, 0x93, 0xce, 0x77, 0xbe, 0xf3,
		0xf3, 0xe9, 0x1c, 0x01, 0xa7, 0x8a, 0xa9, 0xf0, 0x12, 0x4c, 0x68, 0x91, 0x50, 0x0f, 0x97, 0xcc,
		0x5b, 0x0f, 0x3d, 0x85, 0x65, 0x9a, 0x31, 0xa9, 0xdc, 0x52, 0x70, 0xc5, 0xe1, 0x17, 0xda, 0xc7,
		0x6d, 0x7c, 0x5c, 0x5c, 0x32, 0x77, 0x3d, 0xec, 0x7f, 0xbd, 0xe4, 0x7c, 0x99, 0x51, 0xcf, 0xb8,
		0xc4, 0xd5, 0x47, 0x8f, 0x54, 0x02, 0x2b, 0xc6, 0x8b, 0x9a, 0xd4, 0xff, 0xe6, 0x21, 0xae, 0x58,
		0x4e, 0xa5, 0xc2, 0x79, 0xd9, 0x38, 0x3c, 0x0a, 0x70, 0x27, 0x70, 0x59, 0x52, 0x21, 0x6b, 0xdc,
		0xf9, 0x00, 0xda, 0x11, 0x96, 0xe9, 0x8c, 0x49, 0x05, 0x21, 0x38, 0x2e, 0x70, 0x4e, 0xcf, 0xac,
		0x81, 0x75, 0x7e, 0x12, 0x98, 0x33, 0xfc, 0x11, 0x1c, 0xa7, 0xac, 0x20, 0x67, 0x47, 0x03, 0xeb,
		0xbc, 0x7b, 0xf1, 0xad, 0x7b, 0xa0, 0x48, 0x77, 0x1b, 0x60, 0xca, 0x0a, 0x12, 0x18, 0x77, 0x07,
		0x03, 0x7b, 0x6b, 0xbd, 0xa6, 0x0a, 0x13, 0xac, 0x30, 0xbc, 0x06, 0x5f, 0xe6, 0xf8, 0x1e, 0xe9,
		0xb6, 0x25, 0x2a, 0xa9, 0x40, 0x92, 0x26, 0xbc, 0x20, 0x26, 0x5d, 0xe7, 0xe2, 0x2b, 0xb7, 0xae,
		0xd4, 0xdd, 0x56, 0xea, 0x4e, 0x78, 0x15, 0x67, 0xf4, 0x06, 0x67, 0x15, 0x0d, 0x3e, 0xcf, 0xf1,
		0xbd, 0x0e, 0x28, 0x17, 0x54, 0x84, 0x86, 0xe6, 0x7c, 0x00, 0xbd, 0x6d, 0x8a, 0x05, 0x16, 0x8a,
		0x69, 0x55, 0x76, 0xb9, 0x6c, 0xd0, 0x4a, 0xe9, 0xa6, 0xe9, 0x44, 0x1f, 0xe1, 0x1b, 0xf0, 0x8c,
		0xdf, 0x15, 0x54, 0xa0, 0x15, 0x97, 0x0a, 0x99, 0x3e, 0x8f, 0x0c, 0x7a, 0x6a, 0xcc, 0xef, 0xb8,
		0x54, 0x73, 0x9c, 0x53, 0xe7, 0x2f, 0x0b, 0x74, 0xb7, 0x71, 0x43, 0x85, 0x55, 0x25, 0xe1, 0x77,
		0x00, 0xc6, 0x38, 0x49, 0x33, 0xbe, 0x44, 0x09, 0xaf, 0x0a, 0x85, 0x56, 0xac, 0x50, 0x26, 0x76,
		0x2b, 0xb0, 0x1b, 0x64, 0xac, 0x81, 0x77, 0xac, 0x50, 0xf0, 0x35, 0x00, 0x82, 0x62, 0x82, 0x32,
		0xba, 0xa6, 0x99, 0xc9, 0xd1, 0x0a, 0x4e, 0xb4, 0x65, 0xa6, 0x0d, 0xf0, 0x15, 0x38, 0xc1, 0x49,
		0xda, 0xa0, 0x2d, 0x83, 0xb6, 0x71, 0x92, 0xd6, 0xe0, 0x1b, 0xf0, 0x4c, 0x60, 0x45, 0xf7, 0xd5,
		0x39, 0x1e, 0x58, 0xe7, 0x56, 0x70, 0xaa, 0xcd, 0xbb, 0xde, 0xe1, 0x04, 0x9c, 0x6a, 0x19, 0x11,
		0x23, 0x28, 0xce, 0x78, 0x92, 0x9e, 0x3d, 0x31, 0x1a, 0x0e, 0xfe, 0xf3, 0x79, 0xfc, 0xc9, 0xa5,
		0xf6, 0x0b, 0x3a, 0x9a, 0xe6, 0x13, 0x73, 0x71, 0x7e, 0x06, 0x9d, 0x3d, 0x0c, 0xf6, 0x40, 0x5b,
		0x2a, 0x2c, 0x14, 0x62, 0xa4, 0x69, 0xee, 0x53, 0x73, 0xf7, 0x09, 0x7c, 0x0e, 0x9e, 0xd2, 0x82,
		0x68, 0xa0, 0xee, 0xe7, 0x09, 0x2d, 0x88, 0x4f, 0x9c, 0x3f, 0x2c, 0x00, 0x16, 0x3c, 0xcb, 0xa8,
		0xf0, 0x8b, 0x8f, 0x1c, 0x4e, 0x80, 0x9d, 0x61, 0xa9, 0x10, 0x4e, 0x12, 0x2a, 0x25, 0xd2, 0xa3,
		0xd8, 0x3c, 0x6e, 0xff, 0xd1, 0xe3, 0x46, 0xdb, 0x39, 0x0d, 0xba, 0x9a, 0x33, 0x32, 0x14, 0x6d,
		0x84, 0x7d, 0xd0, 0x66, 0x84, 0x16, 0x8a, 0xa9, 0x4d, 0xf3, 0x42, 0xbb, 0xfb, 0x21, 0x7d, 0x5a,
		0x07, 0xf4, 0x71, 0xfe, 0xb4, 0x40, 0x2f, 0x54, 0x2c, 0x49, 0x37, 0x57, 0xf7, 0x34, 0xa9, 0xf4,
		0x68, 0x8c, 0x94, 0x12, 0x2c, 0xae, 0x14, 0x95, 0xf0, 0x17, 0x60, 0xdf, 0x71, 0x91, 0x52, 0x61,
		0x66, 0x11, 0xe9, 0x1d, 0x6c, 0xea, 0x7c, 0xfd, 0xbf, 0xf3, 0x1d, 0x74, 0x6b, 0xda, 0x6e, 0x61,
		0x22, 0xd0, 0x93, 0xc9, 0x8a, 0x92, 0x2a, 0xa3, 0x48, 0x71, 0x54, 0xab, 0xa7, 0xdb, 0xe6, 0x95,
		0x32, 0xb5, 0x77, 0x2e, 0x7a, 0x8f, 0xc7, 0xba, 0xd9, 0xe0, 0xe0, 0xc5, 0x96, 0x1b, 0xf1, 0x50,
		0x33, 0xa3, 0x9a, 0xf8, 0xf6, 0x77, 0xf0, 0xd9, 0xfe, 0x46, 0xc1, 0x3e, 0x78, 0x11, 0x8d, 0xc2,
		0x29, 0x9a, 0xf9, 0x61, 0x84, 0xa6, 0xfe, 0x7c, 0x82, 0xfc, 0xf9, 0xcd, 0x68, 0xe6, 0x4f, 0xec,
		0x4f, 0x60, 0x0f, 0x3c, 0x7f, 0x80, 0xcd, 0xdf, 0x07, 0xd7, 0xa3, 0x99, 0x6d, 0x1d, 0x80, 0xc2,
		0xc8, 0x1f, 0x4f, 0x6f, 0xed, 0xa3, 0xb7, 0xe4, 0x9f, 0x0c, 0xd1, 0xa6, 0xa4, 0xff, 0xce, 0x10,
		0xdd, 0x2e, 0xae, 0xf6, 0x32, 0xbc, 0x02, 0x2f, 0x1f, 0x60, 0x93, 0xab, 0xb1, 0x1f, 0xfa, 0xef,
		0xe7, 0xb6, 0x75, 0x00, 0x1c, 0x8d, 0x23, 0xff, 0xc6, 0x8f, 0x6e, 0xed, 0xa3, 0xcb, 0x5f, 0xc1,
		0xcb, 0x84, 0xe7, 0x87, 0x14, 0xbd, 0x6c, 0x8f, 0x4a, 0xb6, 0xd0, 0x82, 0x2c, 0xac, 0xdf, 0x86,
		0x4b, 0xa6, 0x56, 0x55, 0xec, 0x26, 0x3c, 0xf7, 0xf6, 0xbf, 0xc9, 0xef, 0x19, 0xc9, 0xbc, 0x25,
		0xaf, 0x7f, 0xae, 0xe6, 0xcf, 0xfc, 0x09, 0x97, 0x6c, 0x3d, 0x8c, 0x9f, 0x1a, 0xdb, 0x0f, 0x7f,
		0x07, 0x00, 0x00, 0xff, 0xff, 0x99, 0x3b, 0x06, 0xfc, 0x57, 0x05, 0x00, 0x00,
	},
	// uber/cadence/api/v1/workflow.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcf, 0x6f, 0xdb, 0xc8,
		0x15, 0x2e, 0x25, 0xdb, 0xb1, 0x9f, 0xfc, 0x83, 0x1e, 0xc7, 0xb1, 0x92, 0xec, 0x26, 0x8e, 0x76,
		0x93, 0x75, 0xd4, 0xb5, 0xbd, 0x4e, 0x36, 0x9b, 0x66, 0xd3, 0x34, 0xa5, 0x49, 0x3a, 0x66, 0x22,
		0x53, 0xea, 0x88, 0x8a, 0xe3, 0x45, 0x51, 0x82, 0x96, 0xc6, 0xf6, 0x20, 0x12, 0x29, 0x90, 0x54,
		0x12, 0xdf, 0x0b, 0xf4, 0xdc, 0x5b, 0xd1, 0x53, 0xff, 0x80, 0x02, 0x45, 0xd1, 0x73, 0xd1, 0xa2,
		0x87, 0xde, 0x7a, 0xed, 0xb1, 0xf7, 0xfe, 0x17, 0xc5, 0x0c, 0x87, 0x12, 0xf5, 0x93, 0x4a, 0x0b,
		0x6c, 0x6f, 0xe6, 0xe3, 0xf7, 0x7d, 0x7c, 0xf3, 0xe6, 0xbd, 0x8f, 0x43, 0x0b, 0x0a, 0x9d, 0x53,
		0xe2, 0xef, 0xd6, 0x9d, 0x06, 0x71, 0xeb, 0x64, 0xd7, 0x69, 0xd3, 0xdd, 0x77, 0x7b, 0xbb, 0xef,
		0x3d, 0xff, 0xed, 0x59, 0xd3, 0x7b, 0xbf, 0xd3, 0xf6, 0xbd, 0xd0, 0x43, 0x6b, 0x0c, 0xb3, 0x23,
		0x30, 0x3b, 0x4e, 0x9b, 0xee, 0xbc, 0xdb, 0xbb, 0x71, 0xeb, 0xdc, 0xf3, 0xce, 0x9b, 0x64, 0x97,
		0x43, 0x4e, 0x3b, 0x67, 0xbb, 0x8d, 0x8e, 0xef, 0x84, 0xd4, 0x73, 0x23, 0xd2, 0x8d, 0xdb, 0x83,
		0xf7, 0x43, 0xda, 0x22, 0x41, 0xe8, 0xb4, 0xda, 0x02, 0xb0, 0x39, 0xea, 0xc9, 0x75, 0xaf, 0xd5,
		0xea, 0x4a, 0x8c, 0xcc, 0x2d, 0x74, 0x82, 0xb7, 0x4d, 0x1a, 0x84, 0x11, 0xa6, 0xf0, 0xd7, 0x39,
		0x58, 0x3f, 0x16, 0xe9, 0xea, 0x1f, 0x48, 0xbd, 0xc3, 0x52, 0x30, 0xdc, 0x33, 0x0f, 0xd5, 0x00,
		0xc5, 0xeb, 0xb0, 0x49, 0x7c, 0x27, 0x2f, 0x6d, 0x4a, 0x5b, 0xb9, 0x07, 0xf7, 0x76, 0x46, 0x2c,
		0x69, 0x67, 0x48, 0x07, 0xaf, 0xbe, 0x1f, 0x0c, 0xa1, 0x47, 0x30, 0x13, 0x5e, 0xb6, 0x49, 0x3e,
		0xc3, 0x85, 0xee, 0x4c, 0x14, 0xb2, 0x2e, 0xdb, 0x04, 0x73, 0x38, 0x7a, 0x02, 0x10, 0x84, 0x8e,
		0x1f, 0xda, 0xac, 0x0c, 0xf9, 0x2c, 0x27, 0xdf, 0xd8, 0x89, 0x6a, 0xb4, 0x13, 0xd7, 0x68, 0xc7,
		0x8a, 0x6b, 0x84, 0x17, 0x38, 0x9a, 0x5d, 0x33, 0x6a, 0xbd, 0xe9, 0x05, 0x24, 0xa2, 0xce, 0xa4,
		0x53, 0x39, 0x9a, 0x53, 0x2d, 0x58, 0x8c, 0xa8, 0x41, 0xe8, 0x84, 0x9d, 0x20, 0x3f, 0xbb, 0x29,
		0x6d, 0x2d, 0x3f, 0xd8, 0x9b, 0x6e, 0xf5, 0x2a, 0x63, 0x56, 0x39, 0x11, 0xe7, 0xea, 0xbd, 0x0b,
		0x74, 0x17, 0x96, 0x2f, 0x68, 0x10, 0x7a, 0xfe, 0xa5, 0xdd, 0x24, 0xee, 0x79, 0x78, 0x91, 0x9f,
		0xdb, 0x94, 0xb6, 0xb2, 0x78, 0x49, 0x44, 0x4b, 0x3c, 0x88, 0x7e, 0x0e, 0xeb, 0x6d, 0xc7, 0x27,
		0x6e, 0xd8, 0x2b, 0xbf, 0x4d, 0xdd, 0x33, 0x2f, 0x7f, 0x85, 0x2f, 0x61, 0x6b, 0x64, 0x16, 0x15,
		0xce, 0xe8, 0xdb, 0x49, 0xbc, 0xd6, 0x1e, 0x0e, 0x22, 0x05, 0x96, 0x7b, 0xb2, 0xbc, 0x32, 0xf3,
		0xa9, 0x95, 0x59, 0xea, 0x32, 0x78, 0x75, 0xb6, 0x61, 0xa6, 0x45, 0x5a, 0x5e, 0x7e, 0x81, 0x13,
		0xaf, 0x8f, 0xcc, 0xe7, 0x88, 0xb4, 0x3c, 0xcc, 0x61, 0x08, 0xc3, 0x6a, 0x40, 0x1c, 0xbf, 0x7e,
		0x61, 0x3b, 0x61, 0xe8, 0xd3, 0xd3, 0x4e, 0x48, 0x82, 0x3c, 0x70, 0xee, 0xdd, 0x91, 0xdc, 0x2a,
		0x47, 0x2b, 0x5d, 0x30, 0x96, 0x83, 0x81, 0x08, 0x2a, 0xc1, 0xaa, 0xd3, 0x09, 0x3d, 0xdb, 0x27,
		0x01, 0x09, 0xed, 0xb6, 0x47, 0xdd, 0x30, 0xc8, 0xe7, 0xb8, 0xe6, 0xe6, 0x48, 0x4d, 0xcc, 0x80,
		0x15, 0x8e, 0xc3, 0x2b, 0x8c, 0x9a, 0x08, 0xa0, 0x9b, 0xb0, 0xc0, 0xc6, 0xc3, 0x66, 0xf3, 0x91,
		0x5f, 0xdc, 0x94, 0xb6, 0x16, 0xf0, 0x3c, 0x0b, 0x94, 0x68, 0x10, 0xa2, 0x0d, 0xb8, 0x42, 0x03,
		0xbb, 0xee, 0x7b, 0x6e, 0x7e, 0x69, 0x53, 0xda, 0x9a, 0xc7, 0x73, 0x34, 0x50, 0x7d, 0xcf, 0x2d,
		0xfc, 0x26, 0x03, 0xb7, 0x86, 0x37, 0xdf, 0x73, 0xcf, 0xe8, 0xb9, 0x18, 0x69, 0xf4, 0x6d, 0x52,
		0x38, 0x1a, 0xa1, 0x4f, 0x47, 0xa6, 0x67, 0x89, 0xa7, 0x25, 0x9e, 0xeb, 0xc0, 0x66, 0x6f, 0xa3,
		0xc4, 0x0c, 0x78, 0x76, 0xaf, 0xa3, 0xbd, 0x4e, 0x28, 0x86, 0xe9, 0xfa, 0xd0, 0xd6, 0x69, 0x22,
		0x01, 0xfc, 0x49, 0x57, 0xa2, 0xca, 0xe7, 0xc2, 0x53, 0xe3, 0x1e, 0xf7, 0x3a, 0x21, 0x3a, 0x86,
		0x9b, 0x3c, 0xbd, 0x31, 0xea, 0xd9, 0x34, 0xf5, 0x0d, 0xc6, 0x1e, 0x21, 0x5c, 0xf8, 0x87, 0x04,
		0x6b, 0x23, 0x3a, 0x92, 0x15, 0xba, 0xe1, 0xb5, 0x1c, 0xea, 0xda, 0xb4, 0xc1, 0xeb, 0xb1, 0x80,
		0xe7, 0xa3, 0x80, 0xd1, 0x40, 0xb7, 0x21, 0x27, 0x6e, 0xba, 0x4e, 0x2b, 0x32, 0x8a, 0x05, 0x0c,
		0x51, 0xc8, 0x74, 0x5a, 0x64, 0x8c, 0x33, 0x65, 0xff, 0x57, 0x67, 0xba, 0x03, 0x8b, 0xd4, 0xa5,
		0x21, 0x75, 0x42, 0xd2, 0x60, 0x79, 0xcd, 0xf0, 0xa1, 0xcc, 0x75, 0x63, 0x46, 0xa3, 0xf0, 0x6b,
		0x09, 0xd6, 0xf5, 0x0f, 0x21, 0xf1, 0x5d, 0xa7, 0xf9, 0xbd, 0xb8, 0xe5, 0x60, 0x4e, 0x99, 0xe1,
		0x9c, 0xfe, 0x35, 0x0b, 0x6b, 0x15, 0xe2, 0x36, 0xa8, 0x7b, 0xae, 0xd4, 0x43, 0xfa, 0x8e, 0x86,
		0x97, 0x3c, 0xa3, 0xdb, 0x90, 0x73, 0xc4, 0x75, 0xaf, 0xca, 0x10, 0x87, 0x8c, 0x06, 0x3a, 0x80,
		0xa5, 0x2e, 0x20, 0xd5, 0x92, 0x63, 0x69, 0x6e, 0xc9, 0x8b, 0x4e, 0xe2, 0x0a, 0x3d, 0x87, 0x59,
		0x66, 0x8f, 0x91, 0x2b, 0x2f, 0x3f, 0xb8, 0x3f, 0xda, 0x97, 0xfa, 0x33, 0x64, 0x4e, 0x48, 0x70,
		0xc4, 0x43, 0x06, 0xac, 0x5e, 0x10, 0xc7, 0x0f, 0x4f, 0x89, 0x13, 0xda, 0x0d, 0x12, 0x3a, 0xb4,
		0x19, 0x08, 0x9f, 0xfe, 0x64, 0x8c, 0xc9, 0x5d, 0x36, 0x3d, 0xa7, 0x81, 0xe5, 0x2e, 0x4d, 0x8b,
		0x58, 0xe8, 0x25, 0xac, 0x35, 0x9d, 0x20, 0xb4, 0x7b, 0x7a, 0xdc, 0xda, 0x66, 0x53, 0xad, 0x6d,
		0x95, 0xd1, 0x0e, 0x63, 0x16, 0xb7, 0xb7, 0x03, 0xe0, 0xc1, 0x68, 0x2a, 0x48, 0x23, 0x52, 0x9a,
		0x4b, 0x55, 0x5a, 0x61, 0xa4, 0x6a, 0xc4, 0xe1, 0x3a, 0x79, 0xb8, 0xe2, 0x84, 0x21, 0x69, 0xb5,
		0x43, 0xee, 0xdc, 0xb3, 0x38, 0xbe, 0x44, 0xf7, 0x41, 0x6e, 0x39, 0x1f, 0x68, 0xab, 0xd3, 0xb2,
		0x45, 0x28, 0xe0, 0x2e, 0x3c, 0x8b, 0x57, 0x44, 0x5c, 0x11, 0x61, 0x66, 0xd7, 0x41, 0xfd, 0x82,
		0x34, 0x3a, 0xcd, 0x38, 0x93, 0x85, 0x74, 0xbb, 0xee, 0x32, 0x78, 0x1e, 0x2a, 0xac, 0x90, 0x0f,
		0x6d, 0x1a, 0xcd, 0x6c, 0xa4, 0x01, 0xa9, 0x1a, 0xcb, 0x3d, 0x0a, 0x17, 0x79, 0x0e, 0x8b, 0xbc,
		0x28, 0x67, 0x0e, 0x6d, 0x76, 0x7c, 0x22, 0xbc, 0x76, 0xf4, 0x36, 0x1d, 0x44, 0x18, 0x9c, 0x63,
		0x0c, 0x71, 0x81, 0xbe, 0x82, 0xab, 0x5c, 0x80, 0xf5, 0x3a, 0xf1, 0x6d, 0xda, 0x20, 0x6e, 0x48,
		0xc3, 0x4b, 0x61, 0xb7, 0x88, 0xdd, 0x3b, 0xe6, 0xb7, 0x0c, 0x71, 0xa7, 0xf0, 0xa7, 0x0c, 0x5c,
		0x17, 0xed, 0xa3, 0x5e, 0xd0, 0x66, 0xe3, 0x7b, 0x19, 0xbc, 0x2f, 0x13, 0xb2, 0x6c, 0x38, 0x92,
		0x5e, 0x24, 0xbf, 0x4f, 0x9c, 0x4f, 0xb8, 0x23, 0x0d, 0x8e, 0x69, 0x76, 0x68, 0x4c, 0xd1, 0x6b,
		0x10, 0xaf, 0x61, 0x61, 0xae, 0x6d, 0xaf, 0x49, 0xeb, 0x97, 0xbc, 0xcd, 0x97, 0xc7, 0x24, 0x1a,
		0x39, 0x27, 0x37, 0xd4, 0x0a, 0x47, 0xe3, 0xd5, 0xf6, 0x60, 0x08, 0x5d, 0x83, 0xb9, 0xc8, 0x1a,
		0x79, 0x93, 0x2f, 0x60, 0x71, 0x55, 0xf8, 0x7b, 0xa6, 0x6b, 0x0b, 0x1a, 0xa9, 0xd3, 0x20, 0xae,
		0x57, 0x77, 0x5a, 0xa5, 0xf4, 0x69, 0x8d, 0x89, 0x7d, 0xd3, 0x3a, 0xdc, 0x89, 0x99, 0x8f, 0xed,
		0xc4, 0x67, 0xb0, 0xd8, 0x37, 0x54, 0xe9, 0xc7, 0xb9, 0x5c, 0x30, 0x7a, 0xa0, 0x66, 0xfa, 0x07,
		0x0a, 0xc3, 0x86, 0xe7, 0xd3, 0x73, 0xea, 0x3a, 0x4d, 0x7b, 0x20, 0xc9, 0x74, 0x0b, 0x58, 0x8f,
		0xa9, 0xd5, 0x64, 0xb2, 0x85, 0x3f, 0x67, 0xe0, 0x7a, 0x6c, 0x5b, 0x25, 0xaf, 0xee, 0x34, 0x35,
		0x1a, 0xb4, 0x9d, 0xb0, 0x7e, 0x31, 0x9d, 0xcb, 0xfe, 0xff, 0xcb, 0xf5, 0x0b, 0xb8, 0xd5, 0x9f,
		0x81, 0xed, 0x9d, 0xd9, 0xe1, 0x05, 0x0d, 0xec, 0x64, 0x15, 0x27, 0x0b, 0xde, 0xe8, 0xcb, 0xa8,
		0x7c, 0x66, 0x5d, 0xd0, 0x40, 0x78, 0x13, 0xfa, 0x14, 0x80, 0x9f, 0x1e, 0x42, 0xef, 0x2d, 0x89,
		0xba, 0x70, 0x11, 0xf3, 0xe3, 0x8e, 0xc5, 0x02, 0x85, 0x97, 0x90, 0x4b, 0x9e, 0xb1, 0x9e, 0xc2,
		0x9c, 0x38, 0xa6, 0x49, 0x9b, 0xd9, 0xad, 0xdc, 0x83, 0xcf, 0x52, 0x8e, 0x69, 0xfc, 0x04, 0x2b,
		0x28, 0x85, 0x3f, 0x64, 0x60, 0xb9, 0xff, 0x16, 0xfa, 0x02, 0x56, 0x4e, 0xa9, 0xeb, 0xf8, 0x97,
		0x76, 0xfd, 0x82, 0xd4, 0xdf, 0x06, 0x9d, 0x96, 0xd8, 0x84, 0xe5, 0x28, 0xac, 0x8a, 0x28, 0x5a,
		0x87, 0x39, 0xbf, 0xe3, 0xc6, 0x2f, 0xd1, 0x05, 0x3c, 0xeb, 0x77, 0xd8, 0x69, 0xe3, 0x19, 0xdc,
		0x3c, 0xa3, 0x7e, 0xc0, 0x5e, 0x3c, 0x51, 0xb3, 0xdb, 0x75, 0xaf, 0xd5, 0x6e, 0x92, 0xbe, 0x49,
		0xce, 0x73, 0x48, 0x3c, 0x0e, 0x6a, 0x0c, 0xe0, 0xf4, 0xc5, 0xba, 0x4f, 0x9c, 0xee, 0xde, 0xa4,
		0x97, 0x32, 0x27, 0xf0, 0xc2, 0x4e, 0x97, 0xb8, 0xc1, 0x52, 0xf7, 0x7c, 0xda, 0x36, 0x5d, 0x8c,
		0x09, 0x5c, 0xe0, 0x16, 0x00, 0x3f, 0xfb, 0x86, 0xce, 0x69, 0x33, 0x7a, 0x3b, 0xcd, 0xe3, 0x44,
		0xa4, 0xf8, 0x47, 0x09, 0xae, 0x8e, 0x7a, 0xf7, 0xa2, 0x02, 0xdc, 0xaa, 0xe8, 0xa6, 0x66, 0x98,
		0x2f, 0x6c, 0x45, 0xb5, 0x8c, 0xd7, 0x86, 0x75, 0x62, 0x57, 0x2d, 0xc5, 0xd2, 0x6d, 0xc3, 0x7c,
		0xad, 0x94, 0x0c, 0x4d, 0xfe, 0x01, 0xfa, 0x1c, 0x36, 0xc7, 0x60, 0xaa, 0xea, 0xa1, 0xae, 0xd5,
		0x4a, 0xba, 0x26, 0x4b, 0x13, 0x94, 0xaa, 0x96, 0x82, 0x2d, 0x5d, 0x93, 0x33, 0xe8, 0x87, 0xf0,
		0xc5, 0x18, 0x8c, 0xaa, 0x98, 0xaa, 0x5e, 0xb2, 0xb1, 0xfe, 0xb3, 0x9a, 0x5e, 0x65, 0xe0, 0x6c,
		0xf1, 0x97, 0xbd, 0x9c, 0xfb, 0x1c, 0x28, 0xf9, 0x24, 0x4d, 0x57, 0x8d, 0xaa, 0x51, 0x36, 0x27,
		0xe5, 0x3c, 0x80, 0x19, 0x93, 0xf3, 0x20, 0x2a, 0xce, 0xb9, 0xf8, 0xab, 0x4c, 0xef, 0xd3, 0xd8,
		0x68, 0x60, 0xd2, 0xe9, 0x7a, 0xee, 0xe7, 0xb0, 0x79, 0x5c, 0xc6, 0xaf, 0x0e, 0x4a, 0xe5, 0x63,
		0xdb, 0xd0, 0x6c, 0xac, 0xd7, 0xaa, 0xba, 0x5d, 0x29, 0x97, 0x0c, 0xf5, 0x24, 0x91, 0xc9, 0x8f,
		0xe0, 0xeb, 0xb1, 0x28, 0xa5, 0xc4, 0xa2, 0x5a, 0xad, 0x52, 0x32, 0x54, 0xf6, 0xd4, 0x03, 0xc5,
		0x28, 0xe9, 0x9a, 0x5d, 0x36, 0x4b, 0x27, 0xb2, 0x84, 0xbe, 0x84, 0xad, 0x69, 0x99, 0x72, 0x06,
		0x6d, 0xc3, 0xfd, 0xb1, 0x68, 0xac, 0xbf, 0xd4, 0x55, 0x2b, 0x01, 0xcf, 0xa2, 0x3d, 0xd8, 0x1e,
		0x0b, 0xb7, 0x74, 0x7c, 0x64, 0x98, 0xbc, 0xa0, 0x07, 0x36, 0xae, 0x99, 0xa6, 0x61, 0xbe, 0x90,
		0x67, 0x8a, 0xbf, 0x93, 0x60, 0x75, 0xe8, 0x65, 0x84, 0x6e, 0xc3, 0xcd, 0x8a, 0x82, 0x75, 0xd3,
		0xb2, 0xd5, 0x52, 0x79, 0x54, 0x01, 0xc6, 0x00, 0x94, 0x7d, 0xc5, 0xd4, 0xca, 0xa6, 0x2c, 0xa1,
		0x7b, 0x50, 0x18, 0x05, 0x10, 0xbd, 0x20, 0x5a, 0x43, 0xce, 0xa0, 0x3b, 0xf0, 0xe9, 0x28, 0x5c,
		0x37, 0x5b, 0x39, 0x5b, 0xfc, 0x77, 0x06, 0x3e, 0x99, 0xf4, 0x05, 0xce, 0x3a, 0xb0, 0xbb, 0x6c,
		0xfd, 0x8d, 0xae, 0xd6, 0x2c, 0xb6, 0xe7, 0x91, 0x1e, 0xdb, 0xf9, 0x5a, 0x35, 0x91, 0x79, 0xb2,
		0xa4, 0x63, 0xc0, 0x6a, 0xf9, 0xa8, 0x52, 0xd2, 0x2d, 0xde, 0x4d, 0x45, 0xb8, 0x97, 0x06, 0x8f,
		0x36, 0x58, 0xce, 0xf4, 0xed, 0xed, 0x38, 0x69, 0xbe, 0x6e, 0x36, 0x0a, 0x68, 0x07, 0x8a, 0x69,
		0xe8, 0x6e, 0x15, 0x34, 0x79, 0x06, 0x7d, 0x0d, 0x5f, 0xa5, 0x27, 0x6e, 0x5a, 0x86, 0x59, 0xd3,
		0x35, 0x5b, 0xa9, 0xda, 0xa6, 0x7e, 0x2c, 0xcf, 0x4e, 0xb3, 0x5c, 0xcb, 0x38, 0x62, 0xfd, 0x59,
		0xb3, 0xe4, 0xb9, 0xe2, 0x5f, 0x24, 0xb8, 0xa6, 0x7a, 0x6e, 0x48, 0xdd, 0x0e, 0x51, 0x02, 0x93,
		0xbc, 0x37, 0xa2, 0x73, 0x8e, 0xe7, 0xa3, 0xbb, 0x70, 0x27, 0xd6, 0x17, 0xf2, 0xb6, 0x61, 0x1a,
		0x96, 0xa1, 0x58, 0x65, 0x9c, 0xa8, 0xef, 0x44, 0x18, 0x1b, 0x48, 0x4d, 0xc7, 0x51, 0x5d, 0xc7,
		0xc3, 0xb0, 0x6e, 0xe1, 0x13, 0xd1, 0x0a, 0x91, 0xc3, 0x8c, 0xc7, 0xaa, 0x98, 0xcd, 0xb7, 0x98,
		0x7f, 0x39, 0x5b, 0xfc, 0xbd, 0x04, 0x39, 0xf1, 0x8d, 0xca, 0x3f, 0x61, 0xf2, 0x70, 0x95, 0x2d,
		0xb0, 0x5c, 0xb3, 0x6c, 0xeb, 0xa4, 0xa2, 0xf7, 0xf7, 0x70, 0xdf, 0x1d, 0x6e, 0x0f, 0xb6, 0x55,
		0x8e, 0xaa, 0x13, 0x39, 0x49, 0x3f, 0x40, 0x3c, 0x85, 0x61, 0x38, 0x58, 0xce, 0x4c, 0xc4, 0x44,
		0x3a, 0x59, 0x74, 0x03, 0xae, 0xf5, 0x61, 0x0e, 0x75, 0x05, 0x5b, 0xfb, 0xba, 0x62, 0xc9, 0x33,
		0xc5, 0xdf, 0x4a, 0x70, 0x3d, 0x76, 0x42, 0x8b, 0xbd, 0x58, 0x69, 0x8b, 0x34, 0xca, 0x9d, 0x50,
		0x75, 0x3a, 0x01, 0x41, 0xf7, 0xe1, 0x6e, 0xd7, 0xc3, 0x2c, 0xa5, 0xfa, 0xaa, 0xb7, 0x57, 0xb6,
		0xaa, 0xb0, 0xe1, 0xee, 0xad, 0x26, 0x15, 0x2a, 0x52, 0x90, 0x25, 0xf4, 0x05, 0x7c, 0x36, 0x19,
		0x8a, 0xf5, 0xaa, 0x6e, 0xc9, 0x99, 0xe2, 0x3f, 0x73, 0xb0, 0x91, 0x4c, 0x8e, 0x1d, 0xf4, 0x49,
		0x23, 0x4a, 0xed, 0x1e, 0x14, 0xfa, 0x45, 0x84, 0xcf, 0x0d, 0xe6, 0xb5, 0x07, 0xdb, 0x13, 0x70,
		0x35, 0xf3, 0x50, 0x31, 0x35, 0x76, 0x1d, 0x83, 0x64, 0x09, 0x3d, 0x87, 0xa7, 0x13, 0x28, 0xfb,
		0x8a, 0xd6, 0xab, 0x72, 0xf7, 0x8d, 0xa3, 0x58, 0x16, 0x36, 0xf6, 0x6b, 0x96, 0x5e, 0x95, 0x33,
		0x48, 0x07, 0x25, 0x45, 0xa0, 0xdf, 0x87, 0x46, 0xca, 0x64, 0xd1, 0x13, 0x78, 0x94, 0x96, 0x47,
		0xd4, 0x32, 0xc6, 0x91, 0x8e, 0x93, 0xd4, 0x19, 0xf4, 0x2d, 0x7c, 0x93, 0x42, 0x15, 0x4f, 0x1e,
		0xe2, 0xce, 0xa2, 0xa7, 0xf0, 0x38, 0x35, 0x7b, 0xb5, 0x8c, 0x35, 0xfb, 0x48, 0xc1, 0xaf, 0xfa,
		0xc9, 0x73, 0xc8, 0x00, 0x3d, 0xed, 0xc1, 0xc2, 0xdd, 0xec, 0x11, 0xbe, 0x90, 0x90, 0xba, 0x32,
		0x45, 0x15, 0x59, 0x20, 0x45, 0x66, 0x1e, 0xbd, 0x00, 0x75, 0xba, 0x52, 0x4c, 0x16, 0x5a, 0x40,
		0x6f, 0xc0, 0xfa, 0xb8, 0x5d, 0xd5, 0xdf, 0x58, 0x3a, 0x36, 0x95, 0x34, 0x65, 0x40, 0xcf, 0xe0,
		0x49, 0x6a, 0xd1, 0xfa, 0xfd, 0x27, 0x41, 0xcf, 0xa1, 0xc7, 0xf0, 0x70, 0x02, 0x3d, 0xd9, 0x23,
		0xbd, 0x53, 0x81, 0xa1, 0xc9, 0x8b, 0xe8, 0x11, 0xec, 0x4d, 0x20, 0xf2, 0x29, 0xb4, 0xab, 0x96,
		0xa1, 0xbe, 0x3a, 0x89, 0x6e, 0x97, 0x8c, 0xaa, 0x25, 0x2f, 0xa1, 0x9f, 0xc2, 0x8f, 0x27, 0xd0,
		0xba, 0x8b, 0x65, 0x7f, 0xe8, 0x38, 0x31, 0x62, 0x0c, 0x56, 0xc3, 0xba, 0xbc, 0x3c, 0xc5, 0x9e,
		0x54, 0x8d, 0x17, 0xe9, 0x95, 0x5b, 0x41, 0x2a, 0x3c, 0x9f, 0x6a, 0x44, 0xd4, 0x43, 0xa3, 0xa4,
		0x8d, 0x16, 0x91, 0xd1, 0x43, 0xd8, 0x9d, 0x20, 0x72, 0x50, 0xc6, 0xaa, 0x2e, 0xde, 0x58, 0x5d,
		0x93, 0x58, 0x45, 0xdf, 0xc0, 0x83, 0x49, 0x24, 0xc5, 0x28, 0x95, 0x5f, 0xeb, 0x78, 0x90, 0x87,
		0xd8, 0x6b, 0x74, 0xba, 0xa5, 0x1b, 0x66, 0xa5, 0x66, 0xd9, 0x55, 0xe3, 0x3b, 0x5d, 0x5e, 0x63,
		0xaf, 0xd1, 0xd4, 0x9d, 0x8a, 0x6b, 0x25, 0x5f, 0x1d, 0x36, 0xe3, 0xa1, 0x87, 0xec, 0x1b, 0xa6,
		0x82, 0x4f, 0xe4, 0xf5, 0x94, 0xde, 0x1b, 0x36, 0xba, 0xbe, 0x16, 0xba, 0x36, 0xcd, 0x72, 0x74,
		0x05, 0xab, 0x87, 0xc9, 0x8a, 0x6f, 0xb0, 0xb7, 0xce, 0x1d, 0xfe, 0x0f, 0x97, 0xa1, 0x73, 0x55,
		0xd2, 0xe2, 0xf7, 0x60, 0x3b, 0xda, 0xb7, 0x11, 0x5d, 0x30, 0xc6, 0xed, 0xf7, 0xe1, 0x27, 0xd3,
		0x51, 0xba, 0xf7, 0x95, 0x12, 0xd6, 0x15, 0xed, 0xa4, 0x7b, 0x24, 0x95, 0x8a, 0x7f, 0x93, 0xa0,
		0xa8, 0x3a, 0x6e, 0x9d, 0x34, 0xe3, 0xff, 0xc7, 0x4e, 0xcc, 0xf2, 0x29, 0x3c, 0x9e, 0x62, 0xde,
		0xc7, 0xe4, 0x7b, 0x0c, 0xd5, 0x8f, 0x25, 0xd7, 0xcc, 0x57, 0x66, 0xf9, 0xd8, 0x9c, 0x44, 0x10,
		0x8b, 0xa8, 0xd2, 0x73, 0xfe, 0xcf, 0xe4, 0xe9, 0x16, 0x21, 0xda, 0xee, 0xbf, 0x5b, 0xc4, 0xc7,
		0x92, 0xa7, 0x5a, 0xc4, 0xfe, 0x1b, 0xd8, 0xa8, 0x7b, 0xad, 0x51, 0x5f, 0xf1, 0xfb, 0xf3, 0x4a,
		0x9b, 0x56, 0xd8, 0x17, 0x6c, 0x45, 0xfa, 0x6e, 0xef, 0x9c, 0x86, 0x17, 0x9d, 0xd3, 0x9d, 0xba,
		0xd7, 0xda, 0x4d, 0xfe, 0x2e, 0xb9, 0x4d, 0x1b, 0xcd, 0xdd, 0x73, 0x2f, 0xfa, 0x9d, 0x53, 0xfc,
		0x48, 0xf9, 0xd4, 0x69, 0xd3, 0x77, 0x7b, 0xa7, 0x73, 0x3c, 0xf6, 0xf0, 0x3f, 0x01, 0x00, 0x00,
		0xff, 0xff, 0x4a, 0xf8, 0xd6, 0xfd, 0x64, 0x1d, 0x00, 0x00,
	},
	// uber/cadence/api/v1/query.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5f, 0x73, 0x93, 0x4e,
		0x14, 0xfd, 0x91, 0xdf, 0x4c, 0xc7, 0xde, 0x36, 0xca, 0x6c, 0x75, 0x8c, 0x99, 0xfe, 0xc9, 0xa4,
		0x7d, 0xe8, 0x64, 0x14, 0x4c, 0xf5, 0xad, 0x4f, 0x94, 0xac, 0x0e, 0x0e, 0x05, 0x0a, 0x24, 0x35,
		0xbe, 0x30, 0x84, 0xac, 0x11, 0x4b, 0x58, 0xdc, 0x85, 0xc4, 0x7c, 0x01, 0xdf, 0xfd, 0x34, 0x7e,
		0x3d, 0x07, 0x42, 0x4c, 0x34, 0xd4, 0xf1, 0xed, 0x72, 0xee, 0x39, 0x9c, 0x73, 0x66, 0xe7, 0xc2,
		0x49, 0x36, 0x22, 0x4c, 0x0e, 0xfc, 0x31, 0x89, 0x03, 0x22, 0xfb, 0x49, 0x28, 0xcf, 0xba, 0xf2,
		0x97, 0x8c, 0xb0, 0x85, 0x94, 0x30, 0x9a, 0x52, 0x74, 0x90, 0x13, 0xa4, 0x92, 0x20, 0xf9, 0x49,
		0x28, 0xcd, 0xba, 0xcd, 0x56, 0x95, 0x2a, 0xa0, 0xd3, 0x29, 0x8d, 0x97, 0xb2, 0x66, 0xbb, 0x8a,
		0x31, 0xa7, 0xec, 0xee, 0x63, 0x44, 0xe7, 0x4b, 0x4e, 0xfb, 0x0e, 0xea, 0xb7, 0x25, 0x72, 0x93,
		0x3b, 0xa2, 0x23, 0x80, 0xc2, 0xda, 0x4b, 0x17, 0x09, 0x69, 0x08, 0x2d, 0xe1, 0x7c, 0xd7, 0xde,
		0x2d, 0x10, 0x77, 0x91, 0x10, 0x74, 0xb9, 0x5a, 0xfb, 0x6c, 0xc2, 0x1b, 0xb5, 0x96, 0x70, 0xbe,
		0x77, 0x71, 0x28, 0x55, 0xe4, 0x93, 0x2c, 0x7f, 0x11, 0x51, 0x7f, 0x5c, 0x8a, 0x15, 0x36, 0xe1,
		0xed, 0x1f, 0x02, 0x1c, 0xfc, 0xe6, 0x66, 0x13, 0x9e, 0x45, 0x29, 0xc2, 0xb0, 0xc7, 0x8a, 0x69,
		0x6d, 0xfa, 0xf0, 0xe2, 0xac, 0xf2, 0xaf, 0x1b, 0xb2, 0x3c, 0x8f, 0x0d, 0xec, 0xd7, 0x8c, 0x5e,
		0xc3, 0x8e, 0x1f, 0xf3, 0x39, 0x61, 0xff, 0x94, 0xab, 0xe4, 0xa2, 0x53, 0xa8, 0x13, 0xc6, 0x28,
		0xf3, 0xa6, 0x84, 0x73, 0x7f, 0x42, 0x1a, 0xff, 0x17, 0x9d, 0xf7, 0x0b, 0xf0, 0x7a, 0x89, 0xb5,
		0x09, 0xd4, 0x4b, 0xe7, 0xcf, 0x24, 0x48, 0xc9, 0x18, 0xb9, 0xb0, 0x1f, 0x44, 0x94, 0x13, 0x8f,
		0xa7, 0x7e, 0x9a, 0xf1, 0x32, 0x73, 0xb7, 0xd2, 0x71, 0x55, 0x19, 0x7f, 0x25, 0x41, 0x96, 0x86,
		0x34, 0x56, 0x73, 0xa5, 0x53, 0x08, 0xed, 0xbd, 0x60, 0xfd, 0xd1, 0x89, 0xe1, 0xd1, 0x1f, 0x05,
		0xd1, 0x11, 0x3c, 0xbb, 0xe9, 0x63, 0x7b, 0xe8, 0xd9, 0xd8, 0xe9, 0xeb, 0xae, 0xe7, 0x0e, 0x2d,
		0xec, 0x69, 0xc6, 0x40, 0xd1, 0xb5, 0x9e, 0xf8, 0x1f, 0x3a, 0x86, 0xe6, 0xf6, 0x5a, 0x31, 0x9c,
		0x5b, 0x6c, 0xe3, 0x9e, 0x28, 0xa0, 0x43, 0x68, 0x6c, 0xef, 0xdf, 0x28, 0x9a, 0x8e, 0x7b, 0x62,
		0xad, 0xf3, 0x5d, 0x80, 0xc7, 0x1b, 0xbd, 0x54, 0x1a, 0x8f, 0xc3, 0x3c, 0x20, 0x6a, 0xc3, 0xf1,
		0x4a, 0xf6, 0x0e, 0xab, 0xae, 0xa7, 0x9a, 0x46, 0x4f, 0x73, 0x35, 0xd3, 0xd8, 0xb0, 0x3e, 0x85,
		0x93, 0x7b, 0x38, 0x86, 0xe9, 0x7a, 0xa6, 0x85, 0x0d, 0x51, 0x40, 0x2f, 0xe1, 0xf9, 0x5f, 0x48,
		0xaa, 0x79, 0x6d, 0xe9, 0xd8, 0xc5, 0x3d, 0x4f, 0xd5, 0xb1, 0x62, 0xe8, 0x43, 0xb1, 0xd6, 0xf9,
		0x26, 0xc0, 0x93, 0x22, 0x93, 0x4a, 0x63, 0x1e, 0xf2, 0x94, 0xc4, 0xc1, 0x42, 0x27, 0x33, 0x12,
		0xad, 0x0d, 0x55, 0xd3, 0x70, 0x34, 0xc7, 0xc5, 0x86, 0x3a, 0xf4, 0x74, 0x3c, 0xc0, 0xfa, 0x46,
		0xaa, 0x33, 0x68, 0xdd, 0x47, 0xc2, 0x03, 0x6c, 0xb8, 0x7d, 0x45, 0x17, 0x85, 0x75, 0xbf, 0x6d,
		0x96, 0xe3, 0xda, 0xa6, 0xf1, 0x56, 0xac, 0x5d, 0xbd, 0x87, 0xa7, 0x01, 0x9d, 0x56, 0xbd, 0xe8,
		0xd5, 0x03, 0x25, 0x09, 0xad, 0xfc, 0x7e, 0x2c, 0xe1, 0x43, 0x77, 0x12, 0xa6, 0x9f, 0xb2, 0x91,
		0x14, 0xd0, 0xa9, 0xbc, 0x79, 0x70, 0x2f, 0xc2, 0x71, 0x24, 0x4f, 0xa8, 0x5c, 0xdc, 0x59, 0x79,
		0x7d, 0x97, 0x7e, 0x12, 0xce, 0xba, 0xa3, 0x9d, 0x02, 0x7b, 0xf5, 0x33, 0x00, 0x00, 0xff, 0xff,
		0x7e, 0x63, 0x77, 0x24, 0xf9, 0x03, 0x00, 0x00,
	},
	// uber/cadence/api/v1/service_workflow.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0x4f, 0x73, 0xdc, 0x48,
		0x15, 0x2f, 0xf9, 0xbf, 0xdf, 0xd8, 0x8e, 0xd3, 0x89, 0xed, 0xc9, 0x24, 0x76, 0x1c, 0x65, 0x37,
		0x98, 0xec, 0x66, 0x4c, 0x1c, 0x36, 0x09, 0x59, 0x60, 0xcb, 0x99, 0xc4, 0x59, 0x53, 0x9b, 0x2d,
		0x23, 0x1b, 0x02, 0x5c, 0x54, 0x6d, 0xe9, 0x79, 0xa6, 0xb1, 0x46, 0x92, 0xbb, 0x5b, 0xf6, 0xce,
		0x72, 0xa0, 0xa0, 0xb6, 0x38, 0xf0, 0xaf, 0xe0, 0xc8, 0x89, 0x03, 0x9c, 0xf9, 0x18, 0x1c, 0x28,
		0x2e, 0x7c, 0x04, 0x3e, 0x01, 0xdf, 0x60, 0x8b, 0x52, 0xab, 0x35, 0xe3, 0x19, 0xb7, 0x34, 0x76,
		0xa8, 0xad, 0xa4, 0xb8, 0x8d, 0x5e, 0xbf, 0xdf, 0xfb, 0xdf, 0xdd, 0xef, 0x75, 0x0d, 0xdc, 0x4d,
		0xf6, 0x91, 0xaf, 0x7b, 0xd4, 0xc7, 0xd0, 0xc3, 0x75, 0x1a, 0xb3, 0xf5, 0xe3, 0xfb, 0xeb, 0x02,
		0xf9, 0x31, 0xf3, 0xd0, 0x3d, 0x89, 0xf8, 0xe1, 0x41, 0x10, 0x9d, 0xd4, 0x63, 0x1e, 0xc9, 0x88,
		0x5c, 0x49, 0x79, 0xeb, 0x9a, 0xb7, 0x4e, 0x63, 0x56, 0x3f, 0xbe, 0x5f, 0x5b, 0x69, 0x46, 0x51,
		0x33, 0xc0, 0x75, 0xc5, 0xb2, 0x9f, 0x1c, 0xac, 0xfb, 0x09, 0xa7, 0x92, 0x45, 0x61, 0x06, 0xaa,
		0xad, 0x9a, 0x14, 0x78, 0x51, 0xbb, 0xdd, 0xe5, 0xb8, 0x65, 0xe2, 0x68, 0x31, 0x21, 0x23, 0xde,
		0xd1, 0x2c, 0x37, 0x4d, 0x2c, 0x47, 0x09, 0x76, 0x19, 0x6c, 0x13, 0x83, 0xa4, 0xe2, 0x30, 0x60,
		0x42, 0x96, 0xf1, 0xf4, 0xbb, 0x68, 0xff, 0x63, 0x12, 0x96, 0x77, 0x25, 0xe5, 0xf2, 0x95, 0xa6,
		0x3f, 0xff, 0x0c, 0xbd, 0x24, 0x75, 0xc7, 0xc1, 0xa3, 0x04, 0x85, 0x24, 0x8b, 0x30, 0xe1, 0x47,
		0x6d, 0xca, 0xc2, 0xaa, 0xb5, 0x6a, 0xad, 0x4d, 0x3b, 0xfa, 0x8b, 0xdc, 0x84, 0x4a, 0x2e, 0xcb,
		0x65, 0x7e, 0x75, 0x44, 0x2d, 0x42, 0x4e, 0xda, 0xf6, 0xc9, 0x16, 0xcc, 0x76, 0x19, 0x64, 0x27,
		0xc6, 0xea, 0xe8, 0xaa, 0xb5, 0x56, 0xd9, 0xb8, 0x55, 0x37, 0x44, 0xb5, 0x9e, 0xab, 0xdf, 0xeb,
		0xc4, 0xe8, 0xcc, 0x9c, 0x9c, 0xfa, 0x22, 0x4f, 0x60, 0x3a, 0x75, 0xcc, 0x4d, 0x3d, 0xab, 0x8e,
		0x29, 0x19, 0xcb, 0x46, 0x19, 0x7b, 0x54, 0x1c, 0x7e, 0xc2, 0x84, 0x74, 0xa6, 0xa4, 0xfe, 0x45,
		0x36, 0x60, 0x9c, 0x85, 0x71, 0x22, 0xab, 0xe3, 0x0a, 0x77, 0xc3, 0x88, 0xdb, 0xa1, 0x9d, 0x20,
		0xa2, 0xbe, 0x93, 0xb1, 0x12, 0x0a, 0xab, 0x98, 0x07, 0xc1, 0x15, 0x69, 0x6c, 0x5c, 0x19, 0xb9,
		0x5e, 0x10, 0x09, 0x74, 0x25, 0x6b, 0x63, 0x94, 0xc8, 0xea, 0x84, 0x12, 0x77, 0xad, 0x9e, 0xd5,
		0x42, 0x3d, 0xaf, 0x85, 0xfa, 0x33, 0x5d, 0x0b, 0xce, 0x8d, 0xae, 0x08, 0x15, 0xdd, 0xbd, 0xa8,
		0x91, 0xe2, 0xf7, 0x32, 0x38, 0x79, 0x05, 0xd7, 0x95, 0x4b, 0x05, 0xd2, 0x27, 0x87, 0x49, 0x5f,
		0x4a, 0xd1, 0x26, 0xc1, 0x35, 0x98, 0x62, 0x3e, 0x86, 0x92, 0xc9, 0x4e, 0x75, 0x4a, 0x65, 0xa4,
		0xfb, 0x4d, 0x96, 0x01, 0x78, 0x96, 0xd3, 0x34, 0x5f, 0xd3, 0x6a, 0x75, 0x5a, 0x53, 0xb6, 0x7d,
		0xe2, 0x41, 0xf5, 0x54, 0x3e, 0x5d, 0x8e, 0x89, 0x40, 0x37, 0x8e, 0x02, 0xe6, 0x75, 0xaa, 0xb0,
		0x6a, 0xad, 0xcd, 0x6d, 0xdc, 0x2d, 0xcd, 0xdc, 0xb6, 0xef, 0xa4, 0x90, 0x1d, 0x85, 0x70, 0x16,
		0x4e, 0x4c, 0x64, 0xd2, 0x80, 0x19, 0x8e, 0x92, 0x77, 0x72, 0xc1, 0x15, 0xe5, 0xe9, 0xaa, 0x51,
		0xb0, 0x93, 0x32, 0x6a, 0x71, 0x15, 0xde, 0xfb, 0x20, 0xb7, 0x61, 0xd6, 0xe3, 0x69, 0x6e, 0xbc,
		0x16, 0xfa, 0x49, 0x80, 0xd5, 0x19, 0xe5, 0xcb, 0x4c, 0x4a, 0xdc, 0xd5, 0x34, 0x72, 0x0f, 0xc6,
		0xda, 0xd8, 0x8e, 0xaa, 0xb3, 0x3a, 0x96, 0x26, 0x0d, 0x2f, 0xb1, 0x1d, 0x39, 0x8a, 0x8d, 0x38,
		0x70, 0x59, 0x20, 0xe5, 0x5e, 0xcb, 0xa5, 0x52, 0x72, 0xb6, 0x9f, 0x48, 0x14, 0xd5, 0x39, 0x85,
		0x7d, 0xd7, 0x88, 0xdd, 0x55, 0xdc, 0x9b, 0x5d, 0x66, 0x67, 0x5e, 0x0c, 0x50, 0xc8, 0x03, 0x98,
		0x68, 0x21, 0xf5, 0x91, 0x57, 0x2f, 0x29, 0x41, 0xd7, 0x8d, 0x82, 0x3e, 0x56, 0x2c, 0x8e, 0x66,
		0x25, 0x4f, 0xa0, 0xe2, 0x63, 0x40, 0x3b, 0x59, 0x6d, 0x54, 0xe7, 0x87, 0x95, 0x02, 0x28, 0x6e,
		0x55, 0x0b, 0xf6, 0x23, 0x58, 0x29, 0xda, 0xcb, 0x22, 0x8e, 0x42, 0x81, 0x64, 0x01, 0x26, 0x78,
		0x12, 0xa6, 0xf9, 0xcf, 0x36, 0xf3, 0x38, 0x4f, 0xc2, 0x6d, 0xdf, 0xfe, 0xfb, 0x08, 0xac, 0xec,
		0xb2, 0x66, 0x48, 0x83, 0x0b, 0x1f, 0x03, 0x3f, 0x00, 0xd2, 0x2d, 0x9b, 0x6e, 0xcd, 0xab, 0xd3,
		0xa0, 0xb2, 0x71, 0xa7, 0xb4, 0x60, 0x7a, 0x2a, 0x2e, 0x9f, 0x0c, 0x92, 0xfa, 0x0a, 0x79, 0xb4,
		0xb4, 0x90, 0xc7, 0x06, 0x0b, 0xf9, 0x26, 0x54, 0x84, 0xf2, 0xc5, 0x0d, 0x69, 0x1b, 0xd5, 0xce,
		0x9f, 0x76, 0x20, 0x23, 0x7d, 0x4a, 0xdb, 0x48, 0x3e, 0x82, 0x19, 0xcd, 0x90, 0x9d, 0x0d, 0x13,
		0xe7, 0x38, 0x1b, 0xb4, 0xc8, 0x6d, 0x75, 0x42, 0x54, 0x61, 0xd2, 0x8b, 0x42, 0xc9, 0xa3, 0x40,
		0x6d, 0xd5, 0x19, 0x27, 0xff, 0xb4, 0x6f, 0xc1, 0xcd, 0xc2, 0x38, 0x66, 0x29, 0xb0, 0xbf, 0xb4,
		0xe0, 0x6b, 0x9a, 0x87, 0xc9, 0x56, 0xf9, 0xd9, 0xfb, 0x0a, 0x66, 0xb3, 0x23, 0x42, 0x7b, 0xa7,
		0x62, 0x5f, 0xd9, 0xd8, 0x30, 0x57, 0x64, 0x99, 0x28, 0x67, 0x46, 0x09, 0xca, 0x05, 0x0f, 0xc4,
		0x68, 0x64, 0x68, 0x8c, 0x46, 0xff, 0x87, 0x18, 0x8d, 0xf5, 0xc7, 0x68, 0x13, 0xd6, 0x86, 0xfb,
		0x5f, 0x5e, 0xaf, 0x7f, 0x1b, 0x81, 0x65, 0x07, 0x05, 0xca, 0xb7, 0xa5, 0x5c, 0x17, 0x61, 0x82,
		0x23, 0x15, 0x51, 0xa8, 0x8b, 0x55, 0x7f, 0x91, 0x47, 0x50, 0xf5, 0xd1, 0x63, 0x22, 0xbd, 0x4a,
		0x0e, 0x58, 0xc8, 0x44, 0xcb, 0xc5, 0x63, 0x0c, 0xbb, 0x85, 0x3b, 0xea, 0x2c, 0xe4, 0xeb, 0x5b,
		0x6a, 0xf9, 0x79, 0xba, 0xba, 0xed, 0x0f, 0xd4, 0xf8, 0xf8, 0x60, 0x8d, 0xd7, 0xe1, 0x8a, 0x38,
		0x64, 0xb1, 0xab, 0x73, 0xc4, 0x91, 0xc6, 0x71, 0xd0, 0x51, 0x95, 0x3c, 0xe5, 0x5c, 0x4e, 0x97,
		0xb2, 0x10, 0x3b, 0xd9, 0x42, 0x7a, 0x32, 0x14, 0xc5, 0xab, 0x3c, 0xd2, 0xff, 0xb2, 0xe0, 0x5d,
		0x1d, 0xd3, 0x06, 0x0d, 0x3d, 0xfc, 0x3f, 0x38, 0x20, 0xec, 0x35, 0xb8, 0x33, 0xcc, 0xa5, 0xde,
		0x5e, 0xbd, 0xb5, 0x87, 0xbc, 0xcd, 0x42, 0x2a, 0xf1, 0x6d, 0xaf, 0xb5, 0x87, 0x30, 0xe9, 0xa3,
		0xa4, 0x2c, 0x10, 0xba, 0x4b, 0x2a, 0xdf, 0xad, 0x39, 0x73, 0x5f, 0x24, 0xc7, 0xfb, 0x23, 0x69,
		0xbf, 0x03, 0x76, 0x99, 0xff, 0x3a, 0x4c, 0x7f, 0xb4, 0x60, 0xf5, 0x19, 0x0a, 0x8f, 0xb3, 0xfd,
		0xb7, 0x25, 0x4a, 0xf6, 0x97, 0xa3, 0x70, 0xab, 0xc4, 0x26, 0x5d, 0xf5, 0x01, 0x2c, 0xf5, 0x7a,
		0x3d, 0x2f, 0x0a, 0x0f, 0x58, 0x53, 0x5f, 0xac, 0xfa, 0xa8, 0x7d, 0x70, 0x3e, 0x0b, 0x1a, 0xa7,
		0xa1, 0xce, 0x22, 0x1a, 0xe9, 0x64, 0x1f, 0x96, 0xce, 0xba, 0xea, 0xb2, 0xf0, 0x20, 0xd2, 0xfe,
		0xde, 0x3d, 0x9f, 0xb6, 0xed, 0xf0, 0x20, 0xea, 0x75, 0x58, 0x7d, 0x64, 0xf2, 0x0a, 0x48, 0x8c,
		0xa1, 0xcf, 0xc2, 0xa6, 0x4b, 0x3d, 0xc9, 0x8e, 0x99, 0x64, 0x28, 0xaa, 0xa3, 0xab, 0xa3, 0x6b,
		0x95, 0x8d, 0x35, 0x73, 0x41, 0x64, 0xec, 0x9b, 0x19, 0x77, 0x47, 0x09, 0xbf, 0x1c, 0xf7, 0x11,
		0x19, 0x0a, 0xf2, 0x63, 0x98, 0xcf, 0x05, 0x7b, 0x2d, 0x16, 0xf8, 0x1c, 0xc3, 0xea, 0x98, 0x12,
		0x5b, 0x2f, 0x13, 0xdb, 0x48, 0x79, 0xfb, 0x2d, 0xbf, 0x14, 0x9f, 0x5a, 0xe2, 0x18, 0x92, 0xdd,
		0x9e, 0xe8, 0xfc, 0x34, 0xd4, 0x0d, 0x7b, 0xa9, 0xc5, 0xcf, 0x34, 0x6f, 0x9f, 0xd0, 0x9c, 0x68,
		0x7f, 0x31, 0x0a, 0x57, 0xbf, 0x9f, 0x4e, 0x4c, 0x79, 0xf8, 0xde, 0xd0, 0x76, 0x7d, 0x0c, 0xe3,
		0x6a, 0x70, 0xd3, 0x57, 0xa8, 0x5d, 0x2a, 0x49, 0x19, 0xec, 0x64, 0x00, 0xe2, 0xc2, 0xa2, 0xfa,
		0xe1, 0x72, 0xfc, 0x29, 0x7a, 0x32, 0xad, 0x4f, 0x9f, 0x29, 0xa3, 0xc6, 0x54, 0x3f, 0xfe, 0x75,
		0xa3, 0xa8, 0x4c, 0x84, 0x42, 0x34, 0x72, 0x80, 0x73, 0xf5, 0xc8, 0x40, 0x4d, 0xeb, 0x31, 0x53,
		0xe0, 0x45, 0xa1, 0x60, 0x42, 0x62, 0xe8, 0x75, 0xdc, 0x00, 0x8f, 0x31, 0x50, 0xe1, 0x2f, 0xea,
		0xf8, 0x95, 0x86, 0x46, 0x0f, 0xf2, 0x49, 0x8a, 0x70, 0x16, 0x8e, 0x4c, 0x64, 0xfb, 0x2f, 0x16,
		0x2c, 0x0c, 0xa4, 0x41, 0xef, 0xbd, 0x8f, 0x60, 0x26, 0x77, 0x4f, 0x24, 0x41, 0xde, 0xdb, 0x0c,
		0x69, 0x31, 0xb4, 0x1f, 0x29, 0x80, 0x6c, 0xc3, 0xdc, 0xe9, 0xf8, 0xa0, 0xaf, 0x93, 0x65, 0x0f,
		0x8b, 0x0b, 0xfa, 0xce, 0xec, 0xd1, 0xe9, 0x4f, 0xfb, 0x3f, 0x16, 0x2c, 0xe5, 0xa7, 0x45, 0x77,
		0x8c, 0x1c, 0x52, 0x2f, 0x7d, 0x73, 0xe9, 0xc8, 0xc5, 0xe6, 0xd2, 0x17, 0x30, 0xd7, 0xc5, 0xf6,
		0x86, 0xe3, 0xb9, 0x82, 0xe1, 0x38, 0x17, 0x90, 0x0d, 0xc7, 0xf2, 0xd4, 0x57, 0xda, 0x60, 0xb0,
		0xd0, 0x0b, 0x12, 0x1f, 0xdd, 0x9e, 0x40, 0x21, 0xa9, 0x4c, 0xb2, 0x5b, 0x60, 0xca, 0x59, 0xd0,
		0xeb, 0xb9, 0x90, 0x5d, 0xb5, 0x68, 0xff, 0xd5, 0x82, 0xea, 0x59, 0x8f, 0x75, 0x6a, 0xbe, 0x05,
		0x93, 0x71, 0x14, 0x04, 0xc8, 0x45, 0xd5, 0x52, 0x5b, 0xfc, 0xa6, 0x39, 0x2b, 0x8a, 0x47, 0x6d,
		0xbf, 0x9c, 0x9f, 0xbc, 0x84, 0xf9, 0x33, 0x86, 0x64, 0xc1, 0xb9, 0x5d, 0xea, 0x5b, 0x66, 0x96,
		0x33, 0x27, 0xfb, 0xcd, 0xfc, 0x00, 0xae, 0xbf, 0x40, 0x99, 0x33, 0x89, 0xa7, 0x9d, 0x67, 0x2a,
		0xf8, 0x43, 0x72, 0x63, 0xff, 0x7e, 0x0c, 0x6e, 0x98, 0x71, 0xda, 0xc3, 0x9f, 0xc3, 0x62, 0xb7,
		0x31, 0xeb, 0xd9, 0xdb, 0xa6, 0xb1, 0x76, 0xf8, 0x7b, 0x46, 0x63, 0xcb, 0x44, 0xd6, 0xf3, 0x93,
		0x27, 0xe7, 0x78, 0x49, 0xe3, 0xe7, 0xa1, 0xe4, 0x1d, 0xe7, 0x8a, 0x7f, 0x76, 0x25, 0x35, 0x40,
		0x9f, 0xcf, 0x9d, 0x01, 0x03, 0x46, 0x5e, 0xd7, 0x80, 0xfc, 0x04, 0x3f, 0x6b, 0x00, 0x3d, 0xbb,
		0x52, 0x4b, 0xd2, 0xfc, 0x9b, 0x2d, 0x26, 0xf3, 0x30, 0x7a, 0x88, 0x1d, 0x1d, 0xd3, 0xf4, 0x27,
		0x69, 0xc0, 0xf8, 0x31, 0x0d, 0x12, 0xd4, 0xb9, 0xbc, 0x67, 0xb4, 0xae, 0xa8, 0x9e, 0x9c, 0x0c,
		0xfb, 0x64, 0xe4, 0xb1, 0x95, 0xaa, 0x2d, 0xb2, 0xf3, 0x2b, 0x54, 0x6b, 0x0b, 0x58, 0x56, 0x7b,
		0x46, 0xb3, 0xec, 0x50, 0x2e, 0xd5, 0x19, 0x28, 0xbe, 0xc2, 0x5d, 0x6e, 0xff, 0x6a, 0x04, 0x56,
		0x8a, 0xb4, 0xea, 0x3a, 0x3c, 0x82, 0x65, 0x43, 0x19, 0xc4, 0x5d, 0x46, 0x5d, 0x8e, 0xf5, 0x52,
		0x95, 0x5d, 0xb9, 0x2f, 0x51, 0x52, 0x9f, 0x4a, 0xea, 0xd4, 0x06, 0x33, 0xde, 0x53, 0x9d, 0xaa,
		0x34, 0x94, 0xfe, 0x29, 0x95, 0x23, 0xaf, 0xa7, 0x72, 0xb0, 0xca, 0x7b, 0x2a, 0xed, 0x25, 0x58,
		0x78, 0x81, 0xb2, 0x11, 0x24, 0x42, 0xea, 0xf3, 0x22, 0x8b, 0xba, 0xfd, 0x4b, 0x0b, 0x16, 0x07,
		0x57, 0x74, 0x64, 0x5a, 0x70, 0x4d, 0x24, 0x71, 0x1c, 0x71, 0x89, 0xbe, 0xeb, 0x05, 0x2c, 0x9d,
		0x9a, 0x8e, 0x91, 0x0b, 0x1d, 0x95, 0x34, 0x11, 0xef, 0x9b, 0xe7, 0xe0, 0x1c, 0xd5, 0x50, 0xa0,
		0x1f, 0x6a, 0x8c, 0xb3, 0x24, 0xcc, 0x0b, 0xf6, 0x6f, 0x46, 0xc1, 0x7e, 0x61, 0x98, 0x8d, 0x3e,
		0xce, 0x9e, 0x64, 0xdf, 0x50, 0xdf, 0x70, 0x1d, 0xa6, 0x63, 0xda, 0x44, 0x57, 0xb0, 0xcf, 0xb3,
		0xdb, 0x61, 0xdc, 0x99, 0x4a, 0x09, 0xbb, 0xec, 0x73, 0x24, 0x77, 0xe0, 0x52, 0x88, 0x9f, 0xa5,
		0x59, 0x6b, 0xa2, 0x2b, 0xa3, 0x43, 0x0c, 0xf5, 0x94, 0x3d, 0x9b, 0x92, 0x77, 0x68, 0x13, 0xf7,
		0x52, 0x22, 0x79, 0x0f, 0xc8, 0x09, 0x65, 0xd2, 0x3d, 0x88, 0xb8, 0x1b, 0xe2, 0x49, 0x36, 0x7c,
		0xaa, 0xcb, 0x7d, 0xca, 0xb9, 0x94, 0xae, 0x6c, 0x45, 0xfc, 0x53, 0x3c, 0x51, 0x53, 0x27, 0x71,
		0xe1, 0x9a, 0x7e, 0x85, 0xd6, 0x43, 0xea, 0x01, 0x0b, 0x24, 0xf2, 0xec, 0x7e, 0x9a, 0x50, 0xf7,
		0xd3, 0x3b, 0x46, 0x7f, 0x14, 0x7c, 0x4b, 0x31, 0xab, 0x2b, 0x6a, 0x51, 0x8b, 0x19, 0xa0, 0x93,
		0xdb, 0x30, 0xab, 0xa6, 0x56, 0xca, 0xbd, 0x16, 0x3b, 0xa6, 0xd9, 0xeb, 0xc9, 0x94, 0x33, 0x93,
		0x12, 0x37, 0x35, 0xcd, 0xfe, 0xb7, 0x05, 0xb7, 0x4b, 0xb3, 0xa1, 0xeb, 0xe3, 0x21, 0x4c, 0x6a,
		0x35, 0xa5, 0x9d, 0x43, 0x0e, 0xcb, 0x99, 0xc9, 0x77, 0xa1, 0xc2, 0xe9, 0x89, 0x9b, 0x63, 0xb3,
		0x62, 0x37, 0x6f, 0xe9, 0x67, 0x54, 0xd2, 0xa7, 0x41, 0xb4, 0xef, 0x00, 0xa7, 0x27, 0x5a, 0x90,
		0x29, 0xf4, 0xa3, 0xa6, 0xd0, 0xd7, 0x60, 0x2a, 0xf3, 0x13, 0x7d, 0x7d, 0x13, 0x77, 0xbf, 0xed,
		0x0e, 0xcc, 0x6c, 0x21, 0x95, 0x09, 0xc7, 0xad, 0x80, 0x36, 0x05, 0x61, 0xb0, 0x61, 0x18, 0x0c,
		0x68, 0xc0, 0x91, 0xfa, 0x69, 0x77, 0xd6, 0x8e, 0x03, 0x4c, 0xb7, 0x01, 0x72, 0x1e, 0x71, 0x17,
		0x43, 0xba, 0x1f, 0x60, 0x36, 0xa8, 0x4f, 0x39, 0xf7, 0xce, 0x94, 0xce, 0x66, 0x86, 0x6b, 0xe4,
		0xb0, 0xe7, 0x29, 0xea, 0x79, 0x06, 0xb2, 0x7f, 0x6b, 0xc1, 0x75, 0x07, 0x0f, 0x38, 0x8a, 0x56,
		0xf7, 0xcd, 0x9d, 0x8a, 0x43, 0xf1, 0x86, 0xc6, 0xb4, 0x15, 0xb8, 0x61, 0xb6, 0x26, 0xcb, 0xf2,
		0xc6, 0x3f, 0xe7, 0xa0, 0x92, 0xaf, 0x6c, 0xee, 0x6c, 0x93, 0x5f, 0x58, 0xb0, 0x68, 0x7e, 0x33,
		0x22, 0xaf, 0xf1, 0x2a, 0x56, 0x7b, 0x70, 0x21, 0x8c, 0xae, 0xbc, 0x2f, 0x2c, 0x58, 0x2a, 0x78,
		0xe5, 0x23, 0x05, 0x02, 0x4b, 0xdf, 0x56, 0x6b, 0xdf, 0xbc, 0x18, 0x48, 0x9b, 0xf1, 0x67, 0x0b,
		0x56, 0x87, 0x3d, 0xa4, 0x91, 0x6f, 0x97, 0x89, 0x1e, 0xf6, 0xfe, 0x58, 0xfb, 0xce, 0x6b, 0xa2,
		0xb5, 0x85, 0x69, 0xb2, 0xcc, 0xcf, 0x4e, 0x05, 0xc9, 0x2a, 0x7d, 0xd3, 0x2b, 0x48, 0xd6, 0x90,
		0x77, 0xad, 0x3f, 0x59, 0xb0, 0x52, 0xfe, 0xda, 0x43, 0x9e, 0x14, 0xc8, 0x3d, 0xc7, 0xab, 0x57,
		0xed, 0xc3, 0xd7, 0xc2, 0x6a, 0xdb, 0x7e, 0x67, 0x41, 0xad, 0xf8, 0x79, 0x85, 0x3c, 0x34, 0xdf,
		0xc0, 0xc3, 0xde, 0xa3, 0x6a, 0x8f, 0x2e, 0x8c, 0xd3, 0xf6, 0xfc, 0xda, 0x82, 0x6b, 0x85, 0x6f,
		0x26, 0xe4, 0x83, 0xd2, 0xe6, 0xab, 0xd0, 0x9a, 0x87, 0x17, 0x85, 0x69, 0x63, 0x0e, 0x60, 0xb6,
		0x6f, 0x6e, 0x24, 0x25, 0xe3, 0xee, 0xc0, 0x88, 0x5f, 0xbb, 0x7b, 0x1e, 0x56, 0xad, 0x27, 0x82,
		0xf9, 0xc1, 0x06, 0x92, 0xbc, 0x7f, 0xce, 0x3e, 0x33, 0xd3, 0x76, 0xb1, 0xae, 0x94, 0xfc, 0x0c,
		0xae, 0x9a, 0xda, 0x78, 0xf2, 0x8d, 0x0b, 0x74, 0xfc, 0x99, 0xe2, 0xfb, 0x17, 0x9e, 0x11, 0xd4,
		0x96, 0x34, 0xb7, 0xa4, 0x05, 0x5b, 0xb2, 0xb4, 0x6b, 0x2e, 0xd8, 0x92, 0x43, 0x7a, 0x5e, 0x06,
		0x73, 0xfd, 0x3d, 0x1f, 0xb9, 0x5b, 0xe4, 0xc8, 0xd9, 0x96, 0xb1, 0xf6, 0xde, 0xb9, 0x78, 0xb5,
		0xaa, 0x3f, 0x58, 0x6a, 0x7e, 0x2c, 0x6a, 0x26, 0xc8, 0xa3, 0x22, 0x61, 0x43, 0x9a, 0xc1, 0xda,
		0xe3, 0x8b, 0x03, 0x7b, 0xe9, 0x37, 0xdd, 0x78, 0x05, 0xe9, 0x2f, 0xb9, 0xaa, 0x0b, 0xd2, 0x5f,
		0x76, 0x9d, 0x3e, 0xfd, 0x11, 0x2c, 0x79, 0x51, 0xdb, 0x84, 0x7b, 0x3a, 0xb5, 0x19, 0xb3, 0x1d,
		0x1e, 0xc9, 0x68, 0xc7, 0xfa, 0xc9, 0xfd, 0x26, 0x93, 0xad, 0x64, 0xbf, 0xee, 0x45, 0xed, 0xf5,
		0xd3, 0x7f, 0x22, 0xb8, 0xc7, 0xfc, 0x60, 0xbd, 0x19, 0x65, 0xff, 0x7d, 0xd0, 0xff, 0x28, 0xf8,
		0x90, 0xc6, 0xec, 0xf8, 0xfe, 0xfe, 0x84, 0xa2, 0x3d, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
		0xfa, 0x67, 0x20, 0xde, 0x60, 0x21, 0x00, 0x00,
	},
	// uber/cadence/api/v1/service_worker.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0x5b, 0x6f, 0xdb, 0xc8,
		0x15, 0x06, 0x7d, 0xf7, 0x91, 0x2f, 0xf2, 0x04, 0x4d, 0x65, 0xe5, 0xe6, 0x68, 0x9b, 0xc4, 0xdb,
		0x6e, 0xa5, 0xc6, 0xbb, 0xcd, 0x66, 0x93, 0x4d, 0x51, 0x5f, 0x62, 0xc4, 0xc5, 0x76, 0xeb, 0x65,
		0xb4, 0xd9, 0x62, 0x0b, 0x84, 0x18, 0x93, 0x63, 0x6b, 0x60, 0x8a, 0xc3, 0x90, 0x43, 0x29, 0x7a,
		0xe9, 0x43, 0x1f, 0x77, 0xfb, 0x50, 0xa0, 0xe8, 0xf6, 0xa5, 0x40, 0x9e, 0xfb, 0x03, 0xfa, 0x6b,
		0xfa, 0xd4, 0xe7, 0xfe, 0x87, 0xa2, 0xe0, 0xcc, 0x90, 0xa2, 0xa4, 0x21, 0x75, 0xe9, 0x83, 0x17,
		0xe8, 0x9b, 0x39, 0xfc, 0xce, 0xe1, 0x99, 0xf3, 0x9d, 0x39, 0xf3, 0xcd, 0x58, 0xb0, 0x1b, 0x9d,
		0x91, 0xa0, 0x61, 0x63, 0x87, 0x78, 0x36, 0x69, 0x60, 0x9f, 0x36, 0x3a, 0x0f, 0x1b, 0x21, 0x09,
		0x3a, 0xd4, 0x26, 0x56, 0x97, 0x05, 0x97, 0x24, 0xa8, 0xfb, 0x01, 0xe3, 0x0c, 0x5d, 0x8b, 0x91,
		0x75, 0x85, 0xac, 0x63, 0x9f, 0xd6, 0x3b, 0x0f, 0xab, 0xb7, 0x2f, 0x18, 0xbb, 0x70, 0x49, 0x43,
		0x40, 0xce, 0xa2, 0xf3, 0x86, 0x13, 0x05, 0x98, 0x53, 0xe6, 0x49, 0xa3, 0xea, 0x9d, 0xe1, 0xf7,
		0x9c, 0xb6, 0x49, 0xc8, 0x71, 0xdb, 0x57, 0x80, 0x11, 0x07, 0xdd, 0x00, 0xfb, 0x3e, 0x09, 0x42,
		0xf5, 0x7e, 0x47, 0x17, 0x9f, 0xcd, 0xda, 0xed, 0xf4, 0x13, 0x35, 0x1d, 0xc2, 0x21, 0x36, 0x0d,
		0xfb, 0x61, 0xdc, 0xd5, 0x61, 0x5a, 0x34, 0xe4, 0x2c, 0xe8, 0x25, 0x91, 0xea, 0x20, 0x6f, 0x22,
		0x92, 0x02, 0xb4, 0xdf, 0xe1, 0x38, 0xbc, 0x74, 0x69, 0xc8, 0x8b, 0x30, 0x71, 0x16, 0xcf, 0x5d,
		0xd6, 0x95, 0x98, 0xda, 0x3f, 0x0c, 0xa8, 0x9e, 0x32, 0xd7, 0x3d, 0x66, 0xc1, 0x91, 0x8a, 0xb2,
		0x89, 0xc3, 0x4b, 0x93, 0xbc, 0x89, 0x48, 0xc8, 0xd1, 0x75, 0x58, 0x72, 0x58, 0x1b, 0x53, 0xaf,
		0x62, 0xec, 0x18, 0xbb, 0xab, 0xa6, 0x7a, 0x42, 0x4f, 0x60, 0x35, 0xfe, 0x98, 0x15, 0x7f, 0xad,
		0x32, 0xb7, 0x63, 0xec, 0x96, 0xf6, 0x6e, 0xd5, 0x35, 0x94, 0xd4, 0x63, 0x67, 0x9f, 0xd1, 0x90,
		0x9b, 0x2b, 0x5c, 0xfd, 0x85, 0xaa, 0xb0, 0x42, 0x1d, 0xe2, 0x71, 0xca, 0x7b, 0x95, 0x79, 0xe1,
		0x35, 0x7d, 0x46, 0x0f, 0x60, 0xf3, 0x8c, 0x7a, 0x38, 0xe8, 0x59, 0x76, 0x8b, 0xd8, 0x97, 0x61,
		0xd4, 0xae, 0x2c, 0x08, 0xc8, 0x86, 0x1c, 0x3e, 0x54, 0xa3, 0xb5, 0xff, 0x2c, 0xc3, 0x0d, 0x6d,
		0xdc, 0xa1, 0xcf, 0xbc, 0x90, 0xa0, 0x5b, 0x00, 0x22, 0x40, 0xce, 0x2e, 0x89, 0x0c, 0x7e, 0xcd,
		0x14, 0x21, 0x37, 0xe3, 0x01, 0xf4, 0x25, 0xa0, 0x24, 0x11, 0x16, 0x79, 0x4b, 0xec, 0x28, 0xae,
		0x12, 0x35, 0x91, 0xfb, 0xda, 0x89, 0x7c, 0xa5, 0xe0, 0xcf, 0x13, 0xb4, 0xb9, 0xd5, 0x1d, 0x1e,
		0x42, 0xc7, 0xb0, 0x9e, 0xba, 0xe5, 0x3d, 0x9f, 0x88, 0xf9, 0x95, 0xf6, 0xee, 0x16, 0x7a, 0x6c,
		0xf6, 0x7c, 0x62, 0xae, 0x75, 0x33, 0x4f, 0xe8, 0x15, 0x6c, 0xfb, 0x01, 0xe9, 0x50, 0x16, 0x85,
		0x56, 0xc8, 0x71, 0xc0, 0x89, 0x63, 0x91, 0x0e, 0xf1, 0xb8, 0x45, 0x1d, 0x91, 0x90, 0xd2, 0xde,
		0x8d, 0xba, 0xac, 0xd5, 0x7a, 0x52, 0xab, 0xf5, 0x13, 0x8f, 0x3f, 0xfa, 0xe8, 0x15, 0x76, 0x23,
		0x62, 0x5e, 0x4f, 0xac, 0x5f, 0x4a, 0xe3, 0xe7, 0xb1, 0xed, 0x89, 0x83, 0x76, 0xa1, 0x3c, 0xe2,
		0x6e, 0x71, 0xc7, 0xd8, 0x9d, 0x37, 0x37, 0xc2, 0x41, 0x64, 0x05, 0x96, 0x31, 0xe7, 0xa4, 0xed,
		0xf3, 0xca, 0x92, 0x00, 0x24, 0x8f, 0xe8, 0x03, 0x40, 0x67, 0xd8, 0xbe, 0x74, 0xd9, 0x85, 0x65,
		0xb3, 0xc8, 0xe3, 0x56, 0x8b, 0x7a, 0xbc, 0xb2, 0x2c, 0x40, 0x65, 0xf5, 0xe6, 0x30, 0x7e, 0xf1,
		0x82, 0x7a, 0x1c, 0x3d, 0x82, 0x65, 0x55, 0xd9, 0x95, 0x15, 0x11, 0xf7, 0x4d, 0x6d, 0x2e, 0x5e,
		0x48, 0x8c, 0x99, 0x80, 0xd1, 0x7d, 0xd8, 0xf4, 0xc8, 0x5b, 0x6e, 0xf9, 0xf8, 0x82, 0x28, 0x12,
		0x57, 0x05, 0x89, 0xeb, 0xf1, 0xf0, 0x29, 0xbe, 0x20, 0x92, 0xc8, 0xc7, 0xb0, 0x28, 0x96, 0x45,
		0x05, 0x84, 0xf7, 0x5a, 0x61, 0xa6, 0xbf, 0x88, 0x91, 0xa6, 0x34, 0x40, 0xaf, 0xe1, 0xe6, 0x68,
		0x09, 0x58, 0xfd, 0xaa, 0x2e, 0x4d, 0x52, 0xd5, 0xdb, 0x23, 0x35, 0x90, 0xbc, 0x42, 0xfb, 0xb0,
		0x11, 0xda, 0x2d, 0xe2, 0x44, 0x2e, 0x71, 0xac, 0xb8, 0xd1, 0x54, 0xd6, 0x84, 0xc7, 0xea, 0x08,
		0x71, 0xcd, 0xa4, 0x0b, 0x99, 0xeb, 0xa9, 0x45, 0x3c, 0x86, 0x9e, 0xc1, 0x5a, 0x42, 0x97, 0x70,
		0xb0, 0x3e, 0xd6, 0x41, 0x49, 0xe1, 0x85, 0xf9, 0x57, 0xb0, 0x1c, 0x4f, 0x95, 0x92, 0xb0, 0xb2,
		0xb1, 0x33, 0xbf, 0x5b, 0xda, 0x7b, 0xa6, 0x9d, 0x4c, 0xc1, 0x32, 0xaa, 0x7f, 0x21, 0xed, 0x9f,
		0x7b, 0x3c, 0x26, 0x47, 0x79, 0x43, 0x35, 0x10, 0x2c, 0xf4, 0x6b, 0x68, 0x53, 0xb0, 0x5f, 0x8a,
		0x07, 0x55, 0x01, 0x55, 0x5f, 0xc3, 0x5a, 0xd6, 0x18, 0x95, 0x61, 0xfe, 0x92, 0xf4, 0x54, 0x1b,
		0x89, 0xff, 0x8c, 0xa9, 0xeb, 0xc4, 0xd5, 0xaa, 0x96, 0xdd, 0x44, 0xd4, 0x09, 0x83, 0x27, 0x73,
		0x8f, 0x8d, 0xda, 0xdf, 0x17, 0xe1, 0x3d, 0x19, 0xa6, 0x93, 0x8d, 0xfc, 0x90, 0xb5, 0x7d, 0x97,
		0x70, 0xe2, 0x24, 0x1d, 0x6c, 0x4c, 0x23, 0x78, 0x0a, 0xab, 0x49, 0x77, 0x0e, 0x2b, 0x73, 0x22,
		0x4b, 0x7a, 0xca, 0x93, 0x8f, 0x98, 0x7d, 0x3c, 0xfa, 0x09, 0x6c, 0xf5, 0x2b, 0xc7, 0x66, 0x1e,
		0x27, 0x6f, 0xb9, 0x58, 0xf2, 0x6b, 0x66, 0x39, 0x7d, 0x71, 0x28, 0xc7, 0x07, 0xda, 0xde, 0xc2,
		0x50, 0xdb, 0xfb, 0x1d, 0x6c, 0x85, 0x9c, 0xda, 0x97, 0x3d, 0x0b, 0x73, 0x1e, 0xd0, 0xb3, 0x88,
		0x93, 0x50, 0x2c, 0xcc, 0xd2, 0x5e, 0x5d, 0x1b, 0xcd, 0x4b, 0x81, 0x4e, 0x8b, 0x6e, 0x3f, 0xb5,
		0x32, 0xcb, 0xd2, 0x51, 0x7f, 0x04, 0x7d, 0x0c, 0x95, 0x80, 0xf0, 0x28, 0xf0, 0x2c, 0x8f, 0x74,
		0xad, 0x24, 0x7a, 0x51, 0xe9, 0x62, 0x6d, 0xaf, 0x98, 0x3f, 0x90, 0xef, 0x3f, 0x27, 0xdd, 0x6c,
		0x2a, 0xd1, 0x01, 0xdc, 0x3e, 0x67, 0x81, 0x4d, 0x2c, 0x3b, 0x20, 0x98, 0x13, 0x8d, 0xf9, 0xb2,
		0x30, 0xaf, 0x0a, 0xd4, 0xa1, 0x00, 0x0d, 0xfb, 0xd0, 0x34, 0xf4, 0x15, 0x5d, 0x43, 0x47, 0x0c,
		0xd6, 0xc5, 0xba, 0xb4, 0x02, 0x12, 0x46, 0x2e, 0x0f, 0x2b, 0xab, 0x82, 0x8c, 0x5f, 0x69, 0xa7,
		0x3f, 0x01, 0xf1, 0x75, 0x59, 0x31, 0xd2, 0x99, 0xac, 0xdf, 0xb5, 0x37, 0x99, 0xa1, 0x2a, 0x85,
		0xad, 0x11, 0x88, 0xa6, 0x4a, 0x7f, 0x31, 0x58, 0xa5, 0xbb, 0x13, 0x54, 0xa9, 0x70, 0x98, 0xad,
		0xd5, 0x77, 0xf3, 0xf0, 0xa3, 0xe2, 0x90, 0xd5, 0xae, 0xf5, 0x25, 0xac, 0x0f, 0x26, 0xd8, 0x10,
		0x1f, 0xfd, 0xd9, 0xb4, 0xeb, 0xd6, 0x5c, 0x73, 0xb2, 0x24, 0xbc, 0x33, 0xe0, 0x36, 0xb6, 0x39,
		0xed, 0x50, 0x4e, 0x49, 0x68, 0x71, 0x66, 0x39, 0x34, 0xf4, 0x31, 0xb7, 0x5b, 0x96, 0xcb, 0x6c,
		0xec, 0xba, 0x3d, 0x55, 0xfa, 0x5f, 0xcf, 0x90, 0x6d, 0xd5, 0x29, 0xf6, 0x53, 0xff, 0x4d, 0x76,
		0xa4, 0xbc, 0x7f, 0x26, 0x9d, 0xcb, 0xec, 0xdf, 0xc0, 0xf9, 0x88, 0xea, 0xef, 0x61, 0x67, 0x9c,
		0x03, 0x0d, 0x37, 0x47, 0x83, 0xdc, 0xe8, 0x97, 0x8a, 0xf2, 0xdb, 0x13, 0xbe, 0x12, 0xc7, 0x27,
		0xde, 0x39, 0xcb, 0x32, 0xf4, 0x87, 0x39, 0xd8, 0xd1, 0x4c, 0xf3, 0x18, 0x53, 0x77, 0xe2, 0x56,
		0x72, 0x00, 0x8b, 0x36, 0x8e, 0x42, 0x19, 0xcd, 0xc6, 0xde, 0x07, 0x85, 0x6d, 0xa4, 0xef, 0xfd,
		0x30, 0xb6, 0x31, 0xa5, 0x69, 0xbc, 0x5d, 0x3a, 0x84, 0x63, 0xea, 0x86, 0x4a, 0x3a, 0xe8, 0xb7,
		0xcb, 0x53, 0xdc, 0x73, 0x19, 0x76, 0xcc, 0x04, 0x5c, 0xd8, 0x5c, 0x34, 0x4b, 0x70, 0x51, 0xab,
		0xa9, 0xde, 0x83, 0xbb, 0x05, 0x39, 0x90, 0x3c, 0xd7, 0xfe, 0xd5, 0x17, 0x8c, 0x49, 0x66, 0xaf,
		0x52, 0x30, 0xbe, 0x04, 0x94, 0xfa, 0xb5, 0xda, 0x84, 0x63, 0x07, 0x73, 0xac, 0x24, 0xd2, 0xbd,
		0xc2, 0x0f, 0xfc, 0x5a, 0x81, 0xcd, 0x32, 0x1f, 0x1a, 0xa9, 0x7d, 0xbb, 0x92, 0x8a, 0xcb, 0xc1,
		0x39, 0x5e, 0xa9, 0xb8, 0xbc, 0x03, 0x25, 0xb5, 0x84, 0x7a, 0xf1, 0x9e, 0x2b, 0x33, 0x01, 0xc9,
		0xd0, 0x89, 0x13, 0xab, 0xcf, 0x14, 0x20, 0xd4, 0xe7, 0x42, 0x81, 0xfa, 0x4c, 0x27, 0x26, 0xd4,
		0x27, 0xce, 0x3c, 0xa1, 0x3d, 0x58, 0xa4, 0x9e, 0x1f, 0x71, 0xb5, 0x03, 0x15, 0x97, 0xa0, 0x84,
		0x6a, 0xd4, 0xce, 0xd2, 0xff, 0xaa, 0x76, 0x96, 0xa7, 0x53, 0x3b, 0x4d, 0xd8, 0x4e, 0xfc, 0xc5,
		0x1d, 0xce, 0x76, 0x59, 0x48, 0x84, 0x23, 0x16, 0x71, 0xa5, 0x3d, 0xb7, 0x47, 0x7c, 0x1d, 0xa9,
		0x03, 0xa2, 0x79, 0x3d, 0xb1, 0x6d, 0xb2, 0xc3, 0xd8, 0xb2, 0x29, 0x0d, 0xd1, 0xe7, 0x70, 0x5d,
		0x7c, 0x64, 0xd4, 0xe5, 0xea, 0x38, 0x97, 0xd7, 0x84, 0xe1, 0x90, 0xbf, 0x63, 0xd8, 0x6a, 0x11,
		0x1c, 0xf0, 0x33, 0x82, 0x79, 0xea, 0x0a, 0xc6, 0xb9, 0x2a, 0xa7, 0x36, 0x89, 0x9f, 0x8c, 0x3e,
		0x8f, 0x85, 0xea, 0x62, 0x5f, 0x9f, 0xbf, 0x86, 0xdb, 0x83, 0x4c, 0x58, 0xec, 0xdc, 0xe2, 0x2d,
		0x1a, 0x5a, 0x89, 0xc1, 0x78, 0x1d, 0x5a, 0x1d, 0x60, 0xe6, 0x37, 0xe7, 0xcd, 0x16, 0x0d, 0xf7,
		0x95, 0xff, 0x93, 0xec, 0x0c, 0x92, 0x66, 0xb5, 0x3e, 0x41, 0xa5, 0xf4, 0x27, 0x71, 0xa4, 0xba,
		0xd6, 0xc8, 0x71, 0x69, 0x63, 0xb6, 0xe3, 0xd2, 0x03, 0xd8, 0x4c, 0xfd, 0xa8, 0xee, 0xb3, 0x29,
		0x3b, 0x5c, 0x32, 0x7c, 0x24, 0xbb, 0xd0, 0x87, 0xb0, 0xd4, 0x22, 0xd8, 0x21, 0x41, 0xa5, 0xac,
		0x0e, 0x51, 0xda, 0xc3, 0x88, 0x80, 0x98, 0x0a, 0x5a, 0xfb, 0xce, 0x48, 0x95, 0x66, 0xb6, 0x1b,
		0x4c, 0xab, 0x34, 0x3f, 0x82, 0x25, 0x29, 0x6d, 0x54, 0x27, 0x28, 0x4e, 0x96, 0xc2, 0x16, 0xf5,
		0xbe, 0xda, 0xfd, 0x54, 0x55, 0xe4, 0xc4, 0xa5, 0x5a, 0xf6, 0xb7, 0x73, 0xf0, 0xa0, 0x08, 0x78,
		0xd0, 0x3b, 0x39, 0x1a, 0xd7, 0xbf, 0xaf, 0xaa, 0xa7, 0xf5, 0xb3, 0xb6, 0x30, 0x63, 0xd6, 0x16,
		0x87, 0xb2, 0xf6, 0x63, 0xd8, 0x1d, 0x9f, 0x0c, 0x95, 0xb9, 0xbf, 0x18, 0xa9, 0x2c, 0xc8, 0x82,
		0xa7, 0x92, 0x05, 0x8f, 0x60, 0xf9, 0x1c, 0x53, 0x37, 0x0a, 0x48, 0x21, 0xf1, 0xc7, 0x12, 0x63,
		0x26, 0xe0, 0x42, 0xe6, 0xfb, 0x3b, 0xb5, 0x2e, 0x2c, 0x15, 0xfc, 0x37, 0x73, 0xda, 0xfa, 0x90,
		0xa8, 0xef, 0x33, 0xe7, 0x99, 0x8c, 0x2d, 0xcc, 0x9a, 0xb1, 0x61, 0xd6, 0x1f, 0xc0, 0xbd, 0x31,
		0xb9, 0x50, 0x59, 0xfb, 0xab, 0x01, 0x35, 0x5d, 0x7d, 0x60, 0xcf, 0x26, 0x53, 0x91, 0x9e, 0xb4,
		0xc6, 0xb9, 0x59, 0x75, 0xdc, 0x30, 0xe9, 0xf7, 0xf4, 0x6d, 0x28, 0x0d, 0x4c, 0x4d, 0xe0, 0x8f,
		0x73, 0x70, 0xbf, 0x00, 0xf7, 0x3d, 0x27, 0x3e, 0xc9, 0xda, 0xc2, 0xac, 0x59, 0x1b, 0x26, 0xfe,
		0x7d, 0x7d, 0xef, 0x1b, 0xc8, 0xc6, 0x00, 0xf5, 0x36, 0x0b, 0x06, 0xa0, 0x2f, 0x92, 0x5d, 0xeb,
		0x0a, 0xa9, 0x3f, 0x8d, 0xa9, 0x2f, 0x08, 0x4c, 0xe9, 0xd2, 0xf7, 0xa1, 0x6c, 0x8b, 0x89, 0x59,
		0x81, 0x8c, 0x95, 0x38, 0x22, 0xbe, 0x15, 0x73, 0x53, 0x8e, 0x9b, 0xc9, 0xb0, 0xaa, 0x92, 0x5c,
		0x97, 0xff, 0x6f, 0x55, 0xd2, 0x8c, 0xab, 0x64, 0x4c, 0x36, 0xa6, 0x4f, 0xf2, 0x3f, 0xfb, 0xdb,
		0x87, 0xb8, 0x19, 0x98, 0x45, 0x36, 0xfc, 0x72, 0x48, 0x36, 0x4c, 0x7e, 0x01, 0x91, 0x6c, 0x86,
		0xaf, 0xe0, 0x9a, 0xfc, 0xd7, 0x89, 0xd5, 0x21, 0x81, 0xb8, 0x5a, 0xa0, 0xde, 0x39, 0x53, 0xe7,
		0xcb, 0x7c, 0xa2, 0x48, 0xf0, 0x4a, 0xc2, 0xc5, 0x59, 0x79, 0xab, 0x3b, 0x3c, 0x94, 0xd9, 0x84,
		0x74, 0x93, 0x4b, 0xb4, 0x87, 0x01, 0x55, 0x93, 0x84, 0x84, 0xcb, 0x1b, 0xab, 0xf4, 0x74, 0x77,
		0x25, 0xb5, 0x55, 0xbb, 0x05, 0x37, 0xb4, 0xc1, 0xc8, 0x60, 0xf7, 0xfe, 0xbd, 0x09, 0xab, 0x72,
		0xea, 0xfb, 0xa7, 0x27, 0xe8, 0x2d, 0x5c, 0xd3, 0x5c, 0xb1, 0xa0, 0xc6, 0xe4, 0x97, 0x31, 0x62,
		0x8e, 0xd5, 0xa9, 0x6f, 0x6f, 0xd0, 0x9f, 0x0d, 0xb8, 0x59, 0x74, 0xe9, 0x82, 0x1e, 0xcf, 0x7a,
		0x2b, 0x56, 0xfd, 0x64, 0xe6, 0x1b, 0x1e, 0xf4, 0x8d, 0x01, 0xdb, 0xb9, 0xf7, 0x03, 0xe8, 0xe7,
		0x93, 0x3a, 0x1e, 0x10, 0x4f, 0xd5, 0x47, 0xd3, 0x9a, 0xa9, 0x60, 0xfa, 0xe4, 0x64, 0x57, 0x6c,
		0x31, 0x39, 0x9a, 0xfb, 0x8a, 0x62, 0x72, 0xb4, 0x87, 0xff, 0x0c, 0x39, 0x5a, 0x01, 0x59, 0x4c,
		0x4e, 0xd1, 0x09, 0xa2, 0x98, 0x9c, 0x42, 0x8d, 0x8f, 0xde, 0xe9, 0x95, 0xea, 0x80, 0xac, 0x45,
		0x9f, 0x4e, 0xed, 0x3f, 0xb3, 0x0f, 0x54, 0x9f, 0xcd, 0x68, 0x3d, 0x5a, 0x3e, 0xa3, 0x12, 0xac,
		0xb8, 0x7c, 0x72, 0xb5, 0x77, 0x71, 0xf9, 0xe4, 0x6b, 0x63, 0xf4, 0x9d, 0x01, 0xb7, 0x0a, 0xf5,
		0x20, 0xfa, 0x64, 0x3a, 0xcf, 0xd9, 0x44, 0x3d, 0x99, 0xc5, 0x54, 0x05, 0xf6, 0x27, 0x43, 0xb4,
		0xa8, 0x3c, 0xbd, 0x82, 0x3e, 0x9e, 0x98, 0x84, 0x41, 0xc1, 0x5a, 0x7d, 0x3c, 0xbd, 0xa1, 0x0a,
		0xe9, 0x6f, 0x06, 0xdc, 0x19, 0x23, 0xa1, 0xd0, 0xd3, 0x69, 0xbd, 0x67, 0xf3, 0xf5, 0xe9, 0x6c,
		0xc6, 0x03, 0x19, 0xcb, 0xdd, 0xbb, 0x73, 0x33, 0x36, 0x4e, 0xe7, 0xe5, 0x66, 0x6c, 0xbc, 0x0e,
		0x93, 0x19, 0x2b, 0x94, 0x13, 0xb9, 0x19, 0x9b, 0x44, 0x92, 0xe5, 0x66, 0x6c, 0x32, 0x05, 0x93,
		0x59, 0x89, 0xa3, 0x3b, 0x77, 0xf1, 0x4a, 0xcc, 0x95, 0x31, 0xc5, 0x2b, 0x31, 0x5f, 0x20, 0xc4,
		0x8d, 0x5c, 0xb3, 0x25, 0xe7, 0x34, 0xf2, 0x7c, 0x25, 0x91, 0xd3, 0xc8, 0x0b, 0x76, 0xfb, 0x83,
		0xdf, 0xc2, 0x0f, 0x6d, 0xd6, 0xd6, 0x99, 0x1d, 0xac, 0xec, 0xfb, 0xf4, 0x34, 0x60, 0x9c, 0x9d,
		0x1a, 0x5f, 0x3f, 0xbc, 0xa0, 0xbc, 0x15, 0x9d, 0xd5, 0x6d, 0xd6, 0x6e, 0x64, 0x7f, 0x50, 0xf1,
		0x53, 0xea, 0xb8, 0x8d, 0x0b, 0x26, 0x7f, 0x2b, 0xa2, 0x7e, 0x5d, 0xf1, 0x14, 0xfb, 0xb4, 0xf3,
		0xf0, 0x6c, 0x49, 0x8c, 0x7d, 0xf8, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x6c, 0x40, 0x2d,
		0xcf, 0x22, 0x00, 0x00,
	},
	// uber/cadence/api/v1/decision.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x5d, 0x4f, 0xdc, 0x46,
		0x17, 0x7e, 0xcd, 0xc7, 0x7e, 0x1c, 0x20, 0x6f, 0x18, 0x12, 0x02, 0x09, 0x09, 0x64, 0x5f, 0xbd,
		0xa4, 0x09, 0x62, 0x17, 0x48, 0x1a, 0x45, 0x49, 0x15, 0x15, 0x48, 0x50, 0x90, 0x12, 0x82, 0x1c,
		0xd2, 0x54, 0xbd, 0xb1, 0x86, 0xf1, 0x00, 0x23, 0xbc, 0xb6, 0x3b, 0x1e, 0x43, 0xb6, 0x52, 0xa5,
		0x5e, 0xb5, 0xbd, 0xe9, 0x0f, 0xa8, 0xd4, 0xab, 0x5e, 0xb5, 0x37, 0xed, 0x6d, 0xab, 0x5e, 0xf5,
		0x27, 0xf4, 0xa2, 0xff, 0xa3, 0x52, 0xff, 0x40, 0x35, 0xe3, 0xb1, 0x77, 0x59, 0xbc, 0x5e, 0x9b,
		0xa4, 0xb9, 0xc3, 0xe3, 0x73, 0x9e, 0x79, 0x66, 0xce, 0xcc, 0x79, 0x1e, 0xb3, 0x50, 0x0b, 0x77,
		0x29, 0x6f, 0x10, 0x6c, 0x53, 0x97, 0xd0, 0x06, 0xf6, 0x59, 0xe3, 0x68, 0xb9, 0x61, 0x53, 0xc2,
		0x02, 0xe6, 0xb9, 0x75, 0x9f, 0x7b, 0xc2, 0x43, 0x13, 0x32, 0xa6, 0xae, 0x63, 0xea, 0xd8, 0x67,
		0xf5, 0xa3, 0xe5, 0xcb, 0xd7, 0xf6, 0x3d, 0x6f, 0xdf, 0xa1, 0x0d, 0x15, 0xb2, 0x1b, 0xee, 0x35,
		0xec, 0x90, 0x63, 0x91, 0x24, 0x5d, 0x9e, 0x4b, 0x03, 0x26, 0x5e, 0xb3, 0x99, 0x44, 0xa4, 0x4e,
		0x2d, 0x70, 0x70, 0xe8, 0xb0, 0x40, 0x64, 0xc5, 0x1c, 0x7b, 0xfc, 0x70, 0xcf, 0xf1, 0x8e, 0xa3,
		0x98, 0xda, 0xd7, 0xe3, 0x50, 0x79, 0xa4, 0x19, 0xa3, 0x6f, 0x0d, 0xb8, 0x15, 0x90, 0x03, 0x6a,
		0x87, 0x0e, 0xb5, 0x30, 0x11, 0xec, 0x88, 0x89, 0x96, 0x25, 0x51, 0xad, 0x78, 0x55, 0x16, 0x16,
		0x82, 0xb3, 0xdd, 0x50, 0xd0, 0x60, 0xca, 0x98, 0x33, 0xde, 0x1b, 0x59, 0x79, 0x50, 0x4f, 0x59,
		0x61, 0xfd, 0x85, 0x86, 0x59, 0xd5, 0x28, 0x3b, 0x38, 0x38, 0x8c, 0xe7, 0x59, 0x4d, 0x20, 0x9e,
		0xfc, 0xc7, 0x9c, 0x0f, 0x72, 0x45, 0xa2, 0xcf, 0x60, 0x36, 0x10, 0x98, 0x0b, 0x4b, 0xb0, 0x26,
		0xe5, 0xa9, 0x7c, 0x06, 0x14, 0x9f, 0xe5, 0x74, 0x3e, 0x32, 0x77, 0x47, 0xa6, 0xa6, 0xb2, 0x98,
		0x09, 0x32, 0xde, 0xa3, 0x1f, 0x0c, 0x90, 0xbb, 0xef, 0x3b, 0x54, 0x50, 0x2b, 0xde, 0x40, 0x8b,
		0xbe, 0xa6, 0x24, 0x94, 0x45, 0x4b, 0x25, 0x33, 0xa8, 0xc8, 0x7c, 0x98, 0x4a, 0x66, 0x5d, 0x63,
		0xbd, 0xd2, 0x50, 0x8f, 0x63, 0xa4, 0x54, 0x6e, 0x0b, 0x24, 0x7f, 0x38, 0xfa, 0xce, 0x80, 0x85,
		0x3d, 0xcc, 0x9c, 0xbc, 0x34, 0x87, 0x14, 0xcd, 0x0f, 0x52, 0x69, 0x6e, 0x60, 0xe6, 0xe4, 0xa3,
		0x78, 0x63, 0x2f, 0x5f, 0x28, 0xfa, 0xd1, 0x80, 0x25, 0x4e, 0x3f, 0x0d, 0x69, 0x20, 0x2c, 0x82,
		0x5d, 0x42, 0x9d, 0x1c, 0xe7, 0x6c, 0x38, 0x63, 0x2b, 0xcd, 0x08, 0x6c, 0x5d, 0x61, 0xf5, 0x3d,
		0x6c, 0x0b, 0x3c, 0x7f, 0x38, 0xfa, 0x1c, 0xe6, 0x34, 0xc5, 0xde, 0x47, 0xae, 0xa4, 0xa8, 0xad,
		0xa4, 0x57, 0x59, 0x25, 0xf7, 0x3e, 0x73, 0x57, 0x49, 0x56, 0x00, 0xfa, 0xde, 0x80, 0x45, 0x3d,
		0x7f, 0xce, 0x5a, 0x96, 0x15, 0x99, 0x87, 0x19, 0x64, 0xf2, 0x55, 0xf3, 0x26, 0xc9, 0x1b, 0x8c,
		0xfe, 0x30, 0xe0, 0x61, 0x57, 0x3d, 0xe9, 0x6b, 0x41, 0xb9, 0x8b, 0x73, 0xb3, 0xae, 0x28, 0xd6,
		0xcf, 0xfa, 0x57, 0xf7, 0xb1, 0x06, 0xce, 0xb7, 0x88, 0x7b, 0xfc, 0x8c, 0xb9, 0xe8, 0x0b, 0x03,
		0xae, 0x73, 0x4a, 0x3c, 0x6e, 0x5b, 0x4d, 0xcc, 0x0f, 0x7b, 0x54, 0xbe, 0xaa, 0x68, 0xdf, 0xee,
		0x41, 0x5b, 0x66, 0x3f, 0x53, 0xc9, 0xa9, 0xe4, 0xae, 0xf1, 0xcc, 0x08, 0xf4, 0xab, 0x01, 0x77,
		0x89, 0xe7, 0x0a, 0xe6, 0x86, 0xd4, 0xc2, 0x81, 0xe5, 0xd2, 0xe3, 0xbc, 0xdb, 0x09, 0x8a, 0xd7,
		0xe3, 0x1e, 0x7d, 0x27, 0x82, 0x5c, 0x0d, 0xb6, 0xe8, 0x71, 0xbe, 0x6d, 0x5c, 0x22, 0x05, 0x73,
		0xd0, 0xcf, 0x06, 0xac, 0x44, 0x9d, 0x9a, 0x1c, 0x30, 0xc7, 0xce, 0xcb, 0x7b, 0x44, 0xf1, 0x5e,
		0xeb, 0xdd, 0xbc, 0xd7, 0x25, 0x5a, 0x3e, 0xd2, 0x8b, 0x41, 0x91, 0x04, 0xf4, 0x9b, 0x01, 0x77,
		0x03, 0xb6, 0x2f, 0xcf, 0x6c, 0xd1, 0xc3, 0x3b, 0xaa, 0x58, 0x6f, 0xa4, 0xb3, 0x56, 0x90, 0xc5,
		0x4e, 0xed, 0x72, 0x50, 0x34, 0x09, 0xfd, 0x62, 0xc0, 0xfb, 0xa1, 0x1f, 0x50, 0x2e, 0xda, 0xa4,
		0x03, 0x8a, 0x39, 0x39, 0xe8, 0x20, 0x9a, 0x4a, 0x7e, 0x2c, 0xe3, 0xa8, 0xbc, 0x54, 0x88, 0xf1,
		0xfc, 0x2f, 0x14, 0x5e, 0x7b, 0xd2, 0xf4, 0xa3, 0x12, 0x16, 0xcc, 0x59, 0x1b, 0x05, 0x68, 0xd3,
		0xa9, 0x7d, 0x53, 0x82, 0xf9, 0x7c, 0xb6, 0x01, 0xcd, 0xc2, 0x48, 0x22, 0x1b, 0xcc, 0x56, 0x46,
		0xa4, 0x6a, 0x42, 0x3c, 0xb4, 0x69, 0xa3, 0x0d, 0x18, 0x6b, 0xeb, 0x4a, 0xcb, 0xa7, 0xda, 0x1b,
		0x5c, 0x4f, 0x5d, 0x6b, 0x32, 0x59, 0xcb, 0xa7, 0xe6, 0x28, 0xee, 0x78, 0x42, 0x93, 0x50, 0xb2,
		0xbd, 0x26, 0x66, 0xae, 0xd2, 0xf3, 0xaa, 0xa9, 0x9f, 0xd0, 0x7d, 0xa8, 0x2a, 0xb9, 0x92, 0x6e,
		0x4b, 0x6b, 0xe8, 0xd5, 0x54, 0x6c, 0xb9, 0x80, 0xa7, 0x2c, 0x10, 0x66, 0x45, 0xe8, 0xbf, 0xd0,
		0x0a, 0x0c, 0x33, 0xd7, 0x0f, 0x85, 0xd6, 0xb5, 0x99, 0xd4, 0xbc, 0x6d, 0xdc, 0x72, 0x3c, 0x6c,
		0x9b, 0x51, 0x28, 0xda, 0x81, 0xe9, 0xc4, 0x98, 0x09, 0xcf, 0x22, 0x8e, 0x17, 0x50, 0x25, 0x4b,
		0x5e, 0x28, 0xb4, 0x08, 0x4d, 0xd7, 0x23, 0x53, 0x59, 0x8f, 0x4d, 0x65, 0xfd, 0x91, 0x36, 0x95,
		0xe6, 0x64, 0x9c, 0xbb, 0xe3, 0xad, 0xcb, 0xcc, 0x9d, 0x28, 0xb1, 0x1b, 0xb5, 0xed, 0xaf, 0x24,
		0x6a, 0xb9, 0x00, 0x6a, 0xe2, 0xae, 0x24, 0xea, 0x16, 0x4c, 0x6a, 0xa4, 0x6e, 0xa2, 0x95, 0x7e,
		0x90, 0x13, 0x91, 0x0d, 0x3b, 0xc9, 0x72, 0x03, 0xc6, 0x0f, 0x28, 0xe6, 0x62, 0x97, 0xe2, 0x36,
		0xbb, 0x6a, 0x3f, 0xa8, 0xf3, 0x49, 0x4e, 0x8c, 0xb3, 0x0e, 0xa3, 0x9c, 0x0a, 0xde, 0xb2, 0x7c,
		0xcf, 0x61, 0xa4, 0xa5, 0x3b, 0xce, 0x5c, 0x8f, 0x0e, 0x2e, 0x78, 0x6b, 0x5b, 0xc5, 0x99, 0x23,
		0xbc, 0xfd, 0x80, 0x6e, 0x43, 0xe9, 0x80, 0x62, 0x9b, 0x72, 0x7d, 0xf5, 0xaf, 0xa4, 0xa6, 0x3f,
		0x51, 0x21, 0xa6, 0x0e, 0x45, 0x77, 0x60, 0x32, 0x16, 0x49, 0xc7, 0x23, 0xd8, 0xb1, 0x6c, 0x16,
		0xf8, 0x58, 0x90, 0x03, 0x75, 0x05, 0x2b, 0xe6, 0x05, 0xfd, 0xf6, 0xa9, 0x7c, 0xf9, 0x48, 0xbf,
		0xab, 0x7d, 0x65, 0xc0, 0x4c, 0x96, 0x6d, 0x45, 0xd3, 0x50, 0x89, 0x9c, 0x49, 0x72, 0x05, 0xca,
		0xea, 0x79, 0xd3, 0x46, 0x4f, 0xe1, 0x62, 0x52, 0x83, 0x3d, 0xc6, 0xdb, 0x25, 0x18, 0xe8, 0xb7,
		0x6f, 0x48, 0x97, 0x60, 0x83, 0xf1, 0xb8, 0x02, 0x35, 0x02, 0x0b, 0x05, 0x2c, 0x2b, 0xba, 0x03,
		0x25, 0x4e, 0x83, 0xd0, 0x11, 0xfa, 0x0b, 0x21, 0xfb, 0x84, 0xeb, 0xd8, 0x1a, 0x86, 0x1b, 0x39,
		0x0d, 0x27, 0xba, 0x0b, 0x65, 0x69, 0x38, 0x43, 0x4e, 0x33, 0x67, 0xd8, 0x88, 0x62, 0xcc, 0x38,
		0xb8, 0xb6, 0x05, 0x0b, 0x05, 0xfc, 0x62, 0xdf, 0x2e, 0x53, 0xbb, 0x0f, 0x57, 0x33, 0x4d, 0x5e,
		0x46, 0x85, 0x6a, 0x04, 0x6e, 0xe6, 0xf6, 0x64, 0x72, 0xc1, 0x36, 0x15, 0x98, 0x39, 0x41, 0xae,
		0x2d, 0x8d, 0x83, 0x6b, 0x7f, 0x1b, 0x70, 0xef, 0xac, 0x1e, 0xaa, 0xa3, 0xf7, 0x19, 0x27, 0x7a,
		0xdf, 0x4b, 0x40, 0xa7, 0xd5, 0x51, 0x1f, 0xac, 0xf9, 0x54, 0x5e, 0xa7, 0x66, 0x33, 0xc7, 0x8f,
		0xbb, 0x87, 0xd0, 0x14, 0x94, 0xa5, 0xd7, 0xe0, 0x9e, 0xa3, 0x7a, 0xed, 0xa8, 0x19, 0x3f, 0xa2,
		0x3a, 0x4c, 0x74, 0x59, 0x09, 0xcf, 0x75, 0x5a, 0xaa, 0xed, 0x56, 0xcc, 0x71, 0xd2, 0x29, 0xf3,
		0xcf, 0x5d, 0xa7, 0x55, 0xfb, 0xc9, 0x80, 0x6b, 0xd9, 0x16, 0x4c, 0x96, 0x56, 0x7b, 0x3b, 0x17,
		0x37, 0x69, 0x5c, 0xda, 0x68, 0x68, 0x0b, 0x37, 0x69, 0xe7, 0x8e, 0x0f, 0x14, 0xd8, 0xf1, 0x8e,
		0xfe, 0x30, 0x98, 0xbb, 0x3f, 0xd4, 0xfe, 0x2a, 0xc3, 0x52, 0x51, 0x6f, 0x26, 0x25, 0x2e, 0xd9,
		0x0f, 0x25, 0x71, 0x46, 0x86, 0xc4, 0xc5, 0x80, 0x91, 0xc4, 0x1d, 0x77, 0x3c, 0x9d, 0x94, 0xb2,
		0x81, 0x33, 0x4a, 0xd9, 0x60, 0x7e, 0x29, 0xc3, 0x30, 0xd7, 0xf6, 0x54, 0x3d, 0x84, 0x62, 0xa8,
		0x5f, 0x97, 0x9a, 0x49, 0x20, 0x5e, 0xa4, 0x28, 0xc6, 0x2b, 0xb8, 0xa2, 0x96, 0xd4, 0x03, 0x7d,
		0xb8, 0x1f, 0xfa, 0x25, 0x99, 0x9d, 0x06, 0xfc, 0x1c, 0x26, 0x77, 0x31, 0x39, 0xf4, 0xf6, 0xf6,
		0x34, 0x36, 0x73, 0x05, 0xe5, 0x47, 0xd8, 0xe9, 0xaf, 0xc1, 0x17, 0x74, 0xa2, 0x82, 0xdd, 0xd4,
		0x69, 0xa7, 0x34, 0xa9, 0x7c, 0x16, 0x4d, 0xda, 0x84, 0x2a, 0x73, 0x99, 0x60, 0x58, 0x78, 0x5c,
		0x69, 0xec, 0xb9, 0x95, 0x85, 0xfe, 0xfe, 0x7f, 0x33, 0x4e, 0x31, 0xdb, 0xd9, 0x9d, 0x9d, 0xb5,
		0x5a, 0xa0, 0xb3, 0x22, 0x13, 0x26, 0x1d, 0x2c, 0xbf, 0x01, 0x23, 0x99, 0x90, 0xa5, 0xd5, 0x12,
		0x00, 0x39, 0x4e, 0xc6, 0x05, 0x99, 0xbb, 0x9e, 0xa4, 0x9a, 0x2a, 0x13, 0xfd, 0x0f, 0xc6, 0x08,
		0x97, 0x67, 0x44, 0xdb, 0x0c, 0x25, 0xd8, 0x55, 0x73, 0x54, 0x0e, 0xc6, 0x3e, 0xf1, 0x6c, 0x7a,
		0xbc, 0x08, 0x43, 0x4d, 0xda, 0xf4, 0xb4, 0x01, 0x9e, 0x4e, 0x4d, 0x79, 0x46, 0x9b, 0x9e, 0xa9,
		0xc2, 0x90, 0x09, 0xe3, 0xa7, 0x0c, 0xf5, 0xd4, 0x39, 0x95, 0xfb, 0xff, 0x74, 0xe7, 0xdf, 0x65,
		0x7d, 0xcd, 0xf3, 0x41, 0xd7, 0x48, 0xed, 0xcf, 0x32, 0x2c, 0x16, 0xfa, 0xac, 0xe9, 0xd9, 0x8e,
		0x67, 0x61, 0x24, 0xe9, 0x03, 0xcc, 0x56, 0x37, 0xb8, 0x6a, 0x42, 0x3c, 0x14, 0x79, 0xe1, 0x93,
		0x8d, 0x62, 0xf0, 0x2d, 0x34, 0x8a, 0x77, 0xe0, 0x79, 0xf3, 0x34, 0x8a, 0xd2, 0xbf, 0xda, 0x28,
		0xca, 0x67, 0x6e, 0x14, 0x1f, 0xc1, 0x84, 0x8f, 0x39, 0x75, 0x85, 0x46, 0xd4, 0xd7, 0x3b, 0xba,
		0x9c, 0xf3, 0x3d, 0x56, 0x2f, 0xe3, 0x15, 0x8a, 0xbe, 0xe4, 0xe3, 0x7e, 0xf7, 0x50, 0xa7, 0x48,
		0x56, 0x4f, 0x8a, 0x24, 0x81, 0xa9, 0x8e, 0x63, 0x60, 0x71, 0x1a, 0xb6, 0xa7, 0x05, 0x35, 0xed,
		0xad, 0xcc, 0x82, 0x6f, 0xda, 0xa6, 0x4c, 0xd1, 0x53, 0x5f, 0x3c, 0x4e, 0x1b, 0x7e, 0x3b, 0x16,
		0xfa, 0xd4, 0xbd, 0x1e, 0xcd, 0xbc, 0xd7, 0x63, 0xc5, 0xef, 0xf5, 0xb9, 0x37, 0xb8, 0xd7, 0xff,
		0x7d, 0xb3, 0x7b, 0xfd, 0xfb, 0x00, 0x2c, 0x17, 0xfe, 0xf0, 0x7f, 0xd7, 0x56, 0x6b, 0x16, 0x46,
		0xf4, 0xff, 0x3b, 0x94, 0xfb, 0x89, 0x3e, 0x6d, 0x21, 0x1a, 0x52, 0xee, 0x27, 0xb9, 0xae, 0x43,
		0xf9, 0xaf, 0x6b, 0xc7, 0xd1, 0x1c, 0xce, 0xe5, 0xdf, 0x4a, 0xbd, 0xfc, 0xdb, 0x97, 0x06, 0x2c,
		0x15, 0xfd, 0xff, 0x43, 0x7a, 0x31, 0x8d, 0x37, 0x2a, 0xe6, 0xda, 0xc7, 0x70, 0x89, 0x78, 0xcd,
		0xb4, 0xec, 0xb5, 0xca, 0xaa, 0xcf, 0xb6, 0x65, 0x3f, 0xd8, 0x36, 0x3e, 0x59, 0xde, 0x67, 0xe2,
		0x20, 0xdc, 0xad, 0x13, 0xaf, 0xd9, 0xe8, 0xfc, 0xc9, 0x65, 0x91, 0xd9, 0x4e, 0x63, 0xdf, 0x8b,
		0x7e, 0xe5, 0xd1, 0xbf, 0xbf, 0x3c, 0xc0, 0x3e, 0x3b, 0x5a, 0xde, 0x2d, 0xa9, 0xb1, 0xdb, 0xff,
		0x04, 0x00, 0x00, 0xff, 0xff, 0x24, 0x00, 0x18, 0x00, 0x42, 0x1a, 0x00, 0x00,
	},
	// uber/cadence/admin/v1/cluster.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x6b, 0x13, 0x41,
		0x10, 0xe6, 0x7a, 0xc6, 0x24, 0x93, 0x62, 0xeb, 0x62, 0x31, 0x28, 0x62, 0x3c, 0x41, 0x22, 0xc2,
		0x1d, 0x69, 0xe9, 0x83, 0x3f, 0x10, 0x49, 0x55, 0xcc, 0x83, 0x3f, 0x58, 0xdf, 0x7c, 0x39, 0xf6,
		0xf6, 0x26, 0xb9, 0xa5, 0xd9, 0xdd, 0xb2, 0xb7, 0x17, 0x08, 0xf8, 0x2f, 0xf8, 0xff, 0xe8, 0x7f,
		0x27, 0xb7, 0x7b, 0x77, 0x58, 0x4c, 0x69, 0xdf, 0x66, 0x66, 0xbf, 0xef, 0xdb, 0x6f, 0x66, 0x18,
		0x78, 0x5a, 0x65, 0x68, 0x12, 0xce, 0x72, 0x54, 0x1c, 0x13, 0x96, 0x4b, 0xa1, 0x92, 0xcd, 0x2c,
		0xe1, 0xeb, 0xaa, 0xb4, 0x68, 0xe2, 0x0b, 0xa3, 0xad, 0x26, 0x47, 0x35, 0x28, 0x6e, 0x40, 0xb1,
		0x03, 0xc5, 0x9b, 0x59, 0xf4, 0x0c, 0x06, 0x9f, 0x74, 0x69, 0x17, 0x6a, 0xa9, 0xc9, 0x03, 0x18,
		0x88, 0x1c, 0x95, 0x15, 0x76, 0x3b, 0x0e, 0x26, 0xc1, 0x74, 0x48, 0xbb, 0x3c, 0xfa, 0x09, 0x03,
		0x2a, 0xd4, 0xca, 0xe1, 0x08, 0xdc, 0x32, 0x7a, 0x8d, 0x0d, 0xc6, 0xc5, 0xe4, 0x09, 0xec, 0x4b,
		0x94, 0x19, 0x9a, 0x94, 0xeb, 0x4a, 0xd9, 0xf1, 0xde, 0x24, 0x98, 0xf6, 0xe8, 0xc8, 0xd7, 0xce,
		0xea, 0x12, 0x79, 0x09, 0x7d, 0x9f, 0x96, 0xe3, 0x70, 0x12, 0x4e, 0x47, 0xc7, 0x8f, 0xe3, 0x9d,
		0x9e, 0xe2, 0xd6, 0x10, 0x6d, 0xf1, 0xd1, 0xef, 0x00, 0xee, 0x7c, 0xf6, 0x71, 0x21, 0x2e, 0x9c,
		0x89, 0x39, 0xec, 0xf3, 0xca, 0x18, 0x54, 0x36, 0x2d, 0x74, 0x69, 0x9d, 0x99, 0x1b, 0x48, 0x8e,
		0x1a, 0x52, 0x5d, 0x20, 0x2f, 0xe0, 0xae, 0x41, 0xc6, 0x0b, 0x96, 0xad, 0x31, 0x6d, 0xbd, 0xed,
		0x4d, 0xc2, 0xe9, 0x90, 0x1e, 0x76, 0x0f, 0xcd, 0xbf, 0xe4, 0x14, 0x7a, 0x46, 0xa8, 0xd5, 0x75,
		0xe6, 0xdb, 0x29, 0x51, 0x8f, 0x8e, 0x7e, 0x05, 0x70, 0xf0, 0x5e, 0x4b, 0x26, 0xd4, 0x19, 0xe3,
		0x05, 0x3a, 0xef, 0xaf, 0xe0, 0xa1, 0xaa, 0x64, 0xaa, 0x97, 0xa9, 0xb0, 0x28, 0xcb, 0x54, 0xa8,
		0x94, 0xd7, 0x8f, 0x69, 0xb6, 0x4d, 0x45, 0xee, 0x5a, 0x09, 0xe9, 0x91, 0xaa, 0xe4, 0xd7, 0xe5,
		0xa2, 0x06, 0x2c, 0x3c, 0x77, 0xbe, 0x5d, 0xe4, 0xe4, 0x2d, 0x3c, 0xba, 0x92, 0xab, 0x98, 0x44,
		0x37, 0xf9, 0x90, 0xde, 0xdf, 0xc1, 0xfe, 0xc2, 0x24, 0x46, 0x6f, 0x80, 0x7c, 0x43, 0x53, 0x8a,
		0xd2, 0xd6, 0xbe, 0xbf, 0xa3, 0xb5, 0x42, 0xad, 0xc8, 0x21, 0x84, 0xe7, 0xd8, 0x6e, 0xbd, 0x0e,
		0xc9, 0x3d, 0xe8, 0x6d, 0xd8, 0xba, 0xf2, 0x7a, 0x43, 0xea, 0x93, 0xe8, 0xdd, 0x25, 0xf6, 0x47,
		0x64, 0xb6, 0x32, 0xb8, 0x83, 0x3d, 0x86, 0x3e, 0xaa, 0x7a, 0x7a, 0xb9, 0xe3, 0x0f, 0x68, 0x9b,
		0x46, 0x7f, 0x02, 0x38, 0xf8, 0x47, 0xc2, 0xcd, 0x63, 0x0c, 0xfd, 0x8c, 0xf1, 0x73, 0x54, 0x79,
		0xa3, 0xd1, 0xa6, 0xe4, 0x03, 0x0c, 0x4a, 0x6f, 0xd1, 0x2f, 0x66, 0x74, 0xfc, 0xfc, 0x8a, 0xb9,
		0xff, 0xdf, 0x14, 0xed, 0xa8, 0xb5, 0xcc, 0xd2, 0x7b, 0x6d, 0xd7, 0x77, 0x03, 0x99, 0xa6, 0x3b,
		0xda, 0x51, 0xe7, 0xa7, 0x3f, 0x4e, 0x56, 0xc2, 0x16, 0x55, 0x16, 0x73, 0x2d, 0x93, 0x4b, 0x57,
		0x17, 0xaf, 0x50, 0x25, 0xee, 0xd2, 0xba, 0x03, 0x7c, 0xed, 0x82, 0xcd, 0x2c, 0xbb, 0xed, 0xea,
		0x27, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xa7, 0x8c, 0x9c, 0xa8, 0x03, 0x00, 0x00,
	},
	// uber/cadence/admin/v1/history.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2e, 0x4d, 0x4a, 0x2d,
		0xd2, 0x4f, 0x4e, 0x4c, 0x49, 0xcd, 0x4b, 0x4e, 0xd5, 0x4f, 0x4c, 0xc9, 0xcd, 0xcc, 0xd3, 0x2f,
		0x33, 0xd4, 0xcf, 0xc8, 0x2c, 0x2e, 0xc9, 0x2f, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
		0x12, 0x05, 0x29, 0xd2, 0x83, 0x2a, 0xd2, 0x03, 0x2b, 0xd2, 0x2b, 0x33, 0x54, 0xf2, 0xe4, 0x12,
		0x0a, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0xf3, 0x80, 0x28, 0xf7, 0x2c, 0x49, 0xcd, 0x15, 0x92,
		0xe4, 0xe2, 0x48, 0x2d, 0x4b, 0xcd, 0x2b, 0x89, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60,
		0x0e, 0x62, 0x07, 0xf3, 0x3d, 0x53, 0x84, 0x24, 0xb8, 0xd8, 0xcb, 0x20, 0x1a, 0x24, 0x98, 0x20,
		0x32, 0x50, 0xae, 0x52, 0x09, 0x17, 0x1f, 0xaa, 0x51, 0x42, 0x8a, 0x5c, 0x3c, 0x49, 0x45, 0x89,
		0x79, 0xc9, 0x19, 0xf1, 0x25, 0xf9, 0xd9, 0xa9, 0x79, 0x60, 0xa3, 0x78, 0x82, 0xb8, 0x21, 0x62,
		0x21, 0x20, 0x21, 0x21, 0x7b, 0x2e, 0xd6, 0xcc, 0x92, 0xd4, 0xdc, 0x62, 0x09, 0x26, 0x05, 0x66,
		0x0d, 0x6e, 0x23, 0x4d, 0x3d, 0xac, 0xce, 0xd4, 0xc3, 0x74, 0x63, 0x10, 0x44, 0x9f, 0x93, 0x69,
		0x94, 0x71, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0x4a, 0x48, 0xe8,
		0xa5, 0xa7, 0xe6, 0xe9, 0x83, 0x7d, 0x0f, 0x0f, 0x14, 0x6b, 0x30, 0xa3, 0xcc, 0x30, 0x89, 0x0d,
		0x2c, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x92, 0x8f, 0x7e, 0x7c, 0x3c, 0x01, 0x00, 0x00,
	},
	// uber/cadence/admin/v1/queue.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6e, 0xdb, 0xd8,
		0x15, 0x36, 0x25, 0xff, 0x48, 0x47, 0x8e, 0x43, 0xdf, 0x34, 0x8d, 0xf2, 0x63, 0x44, 0xd1, 0x00,
		0x89, 0xe0, 0xc9, 0x50, 0xb5, 0x3c, 0xc1, 0x14, 0x6d, 0xd1, 0x96, 0xa1, 0x18, 0x8b, 0x63, 0x45,
		0x12, 0x2e, 0x29, 0x3b, 0x1e, 0x14, 0x20, 0x68, 0xf1, 0xda, 0x21, 0x42, 0x91, 0x1a, 0x92, 0x72,
		0xaa, 0x75, 0x07, 0xd3, 0x45, 0x17, 0x2d, 0xd0, 0x3e, 0xc1, 0x2c, 0x0a, 0xf4, 0x01, 0xba, 0x28,
		0xba, 0x2d, 0xd0, 0x55, 0x81, 0x76, 0xd3, 0x45, 0xfb, 0x12, 0x7d, 0x84, 0x82, 0x97, 0x94, 0x45,
		0x51, 0x94, 0x44, 0x3b, 0x2e, 0xd0, 0xc5, 0xec, 0xac, 0xc3, 0xef, 0x9c, 0xfb, 0x9d, 0xef, 0xdc,
		0x7b, 0x78, 0xae, 0x09, 0x4f, 0x86, 0xa7, 0xc4, 0xa9, 0xf6, 0x34, 0x9d, 0x58, 0x3d, 0x52, 0xd5,
		0xf4, 0xbe, 0x61, 0x55, 0x2f, 0xf6, 0xaa, 0x5f, 0x0e, 0xc9, 0x90, 0x70, 0x03, 0xc7, 0xf6, 0x6c,
		0x74, 0xd7, 0x87, 0x70, 0x21, 0x84, 0xa3, 0x10, 0xee, 0x62, 0xef, 0xc1, 0xe3, 0x73, 0xdb, 0x3e,
		0x37, 0x49, 0x95, 0x82, 0x4e, 0x87, 0x67, 0x55, 0xcf, 0xe8, 0x13, 0xd7, 0xd3, 0xfa, 0x83, 0xc0,
		0xef, 0x41, 0x69, 0x3a, 0xf4, 0xc0, 0xf0, 0x03, 0xf7, 0xec, 0x7e, 0xdf, 0xb6, 0x42, 0xc4, 0x93,
		0x24, 0xc4, 0x5b, 0xc3, 0xf5, 0x6c, 0x67, 0x14, 0x42, 0xca, 0x49, 0x90, 0xf7, 0xb6, 0xf3, 0xee,
		0xcc, 0xb4, 0xdf, 0x07, 0x98, 0xf2, 0xbf, 0x32, 0xf0, 0x1d, 0xc1, 0xb1, 0x5d, 0x57, 0x30, 0x87,
		0xae, 0x47, 0x1c, 0x45, 0x73, 0xdf, 0x49, 0xd6, 0x99, 0x8d, 0x1e, 0x42, 0x5e, 0xb7, 0xfb, 0x9a,
		0x61, 0xa9, 0x86, 0x5e, 0x64, 0x4a, 0x4c, 0x25, 0x8f, 0x73, 0x81, 0x41, 0xd2, 0x51, 0x17, 0xd0,
		0x38, 0x8e, 0x4a, 0x7e, 0x4e, 0x7a, 0x43, 0xcf, 0xb0, 0xad, 0x62, 0xa6, 0xc4, 0x54, 0x0a, 0xb5,
		0xa7, 0xdc, 0x74, 0xce, 0x03, 0x83, 0xbb, 0xd8, 0xe3, 0x8e, 0x43, 0xb8, 0x38, 0x46, 0xe3, 0xed,
		0xf7, 0x71, 0x13, 0x6a, 0x40, 0xde, 0xd3, 0xdc, 0x77, 0xaa, 0x37, 0x1a, 0x90, 0x62, 0xb6, 0xc4,
		0x54, 0xb6, 0x6a, 0x1f, 0x73, 0x89, 0x0a, 0x72, 0x71, 0xce, 0xca, 0x68, 0x40, 0x70, 0xce, 0x0b,
		0xff, 0x42, 0x3b, 0x00, 0x34, 0x92, 0xeb, 0x69, 0x1e, 0x29, 0xae, 0x96, 0x98, 0xca, 0x1a, 0xa6,
		0xb1, 0x65, 0xdf, 0x80, 0xee, 0xc1, 0x06, 0x7d, 0x6c, 0xe8, 0xc5, 0xb5, 0x12, 0x53, 0xc9, 0xe2,
		0x75, 0xff, 0xa7, 0xa4, 0xa3, 0x26, 0xdc, 0xb9, 0x30, 0x5c, 0xe3, 0xd4, 0x30, 0x0d, 0x6f, 0xa4,
		0x8c, 0x8b, 0x52, 0x5c, 0xa7, 0x99, 0x3d, 0xe0, 0x82, 0xb2, 0x71, 0xe3, 0xb2, 0x71, 0x97, 0x08,
		0x9c, 0xe4, 0x56, 0xfe, 0x67, 0x06, 0xbe, 0x17, 0x25, 0x2a, 0x7b, 0x9a, 0xe3, 0x09, 0x6f, 0x0d,
		0x53, 0x9f, 0xc8, 0x40, 0xbe, 0x1c, 0x12, 0xd7, 0xe3, 0x3d, 0xcf, 0x31, 0x4e, 0x87, 0x1e, 0x71,
		0x51, 0x05, 0x58, 0x4f, 0x73, 0xce, 0x89, 0xa7, 0xc6, 0xf5, 0xdf, 0x0a, 0xec, 0xf5, 0x71, 0x15,
		0x76, 0x00, 0x9c, 0xc0, 0xdd, 0xc7, 0x64, 0x28, 0x26, 0x1f, 0x5a, 0x24, 0x1d, 0x3d, 0x07, 0x64,
		0x58, 0x86, 0x67, 0x68, 0x1e, 0xd1, 0x55, 0x72, 0x41, 0x2c, 0x0a, 0xcb, 0xd2, 0x7c, 0xd9, 0xcb,
		0x27, 0xa2, 0xff, 0x40, 0xd2, 0xd1, 0xd7, 0x0c, 0x3c, 0x88, 0xc3, 0xb5, 0x4b, 0x56, 0x54, 0xc2,
		0x42, 0xad, 0x91, 0x58, 0xdb, 0x49, 0x5a, 0x33, 0x55, 0x96, 0xa6, 0x96, 0x99, 0x64, 0x89, 0x8b,
		0xc6, 0x9c, 0x27, 0xa8, 0x0c, 0xb7, 0xc2, 0xfc, 0x9d, 0xa1, 0x35, 0xae, 0x50, 0x1e, 0x17, 0x02,
		0x23, 0x1e, 0x5a, 0x92, 0x5e, 0xfe, 0x1c, 0xf6, 0x96, 0xea, 0xea, 0x0e, 0x6c, 0xcb, 0x25, 0x91,
		0xc0, 0x77, 0x61, 0x3d, 0x8c, 0x18, 0xc8, 0xb9, 0xe6, 0xd0, 0x58, 0x7f, 0xca, 0xc0, 0xf3, 0x68,
		0x30, 0x41, 0xb3, 0x7a, 0xc4, 0xbc, 0x91, 0x02, 0x9d, 0xc2, 0xfd, 0x10, 0xf9, 0xc1, 0xa7, 0xe5,
		0x5e, 0x10, 0x68, 0xe6, 0x41, 0x6c, 0x13, 0x64, 0xd3, 0x6d, 0x82, 0xd5, 0x39, 0x9b, 0x80, 0x83,
		0x3b, 0x3d, 0x5f, 0xc6, 0x09, 0x5f, 0xdb, 0x32, 0x47, 0xb4, 0x02, 0x39, 0xbc, 0xdd, 0x8b, 0x96,
		0xb8, 0x6d, 0x99, 0xa3, 0x72, 0x15, 0x3e, 0x59, 0x28, 0x5d, 0xbc, 0x06, 0xe5, 0x3f, 0x66, 0xa7,
		0xc5, 0x96, 0x8d, 0x73, 0x4b, 0xfb, 0x56, 0xec, 0x34, 0x62, 0xa3, 0xc7, 0x50, 0x70, 0xa9, 0x5c,
		0xaa, 0xa5, 0xf5, 0x09, 0xed, 0x49, 0x79, 0x0c, 0x81, 0xa9, 0xa5, 0xf5, 0x09, 0xfa, 0x09, 0x6c,
		0x86, 0x00, 0xc3, 0x1a, 0x0c, 0xbd, 0xe2, 0x06, 0x4d, 0xfa, 0x51, 0x62, 0xd2, 0x1d, 0x6d, 0x64,
		0xda, 0x9a, 0x8e, 0xc3, 0x90, 0x92, 0xef, 0x80, 0x8a, 0xb0, 0xd1, 0xb3, 0x2d, 0xcf, 0xb1, 0xcd,
		0x62, 0xae, 0xc4, 0x54, 0x36, 0xf1, 0xf8, 0x67, 0xbc, 0xd0, 0x33, 0x65, 0x9b, 0x29, 0xf4, 0xdf,
		0x32, 0xc0, 0x47, 0x3d, 0x30, 0xe9, 0xd9, 0x8e, 0x9e, 0xdc, 0x24, 0x04, 0xbb, 0x3f, 0x30, 0x89,
		0x47, 0xfe, 0xdf, 0xab, 0x7f, 0xb5, 0x86, 0xda, 0x04, 0xb6, 0x17, 0x24, 0x66, 0xd8, 0x56, 0x00,
		0x0f, 0xbb, 0xe8, 0x93, 0x44, 0x22, 0x8d, 0xe0, 0xdd, 0x4d, 0xdd, 0xf1, 0xed, 0x89, 0x2b, 0x35,
		0x94, 0xeb, 0xf0, 0xf2, 0xea, 0x72, 0xce, 0x54, 0xe5, 0x3f, 0x0c, 0x94, 0xf8, 0xc1, 0xc0, 0x1c,
		0x75, 0x34, 0x87, 0x58, 0x9e, 0x60, 0xda, 0x2e, 0xe9, 0xd8, 0xa6, 0xd1, 0x1b, 0x45, 0x44, 0x7f,
		0x0a, 0xb7, 0x83, 0x7d, 0x19, 0xd7, 0xfc, 0x16, 0x35, 0x5f, 0x4a, 0xbe, 0x0b, 0xdb, 0xb1, 0xfd,
		0x7b, 0xf9, 0x16, 0xba, 0x3d, 0xb5, 0x7b, 0x25, 0x1d, 0x95, 0x60, 0x33, 0xc0, 0x86, 0x1d, 0x38,
		0x38, 0x3a, 0x40, 0x6d, 0xb4, 0xa5, 0xa3, 0x23, 0xb8, 0x33, 0xa0, 0xa4, 0xd4, 0x9e, 0xcf, 0x4a,
		0x1d, 0x50, 0x5a, 0x54, 0xb1, 0xad, 0x39, 0xa5, 0x9b, 0x49, 0x02, 0x6f, 0x0f, 0xe2, 0xa6, 0xf2,
		0x6f, 0x19, 0x78, 0x94, 0x9c, 0xb2, 0x3f, 0x0a, 0x0c, 0x5d, 0xf4, 0x08, 0xf2, 0xa1, 0xd8, 0x24,
		0x48, 0x34, 0x87, 0x27, 0x06, 0xd4, 0x85, 0xcd, 0x33, 0xcd, 0x30, 0x89, 0xae, 0xf6, 0xb4, 0xa1,
		0x4b, 0x68, 0x7e, 0x5b, 0xb5, 0x5a, 0xca, 0xa9, 0xe4, 0x15, 0x75, 0x15, 0x7c, 0x4f, 0x5c, 0x38,
		0x9b, 0xfc, 0x28, 0xff, 0x99, 0x81, 0x9d, 0x64, 0x56, 0xe1, 0x21, 0x40, 0xaf, 0x61, 0x8d, 0xaa,
		0x43, 0x29, 0x15, 0x6a, 0x9f, 0xcd, 0x59, 0x71, 0x59, 0x35, 0x71, 0x10, 0x05, 0x1d, 0xc2, 0xba,
		0x4b, 0xf3, 0x0d, 0x0f, 0xc3, 0xfe, 0x95, 0xe2, 0x05, 0x52, 0xe1, 0x30, 0x44, 0xf9, 0x97, 0x0c,
		0xec, 0x47, 0x53, 0x5d, 0x98, 0x49, 0x64, 0x67, 0x75, 0x20, 0x47, 0xd9, 0x38, 0xc4, 0x2a, 0x32,
		0xa5, 0x6c, 0xa5, 0x50, 0xfb, 0xf4, 0x4a, 0x34, 0xc2, 0x88, 0xf8, 0x32, 0x4a, 0xf9, 0x2f, 0x73,
		0xab, 0x8b, 0x89, 0x3b, 0x34, 0x6f, 0x5c, 0xc6, 0xff, 0xd1, 0x76, 0xf8, 0x1d, 0x03, 0x9f, 0xa6,
		0x11, 0x74, 0x66, 0xa6, 0xf9, 0x59, 0x78, 0x56, 0x1d, 0x62, 0xa9, 0x61, 0x7d, 0x03, 0x61, 0xf7,
		0xaf, 0x28, 0xac, 0x2f, 0x16, 0xde, 0x1a, 0xc7, 0x0a, 0xea, 0x5d, 0xfe, 0xd5, 0x06, 0xdc, 0x8b,
		0xe7, 0x30, 0xde, 0x9f, 0xe3, 0x59, 0xdd, 0xb0, 0xce, 0xec, 0x50, 0xdc, 0xb4, 0xb3, 0xba, 0x7f,
		0xbf, 0x08, 0x66, 0x75, 0x7a, 0xd3, 0xf8, 0x35, 0x03, 0x3b, 0xee, 0xec, 0x04, 0x37, 0xc9, 0x32,
		0xdc, 0xb2, 0x07, 0x29, 0xc2, 0xa7, 0x99, 0xb0, 0x1b, 0x2b, 0x78, 0xf1, 0x7a, 0xe8, 0x17, 0x0c,
		0xdc, 0xef, 0x4d, 0xcf, 0x32, 0x11, 0x36, 0x59, 0xca, 0x46, 0x48, 0xc1, 0x66, 0xd9, 0x28, 0xd9,
		0x58, 0xc1, 0xf3, 0xd7, 0xa1, 0x2c, 0xdc, 0xe9, 0x17, 0x2d, 0x1f, 0x1f, 0xc8, 0xd3, 0xb0, 0x58,
		0x36, 0x63, 0xf9, 0x2c, 0xe6, 0xae, 0x83, 0xfe, 0xce, 0xc0, 0x0b, 0xe7, 0x3a, 0x2f, 0x6f, 0x3a,
		0xc8, 0x14, 0x6a, 0x6f, 0x52, 0x30, 0xbc, 0xd6, 0x70, 0xd0, 0x58, 0xc1, 0xd7, 0x23, 0x86, 0x7e,
		0xcf, 0xc0, 0x33, 0x2d, 0x5d, 0xcb, 0x0a, 0x6f, 0x7e, 0x9f, 0xa7, 0x48, 0x22, 0x65, 0x13, 0x6c,
		0xac, 0xe0, 0xb4, 0x8b, 0xbf, 0xdc, 0x04, 0x98, 0x5c, 0xc1, 0xca, 0xdf, 0xe4, 0xa0, 0x38, 0x7b,
		0x1a, 0x83, 0x96, 0x10, 0xbd, 0xd1, 0x32, 0x53, 0x37, 0xda, 0xa9, 0x3b, 0x75, 0xe6, 0xe6, 0xee,
		0xd4, 0xd9, 0xf8, 0x9d, 0x3a, 0xde, 0x1a, 0x57, 0x6f, 0xa4, 0x35, 0xa2, 0xdf, 0x2c, 0xed, 0x0e,
		0x6b, 0x89, 0x57, 0xd3, 0xd4, 0xdd, 0x21, 0xde, 0x53, 0x97, 0xb7, 0x87, 0xaf, 0x16, 0xb6, 0x87,
		0x60, 0xc7, 0xd4, 0xaf, 0xd3, 0x1e, 0x12, 0xa8, 0x2c, 0xe8, 0x0f, 0x5f, 0x2d, 0xec, 0x0f, 0x1b,
		0xa9, 0x69, 0x2c, 0x1d, 0xe6, 0x17, 0x37, 0x88, 0x7f, 0x5c, 0xbb, 0x41, 0xe4, 0x28, 0xc5, 0x93,
		0x1b, 0x6b, 0x10, 0x09, 0xbc, 0xaf, 0xd9, 0x21, 0xfe, 0xc0, 0x40, 0x45, 0x4b, 0xf9, 0x0e, 0x2e,
		0xe6, 0x69, 0x1a, 0x87, 0x1f, 0xd0, 0x22, 0x12, 0x88, 0xa7, 0x5e, 0x3e, 0xd6, 0x24, 0xec, 0xa4,
		0x1e, 0x41, 0xd3, 0x73, 0x91, 0x0c, 0xb7, 0xe8, 0x01, 0x0e, 0x2f, 0xac, 0xe3, 0x51, 0x81, 0x4b,
		0x79, 0x44, 0xc7, 0xd3, 0xd7, 0xa6, 0x17, 0x09, 0xba, 0xfb, 0x35, 0x03, 0xb9, 0x71, 0xb3, 0x40,
		0x77, 0x61, 0x5b, 0xe1, 0xe5, 0x43, 0x55, 0x39, 0xe9, 0x88, 0xaa, 0xd4, 0x3a, 0xe2, 0x9b, 0x52,
		0x9d, 0x5d, 0x41, 0xdf, 0x05, 0x34, 0x31, 0x2b, 0x98, 0x6f, 0xc9, 0xaf, 0x44, 0xcc, 0x32, 0xe8,
		0x0e, 0xdc, 0x8e, 0xd8, 0xa5, 0xd7, 0x22, 0x66, 0x33, 0xe8, 0x3e, 0xdc, 0x9d, 0x18, 0xb1, 0xd8,
		0x69, 0x4a, 0x02, 0xaf, 0x48, 0xed, 0x16, 0x9b, 0x45, 0x0f, 0xe1, 0xde, 0xe4, 0x91, 0x80, 0xdb,
		0xb2, 0xac, 0x0a, 0xcd, 0xae, 0xac, 0x88, 0x98, 0x5d, 0xdd, 0xfd, 0x6b, 0xc2, 0x7f, 0x32, 0x29,
		0xa9, 0x8f, 0xe0, 0xf1, 0x14, 0x56, 0x4d, 0xa2, 0xb8, 0x07, 0x9f, 0xcc, 0x03, 0xc9, 0x0a, 0x8f,
		0x15, 0x55, 0x68, 0x48, 0xcd, 0xba, 0x2a, 0xbe, 0x11, 0x85, 0x2e, 0x65, 0xc3, 0xa0, 0xe7, 0x50,
		0x99, 0xe7, 0x22, 0xf0, 0x2d, 0x41, 0x6c, 0x46, 0xd0, 0x99, 0x45, 0x68, 0x59, 0x3a, 0x68, 0xf1,
		0x51, 0x74, 0x16, 0xd5, 0xe1, 0xa7, 0xf3, 0xd0, 0x58, 0x14, 0xda, 0xb8, 0x1e, 0xf2, 0x39, 0x6e,
		0xe3, 0xc3, 0xc3, 0x66, 0xfb, 0x78, 0xe2, 0xac, 0x0a, 0xed, 0xd7, 0x9d, 0xa6, 0xa8, 0x88, 0xec,
		0x2a, 0x7a, 0x01, 0x7b, 0xf3, 0xa2, 0xf0, 0x9d, 0x4e, 0xf3, 0x44, 0xed, 0xf0, 0x58, 0x6c, 0x29,
		0xaa, 0xd0, 0x6c, 0xcb, 0xa2, 0xda, 0x69, 0x37, 0x25, 0xe1, 0x84, 0x5d, 0xdb, 0xfd, 0x26, 0x0b,
		0x0f, 0x17, 0xf4, 0x67, 0xf4, 0x31, 0x3c, 0x4b, 0x08, 0xfb, 0x8a, 0x97, 0x9a, 0x62, 0x5d, 0x15,
		0xf8, 0xae, 0x1c, 0x15, 0x36, 0x99, 0xc3, 0x14, 0xb8, 0xde, 0x7e, 0xcd, 0x4b, 0x2d, 0xb5, 0xd5,
		0x56, 0x54, 0x5e, 0x50, 0xa4, 0x23, 0x91, 0x65, 0xae, 0xe8, 0x26, 0xbe, 0x91, 0x64, 0x45, 0x66,
		0x33, 0xe8, 0x47, 0xf0, 0xfd, 0x65, 0x6e, 0xbe, 0x64, 0xaf, 0x7c, 0xc9, 0xf8, 0x26, 0x16, 0xf9,
		0xfa, 0x89, 0x8a, 0xbb, 0xad, 0x96, 0xd4, 0x3a, 0x60, 0xb3, 0xe8, 0x33, 0xd8, 0x4f, 0xed, 0x1d,
		0x59, 0x76, 0x15, 0xfd, 0x18, 0x7e, 0x70, 0xe5, 0x65, 0xc7, 0x75, 0xaa, 0xb3, 0x6b, 0x73, 0x76,
		0xdf, 0x94, 0x7f, 0xb7, 0x25, 0xf0, 0x8a, 0x78, 0xd0, 0xc6, 0xd2, 0x17, 0x62, 0x9d, 0x5d, 0xdf,
		0xfd, 0x37, 0x03, 0xe8, 0x80, 0x78, 0xf1, 0xda, 0x3c, 0x81, 0x9d, 0x03, 0x51, 0x59, 0x58, 0x91,
		0xa7, 0x50, 0x4e, 0x86, 0xc8, 0x22, 0x3e, 0x92, 0x04, 0x51, 0x7d, 0xd9, 0x95, 0x4f, 0x58, 0x66,
		0x7e, 0x28, 0xff, 0xa4, 0xb6, 0xbb, 0x0a, 0x9b, 0x41, 0x1c, 0xec, 0xce, 0x09, 0xd5, 0xe0, 0x71,
		0x5d, 0x6d, 0x1f, 0xb7, 0x44, 0x2c, 0x37, 0xa4, 0x8e, 0xda, 0x6c, 0xcb, 0x0a, 0x9b, 0x45, 0xcf,
		0xe0, 0xa3, 0x64, 0xfc, 0x74, 0x76, 0xab, 0x2f, 0x5f, 0x7c, 0xb1, 0x7f, 0x6e, 0x78, 0x6f, 0x87,
		0xa7, 0x5c, 0xcf, 0xee, 0x57, 0xa7, 0xbe, 0x63, 0x70, 0xe7, 0xc4, 0x0a, 0x3e, 0x9c, 0x5c, 0x7e,
		0x72, 0xf9, 0x21, 0xfd, 0xe3, 0x62, 0xef, 0x74, 0x9d, 0xda, 0xf7, 0xff, 0x1b, 0x00, 0x00, 0xff,
		0xff, 0x4f, 0xd9, 0x77, 0x58, 0x9a, 0x19, 0x00, 0x00,
	},
	// uber/cadence/admin/v1/replication.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4b, 0x6f, 0xdb, 0xc6,
		0x16, 0x0e, 0x25, 0xeb, 0xe1, 0x63, 0x59, 0x92, 0xc7, 0x4e, 0xac, 0xd8, 0x31, 0xae, 0xa2, 0xbc,
		0x1c, 0x07, 0x90, 0xae, 0x9d, 0x9b, 0x8b, 0x7b, 0x5b, 0x14, 0x01, 0x63, 0xc9, 0x35, 0x1b, 0x3f,
		0x47, 0x8a, 0x53, 0x17, 0x28, 0x08, 0x9a, 0x1c, 0x5b, 0x84, 0x25, 0x52, 0xe0, 0x8c, 0xe4, 0x68,
		0xd7, 0xee, 0x0b, 0x74, 0xd3, 0x5d, 0x97, 0xfd, 0x1b, 0x5d, 0x77, 0xdb, 0xfe, 0xa4, 0x82, 0x33,
		0x43, 0x49, 0x94, 0x28, 0xc5, 0x41, 0x16, 0xdd, 0x69, 0xce, 0xf9, 0xce, 0x63, 0xce, 0x9c, 0xf9,
		0xce, 0x88, 0xf0, 0xac, 0x7b, 0x41, 0xbc, 0x8a, 0x69, 0x58, 0xc4, 0x31, 0x49, 0xc5, 0xb0, 0xda,
		0xb6, 0x53, 0xe9, 0x6d, 0x57, 0x3c, 0xd2, 0x69, 0xd9, 0xa6, 0xc1, 0x6c, 0xd7, 0x29, 0x77, 0x3c,
		0x97, 0xb9, 0xe8, 0xae, 0x0f, 0x2c, 0x4b, 0x60, 0x99, 0x03, 0xcb, 0xbd, 0xed, 0xb5, 0x7f, 0x5d,
		0xb9, 0xee, 0x55, 0x8b, 0x54, 0x38, 0xe8, 0xa2, 0x7b, 0x59, 0x61, 0x76, 0x9b, 0x50, 0x66, 0xb4,
		0x3b, 0xc2, 0x6e, 0xad, 0x18, 0x0e, 0xd0, 0xb1, 0x7d, 0xf7, 0xa6, 0xdb, 0x6e, 0x07, 0x9e, 0xa3,
		0x11, 0x96, 0xdb, 0x36, 0xec, 0x00, 0xf1, 0x28, 0x3a, 0xc9, 0xa6, 0x4d, 0x99, 0xeb, 0xf5, 0x05,
		0xa8, 0xf4, 0x4b, 0x0c, 0x96, 0xf1, 0x30, 0xed, 0x43, 0x42, 0xa9, 0x71, 0x45, 0x28, 0xaa, 0xc3,
		0xd2, 0xc8, 0x6e, 0x74, 0x66, 0xd0, 0x6b, 0x5a, 0x50, 0x8a, 0xf1, 0xcd, 0x85, 0x9d, 0xa7, 0xe5,
		0xc8, 0x4d, 0x95, 0x47, 0xdc, 0x34, 0x0c, 0x7a, 0x8d, 0xf3, 0x5e, 0x58, 0x40, 0xd1, 0xff, 0xe1,
		0x7e, 0xcb, 0xa0, 0x4c, 0xf7, 0x08, 0xf3, 0x6c, 0xd2, 0x23, 0x96, 0xde, 0x16, 0xf1, 0x74, 0xdb,
		0x2a, 0xc4, 0x8a, 0xca, 0x66, 0x1c, 0xdf, 0xf3, 0x01, 0x38, 0xd0, 0xcb, 0x74, 0x34, 0x0b, 0xdd,
		0x87, 0x74, 0xd3, 0xa0, 0x7a, 0xdb, 0xf5, 0x48, 0x21, 0x5e, 0x54, 0x36, 0xd3, 0x38, 0xd5, 0x34,
		0xe8, 0xa1, 0xeb, 0x11, 0x84, 0x61, 0x89, 0xf6, 0x1d, 0x53, 0xa7, 0x4d, 0xc3, 0xb3, 0x74, 0xca,
		0x0c, 0xd6, 0xa5, 0x85, 0xb9, 0xa2, 0x32, 0x23, 0xd5, 0x7a, 0xdf, 0x31, 0xeb, 0x3e, 0xbc, 0xce,
		0xd1, 0x38, 0x47, 0xc3, 0x82, 0xd2, 0xcf, 0x49, 0xc8, 0x8d, 0xed, 0x07, 0x7d, 0x0d, 0xf3, 0x7e,
		0x19, 0x74, 0xd6, 0xef, 0x90, 0x82, 0x52, 0x54, 0x36, 0xb3, 0x3b, 0x5b, 0xb7, 0x2b, 0x45, 0xa3,
		0xdf, 0x21, 0x38, 0xcd, 0xe4, 0x2f, 0xf4, 0x18, 0xb2, 0xd4, 0xed, 0x7a, 0x26, 0xe1, 0x65, 0x1d,
		0xee, 0x3d, 0x23, 0xa4, 0xbe, 0x85, 0x66, 0xa1, 0xd7, 0xb0, 0x68, 0x7a, 0x44, 0x96, 0xdf, 0x6e,
		0x8b, 0x6d, 0x2f, 0xec, 0xac, 0x95, 0x45, 0xef, 0x94, 0x83, 0xde, 0x29, 0x37, 0x82, 0xde, 0xc1,
		0x99, 0xc0, 0xc0, 0x17, 0x21, 0x13, 0xee, 0x89, 0x7e, 0x10, 0x61, 0x0c, 0xc6, 0x3c, 0xfb, 0xa2,
		0xcb, 0x48, 0x50, 0x9c, 0x17, 0x53, 0x92, 0xaf, 0x72, 0x23, 0x3f, 0x0b, 0x75, 0x60, 0xb2, 0x7f,
		0x07, 0xaf, 0x58, 0x11, 0x72, 0xf4, 0x83, 0x02, 0x0f, 0x27, 0xaa, 0x3f, 0x11, 0x30, 0xc1, 0x03,
		0xfe, 0xe7, 0x76, 0xa7, 0x31, 0x11, 0x79, 0x83, 0xce, 0x02, 0xa0, 0x1e, 0x70, 0x80, 0x6e, 0x98,
		0xcc, 0xee, 0xd9, 0xac, 0x3f, 0x11, 0x3d, 0xc9, 0xa3, 0x6f, 0xcf, 0x88, 0xae, 0x4a, 0xd3, 0x89,
		0xd0, 0x6b, 0x74, 0xaa, 0x16, 0xb5, 0x61, 0x4d, 0xde, 0x25, 0x11, 0xb1, 0xb7, 0x33, 0x1a, 0x34,
		0xc5, 0x83, 0x96, 0xa7, 0x04, 0xdd, 0x17, 0x86, 0xbe, 0xc7, 0xb3, 0x9d, 0x50, 0xc4, 0xd5, 0x66,
		0xb4, 0x0a, 0xb9, 0xb0, 0x76, 0x69, 0xd8, 0x2d, 0xb7, 0x47, 0x3c, 0xbd, 0x6d, 0x78, 0xd7, 0xc4,
		0x1b, 0x0d, 0x97, 0xe6, 0xe1, 0x2a, 0x53, 0xc2, 0xed, 0x49, 0xc3, 0x43, 0x6e, 0x17, 0x8a, 0x57,
		0xb8, 0x9c, 0xa2, 0x7b, 0x93, 0x01, 0x18, 0x06, 0x28, 0xfd, 0x1e, 0x83, 0x95, 0xa8, 0xce, 0x40,
		0xa7, 0x90, 0x97, 0x6d, 0xe6, 0x76, 0x88, 0xc7, 0xdb, 0x4f, 0xde, 0x8e, 0xa7, 0x33, 0x1b, 0xec,
		0x38, 0x40, 0xe3, 0x9c, 0x15, 0x16, 0xa0, 0x2c, 0xc4, 0xe4, 0xa5, 0x98, 0xc7, 0x31, 0xdb, 0x42,
		0x2f, 0x21, 0x29, 0x20, 0xf2, 0x0e, 0xac, 0x8f, 0x39, 0xee, 0xd8, 0x43, 0xb7, 0x58, 0x42, 0xd1,
		0x13, 0xc8, 0x9a, 0xae, 0x73, 0x69, 0x5f, 0xe9, 0x3d, 0xe2, 0x51, 0x3f, 0xab, 0x39, 0x7e, 0xcb,
		0x16, 0x85, 0xf4, 0x4c, 0x08, 0xd1, 0x73, 0xc8, 0x0f, 0xca, 0x1a, 0x00, 0x13, 0x1c, 0x98, 0x0b,
		0xe4, 0x01, 0xf4, 0x0b, 0xb8, 0xdf, 0xf1, 0x48, 0xcf, 0x76, 0xbb, 0x54, 0x9f, 0xb0, 0x49, 0x72,
		0x9b, 0xd5, 0x00, 0xb0, 0x17, 0xb6, 0x2d, 0xfd, 0xaa, 0xc0, 0xc6, 0xcc, 0x3e, 0xf7, 0xf3, 0x95,
		0xac, 0x60, 0xb6, 0xba, 0x94, 0x11, 0x8f, 0x57, 0x71, 0x1e, 0x2f, 0x0a, 0xe9, 0xae, 0x10, 0xfa,
		0x44, 0x28, 0xae, 0x9a, 0xac, 0x50, 0x02, 0xa7, 0xf8, 0x5a, 0xb3, 0xd0, 0xff, 0x60, 0x7e, 0x30,
		0x47, 0x6e, 0xc1, 0x16, 0x43, 0x70, 0xe9, 0xcf, 0x04, 0xac, 0x4d, 0xbf, 0x07, 0x68, 0x1d, 0xe6,
		0xe5, 0x11, 0xdb, 0x96, 0xcc, 0x2a, 0x2d, 0x04, 0x9a, 0x85, 0xde, 0x01, 0xba, 0x71, 0xbd, 0xeb,
		0xcb, 0x96, 0x7b, 0xa3, 0x93, 0x0f, 0xc4, 0xec, 0xf2, 0x0e, 0x88, 0x45, 0xf2, 0xaf, 0x38, 0xa8,
		0xf7, 0x12, 0x5e, 0x0b, 0xd0, 0x78, 0xe9, 0x66, 0x5c, 0x84, 0x0a, 0x90, 0x0a, 0x4a, 0x1b, 0xe7,
		0xa5, 0x0d, 0x96, 0xe8, 0x21, 0x64, 0xa8, 0xd9, 0x24, 0x56, 0xb7, 0x45, 0x78, 0x15, 0xc4, 0xb1,
		0x2e, 0x0c, 0x64, 0x9a, 0x85, 0x54, 0xc8, 0x0e, 0x21, 0x9c, 0x3c, 0x13, 0x1f, 0x2d, 0xc7, 0xe2,
		0xc0, 0x82, 0xb3, 0xe7, 0x06, 0x00, 0x65, 0x86, 0xc7, 0x44, 0x0c, 0x71, 0xba, 0xf3, 0x52, 0xa2,
		0x59, 0xe8, 0x2b, 0xc8, 0x04, 0x6a, 0xee, 0x3f, 0xf5, 0x51, 0xff, 0x0b, 0x12, 0xcf, 0xbd, 0x7f,
		0x03, 0xcb, 0x7c, 0x12, 0x36, 0x89, 0xe1, 0xb1, 0x0b, 0x62, 0x30, 0xe1, 0x25, 0xfd, 0x51, 0x2f,
		0x4b, 0xbe, 0xd9, 0x7e, 0x60, 0xc5, 0x7d, 0xfd, 0x17, 0x52, 0x16, 0x61, 0x86, 0xdd, 0xa2, 0x85,
		0x79, 0x6e, 0xff, 0x20, 0xb2, 0xea, 0x27, 0x46, 0xbf, 0xe5, 0x1a, 0x16, 0x0e, 0xc0, 0x7e, 0x85,
		0x0d, 0xc6, 0x48, 0xbb, 0xc3, 0x0a, 0x20, 0x1a, 0x49, 0x2e, 0xd1, 0x6b, 0xc8, 0xf0, 0xec, 0xfc,
		0x26, 0xef, 0x7a, 0xa4, 0xb0, 0x30, 0xc3, 0xed, 0x9e, 0xc0, 0xe0, 0x05, 0xdf, 0x42, 0x2e, 0xd0,
		0xbf, 0x61, 0x85, 0x3b, 0xf0, 0x8f, 0x95, 0x78, 0xba, 0x6d, 0x11, 0x87, 0xd9, 0xac, 0x5f, 0xc8,
		0xf0, 0xde, 0x41, 0xbe, 0xee, 0x3d, 0x57, 0x69, 0x52, 0x83, 0x8e, 0x20, 0x27, 0xcf, 0x57, 0x97,
		0x04, 0x58, 0x58, 0xe4, 0x51, 0x9f, 0x4c, 0x21, 0x11, 0x79, 0xb1, 0x24, 0x91, 0xe2, 0x6c, 0x2f,
		0xb4, 0x2e, 0xfd, 0x18, 0x87, 0xd5, 0x29, 0x24, 0x8b, 0x56, 0x21, 0x15, 0x0c, 0x5e, 0x85, 0x9f,
		0x6b, 0x92, 0x89, 0x91, 0x1b, 0xea, 0xf3, 0xd8, 0xad, 0xfa, 0x3c, 0xfe, 0xb9, 0x7d, 0xfe, 0x3d,
		0xdc, 0x1d, 0xdb, 0xb8, 0x6e, 0x33, 0xd2, 0xf6, 0x87, 0xb4, 0xff, 0xd8, 0x7a, 0x7e, 0xab, 0xed,
		0x6b, 0x8c, 0xb4, 0xf1, 0x72, 0x6f, 0x42, 0x46, 0xd1, 0x2b, 0x48, 0x92, 0x1e, 0x71, 0x58, 0x30,
		0x83, 0x37, 0xa2, 0xa9, 0xd3, 0x60, 0xc6, 0x9b, 0x96, 0x7b, 0x81, 0x25, 0x18, 0xed, 0x42, 0xd6,
		0x21, 0x37, 0xba, 0xd7, 0x75, 0x74, 0x69, 0x9e, 0xbc, 0x8d, 0x79, 0xc6, 0x21, 0x37, 0xb8, 0xeb,
		0xd4, 0xb8, 0x49, 0xe9, 0x37, 0x05, 0x0a, 0xd3, 0x26, 0xcf, 0x6c, 0x4e, 0x89, 0x22, 0xe5, 0x58,
		0x34, 0x29, 0x7f, 0xee, 0x33, 0xa9, 0xf4, 0x93, 0x02, 0xcb, 0xe1, 0x2c, 0x1b, 0xee, 0x35, 0x71,
		0xfc, 0x04, 0x03, 0xa2, 0x15, 0x2f, 0xdf, 0x04, 0x4e, 0x4b, 0xa6, 0xa5, 0xe8, 0x5b, 0xc8, 0x8d,
		0x0d, 0x63, 0xc9, 0x78, 0x9f, 0x3a, 0x81, 0x71, 0x36, 0x3c, 0x7f, 0x4b, 0x7f, 0x84, 0x1f, 0xe4,
		0xfc, 0x31, 0xe8, 0x5c, 0xba, 0xff, 0x08, 0x07, 0xaf, 0x8f, 0xbe, 0x78, 0xe3, 0x9c, 0x23, 0x86,
		0xaf, 0xd8, 0x91, 0x5b, 0x34, 0x17, 0xba, 0x45, 0x23, 0xcc, 0x9d, 0x08, 0x33, 0xf7, 0x63, 0xc8,
		0x5e, 0xda, 0x1e, 0x65, 0xa2, 0xa7, 0x86, 0xbc, 0x9a, 0xe1, 0x52, 0xde, 0x35, 0x9a, 0x85, 0x4a,
		0xb0, 0xe8, 0x90, 0x0f, 0x23, 0xa0, 0x94, 0x20, 0x78, 0x5f, 0x18, 0x60, 0xc6, 0x67, 0x40, 0x7a,
		0x62, 0x06, 0xf8, 0xdd, 0x97, 0x1f, 0x2d, 0x24, 0x3f, 0xd4, 0xd1, 0xe9, 0xa9, 0x84, 0xa7, 0xe7,
		0x67, 0xfc, 0x39, 0x09, 0x4c, 0x3b, 0x9e, 0x6b, 0x12, 0x4a, 0xc3, 0xa6, 0xf1, 0xa1, 0xe9, 0x49,
		0xa0, 0x1f, 0x98, 0x96, 0xde, 0x42, 0x6e, 0xec, 0x59, 0x10, 0x1e, 0xe3, 0xca, 0xa7, 0x8c, 0x71,
		0x07, 0x56, 0xe4, 0xe5, 0xaf, 0x1e, 0x9c, 0xee, 0xba, 0x5d, 0x87, 0xd5, 0x1c, 0xe6, 0xf5, 0xd1,
		0x0a, 0x24, 0x4c, 0x7f, 0x25, 0xe9, 0x4e, 0x2c, 0x66, 0xbd, 0x24, 0x26, 0xdf, 0x22, 0xf1, 0x88,
		0xb7, 0xc8, 0xd6, 0x5f, 0x93, 0xbd, 0xca, 0x5b, 0xe3, 0x21, 0x6c, 0xe0, 0xda, 0xc9, 0x81, 0xb6,
		0xab, 0x36, 0xb4, 0xe3, 0x23, 0xbd, 0xa1, 0xd6, 0xdf, 0xea, 0x8d, 0xf3, 0x93, 0x9a, 0xae, 0x1d,
		0x9d, 0xa9, 0x07, 0x5a, 0x35, 0x7f, 0x07, 0x15, 0xe1, 0x41, 0x34, 0xa4, 0x7a, 0x7c, 0xa8, 0x6a,
		0x47, 0x79, 0x65, 0xba, 0x93, 0x7d, 0xad, 0xde, 0x38, 0xc6, 0xe7, 0xf9, 0x18, 0x7a, 0x01, 0xcf,
		0xa2, 0x21, 0xf5, 0xf3, 0xa3, 0x5d, 0xbd, 0xbe, 0xaf, 0xe2, 0xaa, 0x5e, 0x6f, 0xa8, 0x8d, 0x77,
		0xf5, 0x7c, 0x1c, 0x3d, 0x83, 0x47, 0x33, 0xc0, 0xea, 0x6e, 0x43, 0x3b, 0xd3, 0x1a, 0xe7, 0xf9,
		0x39, 0xb4, 0x05, 0x4f, 0x67, 0x06, 0xd6, 0x0f, 0x6b, 0x0d, 0xb5, 0xaa, 0x36, 0xd4, 0x7c, 0x02,
		0x3d, 0x86, 0xe2, 0x6c, 0xec, 0xd9, 0x4e, 0x3e, 0x89, 0x9e, 0xc3, 0x93, 0x68, 0xd4, 0x9e, 0xaa,
		0x1d, 0x1c, 0x9f, 0xd5, 0xb0, 0x7e, 0xa8, 0xe2, 0xb7, 0x35, 0x9c, 0x4f, 0x6d, 0xd9, 0x90, 0x1b,
		0x7b, 0x1e, 0xa3, 0x07, 0x50, 0x10, 0x45, 0xd1, 0x8f, 0x4f, 0x6a, 0x58, 0xb8, 0x18, 0x16, 0x72,
		0x1d, 0x56, 0x27, 0xb4, 0xbb, 0xb8, 0xa6, 0x36, 0x6a, 0x79, 0x25, 0x52, 0xf9, 0xee, 0xa4, 0xea,
		0x2b, 0x63, 0x5b, 0x47, 0x90, 0xaa, 0x1e, 0x9c, 0xf2, 0x03, 0x5b, 0x81, 0x7c, 0xf5, 0xe0, 0x74,
		0xfc, 0x8c, 0x0a, 0xb0, 0x32, 0x90, 0x8e, 0xe4, 0x9f, 0x57, 0xd0, 0x32, 0xe4, 0x06, 0x1a, 0x79,
		0x60, 0xb1, 0x37, 0xaf, 0xbe, 0x7b, 0x79, 0x65, 0xb3, 0x66, 0xf7, 0xa2, 0x6c, 0xba, 0xed, 0x4a,
		0xe8, 0xe3, 0x43, 0xf9, 0x8a, 0x38, 0xe2, 0x63, 0xc7, 0xe0, 0x3b, 0xc4, 0x97, 0xfc, 0x47, 0x6f,
		0xfb, 0x22, 0xc9, 0xe5, 0x2f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x76, 0x76, 0xd2, 0x54,
		0x11, 0x00, 0x00,
	},
	// uber/cadence/api/v1/domain.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xd1, 0x6e, 0xdb, 0x36,
		0x14, 0x9d, 0xec, 0x24, 0x73, 0xae, 0x1c, 0xd7, 0x65, 0x9a, 0x46, 0xf1, 0x86, 0x45, 0x4d, 0x51,
		0xc0, 0x2b, 0x30, 0x79, 0xf1, 0x86, 0xad, 0xdd, 0xb0, 0x07, 0xc7, 0x52, 0x3b, 0x0f, 0x59, 0x16,
		0xc8, 0x6e, 0x30, 0x6c, 0x0f, 0x02, 0x2d, 0xd1, 0x36, 0x51, 0x59, 0x14, 0x28, 0xda, 0x69, 0xde,
		0x86, 0x7d, 0xc4, 0x3e, 0x66, 0x8f, 0xfb, 0xb2, 0x41, 0x14, 0xa5, 0x38, 0xb6, 0x90, 0xf4, 0x8d,
		0xbc, 0xf7, 0x9e, 0xc3, 0xa3, 0xa3, 0x7b, 0x29, 0x81, 0xb9, 0x18, 0x13, 0xde, 0xf1, 0x71, 0x40,
		0x22, 0x9f, 0x74, 0x70, 0x4c, 0x3b, 0xcb, 0xd3, 0x4e, 0xc0, 0xe6, 0x98, 0x46, 0x56, 0xcc, 0x99,
		0x60, 0x68, 0x3f, 0xad, 0xb0, 0x54, 0x85, 0x85, 0x63, 0x6a, 0x2d, 0x4f, 0x5b, 0x5f, 0x4c, 0x19,
		0x9b, 0x86, 0xa4, 0x23, 0x4b, 0xc6, 0x8b, 0x49, 0x27, 0x58, 0x70, 0x2c, 0x28, 0x53, 0xa0, 0xd6,
		0xf1, 0x7a, 0x5e, 0xd0, 0x39, 0x49, 0x04, 0x9e, 0xc7, 0x59, 0xc1, 0xc9, 0x3f, 0x35, 0xd8, 0xb1,
		0xe5, 0x31, 0xa8, 0x01, 0x15, 0x1a, 0x18, 0x9a, 0xa9, 0xb5, 0x77, 0xdd, 0x0a, 0x0d, 0x10, 0x82,
		0xad, 0x08, 0xcf, 0x89, 0x51, 0x91, 0x11, 0xb9, 0x46, 0xaf, 0x61, 0x27, 0x11, 0x58, 0x2c, 0x12,
		0xa3, 0x6a, 0x6a, 0xed, 0x46, 0xf7, 0x99, 0x55, 0xa2, 0xca, 0xca, 0x08, 0x87, 0xb2, 0xd0, 0x55,
		0x00, 0x64, 0x82, 0x1e, 0x90, 0xc4, 0xe7, 0x34, 0x4e, 0xf5, 0x19, 0x5b, 0x92, 0x75, 0x35, 0x84,
		0x8e, 0x41, 0x67, 0xd7, 0x11, 0xe1, 0x1e, 0x99, 0x63, 0x1a, 0x1a, 0xdb, 0xb2, 0x02, 0x64, 0xc8,
		0x49, 0x23, 0xe8, 0x35, 0x6c, 0x05, 0x58, 0x60, 0x63, 0xc7, 0xac, 0xb6, 0xf5, 0xee, 0x8b, 0x7b,
		0xce, 0xb6, 0x6c, 0x2c, 0xb0, 0x13, 0x09, 0x7e, 0xe3, 0x4a, 0x08, 0x9a, 0xc1, 0xf3, 0x6b, 0xc6,
		0xdf, 0x4f, 0x42, 0x76, 0xed, 0x91, 0x0f, 0xc4, 0x5f, 0xa4, 0x27, 0x7a, 0x9c, 0x08, 0x12, 0xc9,
		0x55, 0x4c, 0x38, 0x65, 0x81, 0xf1, 0xa9, 0xa9, 0xb5, 0xf5, 0xee, 0x91, 0x95, 0xd9, 0x66, 0xe5,
		0xb6, 0x59, 0xb6, 0xb2, 0xd5, 0x35, 0x73, 0x16, 0x27, 0x27, 0x71, 0x73, 0x8e, 0x4b, 0x49, 0x81,
		0xfa, 0x50, 0x1f, 0xe3, 0xc0, 0x1b, 0xd3, 0x08, 0x73, 0x4a, 0x12, 0xa3, 0x26, 0x29, 0xcd, 0x52,
		0xb1, 0x67, 0x38, 0x38, 0x53, 0x75, 0xae, 0x3e, 0xbe, 0xdd, 0xa0, 0x3f, 0xe1, 0x70, 0x46, 0x13,
		0xc1, 0xf8, 0x8d, 0x87, 0xb9, 0x3f, 0xa3, 0x4b, 0x1c, 0x7a, 0xca, 0xf8, 0x5d, 0x69, 0xfc, 0xf3,
		0x52, 0xbe, 0x9e, 0xaa, 0x55, 0xd6, 0x1f, 0x28, 0x8e, 0xbb, 0x61, 0xf4, 0x35, 0x3c, 0xd9, 0x20,
		0x5f, 0x70, 0x6a, 0x80, 0x34, 0x1c, 0xad, 0x81, 0xde, 0x71, 0x8a, 0x30, 0xb4, 0x96, 0x34, 0xa1,
		0x63, 0x1a, 0x52, 0xb1, 0xa9, 0x48, 0xff, 0x78, 0x45, 0xc6, 0x2d, 0xcd, 0x9a, 0xa8, 0xef, 0xe0,
		0xb0, 0xec, 0x88, 0x54, 0x57, 0x5d, 0xea, 0x3a, 0xd8, 0x84, 0xa6, 0xd2, 0x2c, 0xd8, 0xc7, 0xbe,
		0xa0, 0x4b, 0xe2, 0xf9, 0xe1, 0x22, 0x11, 0x84, 0x7b, 0xb2, 0x69, 0xf7, 0x24, 0xe6, 0x71, 0x96,
		0xea, 0x67, 0x99, 0x8b, 0xb4, 0x83, 0x2f, 0xa1, 0xa6, 0x0a, 0x13, 0xa3, 0x21, 0xfb, 0xe8, 0xdb,
		0x52, 0xe1, 0x0a, 0xe3, 0x92, 0x38, 0xa4, 0xbe, 0x7c, 0xf7, 0x7d, 0x16, 0x4d, 0xe8, 0x34, 0x6f,
		0x84, 0x82, 0x05, 0x7d, 0x09, 0xcd, 0x09, 0xa6, 0x21, 0x5b, 0x12, 0xee, 0x2d, 0x09, 0x4f, 0xd2,
		0xee, 0x7e, 0x64, 0x6a, 0xed, 0xaa, 0xfb, 0x28, 0x8f, 0x5f, 0x65, 0x61, 0xd4, 0x86, 0x26, 0x4d,
		0xbc, 0x69, 0xc8, 0xc6, 0x38, 0xf4, 0xb2, 0xe9, 0x36, 0x9a, 0xa6, 0xd6, 0xae, 0xb9, 0x0d, 0x9a,
		0xbc, 0x95, 0x61, 0x35, 0x8c, 0x6f, 0x60, 0xaf, 0x20, 0xa5, 0xd1, 0x84, 0x19, 0x8f, 0x65, 0x1b,
		0x95, 0xcf, 0xdb, 0x1b, 0x55, 0x39, 0x88, 0x26, 0xcc, 0xad, 0x4f, 0x56, 0x76, 0xad, 0xef, 0x61,
		0xb7, 0x18, 0x05, 0xd4, 0x84, 0xea, 0x7b, 0x72, 0xa3, 0x46, 0x3c, 0x5d, 0xa2, 0x27, 0xb0, 0xbd,
		0xc4, 0xe1, 0x22, 0x1f, 0xf2, 0x6c, 0xf3, 0x43, 0xe5, 0x95, 0x76, 0x62, 0xc3, 0xf1, 0x03, 0x16,
		0xa0, 0x67, 0x50, 0xbf, 0xe3, 0x79, 0xc6, 0xab, 0xfb, 0xb7, 0x6e, 0x9f, 0xfc, 0xab, 0x81, 0xbe,
		0xd2, 0xe4, 0xe8, 0x17, 0xa8, 0x15, 0x83, 0xa1, 0x49, 0xf7, 0xad, 0x87, 0x06, 0xc3, 0xca, 0x17,
		0xd9, 0x38, 0x17, 0xf8, 0x96, 0x07, 0x7b, 0x77, 0x52, 0x25, 0x8f, 0xf7, 0x6a, 0xf5, 0xf1, 0xf4,
		0xee, 0xc9, 0xbd, 0x67, 0xdd, 0x48, 0xfb, 0x56, 0x2c, 0xf8, 0x5b, 0x83, 0xbd, 0x3b, 0x49, 0xf4,
		0x14, 0x76, 0x38, 0xc1, 0x09, 0x8b, 0xd4, 0x21, 0x6a, 0x87, 0x5a, 0x50, 0x63, 0x31, 0xe1, 0x58,
		0x30, 0xae, 0x9c, 0x2c, 0xf6, 0xe8, 0x27, 0xa8, 0xfb, 0x9c, 0x60, 0x41, 0x02, 0x2f, 0xbd, 0x7c,
		0xe5, 0xc5, 0xa9, 0x77, 0x5b, 0x1b, 0x57, 0xcc, 0x28, 0xbf, 0x99, 0x5d, 0x5d, 0xd5, 0xa7, 0x91,
		0x93, 0xff, 0x2a, 0x50, 0x5f, 0x7d, 0xbf, 0xa5, 0xed, 0xa6, 0x95, 0xb7, 0xdb, 0x08, 0x8c, 0xa2,
		0x34, 0x11, 0x98, 0x0b, 0xaf, 0xb8, 0xfe, 0x95, 0x23, 0xf7, 0xc9, 0x78, 0x9a, 0x63, 0x87, 0x29,
		0xb4, 0x88, 0xa3, 0x2b, 0x38, 0x2a, 0x58, 0xc9, 0x87, 0x98, 0x72, 0xb2, 0x42, 0xfb, 0xf0, 0xd3,
		0x1d, 0xe6, 0x60, 0x47, 0x62, 0x6f, 0x79, 0xbb, 0x70, 0xe0, 0xb3, 0x79, 0x1c, 0x92, 0xd4, 0xaa,
		0x64, 0x86, 0x79, 0xe0, 0xf9, 0x6c, 0x11, 0x09, 0xf9, 0xa9, 0xd8, 0x76, 0xf7, 0x8b, 0xe4, 0x30,
		0xcd, 0xf5, 0xd3, 0x14, 0x7a, 0x01, 0x8d, 0x98, 0x44, 0x01, 0x8d, 0xa6, 0x19, 0x22, 0x31, 0xb6,
		0xcd, 0x6a, 0x7b, 0xdb, 0xdd, 0x53, 0x51, 0x59, 0x9a, 0xbc, 0xfc, 0x4b, 0x83, 0xfa, 0xea, 0x47,
		0x09, 0x1d, 0xc1, 0x81, 0xfd, 0xdb, 0xaf, 0xbd, 0xc1, 0x85, 0x37, 0x1c, 0xf5, 0x46, 0xef, 0x86,
		0xde, 0xe0, 0xe2, 0xaa, 0x77, 0x3e, 0xb0, 0x9b, 0x9f, 0xa0, 0xcf, 0xc1, 0xb8, 0x9b, 0x72, 0x9d,
		0xb7, 0x83, 0xe1, 0xc8, 0x71, 0x1d, 0xbb, 0xa9, 0x6d, 0x66, 0x6d, 0xe7, 0xd2, 0x75, 0xfa, 0xbd,
		0x91, 0x63, 0x37, 0x2b, 0x9b, 0xb4, 0xb6, 0x73, 0xee, 0xa4, 0xa9, 0xea, 0xcb, 0x19, 0x34, 0xd6,
		0x6e, 0xbc, 0xcf, 0xe0, 0xb0, 0xe7, 0xf6, 0x7f, 0x1e, 0x5c, 0xf5, 0xce, 0x4b, 0x55, 0xac, 0x27,
		0xed, 0xc1, 0xb0, 0x77, 0x76, 0x2e, 0x55, 0x94, 0x40, 0x9d, 0x8b, 0x2c, 0x59, 0x39, 0xfb, 0x1d,
		0x0e, 0x7d, 0x36, 0x2f, 0x6b, 0xf5, 0xb3, 0x5a, 0x2f, 0xa6, 0x97, 0xe9, 0x2b, 0xb9, 0xd4, 0xfe,
		0x38, 0x9d, 0x52, 0x31, 0x5b, 0x8c, 0x2d, 0x9f, 0xcd, 0x3b, 0xab, 0x3f, 0x1f, 0x5f, 0xd1, 0x20,
		0xec, 0x4c, 0x59, 0xf6, 0xcb, 0xa0, 0xfe, 0x44, 0x7e, 0xc4, 0x31, 0x5d, 0x9e, 0x8e, 0x77, 0x64,
		0xec, 0x9b, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x98, 0xc3, 0x6b, 0x64, 0xad, 0x08, 0x00, 0x00,
	},
	// uber/cadence/shared/v1/history.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xfb, 0x30,
		0x18, 0xc7, 0xe9, 0x7e, 0xfc, 0x04, 0x33, 0xff, 0x51, 0x50, 0x46, 0x41, 0xd8, 0xa6, 0xc2, 0x4e,
		0x09, 0x9d, 0x88, 0x07, 0x4f, 0xfe, 0xc5, 0x79, 0x2c, 0xe2, 0xc1, 0x4b, 0x49, 0x93, 0xc7, 0x35,
		0xe0, 0x92, 0x92, 0xa4, 0xc1, 0xbd, 0x15, 0xdf, 0x82, 0x6f, 0x52, 0xd2, 0xd6, 0x8d, 0xb8, 0x8b,
		0xb7, 0x3e, 0x3c, 0x9f, 0xcf, 0x97, 0x6f, 0x9f, 0xa0, 0xd3, 0xba, 0x00, 0x4d, 0x18, 0xe5, 0x20,
		0x19, 0x10, 0x53, 0x52, 0x0d, 0x9c, 0xb8, 0x94, 0x94, 0xc2, 0x58, 0xa5, 0x97, 0xb8, 0xd2, 0xca,
		0xaa, 0xf8, 0xc8, 0x53, 0xb8, 0xa3, 0x70, 0x4b, 0x61, 0x97, 0x26, 0xa3, 0xc0, 0xa6, 0x95, 0xd8,
		0x50, 0x93, 0x93, 0x10, 0xe1, 0x0b, 0x21, 0x37, 0xa0, 0xf1, 0x57, 0x84, 0x0e, 0x9f, 0x35, 0x95,
		0x46, 0x80, 0xb4, 0x77, 0xc0, 0x84, 0x11, 0x4a, 0xce, 0xe4, 0x9b, 0x8a, 0x9f, 0xd0, 0xbe, 0x61,
		0x25, 0xf0, 0xfa, 0x1d, 0x78, 0x0e, 0x0e, 0xa4, 0x1d, 0x44, 0xc3, 0x68, 0xd2, 0x9f, 0x8e, 0x70,
		0xd0, 0x89, 0x56, 0x02, 0xbb, 0x14, 0x3f, 0xb6, 0xb1, 0xf7, 0x1e, 0xcc, 0xf6, 0x56, 0x66, 0x33,
		0xc7, 0x0f, 0x68, 0xd7, 0x58, 0xaa, 0xed, 0x2a, 0xa9, 0xf7, 0xd7, 0xa4, 0x9d, 0xce, 0x6b, 0xa6,
		0xf1, 0x67, 0x84, 0x0e, 0x5e, 0x40, 0xfb, 0x8e, 0x2d, 0x25, 0xc0, 0xc4, 0xd7, 0xe8, 0x98, 0xd5,
		0x5a, 0x83, 0xb4, 0xb9, 0x6b, 0x77, 0x79, 0xf7, 0x8f, 0xb9, 0x90, 0x1c, 0x3e, 0x9a, 0xda, 0xff,
		0xb3, 0xa4, 0x83, 0x02, 0x7f, 0x39, 0xf3, 0x44, 0x7c, 0x8b, 0xb6, 0xcb, 0x9f, 0xbc, 0x41, 0x6f,
		0xf8, 0x6f, 0xd2, 0x9f, 0x9e, 0xfd, 0xea, 0xe6, 0xcf, 0xe7, 0xdb, 0x85, 0x7a, 0xb6, 0xf6, 0x6e,
		0x2e, 0x5f, 0x2f, 0xe6, 0xc2, 0x96, 0x75, 0x81, 0x99, 0x5a, 0x90, 0xe0, 0xf8, 0x78, 0x0e, 0x92,
		0x34, 0x07, 0x5f, 0x3f, 0xf4, 0x55, 0xfb, 0xe5, 0xd2, 0x62, 0xab, 0xd9, 0x9c, 0x7f, 0x07, 0x00,
		0x00, 0xff, 0xff, 0xc6, 0xf4, 0xa6, 0x9c, 0x12, 0x02, 0x00, 0x00,
	},
	// uber/cadence/shared/v1/workflow.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x4d, 0x4a, 0x2d,
		0xd2, 0x4f, 0x4e, 0x4c, 0x49, 0xcd, 0x4b, 0x4e, 0xd5, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0xd1,
		0x2f, 0x33, 0xd4, 0x2f, 0xcf, 0x2f, 0xca, 0x4e, 0xcb, 0xc9, 0x2f, 0xd7, 0x2b, 0x28, 0xca, 0x2f,
		0xc9, 0x17, 0x12, 0x03, 0x29, 0xd3, 0x83, 0x2a, 0xd3, 0x83, 0x28, 0xd3, 0x2b, 0x33, 0xd4, 0xba,
		0xcc, 0xc8, 0xc5, 0x1b, 0x0e, 0x55, 0x1a, 0x5c, 0x92, 0x58, 0x92, 0x2a, 0x24, 0xc5, 0x25, 0x16,
		0xee, 0x1f, 0xe4, 0xed, 0xe6, 0xe3, 0x1f, 0x1e, 0x1f, 0x1c, 0xe2, 0x18, 0xe2, 0x1a, 0xef, 0xe9,
		0x17, 0xe6, 0xe8, 0xe3, 0xe9, 0x22, 0xc0, 0x80, 0x45, 0xce, 0x39, 0xc8, 0xd5, 0x31, 0xc4, 0xd5,
		0x45, 0x80, 0x11, 0x8b, 0x5c, 0x50, 0xa8, 0x9f, 0x9f, 0xa7, 0x9f, 0xbb, 0x00, 0x93, 0x90, 0x0c,
		0x97, 0x04, 0xba, 0x3e, 0x7f, 0xdf, 0x00, 0x1f, 0x57, 0x90, 0x4e, 0x66, 0x21, 0x49, 0x2e, 0x51,
		0x34, 0xd9, 0x28, 0x7f, 0x5f, 0x27, 0x4f, 0x57, 0x01, 0x16, 0x21, 0x71, 0x2e, 0x61, 0x34, 0xa9,
		0x30, 0x7f, 0x4f, 0x17, 0x01, 0x56, 0xac, 0x26, 0x06, 0x05, 0x85, 0x06, 0x80, 0x4c, 0x64, 0x73,
		0x32, 0x8f, 0x32, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x47, 0x09,
		0x21, 0xbd, 0xf4, 0xd4, 0x3c, 0x7d, 0x70, 0x98, 0x20, 0x02, 0xcb, 0x1a, 0xc2, 0x2a, 0x33, 0x4c,
		0x62, 0x03, 0xcb, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc3, 0x37, 0x89, 0x56, 0x01,
		0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) HistoryAPIYARPCClient {
			return NewHistoryAPIYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
