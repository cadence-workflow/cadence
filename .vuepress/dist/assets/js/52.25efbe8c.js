(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{378:function(t,e,n){"use strict";n.r(e);var o=n(8),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"continue-as-new"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#continue-as-new"}},[t._v("#")]),t._v(" Continue as new")]),t._v(" "),n("p",[t._v(":workflow:Workflows: that need to rerun periodically could naively be implemented as a big "),n("strong",[t._v("for")]),t._v(" loop with\na sleep where the entire logic of the :workflow: is inside the body of the "),n("strong",[t._v("for")]),t._v(" loop. The problem\nwith this approach is that the history for that :workflow: will keep growing to a point where it\nreaches the maximum size enforced by the service.")]),t._v(" "),n("p",[n("strong",[t._v("ContinueAsNew")]),t._v(" is the low level construct that enables implementing such :workflow:workflows: without the\nrisk of failures down the road. The operation atomically completes the current execution and starts\na new execution of the :workflow: with the same "),n("strong",[t._v(":workflow_ID:")]),t._v(". The new execution will not carry\nover any history from the old execution. To trigger this behavior, the :workflow: function should\nterminate by returning the special "),n("strong",[t._v("ContinueAsNewError")]),t._v(" error:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleWorkflow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" workflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewContinueAsNewError")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SimpleWorkflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);