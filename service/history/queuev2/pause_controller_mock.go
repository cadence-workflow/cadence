// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/service/history/queuev2 (interfaces: PauseController)
//
// Generated by this command:
//
//	mockgen -package queuev2 -destination pause_controller_mock.go github.com/uber/cadence/service/history/queuev2 PauseController
//

// Package queuev2 is a generated GoMock package.
package queuev2

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockPauseController is a mock of PauseController interface.
type MockPauseController struct {
	ctrl     *gomock.Controller
	recorder *MockPauseControllerMockRecorder
	isgomock struct{}
}

// MockPauseControllerMockRecorder is the mock recorder for MockPauseController.
type MockPauseControllerMockRecorder struct {
	mock *MockPauseController
}

// NewMockPauseController creates a new mock instance.
func NewMockPauseController(ctrl *gomock.Controller) *MockPauseController {
	mock := &MockPauseController{ctrl: ctrl}
	mock.recorder = &MockPauseControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPauseController) EXPECT() *MockPauseControllerMockRecorder {
	return m.recorder
}

// IsPaused mocks base method.
func (m *MockPauseController) IsPaused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPaused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPaused indicates an expected call of IsPaused.
func (mr *MockPauseControllerMockRecorder) IsPaused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPaused", reflect.TypeOf((*MockPauseController)(nil).IsPaused))
}

// Pause mocks base method.
func (m *MockPauseController) Pause(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pause", arg0)
}

// Pause indicates an expected call of Pause.
func (mr *MockPauseControllerMockRecorder) Pause(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPauseController)(nil).Pause), arg0)
}

// Resume mocks base method.
func (m *MockPauseController) Resume() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resume")
}

// Resume indicates an expected call of Resume.
func (mr *MockPauseControllerMockRecorder) Resume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockPauseController)(nil).Resume))
}

// Stop mocks base method.
func (m *MockPauseController) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockPauseControllerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPauseController)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockPauseController) Subscribe(arg0 string, arg1 chan<- struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPauseControllerMockRecorder) Subscribe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPauseController)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockPauseController) Unsubscribe(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockPauseControllerMockRecorder) Unsubscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPauseController)(nil).Unsubscribe), arg0)
}
