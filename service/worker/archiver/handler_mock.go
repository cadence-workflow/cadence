// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/service/worker/archiver (interfaces: Handler)
//
// Generated by this command:
//
//	mockgen -package=archiver -destination=handler_mock.go github.com/uber/cadence/service/worker/archiver Handler
//

// Package archiver is a generated GoMock package.
package archiver

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Finished mocks base method.
func (m *MockHandler) Finished() []uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished")
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// Finished indicates an expected call of Finished.
func (mr *MockHandlerMockRecorder) Finished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockHandler)(nil).Finished))
}

// Start mocks base method.
func (m *MockHandler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockHandlerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHandler)(nil).Start))
}
