// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/client/matching (interfaces: PeerResolver)

// Package matching is a generated GoMock package.
package matching

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPeerResolver is a mock of PeerResolver interface.
type MockPeerResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPeerResolverMockRecorder
}

// MockPeerResolverMockRecorder is the mock recorder for MockPeerResolver.
type MockPeerResolverMockRecorder struct {
	mock *MockPeerResolver
}

// NewMockPeerResolver creates a new mock instance.
func NewMockPeerResolver(ctrl *gomock.Controller) *MockPeerResolver {
	mock := &MockPeerResolver{ctrl: ctrl}
	mock.recorder = &MockPeerResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerResolver) EXPECT() *MockPeerResolverMockRecorder {
	return m.recorder
}

// FromHostAddress mocks base method.
func (m *MockPeerResolver) FromHostAddress(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromHostAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromHostAddress indicates an expected call of FromHostAddress.
func (mr *MockPeerResolverMockRecorder) FromHostAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromHostAddress", reflect.TypeOf((*MockPeerResolver)(nil).FromHostAddress), arg0)
}

// FromTaskList mocks base method.
func (m *MockPeerResolver) FromTaskList(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromTaskList", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromTaskList indicates an expected call of FromTaskList.
func (mr *MockPeerResolverMockRecorder) FromTaskList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromTaskList", reflect.TypeOf((*MockPeerResolver)(nil).FromTaskList), arg0)
}

// GetAllPeers mocks base method.
func (m *MockPeerResolver) GetAllPeers() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPeers")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPeers indicates an expected call of GetAllPeers.
func (mr *MockPeerResolverMockRecorder) GetAllPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPeers", reflect.TypeOf((*MockPeerResolver)(nil).GetAllPeers))
}
