// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: isolationGroupDrains.go

// Package persistence is a generated GoMock package.
package persistence

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockGlobalIsolationGroupDrains is a mock of GlobalIsolationGroupDrains interface.
type MockGlobalIsolationGroupDrains struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalIsolationGroupDrainsMockRecorder
}

// MockGlobalIsolationGroupDrainsMockRecorder is the mock recorder for MockGlobalIsolationGroupDrains.
type MockGlobalIsolationGroupDrainsMockRecorder struct {
	mock *MockGlobalIsolationGroupDrains
}

// NewMockGlobalIsolationGroupDrains creates a new mock instance.
func NewMockGlobalIsolationGroupDrains(ctrl *gomock.Controller) *MockGlobalIsolationGroupDrains {
	mock := &MockGlobalIsolationGroupDrains{ctrl: ctrl}
	mock.recorder = &MockGlobalIsolationGroupDrainsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalIsolationGroupDrains) EXPECT() *MockGlobalIsolationGroupDrainsMockRecorder {
	return m.recorder
}

// GetClusterDrains mocks base method.
func (m *MockGlobalIsolationGroupDrains) GetClusterDrains(ctx context.Context) (types.IsolationGroupConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterDrains", ctx)
	ret0, _ := ret[0].(types.IsolationGroupConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterDrains indicates an expected call of GetClusterDrains.
func (mr *MockGlobalIsolationGroupDrainsMockRecorder) GetClusterDrains(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterDrains", reflect.TypeOf((*MockGlobalIsolationGroupDrains)(nil).GetClusterDrains), ctx)
}

// SetClusterDrains mocks base method.
func (m *MockGlobalIsolationGroupDrains) SetClusterDrains(ctx context.Context, partition types.IsolationGroupPartition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClusterDrains", ctx, partition)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClusterDrains indicates an expected call of SetClusterDrains.
func (mr *MockGlobalIsolationGroupDrainsMockRecorder) SetClusterDrains(ctx, partition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterDrains", reflect.TypeOf((*MockGlobalIsolationGroupDrains)(nil).SetClusterDrains), ctx, partition)
}
