package grpc

// Code generated by gowrap. DO NOT EDIT.
// template: ../../../templates/grpc.tmpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"

	sharddistributorv1 "github.com/uber/cadence/.gen/proto/sharddistributor/v1"
	"github.com/uber/cadence/common/types/mapper/proto"
	"github.com/uber/cadence/service/sharddistributor/handler"
)

type ExecutorGRPCExecutor struct {
	h handler.Executor
}

func NewExecutorGRPCExecutor(h handler.Executor) ExecutorGRPCExecutor {
	return ExecutorGRPCExecutor{h}
}

func (g ExecutorGRPCExecutor) Heartbeat(ctx context.Context, request *sharddistributorv1.HeartbeatRequest) (*sharddistributorv1.HeartbeatResponse, error) {
	response, err := g.h.Heartbeat(ctx, proto.ToShardDistributorExecutorHeartbeatRequest(request))
	return proto.FromShardDistributorExecutorHeartbeatResponse(response), proto.FromError(err)
}
