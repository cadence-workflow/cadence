package mocks

import "github.com/uber/cadence/.gen/go/matching"
import "github.com/uber/cadence/.gen/go/shared"
import "github.com/stretchr/testify/mock"

import "github.com/uber/tchannel-go/thrift"

// MatchingClient is an autogenerated mock type for the Client type
type MatchingClient struct {
	mock.Mock
}

// AddActivityTask provides a mock function with given fields: ctx, addRequest
func (_m *MatchingClient) AddActivityTask(ctx thrift.Context, addRequest *matching.AddActivityTaskRequest) error {
	ret := _m.Called(ctx, addRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(thrift.Context, *matching.AddActivityTaskRequest) error); ok {
		r0 = rf(ctx, addRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDecisionTask provides a mock function with given fields: ctx, addRequest
func (_m *MatchingClient) AddDecisionTask(ctx thrift.Context, addRequest *matching.AddDecisionTaskRequest) error {
	ret := _m.Called(ctx, addRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(thrift.Context, *matching.AddDecisionTaskRequest) error); ok {
		r0 = rf(ctx, addRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PollForActivityTask provides a mock function with given fields: ctx, pollRequest
func (_m *MatchingClient) PollForActivityTask(ctx thrift.Context, pollRequest *shared.PollForActivityTaskRequest) (*shared.PollForActivityTaskResponse, error) {
	ret := _m.Called(ctx, pollRequest)

	var r0 *shared.PollForActivityTaskResponse
	if rf, ok := ret.Get(0).(func(thrift.Context, *shared.PollForActivityTaskRequest) *shared.PollForActivityTaskResponse); ok {
		r0 = rf(ctx, pollRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.PollForActivityTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(thrift.Context, *shared.PollForActivityTaskRequest) error); ok {
		r1 = rf(ctx, pollRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollForDecisionTask provides a mock function with given fields: ctx, pollRequest
func (_m *MatchingClient) PollForDecisionTask(ctx thrift.Context, pollRequest *shared.PollForDecisionTaskRequest) (*shared.PollForDecisionTaskResponse, error) {
	ret := _m.Called(ctx, pollRequest)

	var r0 *shared.PollForDecisionTaskResponse
	if rf, ok := ret.Get(0).(func(thrift.Context, *shared.PollForDecisionTaskRequest) *shared.PollForDecisionTaskResponse); ok {
		r0 = rf(ctx, pollRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.PollForDecisionTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(thrift.Context, *shared.PollForDecisionTaskRequest) error); ok {
		r1 = rf(ctx, pollRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
