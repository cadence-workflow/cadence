// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/archiver"
	"github.com/uber/cadence/common/archiver/gcloud/connector"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Exist provides a mock function for the type Client
func (_mock *Client) Exist(ctx context.Context, URI archiver.URI, fileName string) (bool, error) {
	ret := _mock.Called(ctx, URI, fileName)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string) (bool, error)); ok {
		return returnFunc(ctx, URI, fileName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string) bool); ok {
		r0 = returnFunc(ctx, URI, fileName)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, archiver.URI, string) error); ok {
		r1 = returnFunc(ctx, URI, fileName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type Client_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - ctx context.Context
//   - URI archiver.URI
//   - fileName string
func (_e *Client_Expecter) Exist(ctx interface{}, URI interface{}, fileName interface{}) *Client_Exist_Call {
	return &Client_Exist_Call{Call: _e.mock.On("Exist", ctx, URI, fileName)}
}

func (_c *Client_Exist_Call) Run(run func(ctx context.Context, URI archiver.URI, fileName string)) *Client_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 archiver.URI
		if args[1] != nil {
			arg1 = args[1].(archiver.URI)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_Exist_Call) Return(b bool, err error) *Client_Exist_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Client_Exist_Call) RunAndReturn(run func(ctx context.Context, URI archiver.URI, fileName string) (bool, error)) *Client_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Client
func (_mock *Client) Get(ctx context.Context, URI archiver.URI, file string) ([]byte, error) {
	ret := _mock.Called(ctx, URI, file)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string) ([]byte, error)); ok {
		return returnFunc(ctx, URI, file)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string) []byte); ok {
		r0 = returnFunc(ctx, URI, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, archiver.URI, string) error); ok {
		r1 = returnFunc(ctx, URI, file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Client_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - URI archiver.URI
//   - file string
func (_e *Client_Expecter) Get(ctx interface{}, URI interface{}, file interface{}) *Client_Get_Call {
	return &Client_Get_Call{Call: _e.mock.On("Get", ctx, URI, file)}
}

func (_c *Client_Get_Call) Run(run func(ctx context.Context, URI archiver.URI, file string)) *Client_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 archiver.URI
		if args[1] != nil {
			arg1 = args[1].(archiver.URI)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_Get_Call) Return(bytes []byte, err error) *Client_Get_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *Client_Get_Call) RunAndReturn(run func(ctx context.Context, URI archiver.URI, file string) ([]byte, error)) *Client_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type Client
func (_mock *Client) Query(ctx context.Context, URI archiver.URI, fileNamePrefix string) ([]string, error) {
	ret := _mock.Called(ctx, URI, fileNamePrefix)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string) ([]string, error)); ok {
		return returnFunc(ctx, URI, fileNamePrefix)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string) []string); ok {
		r0 = returnFunc(ctx, URI, fileNamePrefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, archiver.URI, string) error); ok {
		r1 = returnFunc(ctx, URI, fileNamePrefix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Client_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - URI archiver.URI
//   - fileNamePrefix string
func (_e *Client_Expecter) Query(ctx interface{}, URI interface{}, fileNamePrefix interface{}) *Client_Query_Call {
	return &Client_Query_Call{Call: _e.mock.On("Query", ctx, URI, fileNamePrefix)}
}

func (_c *Client_Query_Call) Run(run func(ctx context.Context, URI archiver.URI, fileNamePrefix string)) *Client_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 archiver.URI
		if args[1] != nil {
			arg1 = args[1].(archiver.URI)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_Query_Call) Return(strings []string, err error) *Client_Query_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *Client_Query_Call) RunAndReturn(run func(ctx context.Context, URI archiver.URI, fileNamePrefix string) ([]string, error)) *Client_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryWithFilters provides a mock function for the type Client
func (_mock *Client) QueryWithFilters(ctx context.Context, URI archiver.URI, fileNamePrefix string, pageSize int, offset int, filters []connector.Precondition) ([]string, bool, int, error) {
	ret := _mock.Called(ctx, URI, fileNamePrefix, pageSize, offset, filters)

	if len(ret) == 0 {
		panic("no return value specified for QueryWithFilters")
	}

	var r0 []string
	var r1 bool
	var r2 int
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) ([]string, bool, int, error)); ok {
		return returnFunc(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) []string); ok {
		r0 = returnFunc(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) bool); ok {
		r1 = returnFunc(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) int); ok {
		r2 = returnFunc(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	} else {
		r2 = ret.Get(2).(int)
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) error); ok {
		r3 = returnFunc(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// Client_QueryWithFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWithFilters'
type Client_QueryWithFilters_Call struct {
	*mock.Call
}

// QueryWithFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - URI archiver.URI
//   - fileNamePrefix string
//   - pageSize int
//   - offset int
//   - filters []connector.Precondition
func (_e *Client_Expecter) QueryWithFilters(ctx interface{}, URI interface{}, fileNamePrefix interface{}, pageSize interface{}, offset interface{}, filters interface{}) *Client_QueryWithFilters_Call {
	return &Client_QueryWithFilters_Call{Call: _e.mock.On("QueryWithFilters", ctx, URI, fileNamePrefix, pageSize, offset, filters)}
}

func (_c *Client_QueryWithFilters_Call) Run(run func(ctx context.Context, URI archiver.URI, fileNamePrefix string, pageSize int, offset int, filters []connector.Precondition)) *Client_QueryWithFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 archiver.URI
		if args[1] != nil {
			arg1 = args[1].(archiver.URI)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		var arg5 []connector.Precondition
		if args[5] != nil {
			arg5 = args[5].([]connector.Precondition)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *Client_QueryWithFilters_Call) Return(strings []string, b bool, n int, err error) *Client_QueryWithFilters_Call {
	_c.Call.Return(strings, b, n, err)
	return _c
}

func (_c *Client_QueryWithFilters_Call) RunAndReturn(run func(ctx context.Context, URI archiver.URI, fileNamePrefix string, pageSize int, offset int, filters []connector.Precondition) ([]string, bool, int, error)) *Client_QueryWithFilters_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function for the type Client
func (_mock *Client) Upload(ctx context.Context, URI archiver.URI, fileName string, file []byte) error {
	ret := _mock.Called(ctx, URI, fileName, file)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, archiver.URI, string, []byte) error); ok {
		r0 = returnFunc(ctx, URI, fileName, file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type Client_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - URI archiver.URI
//   - fileName string
//   - file []byte
func (_e *Client_Expecter) Upload(ctx interface{}, URI interface{}, fileName interface{}, file interface{}) *Client_Upload_Call {
	return &Client_Upload_Call{Call: _e.mock.On("Upload", ctx, URI, fileName, file)}
}

func (_c *Client_Upload_Call) Run(run func(ctx context.Context, URI archiver.URI, fileName string, file []byte)) *Client_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 archiver.URI
		if args[1] != nil {
			arg1 = args[1].(archiver.URI)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Client_Upload_Call) Return(err error) *Client_Upload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_Upload_Call) RunAndReturn(run func(ctx context.Context, URI archiver.URI, fileName string, file []byte) error) *Client_Upload_Call {
	_c.Call.Return(run)
	return _c
}
