// Code generated by mockery v2.32.0. DO NOT EDIT.

package log

import (
	mock "github.com/stretchr/testify/mock"

	tag "github.com/uber/cadence/common/log/tag"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg, tags
func (_m *MockLogger) Debug(msg string, tags ...tag.Tag) {
	_m.Called(msg, tags)
}

// DebugOn provides a mock function with given fields:
func (_m *MockLogger) DebugOn() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Debugf provides a mock function with given fields: msg, args
func (_m *MockLogger) Debugf(msg string, args ...interface{}) {
	_m.Called(msg, args)
}

// Error provides a mock function with given fields: msg, tags
func (_m *MockLogger) Error(msg string, tags ...tag.Tag) {
	_m.Called(msg, tags)
}

// Fatal provides a mock function with given fields: msg, tags
func (_m *MockLogger) Fatal(msg string, tags ...tag.Tag) {
	_m.Called(msg, tags)
}

// Helper provides a mock function with given fields:
func (_m *MockLogger) Helper() Logger {
	ret := _m.Called()

	var r0 Logger
	if rf, ok := ret.Get(0).(func() Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// Info provides a mock function with given fields: msg, tags
func (_m *MockLogger) Info(msg string, tags ...tag.Tag) {
	_m.Called(msg, tags)
}

// SampleInfo provides a mock function with given fields: msg, sampleRate, tags
func (_m *MockLogger) SampleInfo(msg string, sampleRate int, tags ...tag.Tag) {
	_m.Called(msg, sampleRate, tags)
}

// Warn provides a mock function with given fields: msg, tags
func (_m *MockLogger) Warn(msg string, tags ...tag.Tag) {
	_m.Called(msg, tags)
}

// WithTags provides a mock function with given fields: tags
func (_m *MockLogger) WithTags(tags ...tag.Tag) Logger {
	ret := _m.Called(tags)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(...tag.Tag) Logger); ok {
		r0 = rf(tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
