// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/shared/v1/replication.proto

package sharedv1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "github.com/uber/cadence/.gen/proto/api/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReplicationTaskType int32

const (
	REPLICATION_TASK_TYPE_INVALID           ReplicationTaskType = 0
	REPLICATION_TASK_TYPE_DOMAIN            ReplicationTaskType = 1
	REPLICATION_TASK_TYPE_HISTORY           ReplicationTaskType = 2
	REPLICATION_TASK_TYPE_SYNC_SHARD_STATUS ReplicationTaskType = 3
	REPLICATION_TASK_TYPE_SYNC_ACTIVITY     ReplicationTaskType = 4
	REPLICATION_TASK_TYPE_HISTORY_METADATA  ReplicationTaskType = 5
	REPLICATION_TASK_TYPE_HISTORY_V2        ReplicationTaskType = 6
	REPLICATION_TASK_TYPE_FAILOVER_MARKER   ReplicationTaskType = 7
)

var ReplicationTaskType_name = map[int32]string{
	0: "REPLICATION_TASK_TYPE_INVALID",
	1: "REPLICATION_TASK_TYPE_DOMAIN",
	2: "REPLICATION_TASK_TYPE_HISTORY",
	3: "REPLICATION_TASK_TYPE_SYNC_SHARD_STATUS",
	4: "REPLICATION_TASK_TYPE_SYNC_ACTIVITY",
	5: "REPLICATION_TASK_TYPE_HISTORY_METADATA",
	6: "REPLICATION_TASK_TYPE_HISTORY_V2",
	7: "REPLICATION_TASK_TYPE_FAILOVER_MARKER",
}

var ReplicationTaskType_value = map[string]int32{
	"REPLICATION_TASK_TYPE_INVALID":           0,
	"REPLICATION_TASK_TYPE_DOMAIN":            1,
	"REPLICATION_TASK_TYPE_HISTORY":           2,
	"REPLICATION_TASK_TYPE_SYNC_SHARD_STATUS": 3,
	"REPLICATION_TASK_TYPE_SYNC_ACTIVITY":     4,
	"REPLICATION_TASK_TYPE_HISTORY_METADATA":  5,
	"REPLICATION_TASK_TYPE_HISTORY_V2":        6,
	"REPLICATION_TASK_TYPE_FAILOVER_MARKER":   7,
}

func (ReplicationTaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{0}
}

type DomainOperation int32

const (
	DOMAIN_OPERATION_INVALID DomainOperation = 0
	DOMAIN_OPERATION_CREATE  DomainOperation = 1
	DOMAIN_OPERATION_UPDATE  DomainOperation = 2
)

var DomainOperation_name = map[int32]string{
	0: "DOMAIN_OPERATION_INVALID",
	1: "DOMAIN_OPERATION_CREATE",
	2: "DOMAIN_OPERATION_UPDATE",
}

var DomainOperation_value = map[string]int32{
	"DOMAIN_OPERATION_INVALID": 0,
	"DOMAIN_OPERATION_CREATE":  1,
	"DOMAIN_OPERATION_UPDATE":  2,
}

func (DomainOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{1}
}

type DLQType int32

const (
	DLQ_TYPE_INVALID     DLQType = 0
	DLQ_TYPE_REPLICATION DLQType = 1
	DLQ_TYPE_DOMAIN      DLQType = 2
)

var DLQType_name = map[int32]string{
	0: "DLQ_TYPE_INVALID",
	1: "DLQ_TYPE_REPLICATION",
	2: "DLQ_TYPE_DOMAIN",
}

var DLQType_value = map[string]int32{
	"DLQ_TYPE_INVALID":     0,
	"DLQ_TYPE_REPLICATION": 1,
	"DLQ_TYPE_DOMAIN":      2,
}

func (DLQType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{2}
}

type ReplicationMessages struct {
	ReplicationTasks []*ReplicationTask `protobuf:"bytes,1,rep,name=replication_tasks,json=replicationTasks,proto3" json:"replication_tasks,omitempty"`
	// This can be different than the last taskId in the above list,
	//because sender can decide to skip tasks (e.g. for completed workflows).
	LastRetrievedMessageId int64 `protobuf:"varint,2,opt,name=last_retrieved_message_id,json=lastRetrievedMessageId,proto3" json:"last_retrieved_message_id,omitempty"`
	// Hint for flow control.
	HasMore         bool             `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	SyncShardStatus *SyncShardStatus `protobuf:"bytes,4,opt,name=sync_shard_status,json=syncShardStatus,proto3" json:"sync_shard_status,omitempty"`
}

func (m *ReplicationMessages) Reset()      { *m = ReplicationMessages{} }
func (*ReplicationMessages) ProtoMessage() {}
func (*ReplicationMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{0}
}
func (m *ReplicationMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationMessages.Merge(m, src)
}
func (m *ReplicationMessages) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationMessages proto.InternalMessageInfo

func (m *ReplicationMessages) GetReplicationTasks() []*ReplicationTask {
	if m != nil {
		return m.ReplicationTasks
	}
	return nil
}

func (m *ReplicationMessages) GetLastRetrievedMessageId() int64 {
	if m != nil {
		return m.LastRetrievedMessageId
	}
	return 0
}

func (m *ReplicationMessages) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ReplicationMessages) GetSyncShardStatus() *SyncShardStatus {
	if m != nil {
		return m.SyncShardStatus
	}
	return nil
}

type ReplicationTask struct {
	TaskType     ReplicationTaskType  `protobuf:"varint,1,opt,name=task_type,json=taskType,proto3,enum=uber.cadence.shared.v1.ReplicationTaskType" json:"task_type,omitempty"`
	SourceTaskId int64                `protobuf:"varint,2,opt,name=source_task_id,json=sourceTaskId,proto3" json:"source_task_id,omitempty"`
	CreationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Types that are valid to be assigned to Attributes:
	//	*ReplicationTask_DomainTaskAttributes
	//	*ReplicationTask_SyncShardStatusTaskAttributes
	//	*ReplicationTask_SyncActivityTaskAttributes
	//	*ReplicationTask_HistoryTaskV2Attributes
	//	*ReplicationTask_FailoverMarkerAttributes
	Attributes isReplicationTask_Attributes `protobuf_oneof:"attributes"`
}

func (m *ReplicationTask) Reset()      { *m = ReplicationTask{} }
func (*ReplicationTask) ProtoMessage() {}
func (*ReplicationTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{1}
}
func (m *ReplicationTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationTask.Merge(m, src)
}
func (m *ReplicationTask) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationTask.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationTask proto.InternalMessageInfo

type isReplicationTask_Attributes interface {
	isReplicationTask_Attributes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplicationTask_DomainTaskAttributes struct {
	DomainTaskAttributes *DomainTaskAttributes `protobuf:"bytes,4,opt,name=domain_task_attributes,json=domainTaskAttributes,proto3,oneof" json:"domain_task_attributes,omitempty"`
}
type ReplicationTask_SyncShardStatusTaskAttributes struct {
	SyncShardStatusTaskAttributes *SyncShardStatusTaskAttributes `protobuf:"bytes,5,opt,name=sync_shard_status_task_attributes,json=syncShardStatusTaskAttributes,proto3,oneof" json:"sync_shard_status_task_attributes,omitempty"`
}
type ReplicationTask_SyncActivityTaskAttributes struct {
	SyncActivityTaskAttributes *SyncActivityTaskAttributes `protobuf:"bytes,6,opt,name=sync_activity_task_attributes,json=syncActivityTaskAttributes,proto3,oneof" json:"sync_activity_task_attributes,omitempty"`
}
type ReplicationTask_HistoryTaskV2Attributes struct {
	HistoryTaskV2Attributes *HistoryTaskV2Attributes `protobuf:"bytes,7,opt,name=history_task_v2_attributes,json=historyTaskV2Attributes,proto3,oneof" json:"history_task_v2_attributes,omitempty"`
}
type ReplicationTask_FailoverMarkerAttributes struct {
	FailoverMarkerAttributes *FailoverMarkerAttributes `protobuf:"bytes,8,opt,name=failover_marker_attributes,json=failoverMarkerAttributes,proto3,oneof" json:"failover_marker_attributes,omitempty"`
}

func (*ReplicationTask_DomainTaskAttributes) isReplicationTask_Attributes()          {}
func (*ReplicationTask_SyncShardStatusTaskAttributes) isReplicationTask_Attributes() {}
func (*ReplicationTask_SyncActivityTaskAttributes) isReplicationTask_Attributes()    {}
func (*ReplicationTask_HistoryTaskV2Attributes) isReplicationTask_Attributes()       {}
func (*ReplicationTask_FailoverMarkerAttributes) isReplicationTask_Attributes()      {}

func (m *ReplicationTask) GetAttributes() isReplicationTask_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ReplicationTask) GetTaskType() ReplicationTaskType {
	if m != nil {
		return m.TaskType
	}
	return REPLICATION_TASK_TYPE_INVALID
}

func (m *ReplicationTask) GetSourceTaskId() int64 {
	if m != nil {
		return m.SourceTaskId
	}
	return 0
}

func (m *ReplicationTask) GetCreationTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *ReplicationTask) GetDomainTaskAttributes() *DomainTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_DomainTaskAttributes); ok {
		return x.DomainTaskAttributes
	}
	return nil
}

func (m *ReplicationTask) GetSyncShardStatusTaskAttributes() *SyncShardStatusTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_SyncShardStatusTaskAttributes); ok {
		return x.SyncShardStatusTaskAttributes
	}
	return nil
}

func (m *ReplicationTask) GetSyncActivityTaskAttributes() *SyncActivityTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_SyncActivityTaskAttributes); ok {
		return x.SyncActivityTaskAttributes
	}
	return nil
}

func (m *ReplicationTask) GetHistoryTaskV2Attributes() *HistoryTaskV2Attributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_HistoryTaskV2Attributes); ok {
		return x.HistoryTaskV2Attributes
	}
	return nil
}

func (m *ReplicationTask) GetFailoverMarkerAttributes() *FailoverMarkerAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_FailoverMarkerAttributes); ok {
		return x.FailoverMarkerAttributes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplicationTask) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplicationTask_DomainTaskAttributes)(nil),
		(*ReplicationTask_SyncShardStatusTaskAttributes)(nil),
		(*ReplicationTask_SyncActivityTaskAttributes)(nil),
		(*ReplicationTask_HistoryTaskV2Attributes)(nil),
		(*ReplicationTask_FailoverMarkerAttributes)(nil),
	}
}

type DomainTaskAttributes struct {
	DomainOperation         DomainOperation                    `protobuf:"varint,1,opt,name=domain_operation,json=domainOperation,proto3,enum=uber.cadence.shared.v1.DomainOperation" json:"domain_operation,omitempty"`
	Id                      string                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Info                    *v1.DomainInfo                     `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Config                  *v1.DomainConfiguration            `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	ReplicationConfig       *v1.DomainReplicationConfiguration `protobuf:"bytes,5,opt,name=replication_config,json=replicationConfig,proto3" json:"replication_config,omitempty"`
	ConfigVersion           int64                              `protobuf:"varint,6,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	FailoverVersion         int64                              `protobuf:"varint,7,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	PreviousFailoverVersion int64                              `protobuf:"varint,8,opt,name=previous_failover_version,json=previousFailoverVersion,proto3" json:"previous_failover_version,omitempty"`
}

func (m *DomainTaskAttributes) Reset()      { *m = DomainTaskAttributes{} }
func (*DomainTaskAttributes) ProtoMessage() {}
func (*DomainTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{2}
}
func (m *DomainTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainTaskAttributes.Merge(m, src)
}
func (m *DomainTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *DomainTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DomainTaskAttributes proto.InternalMessageInfo

func (m *DomainTaskAttributes) GetDomainOperation() DomainOperation {
	if m != nil {
		return m.DomainOperation
	}
	return DOMAIN_OPERATION_INVALID
}

func (m *DomainTaskAttributes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DomainTaskAttributes) GetInfo() *v1.DomainInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DomainTaskAttributes) GetConfig() *v1.DomainConfiguration {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *DomainTaskAttributes) GetReplicationConfig() *v1.DomainReplicationConfiguration {
	if m != nil {
		return m.ReplicationConfig
	}
	return nil
}

func (m *DomainTaskAttributes) GetConfigVersion() int64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *DomainTaskAttributes) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *DomainTaskAttributes) GetPreviousFailoverVersion() int64 {
	if m != nil {
		return m.PreviousFailoverVersion
	}
	return 0
}

type SyncShardStatusTaskAttributes struct {
	SourceCluster string               `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	ShardId       int32                `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Timestamp     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *SyncShardStatusTaskAttributes) Reset()      { *m = SyncShardStatusTaskAttributes{} }
func (*SyncShardStatusTaskAttributes) ProtoMessage() {}
func (*SyncShardStatusTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{3}
}
func (m *SyncShardStatusTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncShardStatusTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncShardStatusTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncShardStatusTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncShardStatusTaskAttributes.Merge(m, src)
}
func (m *SyncShardStatusTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SyncShardStatusTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncShardStatusTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SyncShardStatusTaskAttributes proto.InternalMessageInfo

func (m *SyncShardStatusTaskAttributes) GetSourceCluster() string {
	if m != nil {
		return m.SourceCluster
	}
	return ""
}

func (m *SyncShardStatusTaskAttributes) GetShardId() int32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *SyncShardStatusTaskAttributes) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type SyncActivityTaskAttributes struct {
	DomainId           string                `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowExecution  *v1.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Version            int64                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ScheduledId        int64                 `protobuf:"varint,4,opt,name=scheduled_id,json=scheduledId,proto3" json:"scheduled_id,omitempty"`
	ScheduledTime      *timestamp.Timestamp  `protobuf:"bytes,5,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedId          int64                 `protobuf:"varint,6,opt,name=started_id,json=startedId,proto3" json:"started_id,omitempty"`
	StartedTime        *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	LastHeartbeatTime  *timestamp.Timestamp  `protobuf:"bytes,8,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
	Details            *v1.Payload           `protobuf:"bytes,9,opt,name=details,proto3" json:"details,omitempty"`
	Attempt            int32                 `protobuf:"varint,10,opt,name=attempt,proto3" json:"attempt,omitempty"`
	LastFailure        *v1.Failure           `protobuf:"bytes,11,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
	LastWorkerIdentity string                `protobuf:"bytes,12,opt,name=last_worker_identity,json=lastWorkerIdentity,proto3" json:"last_worker_identity,omitempty"`
	VersionHistory     *VersionHistory       `protobuf:"bytes,13,opt,name=version_history,json=versionHistory,proto3" json:"version_history,omitempty"`
}

func (m *SyncActivityTaskAttributes) Reset()      { *m = SyncActivityTaskAttributes{} }
func (*SyncActivityTaskAttributes) ProtoMessage() {}
func (*SyncActivityTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{4}
}
func (m *SyncActivityTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncActivityTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncActivityTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncActivityTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncActivityTaskAttributes.Merge(m, src)
}
func (m *SyncActivityTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SyncActivityTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncActivityTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SyncActivityTaskAttributes proto.InternalMessageInfo

func (m *SyncActivityTaskAttributes) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *SyncActivityTaskAttributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SyncActivityTaskAttributes) GetScheduledId() int64 {
	if m != nil {
		return m.ScheduledId
	}
	return 0
}

func (m *SyncActivityTaskAttributes) GetScheduledTime() *timestamp.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetStartedId() int64 {
	if m != nil {
		return m.StartedId
	}
	return 0
}

func (m *SyncActivityTaskAttributes) GetStartedTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetLastHeartbeatTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastHeartbeatTime
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetDetails() *v1.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *SyncActivityTaskAttributes) GetLastFailure() *v1.Failure {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetLastWorkerIdentity() string {
	if m != nil {
		return m.LastWorkerIdentity
	}
	return ""
}

func (m *SyncActivityTaskAttributes) GetVersionHistory() *VersionHistory {
	if m != nil {
		return m.VersionHistory
	}
	return nil
}

type HistoryTaskV2Attributes struct {
	TaskId              int64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	DomainId            string                `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowExecution   *v1.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	VersionHistoryItems []*VersionHistoryItem `protobuf:"bytes,4,rep,name=version_history_items,json=versionHistoryItems,proto3" json:"version_history_items,omitempty"`
	Events              *v1.DataBlob          `protobuf:"bytes,5,opt,name=events,proto3" json:"events,omitempty"`
	// New run events does not need version history since there is no prior events.
	NewRunEvents *v1.DataBlob `protobuf:"bytes,6,opt,name=new_run_events,json=newRunEvents,proto3" json:"new_run_events,omitempty"`
}

func (m *HistoryTaskV2Attributes) Reset()      { *m = HistoryTaskV2Attributes{} }
func (*HistoryTaskV2Attributes) ProtoMessage() {}
func (*HistoryTaskV2Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{5}
}
func (m *HistoryTaskV2Attributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryTaskV2Attributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryTaskV2Attributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryTaskV2Attributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryTaskV2Attributes.Merge(m, src)
}
func (m *HistoryTaskV2Attributes) XXX_Size() int {
	return m.Size()
}
func (m *HistoryTaskV2Attributes) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryTaskV2Attributes.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryTaskV2Attributes proto.InternalMessageInfo

func (m *HistoryTaskV2Attributes) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *HistoryTaskV2Attributes) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *HistoryTaskV2Attributes) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *HistoryTaskV2Attributes) GetVersionHistoryItems() []*VersionHistoryItem {
	if m != nil {
		return m.VersionHistoryItems
	}
	return nil
}

func (m *HistoryTaskV2Attributes) GetEvents() *v1.DataBlob {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *HistoryTaskV2Attributes) GetNewRunEvents() *v1.DataBlob {
	if m != nil {
		return m.NewRunEvents
	}
	return nil
}

type FailoverMarkerAttributes struct {
	DomainId        string               `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	FailoverVersion int64                `protobuf:"varint,2,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	CreationTime    *timestamp.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (m *FailoverMarkerAttributes) Reset()      { *m = FailoverMarkerAttributes{} }
func (*FailoverMarkerAttributes) ProtoMessage() {}
func (*FailoverMarkerAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{6}
}
func (m *FailoverMarkerAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailoverMarkerAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailoverMarkerAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailoverMarkerAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverMarkerAttributes.Merge(m, src)
}
func (m *FailoverMarkerAttributes) XXX_Size() int {
	return m.Size()
}
func (m *FailoverMarkerAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverMarkerAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverMarkerAttributes proto.InternalMessageInfo

func (m *FailoverMarkerAttributes) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *FailoverMarkerAttributes) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *FailoverMarkerAttributes) GetCreationTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

type FailoverMarkerToken struct {
	ShardIds       []int32                   `protobuf:"varint,1,rep,packed,name=shard_ids,json=shardIds,proto3" json:"shard_ids,omitempty"`
	FailoverMarker *FailoverMarkerAttributes `protobuf:"bytes,2,opt,name=failover_marker,json=failoverMarker,proto3" json:"failover_marker,omitempty"`
}

func (m *FailoverMarkerToken) Reset()      { *m = FailoverMarkerToken{} }
func (*FailoverMarkerToken) ProtoMessage() {}
func (*FailoverMarkerToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{7}
}
func (m *FailoverMarkerToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailoverMarkerToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailoverMarkerToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailoverMarkerToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverMarkerToken.Merge(m, src)
}
func (m *FailoverMarkerToken) XXX_Size() int {
	return m.Size()
}
func (m *FailoverMarkerToken) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverMarkerToken.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverMarkerToken proto.InternalMessageInfo

func (m *FailoverMarkerToken) GetShardIds() []int32 {
	if m != nil {
		return m.ShardIds
	}
	return nil
}

func (m *FailoverMarkerToken) GetFailoverMarker() *FailoverMarkerAttributes {
	if m != nil {
		return m.FailoverMarker
	}
	return nil
}

type ReplicationTaskInfo struct {
	DomainId          string                `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkflowExecution *v1.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	TaskType          int32                 `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	TaskId            int64                 `protobuf:"varint,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Version           int64                 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	FirstEventId      int64                 `protobuf:"varint,6,opt,name=first_event_id,json=firstEventId,proto3" json:"first_event_id,omitempty"`
	NextEventId       int64                 `protobuf:"varint,7,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	ScheduledId       int64                 `protobuf:"varint,8,opt,name=scheduled_id,json=scheduledId,proto3" json:"scheduled_id,omitempty"`
}

func (m *ReplicationTaskInfo) Reset()      { *m = ReplicationTaskInfo{} }
func (*ReplicationTaskInfo) ProtoMessage() {}
func (*ReplicationTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{8}
}
func (m *ReplicationTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationTaskInfo.Merge(m, src)
}
func (m *ReplicationTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationTaskInfo proto.InternalMessageInfo

func (m *ReplicationTaskInfo) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *ReplicationTaskInfo) GetWorkflowExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ReplicationTaskInfo) GetTaskType() int32 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *ReplicationTaskInfo) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReplicationTaskInfo) GetFirstEventId() int64 {
	if m != nil {
		return m.FirstEventId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetNextEventId() int64 {
	if m != nil {
		return m.NextEventId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetScheduledId() int64 {
	if m != nil {
		return m.ScheduledId
	}
	return 0
}

type ReplicationToken struct {
	ShardId int32 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	// lastRetrievedMessageId is where the next fetch should begin with.
	LastRetrievedMessageId int64 `protobuf:"varint,2,opt,name=last_retrieved_message_id,json=lastRetrievedMessageId,proto3" json:"last_retrieved_message_id,omitempty"`
	// lastProcessedMessageId is the last messageId that is processed on the passive side.
	// This can be different than lastRetrievedMessageId if passive side supports prefetching messages.
	LastProcessedMessageId int64 `protobuf:"varint,3,opt,name=last_processed_message_id,json=lastProcessedMessageId,proto3" json:"last_processed_message_id,omitempty"`
}

func (m *ReplicationToken) Reset()      { *m = ReplicationToken{} }
func (*ReplicationToken) ProtoMessage() {}
func (*ReplicationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{9}
}
func (m *ReplicationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationToken.Merge(m, src)
}
func (m *ReplicationToken) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationToken.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationToken proto.InternalMessageInfo

func (m *ReplicationToken) GetShardId() int32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *ReplicationToken) GetLastRetrievedMessageId() int64 {
	if m != nil {
		return m.LastRetrievedMessageId
	}
	return 0
}

func (m *ReplicationToken) GetLastProcessedMessageId() int64 {
	if m != nil {
		return m.LastProcessedMessageId
	}
	return 0
}

type SyncShardStatus struct {
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *SyncShardStatus) Reset()      { *m = SyncShardStatus{} }
func (*SyncShardStatus) ProtoMessage() {}
func (*SyncShardStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_00df2ec6c2eaefe5, []int{10}
}
func (m *SyncShardStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncShardStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncShardStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncShardStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncShardStatus.Merge(m, src)
}
func (m *SyncShardStatus) XXX_Size() int {
	return m.Size()
}
func (m *SyncShardStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncShardStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SyncShardStatus proto.InternalMessageInfo

func (m *SyncShardStatus) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterEnum("uber.cadence.shared.v1.ReplicationTaskType", ReplicationTaskType_name, ReplicationTaskType_value)
	proto.RegisterEnum("uber.cadence.shared.v1.DomainOperation", DomainOperation_name, DomainOperation_value)
	proto.RegisterEnum("uber.cadence.shared.v1.DLQType", DLQType_name, DLQType_value)
	proto.RegisterType((*ReplicationMessages)(nil), "uber.cadence.shared.v1.ReplicationMessages")
	proto.RegisterType((*ReplicationTask)(nil), "uber.cadence.shared.v1.ReplicationTask")
	proto.RegisterType((*DomainTaskAttributes)(nil), "uber.cadence.shared.v1.DomainTaskAttributes")
	proto.RegisterType((*SyncShardStatusTaskAttributes)(nil), "uber.cadence.shared.v1.SyncShardStatusTaskAttributes")
	proto.RegisterType((*SyncActivityTaskAttributes)(nil), "uber.cadence.shared.v1.SyncActivityTaskAttributes")
	proto.RegisterType((*HistoryTaskV2Attributes)(nil), "uber.cadence.shared.v1.HistoryTaskV2Attributes")
	proto.RegisterType((*FailoverMarkerAttributes)(nil), "uber.cadence.shared.v1.FailoverMarkerAttributes")
	proto.RegisterType((*FailoverMarkerToken)(nil), "uber.cadence.shared.v1.FailoverMarkerToken")
	proto.RegisterType((*ReplicationTaskInfo)(nil), "uber.cadence.shared.v1.ReplicationTaskInfo")
	proto.RegisterType((*ReplicationToken)(nil), "uber.cadence.shared.v1.ReplicationToken")
	proto.RegisterType((*SyncShardStatus)(nil), "uber.cadence.shared.v1.SyncShardStatus")
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/shared/v1/replication.proto", fileDescriptor_00df2ec6c2eaefe5)
}

var fileDescriptor_00df2ec6c2eaefe5 = []byte{
	// 1576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x53, 0x1b, 0xc7,
	0x12, 0xd7, 0x4a, 0x20, 0x89, 0x46, 0x48, 0x62, 0xe0, 0x19, 0x19, 0x1b, 0x59, 0xd6, 0xc3, 0x06,
	0xe3, 0x57, 0xc2, 0xc6, 0xe5, 0x57, 0xef, 0xa5, 0x2a, 0x71, 0xd6, 0x48, 0x14, 0x1b, 0xf3, 0xe5,
	0xd1, 0x1a, 0x17, 0x39, 0x64, 0x6b, 0xd1, 0x8e, 0x60, 0x0b, 0x69, 0x57, 0xb5, 0x3b, 0x12, 0xd6,
	0x2d, 0xc9, 0x3d, 0x55, 0xb9, 0x24, 0x97, 0x1c, 0x73, 0xc9, 0x5f, 0x92, 0xca, 0x91, 0xa3, 0x8f,
	0x31, 0x5c, 0x72, 0xf4, 0x9f, 0x90, 0xda, 0x99, 0x59, 0x49, 0xab, 0x2f, 0xe3, 0xf2, 0x21, 0x37,
	0x6d, 0xf7, 0xaf, 0x3f, 0xa6, 0xbb, 0xe7, 0x37, 0x2d, 0x58, 0x6d, 0x1e, 0x13, 0x67, 0xbd, 0xa2,
	0x1b, 0xc4, 0xaa, 0x90, 0x75, 0xf7, 0x54, 0x77, 0x88, 0xb1, 0xde, 0x7a, 0xbc, 0xee, 0x90, 0x46,
	0xcd, 0xac, 0xe8, 0xd4, 0xb4, 0xad, 0x42, 0xc3, 0xb1, 0xa9, 0x8d, 0x6e, 0x78, 0xc8, 0x82, 0x40,
	0x16, 0x38, 0xb2, 0xd0, 0x7a, 0xbc, 0x78, 0xe7, 0xc4, 0xb6, 0x4f, 0x6a, 0x64, 0x9d, 0xa1, 0x8e,
	0x9b, 0xd5, 0x75, 0x6a, 0xd6, 0x89, 0x4b, 0xf5, 0x7a, 0x83, 0x1b, 0x2e, 0xe6, 0x02, 0x21, 0xf4,
	0x86, 0xe9, 0xf9, 0xaf, 0xd8, 0xf5, 0xba, 0xef, 0x7a, 0x38, 0xc2, 0xb0, 0xeb, 0xba, 0xe9, 0x23,
	0x96, 0x47, 0xa4, 0x79, 0x6a, 0xba, 0xd4, 0x76, 0xda, 0x1c, 0x95, 0xff, 0x39, 0x0c, 0x73, 0xb8,
	0x9b, 0xf8, 0x2e, 0x71, 0x5d, 0xfd, 0x84, 0xb8, 0x48, 0x85, 0xd9, 0x9e, 0xf3, 0x68, 0x54, 0x77,
	0xcf, 0xdc, 0x8c, 0x94, 0x8b, 0xac, 0x4e, 0x6f, 0xac, 0x14, 0x86, 0x1f, 0xab, 0xd0, 0xe3, 0x47,
	0xd5, 0xdd, 0x33, 0x9c, 0x76, 0x82, 0x02, 0x17, 0xfd, 0x1f, 0x6e, 0xd6, 0x74, 0x97, 0x6a, 0x0e,
	0xa1, 0x8e, 0x49, 0x5a, 0xc4, 0xd0, 0xea, 0x3c, 0xa0, 0x66, 0x1a, 0x99, 0x70, 0x4e, 0x5a, 0x8d,
	0xe0, 0x1b, 0x1e, 0x00, 0xfb, 0x7a, 0x91, 0x8f, 0x62, 0xa0, 0x9b, 0x10, 0x3f, 0xd5, 0x5d, 0xad,
	0x6e, 0x3b, 0x24, 0x13, 0xc9, 0x49, 0xab, 0x71, 0x1c, 0x3b, 0xd5, 0xdd, 0x5d, 0xdb, 0x21, 0xa8,
	0x0c, 0xb3, 0x6e, 0xdb, 0xaa, 0x68, 0x5e, 0x26, 0x86, 0xe6, 0x52, 0x9d, 0x36, 0xdd, 0xcc, 0x44,
	0x4e, 0x1a, 0x97, 0x6b, 0xb9, 0x6d, 0x55, 0xca, 0x1e, 0xbe, 0xcc, 0xe0, 0x38, 0xe5, 0x06, 0x05,
	0xf9, 0x9f, 0xa2, 0x90, 0xea, 0x3b, 0x10, 0xda, 0x86, 0x29, 0xaf, 0x10, 0x1a, 0x6d, 0x37, 0x48,
	0x46, 0xca, 0x49, 0xab, 0xc9, 0x8d, 0x87, 0xd7, 0x2c, 0x86, 0xda, 0x6e, 0x10, 0x1c, 0xa7, 0xe2,
	0x17, 0x5a, 0x86, 0xa4, 0x6b, 0x37, 0x9d, 0x0a, 0x61, 0x95, 0xed, 0x9e, 0x3e, 0xc1, 0xa5, 0x9e,
	0x85, 0x62, 0xa0, 0x67, 0x30, 0x53, 0x71, 0x88, 0xe8, 0x80, 0x59, 0xe7, 0x07, 0x9f, 0xde, 0x58,
	0x2c, 0xf0, 0xf9, 0x29, 0xf8, 0xf3, 0x53, 0x50, 0xfd, 0xf9, 0xc1, 0x09, 0xdf, 0xc0, 0x13, 0x21,
	0x03, 0x6e, 0xf0, 0x99, 0xe0, 0x61, 0x74, 0x4a, 0x1d, 0xf3, 0xb8, 0x49, 0x89, 0x5f, 0x9e, 0xff,
	0x8c, 0xca, 0xbe, 0xc8, 0xac, 0xbc, 0x34, 0xe4, 0x8e, 0xcd, 0x76, 0x08, 0xcf, 0x1b, 0x43, 0xe4,
	0xe8, 0x3b, 0x09, 0xee, 0x0e, 0x34, 0x60, 0x20, 0xe2, 0x24, 0x8b, 0xf8, 0xf4, 0x9a, 0x0d, 0x19,
	0x08, 0xbd, 0xe4, 0x8e, 0x03, 0xa0, 0x73, 0x60, 0x00, 0x4d, 0xaf, 0x50, 0xb3, 0x65, 0xd2, 0xf6,
	0x40, 0xf8, 0x28, 0x0b, 0xbf, 0x31, 0x2e, 0xbc, 0x2c, 0x6c, 0x07, 0x62, 0x2f, 0xba, 0x23, 0xb5,
	0xc8, 0x82, 0x45, 0x71, 0xa3, 0x78, 0xc8, 0xd6, 0x46, 0x6f, 0xd4, 0x18, 0x8b, 0xba, 0x3e, 0x2a,
	0xea, 0x36, 0xb7, 0xf4, 0x5c, 0x1e, 0x6e, 0x04, 0x42, 0x2e, 0x9c, 0x0e, 0x57, 0xa1, 0x06, 0x2c,
	0x56, 0x75, 0xb3, 0x66, 0xb7, 0x88, 0xa3, 0xd5, 0x75, 0xe7, 0x8c, 0x38, 0xbd, 0xf1, 0xe2, 0x2c,
	0xde, 0xa3, 0x51, 0xf1, 0xb6, 0x84, 0xe5, 0x2e, 0x33, 0x0c, 0x04, 0xcc, 0x54, 0x47, 0xe8, 0x9e,
	0x27, 0x00, 0xba, 0x11, 0xf2, 0x57, 0x11, 0x98, 0x1f, 0x36, 0x1d, 0x08, 0x43, 0x5a, 0xcc, 0x9a,
	0xdd, 0x20, 0x0e, 0x9b, 0x41, 0x71, 0x47, 0x56, 0xc6, 0x4f, 0xd9, 0xbe, 0x0f, 0xc7, 0x29, 0x23,
	0x28, 0x40, 0x49, 0x08, 0x8b, 0xab, 0x31, 0x85, 0xc3, 0xa6, 0x81, 0x9e, 0xc0, 0x84, 0x69, 0x55,
	0x6d, 0x71, 0x0f, 0xee, 0x04, 0xfd, 0xea, 0x0d, 0xb3, 0xeb, 0x54, 0xb1, 0xaa, 0x36, 0x66, 0x60,
	0xf4, 0x25, 0x44, 0x2b, 0xb6, 0x55, 0x35, 0x4f, 0xc4, 0xd0, 0xaf, 0x8e, 0x31, 0xdb, 0x64, 0xc0,
	0xa6, 0xc8, 0x47, 0xd8, 0xa1, 0x63, 0x40, 0xbd, 0x64, 0x28, 0xbc, 0xf1, 0x81, 0x7e, 0x32, 0xc6,
	0x5b, 0x0f, 0x07, 0x04, 0x1d, 0xf7, 0x72, 0x2b, 0xd7, 0xa0, 0x7b, 0x90, 0xe4, 0x7e, 0xb5, 0x16,
	0x71, 0x5c, 0xaf, 0x78, 0x51, 0xc6, 0x08, 0x33, 0x5c, 0x7a, 0xc8, 0x85, 0xe8, 0x01, 0xa4, 0x3b,
	0xed, 0xf7, 0x81, 0x31, 0x06, 0x4c, 0xf9, 0x72, 0x1f, 0xfa, 0x19, 0xdc, 0x6c, 0x38, 0xa4, 0x65,
	0xda, 0x4d, 0x57, 0x1b, 0xb0, 0x89, 0x33, 0x9b, 0x05, 0x1f, 0xb0, 0x15, 0xb4, 0xcd, 0xff, 0x22,
	0xc1, 0xd2, 0xd8, 0x1b, 0xe9, 0xe5, 0x2b, 0x18, 0xac, 0x52, 0x6b, 0xba, 0x94, 0x38, 0xac, 0xd9,
	0x53, 0x78, 0x86, 0x4b, 0x37, 0xb9, 0xd0, 0xa3, 0x6d, 0xce, 0x0a, 0xa2, 0x8f, 0x93, 0x38, 0xc6,
	0xbe, 0x15, 0x03, 0xfd, 0x0f, 0xa6, 0x3a, 0xef, 0xde, 0x35, 0x98, 0xad, 0x0b, 0xce, 0x5f, 0x4c,
	0xc2, 0xe2, 0xe8, 0x0b, 0x8b, 0x6e, 0xc1, 0x94, 0x98, 0x44, 0xd3, 0x10, 0x59, 0xc5, 0xb9, 0x40,
	0x31, 0xd0, 0x2b, 0x40, 0xe7, 0xb6, 0x73, 0x56, 0xad, 0xd9, 0xe7, 0x1a, 0x79, 0x43, 0x2a, 0x4d,
	0x36, 0xa8, 0x61, 0x16, 0xfe, 0xfe, 0xd0, 0x5e, 0xbe, 0x16, 0xf0, 0x92, 0x8f, 0xc6, 0xb3, 0xe7,
	0xfd, 0x22, 0x94, 0x81, 0x98, 0x5f, 0xda, 0x08, 0x2b, 0xad, 0xff, 0x89, 0xee, 0x42, 0xc2, 0xad,
	0x9c, 0x12, 0xa3, 0x59, 0x23, 0xac, 0x0a, 0x13, 0x4c, 0x3d, 0xdd, 0x91, 0x29, 0x06, 0x92, 0x21,
	0xd9, 0x85, 0x30, 0xa2, 0x9f, 0xfc, 0x60, 0x39, 0x66, 0x3a, 0x16, 0x8c, 0xe9, 0x97, 0x00, 0x5c,
	0xaa, 0x3b, 0x94, 0xc7, 0xe0, 0xa3, 0x33, 0x25, 0x24, 0x8a, 0x81, 0x3e, 0x87, 0x84, 0xaf, 0x66,
	0xfe, 0x63, 0x1f, 0xf4, 0x3f, 0x2d, 0xf0, 0xcc, 0xfb, 0x57, 0x30, 0xc7, 0xde, 0xed, 0x53, 0xa2,
	0x3b, 0xf4, 0x98, 0xe8, 0x94, 0x7b, 0x89, 0x7f, 0xd0, 0xcb, 0xac, 0x67, 0xb6, 0xed, 0x5b, 0x31,
	0x5f, 0xff, 0x85, 0x98, 0x41, 0xa8, 0x6e, 0xd6, 0xdc, 0xcc, 0x14, 0xb3, 0xbf, 0x3d, 0xb4, 0xea,
	0x07, 0x7a, 0xbb, 0x66, 0xeb, 0x06, 0xf6, 0xc1, 0x5e, 0x85, 0x75, 0x4a, 0x49, 0xbd, 0x41, 0x33,
	0xc0, 0x07, 0x49, 0x7c, 0xa2, 0x67, 0x90, 0x60, 0xd9, 0x79, 0x43, 0xde, 0x74, 0x48, 0x66, 0x7a,
	0x8c, 0xdb, 0x2d, 0x8e, 0xc1, 0xd3, 0x9e, 0x85, 0xf8, 0x40, 0x8f, 0x60, 0x9e, 0x39, 0xf0, 0xda,
	0x4a, 0x1c, 0xcd, 0x34, 0x88, 0x45, 0x4d, 0xda, 0xce, 0x24, 0xd8, 0xec, 0x20, 0x4f, 0xf7, 0x9a,
	0xa9, 0x14, 0xa1, 0x41, 0xfb, 0x90, 0x12, 0xfd, 0xd5, 0x04, 0x51, 0x67, 0x66, 0x86, 0x8d, 0x50,
	0x97, 0xeb, 0xc4, 0xcd, 0x12, 0x8c, 0x8f, 0x93, 0xad, 0xc0, 0x77, 0xfe, 0xfb, 0x08, 0x2c, 0x8c,
	0x78, 0x0d, 0xd0, 0x02, 0xc4, 0xfc, 0x2d, 0x41, 0x62, 0x8d, 0x8d, 0x52, 0xbe, 0x1f, 0x04, 0x06,
	0x3d, 0x7c, 0xad, 0x41, 0x8f, 0x7c, 0xea, 0xa0, 0x7f, 0x03, 0xff, 0xea, 0x3b, 0xb9, 0x66, 0x52,
	0x52, 0xf7, 0x36, 0x0a, 0x6f, 0x39, 0x5c, 0xbb, 0xde, 0xf9, 0x15, 0x4a, 0xea, 0x78, 0xae, 0x35,
	0x20, 0x73, 0xd1, 0x53, 0x88, 0x92, 0x16, 0xb1, 0xa8, 0xbf, 0x30, 0x2c, 0x0d, 0xe7, 0x57, 0x9d,
	0xea, 0xcf, 0x6b, 0xf6, 0x31, 0x16, 0x60, 0xb4, 0x09, 0x49, 0x8b, 0x9c, 0x6b, 0x4e, 0xd3, 0xd2,
	0x84, 0x79, 0xf4, 0x3a, 0xe6, 0x09, 0x8b, 0x9c, 0xe3, 0xa6, 0x55, 0x62, 0x26, 0xf9, 0x5f, 0x25,
	0xc8, 0x8c, 0x7a, 0x22, 0xc7, 0xb3, 0xca, 0x30, 0x5a, 0x0e, 0x0f, 0xa7, 0xe5, 0x4f, 0x5d, 0xea,
	0xf2, 0x3f, 0x48, 0x30, 0x17, 0xcc, 0x52, 0xb5, 0xcf, 0x88, 0xe5, 0x25, 0xe8, 0x53, 0x2d, 0x5f,
	0xd5, 0x27, 0x71, 0x5c, 0x70, 0xad, 0x8b, 0x8e, 0x20, 0xd5, 0xb7, 0x36, 0x08, 0xce, 0xfb, 0xe8,
	0x5d, 0x01, 0x27, 0x83, 0x9b, 0x42, 0xfe, 0xf7, 0xe0, 0x5f, 0x08, 0xb6, 0xbb, 0x7a, 0xef, 0xee,
	0x3f, 0x41, 0xc3, 0xb7, 0x7a, 0x37, 0xf4, 0x08, 0xa3, 0x89, 0xee, 0xd2, 0xdd, 0x73, 0x8f, 0x26,
	0x02, 0xf7, 0xa8, 0x87, 0xbc, 0x27, 0x83, 0xe4, 0xbd, 0x0c, 0xc9, 0xaa, 0xe9, 0xb8, 0x94, 0x0f,
	0x55, 0x97, 0x5a, 0x13, 0x4c, 0xca, 0xc6, 0x46, 0x31, 0x50, 0x1e, 0x66, 0x2c, 0xf2, 0xa6, 0x07,
	0xc4, 0x5f, 0xe4, 0x69, 0x4f, 0xe8, 0x63, 0xfa, 0x9f, 0x81, 0xf8, 0xc0, 0x33, 0xe0, 0x8d, 0x5f,
	0xba, 0xb7, 0x90, 0xac, 0xab, 0xbd, 0x0f, 0xa8, 0x14, 0x7c, 0x40, 0x3f, 0xe1, 0xdf, 0x94, 0x6f,
	0xda, 0x70, 0xec, 0x0a, 0x71, 0xdd, 0xa0, 0x69, 0xa4, 0x6b, 0x7a, 0xe0, 0xeb, 0x3b, 0xa6, 0xf9,
	0x17, 0x90, 0xea, 0xdb, 0x0c, 0x82, 0x2f, 0xb9, 0xf4, 0x11, 0x2f, 0xf9, 0xda, 0xc5, 0xe0, 0xec,
	0xb0, 0x56, 0xdd, 0x85, 0x25, 0x5c, 0x3a, 0xd8, 0x51, 0x36, 0x65, 0x55, 0xd9, 0xdf, 0xd3, 0x54,
	0xb9, 0xfc, 0x42, 0x53, 0x8f, 0x0e, 0x4a, 0x9a, 0xb2, 0x77, 0x28, 0xef, 0x28, 0xc5, 0x74, 0x08,
	0xe5, 0xe0, 0xf6, 0x70, 0x48, 0x71, 0x7f, 0x57, 0x56, 0xf6, 0xd2, 0xd2, 0x68, 0x27, 0xdb, 0x4a,
	0x59, 0xdd, 0xc7, 0x47, 0xe9, 0x30, 0x7a, 0x08, 0x2b, 0xc3, 0x21, 0xe5, 0xa3, 0xbd, 0x4d, 0xad,
	0xbc, 0x2d, 0xe3, 0xa2, 0x56, 0x56, 0x65, 0xf5, 0x55, 0x39, 0x1d, 0x41, 0x2b, 0xf0, 0xef, 0x31,
	0x60, 0x79, 0x53, 0x55, 0x0e, 0x15, 0xf5, 0x28, 0x3d, 0x81, 0xd6, 0xe0, 0xfe, 0xd8, 0xc0, 0xda,
	0x6e, 0x49, 0x95, 0x8b, 0xb2, 0x2a, 0xa7, 0x27, 0xd1, 0x32, 0xe4, 0xc6, 0x63, 0x0f, 0x37, 0xd2,
	0x51, 0xf4, 0x00, 0xee, 0x0d, 0x47, 0x6d, 0xc9, 0xca, 0xce, 0xfe, 0x61, 0x09, 0x6b, 0xbb, 0x32,
	0x7e, 0x51, 0xc2, 0xe9, 0xd8, 0x9a, 0x09, 0xa9, 0xbe, 0xbd, 0x1a, 0xdd, 0x86, 0x0c, 0x2f, 0x8a,
	0xb6, 0x7f, 0x50, 0xc2, 0xdc, 0x45, 0xb7, 0x90, 0xb7, 0x60, 0x61, 0x40, 0xbb, 0x89, 0x4b, 0xb2,
	0x5a, 0x4a, 0x4b, 0x43, 0x95, 0xaf, 0x0e, 0x8a, 0x9e, 0x32, 0xbc, 0xb6, 0x07, 0xb1, 0xe2, 0xce,
	0x4b, 0xd6, 0xb0, 0x79, 0x48, 0x17, 0x77, 0x5e, 0xf6, 0xf7, 0x28, 0x03, 0xf3, 0x1d, 0x69, 0x4f,
	0xfe, 0x69, 0x09, 0xcd, 0x41, 0xaa, 0xa3, 0x11, 0x0d, 0x0b, 0x3f, 0xff, 0xe2, 0xe2, 0x5d, 0x36,
	0xf4, 0xf6, 0x5d, 0x36, 0xf4, 0xfe, 0x5d, 0x56, 0xfa, 0xf6, 0x32, 0x2b, 0xfd, 0x76, 0x99, 0x95,
	0xfe, 0xb8, 0xcc, 0x4a, 0x17, 0x97, 0x59, 0xe9, 0xcf, 0xcb, 0xac, 0xf4, 0xd7, 0x65, 0x36, 0xf4,
	0xfe, 0x32, 0x2b, 0xfd, 0x78, 0x95, 0x0d, 0x5d, 0x5c, 0x65, 0x43, 0x6f, 0xaf, 0xb2, 0xa1, 0xaf,
	0xe3, 0x9c, 0xb3, 0x5a, 0x8f, 0x8f, 0xa3, 0x6c, 0xd8, 0x9e, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xb1, 0xd6, 0x38, 0xc7, 0xa2, 0x11, 0x00, 0x00,
}

func (x ReplicationTaskType) String() string {
	s, ok := ReplicationTaskType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DomainOperation) String() string {
	s, ok := DomainOperation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DLQType) String() string {
	s, ok := DLQType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ReplicationMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationMessages)
	if !ok {
		that2, ok := that.(ReplicationMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ReplicationTasks) != len(that1.ReplicationTasks) {
		return false
	}
	for i := range this.ReplicationTasks {
		if !this.ReplicationTasks[i].Equal(that1.ReplicationTasks[i]) {
			return false
		}
	}
	if this.LastRetrievedMessageId != that1.LastRetrievedMessageId {
		return false
	}
	if this.HasMore != that1.HasMore {
		return false
	}
	if !this.SyncShardStatus.Equal(that1.SyncShardStatus) {
		return false
	}
	return true
}
func (this *ReplicationTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask)
	if !ok {
		that2, ok := that.(ReplicationTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.SourceTaskId != that1.SourceTaskId {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	if that1.Attributes == nil {
		if this.Attributes != nil {
			return false
		}
	} else if this.Attributes == nil {
		return false
	} else if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_DomainTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_DomainTaskAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_DomainTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DomainTaskAttributes.Equal(that1.DomainTaskAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_SyncShardStatusTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_SyncShardStatusTaskAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_SyncShardStatusTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncShardStatusTaskAttributes.Equal(that1.SyncShardStatusTaskAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_SyncActivityTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_SyncActivityTaskAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_SyncActivityTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncActivityTaskAttributes.Equal(that1.SyncActivityTaskAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_HistoryTaskV2Attributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_HistoryTaskV2Attributes)
	if !ok {
		that2, ok := that.(ReplicationTask_HistoryTaskV2Attributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HistoryTaskV2Attributes.Equal(that1.HistoryTaskV2Attributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_FailoverMarkerAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_FailoverMarkerAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_FailoverMarkerAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailoverMarkerAttributes.Equal(that1.FailoverMarkerAttributes) {
		return false
	}
	return true
}
func (this *DomainTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainTaskAttributes)
	if !ok {
		that2, ok := that.(DomainTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainOperation != that1.DomainOperation {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ReplicationConfig.Equal(that1.ReplicationConfig) {
		return false
	}
	if this.ConfigVersion != that1.ConfigVersion {
		return false
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if this.PreviousFailoverVersion != that1.PreviousFailoverVersion {
		return false
	}
	return true
}
func (this *SyncShardStatusTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncShardStatusTaskAttributes)
	if !ok {
		that2, ok := that.(SyncShardStatusTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourceCluster != that1.SourceCluster {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *SyncActivityTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncActivityTaskAttributes)
	if !ok {
		that2, ok := that.(SyncActivityTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainId != that1.DomainId {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.ScheduledId != that1.ScheduledId {
		return false
	}
	if !this.ScheduledTime.Equal(that1.ScheduledTime) {
		return false
	}
	if this.StartedId != that1.StartedId {
		return false
	}
	if !this.StartedTime.Equal(that1.StartedTime) {
		return false
	}
	if !this.LastHeartbeatTime.Equal(that1.LastHeartbeatTime) {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if !this.LastFailure.Equal(that1.LastFailure) {
		return false
	}
	if this.LastWorkerIdentity != that1.LastWorkerIdentity {
		return false
	}
	if !this.VersionHistory.Equal(that1.VersionHistory) {
		return false
	}
	return true
}
func (this *HistoryTaskV2Attributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryTaskV2Attributes)
	if !ok {
		that2, ok := that.(HistoryTaskV2Attributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.DomainId != that1.DomainId {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if len(this.VersionHistoryItems) != len(that1.VersionHistoryItems) {
		return false
	}
	for i := range this.VersionHistoryItems {
		if !this.VersionHistoryItems[i].Equal(that1.VersionHistoryItems[i]) {
			return false
		}
	}
	if !this.Events.Equal(that1.Events) {
		return false
	}
	if !this.NewRunEvents.Equal(that1.NewRunEvents) {
		return false
	}
	return true
}
func (this *FailoverMarkerAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverMarkerAttributes)
	if !ok {
		that2, ok := that.(FailoverMarkerAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainId != that1.DomainId {
		return false
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	return true
}
func (this *FailoverMarkerToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverMarkerToken)
	if !ok {
		that2, ok := that.(FailoverMarkerToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ShardIds) != len(that1.ShardIds) {
		return false
	}
	for i := range this.ShardIds {
		if this.ShardIds[i] != that1.ShardIds[i] {
			return false
		}
	}
	if !this.FailoverMarker.Equal(that1.FailoverMarker) {
		return false
	}
	return true
}
func (this *ReplicationTaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTaskInfo)
	if !ok {
		that2, ok := that.(ReplicationTaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainId != that1.DomainId {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.FirstEventId != that1.FirstEventId {
		return false
	}
	if this.NextEventId != that1.NextEventId {
		return false
	}
	if this.ScheduledId != that1.ScheduledId {
		return false
	}
	return true
}
func (this *ReplicationToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationToken)
	if !ok {
		that2, ok := that.(ReplicationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if this.LastRetrievedMessageId != that1.LastRetrievedMessageId {
		return false
	}
	if this.LastProcessedMessageId != that1.LastProcessedMessageId {
		return false
	}
	return true
}
func (this *SyncShardStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncShardStatus)
	if !ok {
		that2, ok := that.(SyncShardStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *ReplicationMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sharedv1.ReplicationMessages{")
	if this.ReplicationTasks != nil {
		s = append(s, "ReplicationTasks: "+fmt.Sprintf("%#v", this.ReplicationTasks)+",\n")
	}
	s = append(s, "LastRetrievedMessageId: "+fmt.Sprintf("%#v", this.LastRetrievedMessageId)+",\n")
	s = append(s, "HasMore: "+fmt.Sprintf("%#v", this.HasMore)+",\n")
	if this.SyncShardStatus != nil {
		s = append(s, "SyncShardStatus: "+fmt.Sprintf("%#v", this.SyncShardStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationTask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&sharedv1.ReplicationTask{")
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "SourceTaskId: "+fmt.Sprintf("%#v", this.SourceTaskId)+",\n")
	if this.CreationTime != nil {
		s = append(s, "CreationTime: "+fmt.Sprintf("%#v", this.CreationTime)+",\n")
	}
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationTask_DomainTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedv1.ReplicationTask_DomainTaskAttributes{` +
		`DomainTaskAttributes:` + fmt.Sprintf("%#v", this.DomainTaskAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_SyncShardStatusTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedv1.ReplicationTask_SyncShardStatusTaskAttributes{` +
		`SyncShardStatusTaskAttributes:` + fmt.Sprintf("%#v", this.SyncShardStatusTaskAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_SyncActivityTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedv1.ReplicationTask_SyncActivityTaskAttributes{` +
		`SyncActivityTaskAttributes:` + fmt.Sprintf("%#v", this.SyncActivityTaskAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_HistoryTaskV2Attributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedv1.ReplicationTask_HistoryTaskV2Attributes{` +
		`HistoryTaskV2Attributes:` + fmt.Sprintf("%#v", this.HistoryTaskV2Attributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_FailoverMarkerAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedv1.ReplicationTask_FailoverMarkerAttributes{` +
		`FailoverMarkerAttributes:` + fmt.Sprintf("%#v", this.FailoverMarkerAttributes) + `}`}, ", ")
	return s
}
func (this *DomainTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&sharedv1.DomainTaskAttributes{")
	s = append(s, "DomainOperation: "+fmt.Sprintf("%#v", this.DomainOperation)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ReplicationConfig != nil {
		s = append(s, "ReplicationConfig: "+fmt.Sprintf("%#v", this.ReplicationConfig)+",\n")
	}
	s = append(s, "ConfigVersion: "+fmt.Sprintf("%#v", this.ConfigVersion)+",\n")
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	s = append(s, "PreviousFailoverVersion: "+fmt.Sprintf("%#v", this.PreviousFailoverVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncShardStatusTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sharedv1.SyncShardStatusTaskAttributes{")
	s = append(s, "SourceCluster: "+fmt.Sprintf("%#v", this.SourceCluster)+",\n")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncActivityTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&sharedv1.SyncActivityTaskAttributes{")
	s = append(s, "DomainId: "+fmt.Sprintf("%#v", this.DomainId)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "ScheduledId: "+fmt.Sprintf("%#v", this.ScheduledId)+",\n")
	if this.ScheduledTime != nil {
		s = append(s, "ScheduledTime: "+fmt.Sprintf("%#v", this.ScheduledTime)+",\n")
	}
	s = append(s, "StartedId: "+fmt.Sprintf("%#v", this.StartedId)+",\n")
	if this.StartedTime != nil {
		s = append(s, "StartedTime: "+fmt.Sprintf("%#v", this.StartedTime)+",\n")
	}
	if this.LastHeartbeatTime != nil {
		s = append(s, "LastHeartbeatTime: "+fmt.Sprintf("%#v", this.LastHeartbeatTime)+",\n")
	}
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	if this.LastFailure != nil {
		s = append(s, "LastFailure: "+fmt.Sprintf("%#v", this.LastFailure)+",\n")
	}
	s = append(s, "LastWorkerIdentity: "+fmt.Sprintf("%#v", this.LastWorkerIdentity)+",\n")
	if this.VersionHistory != nil {
		s = append(s, "VersionHistory: "+fmt.Sprintf("%#v", this.VersionHistory)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryTaskV2Attributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&sharedv1.HistoryTaskV2Attributes{")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "DomainId: "+fmt.Sprintf("%#v", this.DomainId)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.VersionHistoryItems != nil {
		s = append(s, "VersionHistoryItems: "+fmt.Sprintf("%#v", this.VersionHistoryItems)+",\n")
	}
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	if this.NewRunEvents != nil {
		s = append(s, "NewRunEvents: "+fmt.Sprintf("%#v", this.NewRunEvents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailoverMarkerAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sharedv1.FailoverMarkerAttributes{")
	s = append(s, "DomainId: "+fmt.Sprintf("%#v", this.DomainId)+",\n")
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	if this.CreationTime != nil {
		s = append(s, "CreationTime: "+fmt.Sprintf("%#v", this.CreationTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailoverMarkerToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sharedv1.FailoverMarkerToken{")
	s = append(s, "ShardIds: "+fmt.Sprintf("%#v", this.ShardIds)+",\n")
	if this.FailoverMarker != nil {
		s = append(s, "FailoverMarker: "+fmt.Sprintf("%#v", this.FailoverMarker)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationTaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&sharedv1.ReplicationTaskInfo{")
	s = append(s, "DomainId: "+fmt.Sprintf("%#v", this.DomainId)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "FirstEventId: "+fmt.Sprintf("%#v", this.FirstEventId)+",\n")
	s = append(s, "NextEventId: "+fmt.Sprintf("%#v", this.NextEventId)+",\n")
	s = append(s, "ScheduledId: "+fmt.Sprintf("%#v", this.ScheduledId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sharedv1.ReplicationToken{")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "LastRetrievedMessageId: "+fmt.Sprintf("%#v", this.LastRetrievedMessageId)+",\n")
	s = append(s, "LastProcessedMessageId: "+fmt.Sprintf("%#v", this.LastProcessedMessageId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncShardStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedv1.SyncShardStatus{")
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReplication(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ReplicationMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SyncShardStatus != nil {
		{
			size, err := m.SyncShardStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LastRetrievedMessageId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.LastRetrievedMessageId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReplicationTasks) > 0 {
		for iNdEx := len(m.ReplicationTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplicationTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReplication(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CreationTime != nil {
		{
			size, err := m.CreationTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SourceTaskId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.SourceTaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskType != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationTask_DomainTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_DomainTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DomainTaskAttributes != nil {
		{
			size, err := m.DomainTaskAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_SyncShardStatusTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_SyncShardStatusTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncShardStatusTaskAttributes != nil {
		{
			size, err := m.SyncShardStatusTaskAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_SyncActivityTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_SyncActivityTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncActivityTaskAttributes != nil {
		{
			size, err := m.SyncActivityTaskAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_HistoryTaskV2Attributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_HistoryTaskV2Attributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HistoryTaskV2Attributes != nil {
		{
			size, err := m.HistoryTaskV2Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_FailoverMarkerAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_FailoverMarkerAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FailoverMarkerAttributes != nil {
		{
			size, err := m.FailoverMarkerAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DomainTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreviousFailoverVersion != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.PreviousFailoverVersion))
		i--
		dAtA[i] = 0x40
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x38
	}
	if m.ConfigVersion != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.ConfigVersion))
		i--
		dAtA[i] = 0x30
	}
	if m.ReplicationConfig != nil {
		{
			size, err := m.ReplicationConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReplication(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.DomainOperation != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.DomainOperation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncShardStatusTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncShardStatusTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncShardStatusTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ShardId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceCluster) > 0 {
		i -= len(m.SourceCluster)
		copy(dAtA[i:], m.SourceCluster)
		i = encodeVarintReplication(dAtA, i, uint64(len(m.SourceCluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncActivityTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncActivityTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncActivityTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VersionHistory != nil {
		{
			size, err := m.VersionHistory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LastWorkerIdentity) > 0 {
		i -= len(m.LastWorkerIdentity)
		copy(dAtA[i:], m.LastWorkerIdentity)
		i = encodeVarintReplication(dAtA, i, uint64(len(m.LastWorkerIdentity)))
		i--
		dAtA[i] = 0x62
	}
	if m.LastFailure != nil {
		{
			size, err := m.LastFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Attempt != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x50
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.LastHeartbeatTime != nil {
		{
			size, err := m.LastHeartbeatTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.StartedTime != nil {
		{
			size, err := m.StartedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StartedId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.StartedId))
		i--
		dAtA[i] = 0x30
	}
	if m.ScheduledTime != nil {
		{
			size, err := m.ScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ScheduledId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.ScheduledId))
		i--
		dAtA[i] = 0x20
	}
	if m.Version != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainId) > 0 {
		i -= len(m.DomainId)
		copy(dAtA[i:], m.DomainId)
		i = encodeVarintReplication(dAtA, i, uint64(len(m.DomainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryTaskV2Attributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryTaskV2Attributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryTaskV2Attributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewRunEvents != nil {
		{
			size, err := m.NewRunEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Events != nil {
		{
			size, err := m.Events.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VersionHistoryItems) > 0 {
		for iNdEx := len(m.VersionHistoryItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VersionHistoryItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReplication(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DomainId) > 0 {
		i -= len(m.DomainId)
		copy(dAtA[i:], m.DomainId)
		i = encodeVarintReplication(dAtA, i, uint64(len(m.DomainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FailoverMarkerAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailoverMarkerAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailoverMarkerAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationTime != nil {
		{
			size, err := m.CreationTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DomainId) > 0 {
		i -= len(m.DomainId)
		copy(dAtA[i:], m.DomainId)
		i = encodeVarintReplication(dAtA, i, uint64(len(m.DomainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FailoverMarkerToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailoverMarkerToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailoverMarkerToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailoverMarker != nil {
		{
			size, err := m.FailoverMarker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShardIds) > 0 {
		dAtA25 := make([]byte, len(m.ShardIds)*10)
		var j24 int
		for _, num1 := range m.ShardIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintReplication(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduledId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.ScheduledId))
		i--
		dAtA[i] = 0x40
	}
	if m.NextEventId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.NextEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.FirstEventId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.FirstEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.Version != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x20
	}
	if m.TaskType != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x18
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainId) > 0 {
		i -= len(m.DomainId)
		copy(dAtA[i:], m.DomainId)
		i = encodeVarintReplication(dAtA, i, uint64(len(m.DomainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastProcessedMessageId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.LastProcessedMessageId))
		i--
		dAtA[i] = 0x18
	}
	if m.LastRetrievedMessageId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.LastRetrievedMessageId))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardId != 0 {
		i = encodeVarintReplication(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncShardStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncShardStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncShardStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReplication(dAtA []byte, offset int, v uint64) int {
	offset -= sovReplication(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReplicationMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReplicationTasks) > 0 {
		for _, e := range m.ReplicationTasks {
			l = e.Size()
			n += 1 + l + sovReplication(uint64(l))
		}
	}
	if m.LastRetrievedMessageId != 0 {
		n += 1 + sovReplication(uint64(m.LastRetrievedMessageId))
	}
	if m.HasMore {
		n += 2
	}
	if m.SyncShardStatus != nil {
		l = m.SyncShardStatus.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *ReplicationTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskType != 0 {
		n += 1 + sovReplication(uint64(m.TaskType))
	}
	if m.SourceTaskId != 0 {
		n += 1 + sovReplication(uint64(m.SourceTaskId))
	}
	if m.CreationTime != nil {
		l = m.CreationTime.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	return n
}

func (m *ReplicationTask_DomainTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainTaskAttributes != nil {
		l = m.DomainTaskAttributes.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}
func (m *ReplicationTask_SyncShardStatusTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncShardStatusTaskAttributes != nil {
		l = m.SyncShardStatusTaskAttributes.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}
func (m *ReplicationTask_SyncActivityTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncActivityTaskAttributes != nil {
		l = m.SyncActivityTaskAttributes.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}
func (m *ReplicationTask_HistoryTaskV2Attributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HistoryTaskV2Attributes != nil {
		l = m.HistoryTaskV2Attributes.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}
func (m *ReplicationTask_FailoverMarkerAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailoverMarkerAttributes != nil {
		l = m.FailoverMarkerAttributes.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}
func (m *DomainTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainOperation != 0 {
		n += 1 + sovReplication(uint64(m.DomainOperation))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.ReplicationConfig != nil {
		l = m.ReplicationConfig.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.ConfigVersion != 0 {
		n += 1 + sovReplication(uint64(m.ConfigVersion))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovReplication(uint64(m.FailoverVersion))
	}
	if m.PreviousFailoverVersion != 0 {
		n += 1 + sovReplication(uint64(m.PreviousFailoverVersion))
	}
	return n
}

func (m *SyncShardStatusTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceCluster)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.ShardId != 0 {
		n += 1 + sovReplication(uint64(m.ShardId))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *SyncActivityTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainId)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovReplication(uint64(m.Version))
	}
	if m.ScheduledId != 0 {
		n += 1 + sovReplication(uint64(m.ScheduledId))
	}
	if m.ScheduledTime != nil {
		l = m.ScheduledTime.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.StartedId != 0 {
		n += 1 + sovReplication(uint64(m.StartedId))
	}
	if m.StartedTime != nil {
		l = m.StartedTime.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.LastHeartbeatTime != nil {
		l = m.LastHeartbeatTime.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovReplication(uint64(m.Attempt))
	}
	if m.LastFailure != nil {
		l = m.LastFailure.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	l = len(m.LastWorkerIdentity)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.VersionHistory != nil {
		l = m.VersionHistory.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *HistoryTaskV2Attributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovReplication(uint64(m.TaskId))
	}
	l = len(m.DomainId)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if len(m.VersionHistoryItems) > 0 {
		for _, e := range m.VersionHistoryItems {
			l = e.Size()
			n += 1 + l + sovReplication(uint64(l))
		}
	}
	if m.Events != nil {
		l = m.Events.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.NewRunEvents != nil {
		l = m.NewRunEvents.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *FailoverMarkerAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainId)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovReplication(uint64(m.FailoverVersion))
	}
	if m.CreationTime != nil {
		l = m.CreationTime.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *FailoverMarkerToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShardIds) > 0 {
		l = 0
		for _, e := range m.ShardIds {
			l += sovReplication(uint64(e))
		}
		n += 1 + sovReplication(uint64(l)) + l
	}
	if m.FailoverMarker != nil {
		l = m.FailoverMarker.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *ReplicationTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainId)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.TaskType != 0 {
		n += 1 + sovReplication(uint64(m.TaskType))
	}
	if m.TaskId != 0 {
		n += 1 + sovReplication(uint64(m.TaskId))
	}
	if m.Version != 0 {
		n += 1 + sovReplication(uint64(m.Version))
	}
	if m.FirstEventId != 0 {
		n += 1 + sovReplication(uint64(m.FirstEventId))
	}
	if m.NextEventId != 0 {
		n += 1 + sovReplication(uint64(m.NextEventId))
	}
	if m.ScheduledId != 0 {
		n += 1 + sovReplication(uint64(m.ScheduledId))
	}
	return n
}

func (m *ReplicationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardId != 0 {
		n += 1 + sovReplication(uint64(m.ShardId))
	}
	if m.LastRetrievedMessageId != 0 {
		n += 1 + sovReplication(uint64(m.LastRetrievedMessageId))
	}
	if m.LastProcessedMessageId != 0 {
		n += 1 + sovReplication(uint64(m.LastProcessedMessageId))
	}
	return n
}

func (m *SyncShardStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func sovReplication(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReplication(x uint64) (n int) {
	return sovReplication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ReplicationMessages) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReplicationTasks := "[]*ReplicationTask{"
	for _, f := range this.ReplicationTasks {
		repeatedStringForReplicationTasks += strings.Replace(f.String(), "ReplicationTask", "ReplicationTask", 1) + ","
	}
	repeatedStringForReplicationTasks += "}"
	s := strings.Join([]string{`&ReplicationMessages{`,
		`ReplicationTasks:` + repeatedStringForReplicationTasks + `,`,
		`LastRetrievedMessageId:` + fmt.Sprintf("%v", this.LastRetrievedMessageId) + `,`,
		`HasMore:` + fmt.Sprintf("%v", this.HasMore) + `,`,
		`SyncShardStatus:` + strings.Replace(this.SyncShardStatus.String(), "SyncShardStatus", "SyncShardStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask{`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`SourceTaskId:` + fmt.Sprintf("%v", this.SourceTaskId) + `,`,
		`CreationTime:` + strings.Replace(fmt.Sprintf("%v", this.CreationTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_DomainTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_DomainTaskAttributes{`,
		`DomainTaskAttributes:` + strings.Replace(fmt.Sprintf("%v", this.DomainTaskAttributes), "DomainTaskAttributes", "DomainTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_SyncShardStatusTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_SyncShardStatusTaskAttributes{`,
		`SyncShardStatusTaskAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SyncShardStatusTaskAttributes), "SyncShardStatusTaskAttributes", "SyncShardStatusTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_SyncActivityTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_SyncActivityTaskAttributes{`,
		`SyncActivityTaskAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SyncActivityTaskAttributes), "SyncActivityTaskAttributes", "SyncActivityTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_HistoryTaskV2Attributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_HistoryTaskV2Attributes{`,
		`HistoryTaskV2Attributes:` + strings.Replace(fmt.Sprintf("%v", this.HistoryTaskV2Attributes), "HistoryTaskV2Attributes", "HistoryTaskV2Attributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_FailoverMarkerAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_FailoverMarkerAttributes{`,
		`FailoverMarkerAttributes:` + strings.Replace(fmt.Sprintf("%v", this.FailoverMarkerAttributes), "FailoverMarkerAttributes", "FailoverMarkerAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainTaskAttributes{`,
		`DomainOperation:` + fmt.Sprintf("%v", this.DomainOperation) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "DomainInfo", "v1.DomainInfo", 1) + `,`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "DomainConfiguration", "v1.DomainConfiguration", 1) + `,`,
		`ReplicationConfig:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationConfig), "DomainReplicationConfiguration", "v1.DomainReplicationConfiguration", 1) + `,`,
		`ConfigVersion:` + fmt.Sprintf("%v", this.ConfigVersion) + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`PreviousFailoverVersion:` + fmt.Sprintf("%v", this.PreviousFailoverVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncShardStatusTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncShardStatusTaskAttributes{`,
		`SourceCluster:` + fmt.Sprintf("%v", this.SourceCluster) + `,`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncActivityTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncActivityTaskAttributes{`,
		`DomainId:` + fmt.Sprintf("%v", this.DomainId) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`ScheduledId:` + fmt.Sprintf("%v", this.ScheduledId) + `,`,
		`ScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`StartedId:` + fmt.Sprintf("%v", this.StartedId) + `,`,
		`StartedTime:` + strings.Replace(fmt.Sprintf("%v", this.StartedTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`LastHeartbeatTime:` + strings.Replace(fmt.Sprintf("%v", this.LastHeartbeatTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payload", "v1.Payload", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`LastFailure:` + strings.Replace(fmt.Sprintf("%v", this.LastFailure), "Failure", "v1.Failure", 1) + `,`,
		`LastWorkerIdentity:` + fmt.Sprintf("%v", this.LastWorkerIdentity) + `,`,
		`VersionHistory:` + strings.Replace(fmt.Sprintf("%v", this.VersionHistory), "VersionHistory", "VersionHistory", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryTaskV2Attributes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVersionHistoryItems := "[]*VersionHistoryItem{"
	for _, f := range this.VersionHistoryItems {
		repeatedStringForVersionHistoryItems += strings.Replace(fmt.Sprintf("%v", f), "VersionHistoryItem", "VersionHistoryItem", 1) + ","
	}
	repeatedStringForVersionHistoryItems += "}"
	s := strings.Join([]string{`&HistoryTaskV2Attributes{`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`DomainId:` + fmt.Sprintf("%v", this.DomainId) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`VersionHistoryItems:` + repeatedStringForVersionHistoryItems + `,`,
		`Events:` + strings.Replace(fmt.Sprintf("%v", this.Events), "DataBlob", "v1.DataBlob", 1) + `,`,
		`NewRunEvents:` + strings.Replace(fmt.Sprintf("%v", this.NewRunEvents), "DataBlob", "v1.DataBlob", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailoverMarkerAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailoverMarkerAttributes{`,
		`DomainId:` + fmt.Sprintf("%v", this.DomainId) + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`CreationTime:` + strings.Replace(fmt.Sprintf("%v", this.CreationTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailoverMarkerToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailoverMarkerToken{`,
		`ShardIds:` + fmt.Sprintf("%v", this.ShardIds) + `,`,
		`FailoverMarker:` + strings.Replace(this.FailoverMarker.String(), "FailoverMarkerAttributes", "FailoverMarkerAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTaskInfo{`,
		`DomainId:` + fmt.Sprintf("%v", this.DomainId) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`FirstEventId:` + fmt.Sprintf("%v", this.FirstEventId) + `,`,
		`NextEventId:` + fmt.Sprintf("%v", this.NextEventId) + `,`,
		`ScheduledId:` + fmt.Sprintf("%v", this.ScheduledId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationToken{`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`LastRetrievedMessageId:` + fmt.Sprintf("%v", this.LastRetrievedMessageId) + `,`,
		`LastProcessedMessageId:` + fmt.Sprintf("%v", this.LastProcessedMessageId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncShardStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncShardStatus{`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReplication(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ReplicationMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationTasks = append(m.ReplicationTasks, &ReplicationTask{})
			if err := m.ReplicationTasks[len(m.ReplicationTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRetrievedMessageId", wireType)
			}
			m.LastRetrievedMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRetrievedMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncShardStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncShardStatus == nil {
				m.SyncShardStatus = &SyncShardStatus{}
			}
			if err := m.SyncShardStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= ReplicationTaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTaskId", wireType)
			}
			m.SourceTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceTaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTime == nil {
				m.CreationTime = &timestamp.Timestamp{}
			}
			if err := m.CreationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainTaskAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DomainTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_DomainTaskAttributes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncShardStatusTaskAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncShardStatusTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_SyncShardStatusTaskAttributes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncActivityTaskAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncActivityTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_SyncActivityTaskAttributes{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryTaskV2Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HistoryTaskV2Attributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_HistoryTaskV2Attributes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverMarkerAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FailoverMarkerAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_FailoverMarkerAttributes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainOperation", wireType)
			}
			m.DomainOperation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainOperation |= DomainOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &v1.DomainInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &v1.DomainConfiguration{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfig == nil {
				m.ReplicationConfig = &v1.DomainReplicationConfiguration{}
			}
			if err := m.ReplicationConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigVersion", wireType)
			}
			m.ConfigVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFailoverVersion", wireType)
			}
			m.PreviousFailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousFailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncShardStatusTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncShardStatusTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncShardStatusTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &timestamp.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncActivityTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncActivityTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncActivityTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledId", wireType)
			}
			m.ScheduledId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = &timestamp.Timestamp{}
			}
			if err := m.ScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedId", wireType)
			}
			m.StartedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = &timestamp.Timestamp{}
			}
			if err := m.StartedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatTime == nil {
				m.LastHeartbeatTime = &timestamp.Timestamp{}
			}
			if err := m.LastHeartbeatTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v1.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailure == nil {
				m.LastFailure = &v1.Failure{}
			}
			if err := m.LastFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWorkerIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastWorkerIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionHistory == nil {
				m.VersionHistory = &VersionHistory{}
			}
			if err := m.VersionHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryTaskV2Attributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryTaskV2Attributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryTaskV2Attributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionHistoryItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionHistoryItems = append(m.VersionHistoryItems, &VersionHistoryItem{})
			if err := m.VersionHistoryItems[len(m.VersionHistoryItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Events == nil {
				m.Events = &v1.DataBlob{}
			}
			if err := m.Events.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRunEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewRunEvents == nil {
				m.NewRunEvents = &v1.DataBlob{}
			}
			if err := m.NewRunEvents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailoverMarkerAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailoverMarkerAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailoverMarkerAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTime == nil {
				m.CreationTime = &timestamp.Timestamp{}
			}
			if err := m.CreationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailoverMarkerToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailoverMarkerToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailoverMarkerToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShardIds = append(m.ShardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReplication
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReplication
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShardIds) == 0 {
					m.ShardIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReplication
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShardIds = append(m.ShardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverMarker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailoverMarker == nil {
				m.FailoverMarker = &FailoverMarkerAttributes{}
			}
			if err := m.FailoverMarker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v1.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstEventId", wireType)
			}
			m.FirstEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventId", wireType)
			}
			m.NextEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledId", wireType)
			}
			m.ScheduledId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRetrievedMessageId", wireType)
			}
			m.LastRetrievedMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRetrievedMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProcessedMessageId", wireType)
			}
			m.LastProcessedMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastProcessedMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncShardStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncShardStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncShardStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &timestamp.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReplication
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReplication
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReplication
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReplication        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplication          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReplication = fmt.Errorf("proto: unexpected end of group")
)
