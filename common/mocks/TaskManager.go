// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/persistence"
)

// NewTaskManager creates a new instance of TaskManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskManager {
	mock := &TaskManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaskManager is an autogenerated mock type for the TaskManager type
type TaskManager struct {
	mock.Mock
}

type TaskManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskManager) EXPECT() *TaskManager_Expecter {
	return &TaskManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type TaskManager
func (_mock *TaskManager) Close() {
	_mock.Called()
	return
}

// TaskManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type TaskManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *TaskManager_Expecter) Close() *TaskManager_Close_Call {
	return &TaskManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *TaskManager_Close_Call) Run(run func()) *TaskManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskManager_Close_Call) Return() *TaskManager_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *TaskManager_Close_Call) RunAndReturn(run func()) *TaskManager_Close_Call {
	_c.Run(run)
	return _c
}

// CompleteTask provides a mock function for the type TaskManager
func (_mock *TaskManager) CompleteTask(ctx context.Context, request *persistence.CompleteTaskRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CompleteTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.CompleteTaskRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskManager_CompleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteTask'
type TaskManager_CompleteTask_Call struct {
	*mock.Call
}

// CompleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.CompleteTaskRequest
func (_e *TaskManager_Expecter) CompleteTask(ctx interface{}, request interface{}) *TaskManager_CompleteTask_Call {
	return &TaskManager_CompleteTask_Call{Call: _e.mock.On("CompleteTask", ctx, request)}
}

func (_c *TaskManager_CompleteTask_Call) Run(run func(ctx context.Context, request *persistence.CompleteTaskRequest)) *TaskManager_CompleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.CompleteTaskRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.CompleteTaskRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_CompleteTask_Call) Return(err error) *TaskManager_CompleteTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskManager_CompleteTask_Call) RunAndReturn(run func(ctx context.Context, request *persistence.CompleteTaskRequest) error) *TaskManager_CompleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteTasksLessThan provides a mock function for the type TaskManager
func (_mock *TaskManager) CompleteTasksLessThan(ctx context.Context, request *persistence.CompleteTasksLessThanRequest) (*persistence.CompleteTasksLessThanResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CompleteTasksLessThan")
	}

	var r0 *persistence.CompleteTasksLessThanResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.CompleteTasksLessThanRequest) (*persistence.CompleteTasksLessThanResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.CompleteTasksLessThanRequest) *persistence.CompleteTasksLessThanResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.CompleteTasksLessThanResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.CompleteTasksLessThanRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_CompleteTasksLessThan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteTasksLessThan'
type TaskManager_CompleteTasksLessThan_Call struct {
	*mock.Call
}

// CompleteTasksLessThan is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.CompleteTasksLessThanRequest
func (_e *TaskManager_Expecter) CompleteTasksLessThan(ctx interface{}, request interface{}) *TaskManager_CompleteTasksLessThan_Call {
	return &TaskManager_CompleteTasksLessThan_Call{Call: _e.mock.On("CompleteTasksLessThan", ctx, request)}
}

func (_c *TaskManager_CompleteTasksLessThan_Call) Run(run func(ctx context.Context, request *persistence.CompleteTasksLessThanRequest)) *TaskManager_CompleteTasksLessThan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.CompleteTasksLessThanRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.CompleteTasksLessThanRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_CompleteTasksLessThan_Call) Return(completeTasksLessThanResponse *persistence.CompleteTasksLessThanResponse, err error) *TaskManager_CompleteTasksLessThan_Call {
	_c.Call.Return(completeTasksLessThanResponse, err)
	return _c
}

func (_c *TaskManager_CompleteTasksLessThan_Call) RunAndReturn(run func(ctx context.Context, request *persistence.CompleteTasksLessThanRequest) (*persistence.CompleteTasksLessThanResponse, error)) *TaskManager_CompleteTasksLessThan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTasks provides a mock function for the type TaskManager
func (_mock *TaskManager) CreateTasks(ctx context.Context, request *persistence.CreateTasksRequest) (*persistence.CreateTasksResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTasks")
	}

	var r0 *persistence.CreateTasksResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.CreateTasksRequest) (*persistence.CreateTasksResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.CreateTasksRequest) *persistence.CreateTasksResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.CreateTasksResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.CreateTasksRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_CreateTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTasks'
type TaskManager_CreateTasks_Call struct {
	*mock.Call
}

// CreateTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.CreateTasksRequest
func (_e *TaskManager_Expecter) CreateTasks(ctx interface{}, request interface{}) *TaskManager_CreateTasks_Call {
	return &TaskManager_CreateTasks_Call{Call: _e.mock.On("CreateTasks", ctx, request)}
}

func (_c *TaskManager_CreateTasks_Call) Run(run func(ctx context.Context, request *persistence.CreateTasksRequest)) *TaskManager_CreateTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.CreateTasksRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.CreateTasksRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_CreateTasks_Call) Return(createTasksResponse *persistence.CreateTasksResponse, err error) *TaskManager_CreateTasks_Call {
	_c.Call.Return(createTasksResponse, err)
	return _c
}

func (_c *TaskManager_CreateTasks_Call) RunAndReturn(run func(ctx context.Context, request *persistence.CreateTasksRequest) (*persistence.CreateTasksResponse, error)) *TaskManager_CreateTasks_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTaskList provides a mock function for the type TaskManager
func (_mock *TaskManager) DeleteTaskList(ctx context.Context, request *persistence.DeleteTaskListRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskList")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.DeleteTaskListRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskManager_DeleteTaskList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTaskList'
type TaskManager_DeleteTaskList_Call struct {
	*mock.Call
}

// DeleteTaskList is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.DeleteTaskListRequest
func (_e *TaskManager_Expecter) DeleteTaskList(ctx interface{}, request interface{}) *TaskManager_DeleteTaskList_Call {
	return &TaskManager_DeleteTaskList_Call{Call: _e.mock.On("DeleteTaskList", ctx, request)}
}

func (_c *TaskManager_DeleteTaskList_Call) Run(run func(ctx context.Context, request *persistence.DeleteTaskListRequest)) *TaskManager_DeleteTaskList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.DeleteTaskListRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.DeleteTaskListRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_DeleteTaskList_Call) Return(err error) *TaskManager_DeleteTaskList_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskManager_DeleteTaskList_Call) RunAndReturn(run func(ctx context.Context, request *persistence.DeleteTaskListRequest) error) *TaskManager_DeleteTaskList_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type TaskManager
func (_mock *TaskManager) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// TaskManager_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type TaskManager_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *TaskManager_Expecter) GetName() *TaskManager_GetName_Call {
	return &TaskManager_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *TaskManager_GetName_Call) Run(run func()) *TaskManager_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskManager_GetName_Call) Return(s string) *TaskManager_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *TaskManager_GetName_Call) RunAndReturn(run func() string) *TaskManager_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrphanTasks provides a mock function for the type TaskManager
func (_mock *TaskManager) GetOrphanTasks(ctx context.Context, request *persistence.GetOrphanTasksRequest) (*persistence.GetOrphanTasksResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetOrphanTasks")
	}

	var r0 *persistence.GetOrphanTasksResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetOrphanTasksRequest) (*persistence.GetOrphanTasksResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetOrphanTasksRequest) *persistence.GetOrphanTasksResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.GetOrphanTasksResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.GetOrphanTasksRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_GetOrphanTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrphanTasks'
type TaskManager_GetOrphanTasks_Call struct {
	*mock.Call
}

// GetOrphanTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.GetOrphanTasksRequest
func (_e *TaskManager_Expecter) GetOrphanTasks(ctx interface{}, request interface{}) *TaskManager_GetOrphanTasks_Call {
	return &TaskManager_GetOrphanTasks_Call{Call: _e.mock.On("GetOrphanTasks", ctx, request)}
}

func (_c *TaskManager_GetOrphanTasks_Call) Run(run func(ctx context.Context, request *persistence.GetOrphanTasksRequest)) *TaskManager_GetOrphanTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.GetOrphanTasksRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.GetOrphanTasksRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_GetOrphanTasks_Call) Return(getOrphanTasksResponse *persistence.GetOrphanTasksResponse, err error) *TaskManager_GetOrphanTasks_Call {
	_c.Call.Return(getOrphanTasksResponse, err)
	return _c
}

func (_c *TaskManager_GetOrphanTasks_Call) RunAndReturn(run func(ctx context.Context, request *persistence.GetOrphanTasksRequest) (*persistence.GetOrphanTasksResponse, error)) *TaskManager_GetOrphanTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskList provides a mock function for the type TaskManager
func (_mock *TaskManager) GetTaskList(ctx context.Context, request *persistence.GetTaskListRequest) (*persistence.GetTaskListResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskList")
	}

	var r0 *persistence.GetTaskListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetTaskListRequest) (*persistence.GetTaskListResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetTaskListRequest) *persistence.GetTaskListResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.GetTaskListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.GetTaskListRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_GetTaskList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskList'
type TaskManager_GetTaskList_Call struct {
	*mock.Call
}

// GetTaskList is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.GetTaskListRequest
func (_e *TaskManager_Expecter) GetTaskList(ctx interface{}, request interface{}) *TaskManager_GetTaskList_Call {
	return &TaskManager_GetTaskList_Call{Call: _e.mock.On("GetTaskList", ctx, request)}
}

func (_c *TaskManager_GetTaskList_Call) Run(run func(ctx context.Context, request *persistence.GetTaskListRequest)) *TaskManager_GetTaskList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.GetTaskListRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.GetTaskListRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_GetTaskList_Call) Return(getTaskListResponse *persistence.GetTaskListResponse, err error) *TaskManager_GetTaskList_Call {
	_c.Call.Return(getTaskListResponse, err)
	return _c
}

func (_c *TaskManager_GetTaskList_Call) RunAndReturn(run func(ctx context.Context, request *persistence.GetTaskListRequest) (*persistence.GetTaskListResponse, error)) *TaskManager_GetTaskList_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskListSize provides a mock function for the type TaskManager
func (_mock *TaskManager) GetTaskListSize(ctx context.Context, request *persistence.GetTaskListSizeRequest) (*persistence.GetTaskListSizeResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskListSize")
	}

	var r0 *persistence.GetTaskListSizeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetTaskListSizeRequest) (*persistence.GetTaskListSizeResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetTaskListSizeRequest) *persistence.GetTaskListSizeResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.GetTaskListSizeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.GetTaskListSizeRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_GetTaskListSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskListSize'
type TaskManager_GetTaskListSize_Call struct {
	*mock.Call
}

// GetTaskListSize is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.GetTaskListSizeRequest
func (_e *TaskManager_Expecter) GetTaskListSize(ctx interface{}, request interface{}) *TaskManager_GetTaskListSize_Call {
	return &TaskManager_GetTaskListSize_Call{Call: _e.mock.On("GetTaskListSize", ctx, request)}
}

func (_c *TaskManager_GetTaskListSize_Call) Run(run func(ctx context.Context, request *persistence.GetTaskListSizeRequest)) *TaskManager_GetTaskListSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.GetTaskListSizeRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.GetTaskListSizeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_GetTaskListSize_Call) Return(getTaskListSizeResponse *persistence.GetTaskListSizeResponse, err error) *TaskManager_GetTaskListSize_Call {
	_c.Call.Return(getTaskListSizeResponse, err)
	return _c
}

func (_c *TaskManager_GetTaskListSize_Call) RunAndReturn(run func(ctx context.Context, request *persistence.GetTaskListSizeRequest) (*persistence.GetTaskListSizeResponse, error)) *TaskManager_GetTaskListSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function for the type TaskManager
func (_mock *TaskManager) GetTasks(ctx context.Context, request *persistence.GetTasksRequest) (*persistence.GetTasksResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 *persistence.GetTasksResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetTasksRequest) (*persistence.GetTasksResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetTasksRequest) *persistence.GetTasksResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.GetTasksResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.GetTasksRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type TaskManager_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.GetTasksRequest
func (_e *TaskManager_Expecter) GetTasks(ctx interface{}, request interface{}) *TaskManager_GetTasks_Call {
	return &TaskManager_GetTasks_Call{Call: _e.mock.On("GetTasks", ctx, request)}
}

func (_c *TaskManager_GetTasks_Call) Run(run func(ctx context.Context, request *persistence.GetTasksRequest)) *TaskManager_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.GetTasksRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.GetTasksRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_GetTasks_Call) Return(getTasksResponse *persistence.GetTasksResponse, err error) *TaskManager_GetTasks_Call {
	_c.Call.Return(getTasksResponse, err)
	return _c
}

func (_c *TaskManager_GetTasks_Call) RunAndReturn(run func(ctx context.Context, request *persistence.GetTasksRequest) (*persistence.GetTasksResponse, error)) *TaskManager_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// LeaseTaskList provides a mock function for the type TaskManager
func (_mock *TaskManager) LeaseTaskList(ctx context.Context, request *persistence.LeaseTaskListRequest) (*persistence.LeaseTaskListResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for LeaseTaskList")
	}

	var r0 *persistence.LeaseTaskListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.LeaseTaskListRequest) (*persistence.LeaseTaskListResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.LeaseTaskListRequest) *persistence.LeaseTaskListResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.LeaseTaskListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.LeaseTaskListRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_LeaseTaskList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaseTaskList'
type TaskManager_LeaseTaskList_Call struct {
	*mock.Call
}

// LeaseTaskList is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.LeaseTaskListRequest
func (_e *TaskManager_Expecter) LeaseTaskList(ctx interface{}, request interface{}) *TaskManager_LeaseTaskList_Call {
	return &TaskManager_LeaseTaskList_Call{Call: _e.mock.On("LeaseTaskList", ctx, request)}
}

func (_c *TaskManager_LeaseTaskList_Call) Run(run func(ctx context.Context, request *persistence.LeaseTaskListRequest)) *TaskManager_LeaseTaskList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.LeaseTaskListRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.LeaseTaskListRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_LeaseTaskList_Call) Return(leaseTaskListResponse *persistence.LeaseTaskListResponse, err error) *TaskManager_LeaseTaskList_Call {
	_c.Call.Return(leaseTaskListResponse, err)
	return _c
}

func (_c *TaskManager_LeaseTaskList_Call) RunAndReturn(run func(ctx context.Context, request *persistence.LeaseTaskListRequest) (*persistence.LeaseTaskListResponse, error)) *TaskManager_LeaseTaskList_Call {
	_c.Call.Return(run)
	return _c
}

// ListTaskList provides a mock function for the type TaskManager
func (_mock *TaskManager) ListTaskList(ctx context.Context, request *persistence.ListTaskListRequest) (*persistence.ListTaskListResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskList")
	}

	var r0 *persistence.ListTaskListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListTaskListRequest) (*persistence.ListTaskListResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.ListTaskListRequest) *persistence.ListTaskListResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.ListTaskListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.ListTaskListRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_ListTaskList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTaskList'
type TaskManager_ListTaskList_Call struct {
	*mock.Call
}

// ListTaskList is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.ListTaskListRequest
func (_e *TaskManager_Expecter) ListTaskList(ctx interface{}, request interface{}) *TaskManager_ListTaskList_Call {
	return &TaskManager_ListTaskList_Call{Call: _e.mock.On("ListTaskList", ctx, request)}
}

func (_c *TaskManager_ListTaskList_Call) Run(run func(ctx context.Context, request *persistence.ListTaskListRequest)) *TaskManager_ListTaskList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.ListTaskListRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.ListTaskListRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_ListTaskList_Call) Return(listTaskListResponse *persistence.ListTaskListResponse, err error) *TaskManager_ListTaskList_Call {
	_c.Call.Return(listTaskListResponse, err)
	return _c
}

func (_c *TaskManager_ListTaskList_Call) RunAndReturn(run func(ctx context.Context, request *persistence.ListTaskListRequest) (*persistence.ListTaskListResponse, error)) *TaskManager_ListTaskList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskList provides a mock function for the type TaskManager
func (_mock *TaskManager) UpdateTaskList(ctx context.Context, request *persistence.UpdateTaskListRequest) (*persistence.UpdateTaskListResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskList")
	}

	var r0 *persistence.UpdateTaskListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.UpdateTaskListRequest) (*persistence.UpdateTaskListResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.UpdateTaskListRequest) *persistence.UpdateTaskListResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.UpdateTaskListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.UpdateTaskListRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskManager_UpdateTaskList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskList'
type TaskManager_UpdateTaskList_Call struct {
	*mock.Call
}

// UpdateTaskList is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.UpdateTaskListRequest
func (_e *TaskManager_Expecter) UpdateTaskList(ctx interface{}, request interface{}) *TaskManager_UpdateTaskList_Call {
	return &TaskManager_UpdateTaskList_Call{Call: _e.mock.On("UpdateTaskList", ctx, request)}
}

func (_c *TaskManager_UpdateTaskList_Call) Run(run func(ctx context.Context, request *persistence.UpdateTaskListRequest)) *TaskManager_UpdateTaskList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.UpdateTaskListRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.UpdateTaskListRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskManager_UpdateTaskList_Call) Return(updateTaskListResponse *persistence.UpdateTaskListResponse, err error) *TaskManager_UpdateTaskList_Call {
	_c.Call.Return(updateTaskListResponse, err)
	return _c
}

func (_c *TaskManager_UpdateTaskList_Call) RunAndReturn(run func(ctx context.Context, request *persistence.UpdateTaskListRequest) (*persistence.UpdateTaskListResponse, error)) *TaskManager_UpdateTaskList_Call {
	_c.Call.Return(run)
	return _c
}
