// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"
	"github.com/uber/cadence/.gen/go/matching"
	"github.com/uber/cadence/.gen/go/shared"
	"go.uber.org/yarpc"
)

// MatchingClient is an autogenerated mock type for the MatchingClient type
type MatchingClient struct {
	mock.Mock
}

// AddActivityTask provides a mock function with given fields: ctx, AddRequest, opts
func (_m *MatchingClient) AddActivityTask(ctx context.Context, AddRequest *matching.AddActivityTaskRequest, opts ...yarpc.CallOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, AddRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *matching.AddActivityTaskRequest, ...yarpc.CallOption) error); ok {
		r0 = rf(ctx, AddRequest, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDecisionTask provides a mock function with given fields: ctx, AddRequest, opts
func (_m *MatchingClient) AddDecisionTask(ctx context.Context, AddRequest *matching.AddDecisionTaskRequest, opts ...yarpc.CallOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, AddRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *matching.AddDecisionTaskRequest, ...yarpc.CallOption) error); ok {
		r0 = rf(ctx, AddRequest, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelOutstandingPoll provides a mock function with given fields: ctx, Request, opts
func (_m *MatchingClient) CancelOutstandingPoll(ctx context.Context, Request *matching.CancelOutstandingPollRequest, opts ...yarpc.CallOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, Request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *matching.CancelOutstandingPollRequest, ...yarpc.CallOption) error); ok {
		r0 = rf(ctx, Request, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTaskList provides a mock function with given fields: ctx, Request, opts
func (_m *MatchingClient) DescribeTaskList(ctx context.Context, Request *matching.DescribeTaskListRequest, opts ...yarpc.CallOption) (*shared.DescribeTaskListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, Request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shared.DescribeTaskListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *matching.DescribeTaskListRequest, ...yarpc.CallOption) *shared.DescribeTaskListResponse); ok {
		r0 = rf(ctx, Request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.DescribeTaskListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *matching.DescribeTaskListRequest, ...yarpc.CallOption) error); ok {
		r1 = rf(ctx, Request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollForActivityTask provides a mock function with given fields: ctx, PollRequest, opts
func (_m *MatchingClient) PollForActivityTask(ctx context.Context, PollRequest *matching.PollForActivityTaskRequest, opts ...yarpc.CallOption) (*shared.PollForActivityTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, PollRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shared.PollForActivityTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *matching.PollForActivityTaskRequest, ...yarpc.CallOption) *shared.PollForActivityTaskResponse); ok {
		r0 = rf(ctx, PollRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.PollForActivityTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *matching.PollForActivityTaskRequest, ...yarpc.CallOption) error); ok {
		r1 = rf(ctx, PollRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollForDecisionTask provides a mock function with given fields: ctx, PollRequest, opts
func (_m *MatchingClient) PollForDecisionTask(ctx context.Context, PollRequest *matching.PollForDecisionTaskRequest, opts ...yarpc.CallOption) (*matching.PollForDecisionTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, PollRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *matching.PollForDecisionTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *matching.PollForDecisionTaskRequest, ...yarpc.CallOption) *matching.PollForDecisionTaskResponse); ok {
		r0 = rf(ctx, PollRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*matching.PollForDecisionTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *matching.PollForDecisionTaskRequest, ...yarpc.CallOption) error); ok {
		r1 = rf(ctx, PollRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTaskList provides a mock function with given fields: ctx, Request, opts
func (_m *MatchingClient) QueryTaskList(ctx context.Context, Request *matching.QueryTaskListRequest, opts ...yarpc.CallOption) (*shared.QueryTaskListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, Request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shared.QueryTaskListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *matching.QueryTaskListRequest, ...yarpc.CallOption) *shared.QueryTaskListResponse); ok {
		r0 = rf(ctx, Request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.QueryTaskListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *matching.QueryTaskListRequest, ...yarpc.CallOption) error); ok {
		r1 = rf(ctx, Request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryWorkflow provides a mock function with given fields: ctx, QueryRequest, opts
func (_m *MatchingClient) QueryWorkflow(ctx context.Context, QueryRequest *matching.QueryWorkflowRequest, opts ...yarpc.CallOption) (*shared.QueryWorkflowResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, QueryRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shared.QueryWorkflowResponse
	if rf, ok := ret.Get(0).(func(context.Context, *matching.QueryWorkflowRequest, ...yarpc.CallOption) *shared.QueryWorkflowResponse); ok {
		r0 = rf(ctx, QueryRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.QueryWorkflowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *matching.QueryWorkflowRequest, ...yarpc.CallOption) error); ok {
		r1 = rf(ctx, QueryRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RespondQueryTaskCompleted provides a mock function with given fields: ctx, Request, opts
func (_m *MatchingClient) RespondQueryTaskCompleted(ctx context.Context, Request *matching.RespondQueryTaskCompletedRequest, opts ...yarpc.CallOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, Request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *matching.RespondQueryTaskCompletedRequest, ...yarpc.CallOption) error); ok {
		r0 = rf(ctx, Request, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
