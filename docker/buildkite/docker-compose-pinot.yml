version: "3.5"

services:
  cassandra:
    image: cassandra:4.1.1
    ports:
      - "9042:9042"
    environment:
      - "MAX_HEAP_SIZE=256M"
      - "HEAP_NEWSIZE=128M"
    networks:
      services-network:
        aliases:
          - cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra" ,"-e describe keyspaces"]
      interval: 15s
      timeout: 30s
      retries: 10
  prometheus:
    image: prom/prometheus:latest
    networks:
      services-network:
        aliases:
          - prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
  kafka:
    image: docker.io/bitnami/kafka:3.7
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft settings
      - "KAFKA_CFG_NODE_ID=0"
      - "KAFKA_CFG_PROCESS_ROLES=controller,broker"
      - "KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093"
# zookeeper mode: need to comment all other envs and use with depends_on: zookeeper, but
# had this error: {"code":500,"error":"org.apache.pinot.spi.stream.TransientConsumerException: org.apache.pinot.shaded.org.apache.kafka.common.errors.
# TimeoutException: Timeout expired while fetching topic metadata"}
#      - "KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181"
      # Listeners
      - "KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093"
      - "KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092"
      - "KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      - "KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER"
      - "KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT"
      # Topic settings
      - "KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true"
#    image: wurstmeister/kafka:latest
#    restart: unless-stopped
#    container_name: "kafka"
#    ports:
#      - "9092:9092"
#    expose:
#      - "9093"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181/kafka
#      KAFKA_BROKER_ID: 0
#      KAFKA_ADVERTISED_HOST_NAME: kafka
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,OUTSIDE://localhost:9092
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
    networks:
      services-network:
        aliases:
          - kafka

  # will be deleted later when we get rid of ES usages
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.9.3
    ports:
      - "9200:9200"
    networks:
      services-network:
        aliases:
          - elasticsearch
    environment:
      - discovery.type=single-node

  zookeeper:
    image: zookeeper:3.5.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      services-network:
        aliases:
          - zookeeper

  pinot-controller:
    image: apachepinot/pinot:0.12.1
    command: "StartController -zkAddress zookeeper:2181 -controllerPort 9001"
    container_name: pinot-controller
    restart: unless-stopped
    ports:
      - "9001:9001"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-controller.log"
    depends_on:
      - zookeeper
    networks:
      services-network:
        aliases:
          - pinot-controller
  pinot-broker:
    image: apachepinot/pinot:0.12.1
    command: "StartBroker -zkAddress zookeeper:2181"
    restart: unless-stopped
    container_name: "pinot-broker"
    ports:
      - "8099:8099"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-broker.log"
    depends_on:
      - pinot-controller
    networks:
      services-network:
        aliases:
          - pinot-broker
  pinot-server:
    image: apachepinot/pinot:0.12.1
    command: "StartServer -zkAddress zookeeper:2181"
    restart: unless-stopped
    container_name: "pinot-server"
    ports:
      - "8098:8098"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx16G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-server.log"
    depends_on:
      - pinot-broker
    networks:
      services-network:
        aliases:
          - pinot-server

  pinot-admin:
    image: apachepinot/pinot:latest
    container_name: pinot-admin
    depends_on:
      - pinot-controller
      - pinot-broker
      - pinot-server
    entrypoint: ["/bin/sh", "-c", "cp /schema/pinot/create_pinot_table.sh /opt/pinot/create_pinot_table.sh && chmod +x /opt/pinot/create_pinot_table.sh && /opt/pinot/create_pinot_table.sh"]
    volumes:
      - ../../schema:/schema  # Ensure the schema files and script are available in the container
    networks:
      services-network:
        aliases:
          - pinot-server

  integration-test-cassandra-pinot:
    build:
      context: ../../
      dockerfile: ./docker/buildkite/Dockerfile
    command:
      - /bin/sh
      - -e
      - -c
      - >
        go test -timeout 60s
        -run ^TestPinotIntegrationSuite$
        -tags pinotintegration
        -count 1
        -v
        github.com/uber/cadence/host
        | tee test.log
    ports:
      - "7933:7933"
      - "7934:7934"
      - "7935:7935"
      - "7939:7939"
    environment:
      - "CASSANDRA=1"
      - "CASSANDRA_SEEDS=cassandra"
      - "ES_SEEDS=elasticsearch"
      - "TEST_TAG=pinotintegration"
      - "ES_VERSION=v7"
      - "KAFKA_SEEDS=kafka"
#      - "KAFKA_PORT=9092"
#      - "ZOOKEEPER_SEEDS=zookeeper"
#      - "ZOOKEEPER_PORT=2181"
      - BUILDKITE_AGENT_ACCESS_TOKEN
      - BUILDKITE_JOB_ID
      - BUILDKITE_BUILD_ID
      - BUILDKITE_BUILD_NUMBER
    depends_on:
      cassandra:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      kafka:
        condition: service_started
      pinot-controller:
        condition: service_started
      pinot-broker:
        condition: service_started
      pinot-server:
        condition: service_started
      pinot-admin:
        condition: service_started
    volumes:
      - ../../:/cadence
    networks:
      services-network:
        aliases:
          - integration-test

#  cadence:
#    image: ubercadence/server:master-auto-setup
#    ports:
#      - "8000:8000"
#      - "8001:8001"
#      - "8002:8002"
#      - "8003:8003"
#      - "7933:7933"
#      - "7934:7934"
#      - "7935:7935"
#      - "7939:7939"
#      - "7833:7833"
#    environment:
#      - "ENABLE_ES=true"
#      - "ES_SEEDS=elasticsearch"
#      #      - "ASYNC_WF_KAFKA_QUEUE_ENABLED=true"
#      #      - "ASYNC_WF_KAFKA_QUEUE_TOPIC=async-wf-topic1"
#      - "KAFKA_SEEDS=kafka"
#      - "KAFKA_PORT=9092"
#      - "ZOOKEEPER_SEEDS=zookeeper"
#      - "ZOOKEEPER_PORT=2181"
#      - "CASSANDRA_SEEDS=cassandra"
#      - "PROMETHEUS_ENDPOINT_0=0.0.0.0:8000"
#      - "PROMETHEUS_ENDPOINT_1=0.0.0.0:8001"
#      - "PROMETHEUS_ENDPOINT_2=0.0.0.0:8002"
#      - "PROMETHEUS_ENDPOINT_3=0.0.0.0:8003"
#      - "DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development_pinot.yaml"
#      - "LOG_LEVEL=debug"
#    depends_on:
#      - cassandra
#      - prometheus
#      - kafka
#      - elasticsearch
#    networks:
#      services-network:
#        aliases:
#          - cadence


networks:
  services-network:
    name: services-network
    driver: bridge
