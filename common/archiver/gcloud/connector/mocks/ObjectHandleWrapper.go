// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/archiver/gcloud/connector (interfaces: ObjectHandleWrapper)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/ObjectHandleWrapper.go github.com/uber/cadence/common/archiver/gcloud/connector ObjectHandleWrapper
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "cloud.google.com/go/storage"
	connector "github.com/uber/cadence/common/archiver/gcloud/connector"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectHandleWrapper is a mock of ObjectHandleWrapper interface.
type MockObjectHandleWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockObjectHandleWrapperMockRecorder
	isgomock struct{}
}

// MockObjectHandleWrapperMockRecorder is the mock recorder for MockObjectHandleWrapper.
type MockObjectHandleWrapperMockRecorder struct {
	mock *MockObjectHandleWrapper
}

// NewMockObjectHandleWrapper creates a new mock instance.
func NewMockObjectHandleWrapper(ctrl *gomock.Controller) *MockObjectHandleWrapper {
	mock := &MockObjectHandleWrapper{ctrl: ctrl}
	mock.recorder = &MockObjectHandleWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectHandleWrapper) EXPECT() *MockObjectHandleWrapperMockRecorder {
	return m.recorder
}

// Attrs mocks base method.
func (m *MockObjectHandleWrapper) Attrs(ctx context.Context) (*storage.ObjectAttrs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attrs", ctx)
	ret0, _ := ret[0].(*storage.ObjectAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attrs indicates an expected call of Attrs.
func (mr *MockObjectHandleWrapperMockRecorder) Attrs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockObjectHandleWrapper)(nil).Attrs), ctx)
}

// NewReader mocks base method.
func (m *MockObjectHandleWrapper) NewReader(ctx context.Context) (connector.ReaderWrapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", ctx)
	ret0, _ := ret[0].(connector.ReaderWrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader.
func (mr *MockObjectHandleWrapperMockRecorder) NewReader(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockObjectHandleWrapper)(nil).NewReader), ctx)
}

// NewWriter mocks base method.
func (m *MockObjectHandleWrapper) NewWriter(ctx context.Context) connector.WriterWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriter", ctx)
	ret0, _ := ret[0].(connector.WriterWrapper)
	return ret0
}

// NewWriter indicates an expected call of NewWriter.
func (mr *MockObjectHandleWrapperMockRecorder) NewWriter(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*MockObjectHandleWrapper)(nil).NewWriter), ctx)
}
