(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{381:function(t,e,n){"use strict";n.r(e);var a=n(8),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"activity-and-workflow-retries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#activity-and-workflow-retries"}},[t._v("#")]),t._v(" Activity and workflow retries")]),t._v(" "),n("p",[t._v(":activity:Activities: and :workflow:workflows: can fail due to various intermediate conditions. In those cases, we want\nto retry the failed :activity: or child :workflow: or even the parent :workflow:. This can be achieved\nby supplying an optional retry policy. A retry policy looks like the following:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RetryPolicy defines the retry policy.")]),t._v("\nRetryPolicy "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Backoff interval for the first retry. If coefficient is 1.0 then it is used for all retries.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Required, no default value.")]),t._v("\n    InitialInterval time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Coefficient used to calculate the next retry backoff interval.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The next retry interval is previous interval multiplied by this coefficient.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Must be 1 or larger. Default is 2.0.")]),t._v("\n    BackoffCoefficient "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Maximum backoff interval between retries. Exponential backoff leads to interval increase.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This value is the cap of the interval. Default is 100x of initial interval.")]),t._v("\n    MaximumInterval time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Maximum time to retry. Either ExpirationInterval or MaximumAttempts is required.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When exceeded the retries stop even if maximum retries is not reached yet.")]),t._v("\n    ExpirationInterval time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Maximum number of attempts. When exceeded the retries stop even if not expired yet.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If not set or set to 0, it means unlimited, and relies on ExpirationInterval to stop.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Either MaximumAttempts or ExpirationInterval is required.")]),t._v("\n    MaximumAttempts "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Non-Retriable errors. This is optional. Cadence server will stop retry if error reason matches this list.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error reason for custom error is specified when your activity/workflow returns cadence.NewCustomError(reason).")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Error reason for panic error is "cadenceInternal:Panic".')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Error reason for any other error is "cadenceInternal:Generic".')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Error reason for timeouts is: "cadenceInternal:Timeout TIMEOUT_TYPE". TIMEOUT_TYPE could be START_TO_CLOSE or HEARTBEAT.')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note that cancellation is not a failure, so it won't be retried.")]),t._v("\n    NonRetriableErrorReasons "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("To enable retry, supply a custom retry policy to "),n("code",[t._v("ActivityOptions")]),t._v(" or "),n("code",[t._v("ChildWorkflowOptions")]),t._v("\nwhen you execute them.")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("expiration "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Minute "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nretryPolicy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cadence"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RetryPolicy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    InitialInterval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    BackoffCoefficient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    MaximumInterval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    expiration"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ExpirationInterval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Minute "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    MaximumAttempts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nao "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" workflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ActivityOptions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ScheduleToStartTimeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" expiration"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    StartToCloseTimeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    expiration"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    HeartbeatTimeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("       time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    RetryPolicy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("            retryPolicy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable retry.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nctx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithActivityOptions")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ao"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nactivityFuture "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" workflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecuteActivity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SampleActivity"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("If :activity: heartbeat its progress before it failed, the retry attempt will contain the progress\nso :activity: implementation could resume from failed progress like:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SampleActivity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inputArg InputParams"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    startIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" inputArg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StartIndex\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" activity"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("HasHeartbeatDetails")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Recover from finished progress.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" finishedIndex "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" activity"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetHeartbeatDetails")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("finishedIndex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" err "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            startIdx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" finishedIndex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Start from next one.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Normal activity logic...")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("startIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("inputArg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EndIdx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Code for processing item i goes here...")]),t._v("\n        activity"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("RecordHeartbeat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Report progress.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("Like retry for an :activity:, you need to supply a retry policy for "),n("code",[t._v("ChildWorkflowOptions")]),t._v(" to enable\nretry for a child :workflow:. To enable retry for a parent :workflow:, supply a retry policy when\nyou start a :workflow: via "),n("code",[t._v("StartWorkflowOptions")]),t._v(".")]),t._v(" "),n("p",[t._v("There are some subtle changes to :workflow:'s history :event:events: when "),n("code",[t._v("RetryPolicy")]),t._v(" is used.\nFor an :activity: with "),n("code",[t._v("RetryPolicy")]),t._v(":")]),t._v(" "),n("ul",[n("li",[t._v("The "),n("code",[t._v("ActivityTaskScheduledEvent")]),t._v(" will have extended "),n("code",[t._v("ScheduleToStartTimeout")]),t._v(" and "),n("code",[t._v("ScheduleToCloseTimeout")]),t._v(". These two timeouts\nwill be overwritten by the server to be as long as the retry policy's "),n("code",[t._v("ExpirationInterval")]),t._v(". If the "),n("code",[t._v("ExpirationInterval")]),t._v("\nis not specified, it will be overwritten to the :workflow:'s timeout.")]),t._v(" "),n("li",[t._v("The "),n("code",[t._v("ActivityTaskStartedEvent")]),t._v(" will not show up in history until the :activity: is completed or failed with no more retry.\nThis is to avoid recording the "),n("code",[t._v("ActivityTaskStarted")]),t._v(" :event: but later it failed and retried. Using the "),n("code",[t._v("DescribeWorkflowExecution")]),t._v("\nAPI will return the "),n("code",[t._v("PendingActivityInfo")]),t._v(" and it will contain "),n("code",[t._v("attemptCount")]),t._v(" if it is retrying.")])]),t._v(" "),n("p",[t._v("For a :workflow: with "),n("code",[t._v("RetryPolicy")]),t._v(":")]),t._v(" "),n("ul",[n("li",[t._v("If a :workflow: failed and needs to retry, the :workflow_execution: will be closed with a "),n("code",[t._v("ContinueAsNew")]),t._v(" :event:. The :event:\nwill have the "),n("code",[t._v("ContinueAsNewInitiator")]),t._v(" set to "),n("code",[t._v("RetryPolicy")]),t._v(" and the new "),n("code",[t._v("RunID")]),t._v(" for the next retry attempt.")]),t._v(" "),n("li",[t._v("The new attempt will be created immediately. But the first :decision_task: won't be scheduled until the backoff duration\nwhich is also recorded in the new run's "),n("code",[t._v("WorkflowExecutionStartedEventAttributes")]),t._v(" :event: as "),n("code",[t._v("firstDecisionTaskBackoffSeconds")]),t._v(".")])])])}),[],!1,null,null,null);e.default=s.exports}}]);