// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/elasticsearch (interfaces: GenericClient)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/GenericClient.go github.com/uber/cadence/common/elasticsearch GenericClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	elasticsearch "github.com/uber/cadence/common/elasticsearch"
	bulk "github.com/uber/cadence/common/elasticsearch/bulk"
	persistence "github.com/uber/cadence/common/persistence"
	gomock "go.uber.org/mock/gomock"
)

// MockGenericClient is a mock of GenericClient interface.
type MockGenericClient struct {
	ctrl     *gomock.Controller
	recorder *MockGenericClientMockRecorder
	isgomock struct{}
}

// MockGenericClientMockRecorder is the mock recorder for MockGenericClient.
type MockGenericClientMockRecorder struct {
	mock *MockGenericClient
}

// NewMockGenericClient creates a new mock instance.
func NewMockGenericClient(ctrl *gomock.Controller) *MockGenericClient {
	mock := &MockGenericClient{ctrl: ctrl}
	mock.recorder = &MockGenericClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericClient) EXPECT() *MockGenericClientMockRecorder {
	return m.recorder
}

// CountByQuery mocks base method.
func (m *MockGenericClient) CountByQuery(ctx context.Context, index, query string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByQuery", ctx, index, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByQuery indicates an expected call of CountByQuery.
func (mr *MockGenericClientMockRecorder) CountByQuery(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByQuery", reflect.TypeOf((*MockGenericClient)(nil).CountByQuery), ctx, index, query)
}

// CreateIndex mocks base method.
func (m *MockGenericClient) CreateIndex(ctx context.Context, index string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", ctx, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockGenericClientMockRecorder) CreateIndex(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockGenericClient)(nil).CreateIndex), ctx, index)
}

// IsNotFoundError mocks base method.
func (m *MockGenericClient) IsNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFoundError indicates an expected call of IsNotFoundError.
func (mr *MockGenericClientMockRecorder) IsNotFoundError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFoundError", reflect.TypeOf((*MockGenericClient)(nil).IsNotFoundError), err)
}

// PutMapping mocks base method.
func (m *MockGenericClient) PutMapping(ctx context.Context, index, root, key, valueType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMapping", ctx, index, root, key, valueType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMapping indicates an expected call of PutMapping.
func (mr *MockGenericClientMockRecorder) PutMapping(ctx, index, root, key, valueType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMapping", reflect.TypeOf((*MockGenericClient)(nil).PutMapping), ctx, index, root, key, valueType)
}

// RunBulkProcessor mocks base method.
func (m *MockGenericClient) RunBulkProcessor(ctx context.Context, p *bulk.BulkProcessorParameters) (bulk.GenericBulkProcessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunBulkProcessor", ctx, p)
	ret0, _ := ret[0].(bulk.GenericBulkProcessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBulkProcessor indicates an expected call of RunBulkProcessor.
func (mr *MockGenericClientMockRecorder) RunBulkProcessor(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBulkProcessor", reflect.TypeOf((*MockGenericClient)(nil).RunBulkProcessor), ctx, p)
}

// ScanByQuery mocks base method.
func (m *MockGenericClient) ScanByQuery(ctx context.Context, request *elasticsearch.ScanByQueryRequest) (*persistence.InternalListWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanByQuery", ctx, request)
	ret0, _ := ret[0].(*persistence.InternalListWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanByQuery indicates an expected call of ScanByQuery.
func (mr *MockGenericClientMockRecorder) ScanByQuery(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanByQuery", reflect.TypeOf((*MockGenericClient)(nil).ScanByQuery), ctx, request)
}

// Search mocks base method.
func (m *MockGenericClient) Search(ctx context.Context, request *elasticsearch.SearchRequest) (*persistence.InternalListWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, request)
	ret0, _ := ret[0].(*persistence.InternalListWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockGenericClientMockRecorder) Search(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGenericClient)(nil).Search), ctx, request)
}

// SearchByQuery mocks base method.
func (m *MockGenericClient) SearchByQuery(ctx context.Context, request *elasticsearch.SearchByQueryRequest) (*persistence.InternalListWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByQuery", ctx, request)
	ret0, _ := ret[0].(*persistence.InternalListWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByQuery indicates an expected call of SearchByQuery.
func (mr *MockGenericClientMockRecorder) SearchByQuery(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByQuery", reflect.TypeOf((*MockGenericClient)(nil).SearchByQuery), ctx, request)
}

// SearchForOneClosedExecution mocks base method.
func (m *MockGenericClient) SearchForOneClosedExecution(ctx context.Context, index string, request *persistence.InternalGetClosedWorkflowExecutionRequest) (*persistence.InternalGetClosedWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForOneClosedExecution", ctx, index, request)
	ret0, _ := ret[0].(*persistence.InternalGetClosedWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForOneClosedExecution indicates an expected call of SearchForOneClosedExecution.
func (mr *MockGenericClientMockRecorder) SearchForOneClosedExecution(ctx, index, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForOneClosedExecution", reflect.TypeOf((*MockGenericClient)(nil).SearchForOneClosedExecution), ctx, index, request)
}

// SearchRaw mocks base method.
func (m *MockGenericClient) SearchRaw(ctx context.Context, index, query string) (*elasticsearch.RawResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRaw", ctx, index, query)
	ret0, _ := ret[0].(*elasticsearch.RawResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRaw indicates an expected call of SearchRaw.
func (mr *MockGenericClientMockRecorder) SearchRaw(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRaw", reflect.TypeOf((*MockGenericClient)(nil).SearchRaw), ctx, index, query)
}
