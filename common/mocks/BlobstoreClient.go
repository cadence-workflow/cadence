// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import backoff "github.com/uber/cadence/common/backoff"
import blob "github.com/uber/cadence/common/blobstore/blob"
import blobstore "github.com/uber/cadence/common/blobstore"
import context "context"
import mock "github.com/stretchr/testify/mock"

// BlobstoreClient is an autogenerated mock type for the blobstore.Client type
type BlobstoreClient struct {
	mock.Mock
}

// BucketMetadata provides a mock function with given fields: ctx, bucket
func (_m *BlobstoreClient) BucketMetadata(ctx context.Context, bucket string) (*blobstore.BucketMetadataResponse, error) {
	ret := _m.Called(ctx, bucket)

	var r0 *blobstore.BucketMetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *blobstore.BucketMetadataResponse); ok {
		r0 = rf(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blobstore.BucketMetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, bucket, key
func (_m *BlobstoreClient) Delete(ctx context.Context, bucket string, key blob.Key) (bool, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, blob.Key) bool); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, blob.Key) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Download provides a mock function with given fields: ctx, bucket, key
func (_m *BlobstoreClient) Download(ctx context.Context, bucket string, key blob.Key) (*blob.Blob, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 *blob.Blob
	if rf, ok := ret.Get(0).(func(context.Context, string, blob.Key) *blob.Blob); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob.Blob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, blob.Key) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx, bucket, key
func (_m *BlobstoreClient) Exists(ctx context.Context, bucket string, key blob.Key) (bool, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, blob.Key) bool); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, blob.Key) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetryPolicy provides a mock function with given fields:
func (_m *BlobstoreClient) GetRetryPolicy() backoff.RetryPolicy {
	ret := _m.Called()

	var r0 backoff.RetryPolicy
	if rf, ok := ret.Get(0).(func() backoff.RetryPolicy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backoff.RetryPolicy)
		}
	}

	return r0
}

// IsRetryableError provides a mock function with given fields: err
func (_m *BlobstoreClient) IsRetryableError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListByPrefix provides a mock function with given fields: ctx, bucket, prefix
func (_m *BlobstoreClient) ListByPrefix(ctx context.Context, bucket string, prefix string) ([]blob.Key, error) {
	ret := _m.Called(ctx, bucket, prefix)

	var r0 []blob.Key
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []blob.Key); ok {
		r0 = rf(ctx, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blob.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, bucket, key, _a3
func (_m *BlobstoreClient) Upload(ctx context.Context, bucket string, key blob.Key, _a3 *blob.Blob) error {
	ret := _m.Called(ctx, bucket, key, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, blob.Key, *blob.Blob) error); ok {
		r0 = rf(ctx, bucket, key, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
