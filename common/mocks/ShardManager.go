// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/uber/cadence/common/persistence"
)

// NewShardManager creates a new instance of ShardManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShardManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShardManager {
	mock := &ShardManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ShardManager is an autogenerated mock type for the ShardManager type
type ShardManager struct {
	mock.Mock
}

type ShardManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ShardManager) EXPECT() *ShardManager_Expecter {
	return &ShardManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type ShardManager
func (_mock *ShardManager) Close() {
	_mock.Called()
	return
}

// ShardManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ShardManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ShardManager_Expecter) Close() *ShardManager_Close_Call {
	return &ShardManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ShardManager_Close_Call) Run(run func()) *ShardManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShardManager_Close_Call) Return() *ShardManager_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *ShardManager_Close_Call) RunAndReturn(run func()) *ShardManager_Close_Call {
	_c.Run(run)
	return _c
}

// CreateShard provides a mock function for the type ShardManager
func (_mock *ShardManager) CreateShard(ctx context.Context, request *persistence.CreateShardRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateShard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.CreateShardRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ShardManager_CreateShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShard'
type ShardManager_CreateShard_Call struct {
	*mock.Call
}

// CreateShard is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.CreateShardRequest
func (_e *ShardManager_Expecter) CreateShard(ctx interface{}, request interface{}) *ShardManager_CreateShard_Call {
	return &ShardManager_CreateShard_Call{Call: _e.mock.On("CreateShard", ctx, request)}
}

func (_c *ShardManager_CreateShard_Call) Run(run func(ctx context.Context, request *persistence.CreateShardRequest)) *ShardManager_CreateShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.CreateShardRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.CreateShardRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ShardManager_CreateShard_Call) Return(err error) *ShardManager_CreateShard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ShardManager_CreateShard_Call) RunAndReturn(run func(ctx context.Context, request *persistence.CreateShardRequest) error) *ShardManager_CreateShard_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type ShardManager
func (_mock *ShardManager) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// ShardManager_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ShardManager_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *ShardManager_Expecter) GetName() *ShardManager_GetName_Call {
	return &ShardManager_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *ShardManager_GetName_Call) Run(run func()) *ShardManager_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShardManager_GetName_Call) Return(s string) *ShardManager_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *ShardManager_GetName_Call) RunAndReturn(run func() string) *ShardManager_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetShard provides a mock function for the type ShardManager
func (_mock *ShardManager) GetShard(ctx context.Context, request *persistence.GetShardRequest) (*persistence.GetShardResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetShard")
	}

	var r0 *persistence.GetShardResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetShardRequest) (*persistence.GetShardResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.GetShardRequest) *persistence.GetShardResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.GetShardResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *persistence.GetShardRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ShardManager_GetShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShard'
type ShardManager_GetShard_Call struct {
	*mock.Call
}

// GetShard is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.GetShardRequest
func (_e *ShardManager_Expecter) GetShard(ctx interface{}, request interface{}) *ShardManager_GetShard_Call {
	return &ShardManager_GetShard_Call{Call: _e.mock.On("GetShard", ctx, request)}
}

func (_c *ShardManager_GetShard_Call) Run(run func(ctx context.Context, request *persistence.GetShardRequest)) *ShardManager_GetShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.GetShardRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.GetShardRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ShardManager_GetShard_Call) Return(getShardResponse *persistence.GetShardResponse, err error) *ShardManager_GetShard_Call {
	_c.Call.Return(getShardResponse, err)
	return _c
}

func (_c *ShardManager_GetShard_Call) RunAndReturn(run func(ctx context.Context, request *persistence.GetShardRequest) (*persistence.GetShardResponse, error)) *ShardManager_GetShard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShard provides a mock function for the type ShardManager
func (_mock *ShardManager) UpdateShard(ctx context.Context, request *persistence.UpdateShardRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *persistence.UpdateShardRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ShardManager_UpdateShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShard'
type ShardManager_UpdateShard_Call struct {
	*mock.Call
}

// UpdateShard is a helper method to define mock.On call
//   - ctx context.Context
//   - request *persistence.UpdateShardRequest
func (_e *ShardManager_Expecter) UpdateShard(ctx interface{}, request interface{}) *ShardManager_UpdateShard_Call {
	return &ShardManager_UpdateShard_Call{Call: _e.mock.On("UpdateShard", ctx, request)}
}

func (_c *ShardManager_UpdateShard_Call) Run(run func(ctx context.Context, request *persistence.UpdateShardRequest)) *ShardManager_UpdateShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *persistence.UpdateShardRequest
		if args[1] != nil {
			arg1 = args[1].(*persistence.UpdateShardRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ShardManager_UpdateShard_Call) Return(err error) *ShardManager_UpdateShard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ShardManager_UpdateShard_Call) RunAndReturn(run func(ctx context.Context, request *persistence.UpdateShardRequest) error) *ShardManager_UpdateShard_Call {
	_c.Call.Return(run)
	return _c
}
