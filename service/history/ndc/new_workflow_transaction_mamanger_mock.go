// Code generated by MockGen. DO NOT EDIT.
// Source: new_workflow_transaction_manager.go

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	execution "github.com/uber/cadence/service/history/execution"
)

// MocktransactionManagerForNewWorkflow is a mock of transactionManagerForNewWorkflow interface.
type MocktransactionManagerForNewWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionManagerForNewWorkflowMockRecorder
}

// MocktransactionManagerForNewWorkflowMockRecorder is the mock recorder for MocktransactionManagerForNewWorkflow.
type MocktransactionManagerForNewWorkflowMockRecorder struct {
	mock *MocktransactionManagerForNewWorkflow
}

// NewMocktransactionManagerForNewWorkflow creates a new mock instance.
func NewMocktransactionManagerForNewWorkflow(ctrl *gomock.Controller) *MocktransactionManagerForNewWorkflow {
	mock := &MocktransactionManagerForNewWorkflow{ctrl: ctrl}
	mock.recorder = &MocktransactionManagerForNewWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionManagerForNewWorkflow) EXPECT() *MocktransactionManagerForNewWorkflowMockRecorder {
	return m.recorder
}

// dispatchForNewWorkflow mocks base method.
func (m *MocktransactionManagerForNewWorkflow) dispatchForNewWorkflow(ctx context.Context, now time.Time, targetWorkflow execution.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchForNewWorkflow", ctx, now, targetWorkflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchForNewWorkflow indicates an expected call of dispatchForNewWorkflow.
func (mr *MocktransactionManagerForNewWorkflowMockRecorder) dispatchForNewWorkflow(ctx, now, targetWorkflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchForNewWorkflow", reflect.TypeOf((*MocktransactionManagerForNewWorkflow)(nil).dispatchForNewWorkflow), ctx, now, targetWorkflow)
}
