(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{372:function(e,a,t){"use strict";t.r(a);var s=t(8),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"command-line-interface"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface"}},[e._v("#")]),e._v(" Command Line Interface")]),e._v(" "),t("p",[e._v("The Cadence :CLI: is a command-line tool you can use to perform various :task:tasks: on a Cadence server. It can perform\n:domain: operations such as register, update, and describe as well as :workflow: operations like start\n:workflow:, show :workflow: history, and :signal: :workflow:.")]),e._v(" "),t("h2",{attrs:{id:"using-the-cli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-the-cli"}},[e._v("#")]),e._v(" Using the CLI")]),e._v(" "),t("p",[e._v("The Cadence :CLI: can be used directly from the Docker Hub image "),t("em",[e._v("ubercadence/cli")]),e._v(" or by building the :CLI: tool\nlocally.")]),e._v(" "),t("p",[e._v("Example of using the docker image to describe a :domain::")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("docker run --rm ubercadence/cli:master --domain samples-domain domain describe\n")])])]),t("p",[e._v('On Docker versions 18.03 and later, you may get a "connection refused" error. You can work around this by setting the host to "host.docker.internal" (see '),t("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(" for more info).")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("docker run --rm ubercadence/cli:master --address host.docker.internal:7933 --domain samples-domain domain describe\n")])])]),t("p",[e._v("To build the :CLI: tool locally, clone the "),t("a",{attrs:{href:"https://github.com/uber/cadence",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cadence server repo"),t("OutboundLink")],1),e._v(" and run\n"),t("code",[e._v("make bins")]),e._v(". This produces an executable called "),t("code",[e._v("cadence")]),e._v(". With a local build, the same command to\ndescribe a :domain: would look like this:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence --domain samples-domain domain describe\n")])])]),t("p",[e._v("The example commands below will use "),t("code",[e._v("./cadence")]),e._v(" for brevity.")]),e._v(" "),t("h2",{attrs:{id:"environment-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#environment-variables"}},[e._v("#")]),e._v(" Environment variables")]),e._v(" "),t("p",[e._v("Setting environment variables for repeated parameters can shorten the :CLI: commands.")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("CADENCE_CLI_ADDRESS")]),e._v(" - host:port for Cadence frontend service, the default is for the local server")]),e._v(" "),t("li",[t("strong",[e._v("CADENCE_CLI_DOMAIN")]),e._v(" - default :workflow: :domain:, so you don't need to specify "),t("code",[e._v("--domain")])])]),e._v(" "),t("h2",{attrs:{id:"quick-start"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quick-start"}},[e._v("#")]),e._v(" Quick Start")]),e._v(" "),t("p",[e._v("Run "),t("code",[e._v("./cadence")]),e._v(" for help on top level commands and global options\nRun "),t("code",[e._v("./cadence domain")]),e._v(" for help on :domain: operations\nRun "),t("code",[e._v("./cadence workflow")]),e._v(" for help on :workflow: operations\nRun "),t("code",[e._v("./cadence tasklist")]),e._v(" for help on tasklist operations\n("),t("code",[e._v("./cadence help")]),e._v(", "),t("code",[e._v("./cadence help [domain|workflow]")]),e._v(" will also print help messages)")]),e._v(" "),t("p",[t("strong",[e._v("Note:")]),e._v(" make sure you have a Cadence server running before using :CLI:")]),e._v(" "),t("h3",{attrs:{id:"domain-operation-examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#domain-operation-examples"}},[e._v("#")]),e._v(" Domain operation examples")]),e._v(" "),t("ul",[t("li",[e._v('Register a new :domain: named "samples-domain":')])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence --domain samples-domain domain register --global_domain "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OR using short alias")]),e._v("\n./cadence --do samples-domain d re --gd "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])]),t("ul",[t("li",[e._v('View "samples-domain" details:')])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence --domain samples-domain domain describe\n")])])]),t("h3",{attrs:{id:"workflow-operation-examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workflow-operation-examples"}},[e._v("#")]),e._v(" Workflow operation examples")]),e._v(" "),t("p",[e._v("The following examples assume the CADENCE_CLI_DOMAIN environment variable is set.")]),e._v(" "),t("h4",{attrs:{id:"run-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-workflow"}},[e._v("#")]),e._v(" Run workflow")]),e._v(" "),t("p",[e._v("Start a :workflow: and see its progress. This command doesn't finish until :workflow: completes.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow run --tl helloWorldGroup --wt main.Workflow --et "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# view help messages for workflow run")]),e._v("\n./cadence workflow run -h\n")])])]),t("p",[e._v("Brief explanation:\nTo run a :workflow:, the user must specify the following:")]),e._v(" "),t("ol",[t("li",[e._v("Tasklist name (--tl)")]),e._v(" "),t("li",[e._v("Workflow type (--wt)")]),e._v(" "),t("li",[e._v("Execution start to close timeout in seconds (--et)")]),e._v(" "),t("li",[e._v("Input in JSON format (--i) (optional)")])]),e._v(" "),t("p",[e._v("s example uses "),t("a",{attrs:{href:"https://github.com/uber-common/cadence-samples/blob/master/cmd/samples/recipes/helloworld/helloworld_workflow.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("this cadence-samples workflow"),t("OutboundLink")],1),e._v("\nand takes a string as input with the "),t("code",[e._v("-i '\"cadence\"'")]),e._v(" parameter. Single quotes ("),t("code",[e._v("''")]),e._v(") are used to wrap input as JSON.")]),e._v(" "),t("p",[t("strong",[e._v("Note:")]),e._v(" You need to start the :worker: so that the :workflow: can make progress.\n(Run "),t("code",[e._v("make && ./bin/helloworld -m worker")]),e._v(" in cadence-samples to start the :worker:)")]),e._v(" "),t("h4",{attrs:{id:"show-running-workers-of-a-tasklist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-running-workers-of-a-tasklist"}},[e._v("#")]),e._v(" Show running workers of a tasklist")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence tasklist desc --tl helloWorldGroup\n")])])]),t("h4",{attrs:{id:"start-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#start-workflow"}},[e._v("#")]),e._v(" Start workflow")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow start --tl helloWorldGroup --wt main.Workflow --et "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# view help messages for workflow start")]),e._v("\n./cadence workflow start -h\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for a workflow with multiple inputs, separate each json with space/newline like")]),e._v("\n./cadence workflow start --tl helloWorldGroup --wt main.WorkflowWith3Args --et "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'"your_input_string" 123 {"Name":"my-string", "Age":12345}\'')]),e._v("\n")])])]),t("p",[e._v("The :workflow: "),t("code",[e._v("start")]),e._v(" command is similar to the "),t("code",[e._v("run")]),e._v(" command, but immediately returns the workflow_id and\nrun_id after starting the :workflow:. Use the "),t("code",[e._v("show")]),e._v(" command to view the :workflow:'s history/progress.")]),e._v(" "),t("h5",{attrs:{id:"reuse-the-same-workflow-id-when-starting-running-a-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reuse-the-same-workflow-id-when-starting-running-a-workflow"}},[e._v("#")]),e._v(" Reuse the same workflow id when starting/running a workflow")]),e._v(" "),t("p",[e._v("Use option "),t("code",[e._v("--workflowidreusepolicy")]),e._v(" or "),t("code",[e._v("--wrp")]),e._v(" to configure the :workflow_ID: reuse policy.\n"),t("strong",[e._v("Option 0 AllowDuplicateFailedOnly:")]),e._v(" Allow starting a :workflow_execution: using the same :workflow_ID: when a :workflow: with the same :workflow_ID: is not already running and the last execution close state is one of "),t("em",[e._v("[terminated, cancelled, timedout, failed]")]),e._v(".\n"),t("strong",[e._v("Option 1 AllowDuplicate:")]),e._v(" Allow starting a :workflow_execution: using the same :workflow_ID: when a :workflow: with the same :workflow_ID: is not already running.\n"),t("strong",[e._v("Option 2 RejectDuplicate:")]),e._v(" Do not allow starting a :workflow_execution: using the same :workflow_ID: as a previous :workflow:.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# use AllowDuplicateFailedOnly option to start a workflow")]),e._v("\n./cadence workflow start --tl helloWorldGroup --wt main.Workflow --et "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v(" --wid "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<duplicated workflow id>"')]),e._v(" --wrp "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# use AllowDuplicate option to run a workflow")]),e._v("\n./cadence workflow run --tl helloWorldGroup --wt main.Workflow --et "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v(" --wid "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<duplicated workflow id>"')]),e._v(" --wrp "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])]),t("h5",{attrs:{id:"start-a-workflow-with-a-memo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#start-a-workflow-with-a-memo"}},[e._v("#")]),e._v(" Start a workflow with a memo")]),e._v(" "),t("p",[e._v("Memos are immutable key/value pairs that can be attached to a :workflow: run when starting the :workflow:. These are\nvisible when listing :workflow:workflows:. More information on memos can be found\n"),t("a",{attrs:{href:"../concepts/search-workflows#memo-vs-search-attributes"}},[e._v("here")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("cadence wf start -tl helloWorldGroup -wt main.Workflow -et "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v(" -memo_key ‘“Service” “Env” “Instance”’ -memo ‘“serverName1” “test” "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("’\n")])])]),t("h4",{attrs:{id:"show-workflow-history"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-workflow-history"}},[e._v("#")]),e._v(" Show workflow history")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow show -w 3ea6b242-b23c-4279-bb13-f215661b4717 -r 866ae14c-88cf-4f1e-980f-571e031d71b0\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut of this is (without -w -r flag)")]),e._v("\n./cadence workflow showid 3ea6b242-b23c-4279-bb13-f215661b4717 866ae14c-88cf-4f1e-980f-571e031d71b0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if run_id is not provided, it will show the latest run history of that workflow_id")]),e._v("\n./cadence workflow show -w 3ea6b242-b23c-4279-bb13-f215661b4717\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut of this is")]),e._v("\n./cadence workflow showid 3ea6b242-b23c-4279-bb13-f215661b4717\n")])])]),t("h4",{attrs:{id:"show-workflow-execution-information"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-workflow-execution-information"}},[e._v("#")]),e._v(" Show workflow execution information")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow describe -w 3ea6b242-b23c-4279-bb13-f215661b4717 -r 866ae14c-88cf-4f1e-980f-571e031d71b0\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut of this is (without -w -r flag)")]),e._v("\n./cadence workflow describeid 3ea6b242-b23c-4279-bb13-f215661b4717 866ae14c-88cf-4f1e-980f-571e031d71b0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if run_id is not provided, it will show the latest workflow execution of that workflow_id")]),e._v("\n./cadence workflow describe -w 3ea6b242-b23c-4279-bb13-f215661b4717\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut of this is")]),e._v("\n./cadence workflow describeid 3ea6b242-b23c-4279-bb13-f215661b4717\n")])])]),t("h4",{attrs:{id:"list-closed-or-open-workflow-executions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-closed-or-open-workflow-executions"}},[e._v("#")]),e._v(" List closed or open workflow executions")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow list\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# default will only show one page, to view more items, use --more flag")]),e._v("\n./cadence workflow list -m\n")])])]),t("p",[e._v("Use "),t("strong",[e._v("--query")]),e._v(" to list :workflow:workflows: with SQL like :query::")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow list --query "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"WorkflowType='main.SampleParentWorkflow' AND CloseTime = missing \"")]),e._v("\n")])])]),t("p",[e._v('This will return all open :workflow:workflows: with workflowType as "main.SampleParentWorkflow".')]),e._v(" "),t("h4",{attrs:{id:"query-workflow-execution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#query-workflow-execution"}},[e._v("#")]),e._v(" Query workflow execution")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# use custom query type")]),e._v("\n./cadence workflow query -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --qt "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("query-type"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# use build-in query type "__stack_trace" which is supported by Cadence client library')]),e._v("\n./cadence workflow query -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --qt __stack_trace\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut to query using __stack_trace is (without --qt flag)")]),e._v("\n./cadence workflow stack -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),t("h4",{attrs:{id:"signal-cancel-terminate-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#signal-cancel-terminate-workflow"}},[e._v("#")]),e._v(" Signal, cancel, terminate workflow")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# signal")]),e._v("\n./cadence workflow signal -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -n "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("signal-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"signal-value\"'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cancel")]),e._v("\n./cadence workflow cancel -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# terminate")]),e._v("\n./cadence workflow terminate -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reason\n")])])]),t("p",[e._v("Terminating a running :workflow_execution: will record a WorkflowExecutionTerminated :event: as the closing :event: in the history. No more :decision_task:decision_tasks: will be scheduled for a terminated :workflow_execution:.\nCanceling a running :workflow_execution: will record a WorkflowExecutionCancelRequested :event: in the history, and a new :decision_task: will be scheduled. The :workflow: has a chance to do some clean up work after cancellation.")]),e._v(" "),t("h4",{attrs:{id:"signal-cancel-terminate-workflows-as-a-batch-job"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#signal-cancel-terminate-workflows-as-a-batch-job"}},[e._v("#")]),e._v(" Signal, cancel, terminate workflows as a batch job")]),e._v(" "),t("p",[e._v("Batch job is based on List Workflow Query("),t("strong",[e._v("--query")]),e._v("). It supports :signal:, cancel and terminate as batch job type.\nFor terminating :workflow:workflows: as batch job, it will terminte the children recursively.")]),e._v(" "),t("p",[e._v("Start a batch job(using :signal: as batch type):")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("cadence --do samples-domain wf batch start --query "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"WorkflowType='main.SampleParentWorkflow' AND CloseTime=missing\"")]),e._v(" --reason "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test"')]),e._v(" --bt signal --sig testname\nThis batch job will be operating on "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" workflows.\nPlease confirm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Yes/No"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(":yes\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"jobID"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<batch-job-id>"')]),e._v(",\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"msg"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"batch job is started"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),t("p",[e._v("You need to remember the JobID or use List command to get all your batch jobs:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("cadence --do samples-domain wf batch list\n")])])]),t("p",[e._v("Describe the progress of a batch job:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("cadence --do samples-domain wf batch desc -jid "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("batch-job-id"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),t("p",[e._v("Terminate a batch job:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("cadence --do samples-domain wf batch terminate -jid "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("batch-job-id"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),t("p",[e._v("Note that the operation performed by a batch will not be rolled back by terminating the batch. However, you can use reset to rollback your :workflow:workflows:.")]),e._v(" "),t("h4",{attrs:{id:"restart-reset-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restart-reset-workflow"}},[e._v("#")]),e._v(" Restart, reset workflow")]),e._v(" "),t("p",[e._v("The Reset command allows resetting a :workflow: to a particular point and continue running from there.\nThere are a lot of use cases:")]),e._v(" "),t("ul",[t("li",[e._v("Rerun a failed :workflow: from the beginning with the same start parameters.")]),e._v(" "),t("li",[e._v("Rerun a failed :workflow: from the failing point without losing the achieved progress(history).")]),e._v(" "),t("li",[e._v("After deploying new code, reset an open :workflow: to let the :workflow: run to different flows.")])]),e._v(" "),t("p",[e._v("You can reset to some predefined :event: types:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow reset -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reset_type "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("reset_type"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reason "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"some_reason"')]),e._v("\n")])])]),t("ul",[t("li",[e._v("FirstDecisionCompleted: reset to the beginning of the history.")]),e._v(" "),t("li",[e._v("LastDecisionCompleted: reset to the end of the history.")]),e._v(" "),t("li",[e._v("LastContinuedAsNew: reset to the end of the history for the previous run.")])]),e._v(" "),t("p",[e._v("If you are familiar with the Cadence history :event:, You can also reset to any :decision: finish :event: by using:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow reset -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --event_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("decision_finish_event_id"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reason "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"some_reason"')]),e._v("\n")])])]),t("p",[e._v("Some things to note:")]),e._v(" "),t("ul",[t("li",[e._v("When reset, a new run will be kicked off with the same workflowID. But if there is a running execution for the workflow(workflowID), the current run will be terminated.")]),e._v(" "),t("li",[e._v("decision_finish_event_id is the ID of :event:events: of the type: DecisionTaskComplete/DecisionTaskFailed/DecisionTaskTimeout.")]),e._v(" "),t("li",[e._v("To restart a :workflow: from the beginning, reset to the first :decision_task: finish :event:.")])]),e._v(" "),t("p",[e._v("To reset multiple :workflow:workflows:, you can use batch reset command:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence workflow reset-batch --input_file "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("file_of_workflows_to_reset"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reset_type "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("reset_type"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reason "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"some_reason"')]),e._v("\n")])])]),t("h4",{attrs:{id:"recovery-from-bad-deployment-auto-reset-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recovery-from-bad-deployment-auto-reset-workflow"}},[e._v("#")]),e._v(" Recovery from bad deployment -- auto-reset workflow")]),e._v(" "),t("p",[e._v("If a bad deployment lets a :workflow: run into a wrong state, you might want to reset the :workflow: to the point that the bad deployment started to run. But usually it is not easy to find out all the :workflow:workflows: impacted, and every reset point for each :workflow:. In this case, auto-reset will automatically reset all the :workflow:workflows: given a bad deployment identifier.")]),e._v(" "),t("p",[e._v("Let's get familiar with some concepts. Each deployment will have an identifier, we call it \""),t("strong",[e._v("Binary Checksum")]),e._v('" as it is usually generated by the md5sum of a binary file. For a :workflow:, each binary checksum will be associated with an '),t("strong",[e._v("auto-reset point")]),e._v(", which contains a "),t("strong",[e._v("runID")]),e._v(", an "),t("strong",[e._v("eventID")]),e._v(", and the "),t("strong",[e._v("created_time")]),e._v(" that binary/deployment made the first :decision: for the :workflow:.")]),e._v(" "),t("p",[e._v("To find out which "),t("strong",[e._v("binary checksum")]),e._v(" of the bad deployment to reset, you should be aware of at least one :workflow: running into a bad state. Use the describe command with "),t("strong",[e._v("--reset_points_only")]),e._v(" option to show all the reset points:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence wf desc -w "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("WorkflowID"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  --reset_points_only\n+----------------------------------+--------------------------------+--------------------------------------+---------+\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("         BINARY CHECKSUM          "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("          CREATE TIME           "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("                RUNID                 "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" EVENTID "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n+----------------------------------+--------------------------------+--------------------------------------+---------+\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" c84c5afa552613a83294793f4e664a7f "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2019")]),e._v("-05-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(":01:00.398455019  "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" 2dd29ab7-2dd8-4668-83e0-89cae261cfb1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("       "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" aae748fdc557a3f873adbe1dd066713f "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2019")]),e._v("-05-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("11")]),e._v(":01:00.067691445  "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" d42d21b8-2adb-4313-b069-3837d44d6ce6 "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("       "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])]),t("p",[e._v("Then use this command to tell Cadence to auto-reset all :workflow:workflows: impacted by the bad deployment. The command will store the bad binary checksum into :domain: info and trigger a process to reset all your :workflow:workflows:.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./cadence --do "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("YourDomainName"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" domain update --add_bad_binary aae748fdc557a3f873adbe1dd066713f  --reason "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"rollback bad deployment"')]),e._v("\n")])])]),t("p",[e._v("As you add the bad binary checksum to your :domain:, Cadence will not dispatch any :decision_task:decision_tasks: to the bad binary. So make sure that you have rolled back to a good deployment(or roll out new bits with bug fixes). Otherwise your :workflow: can't make any progress after auto-reset.")])])}),[],!1,null,null,null);a.default=r.exports}}]);