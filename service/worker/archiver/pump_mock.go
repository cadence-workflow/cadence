// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/service/worker/archiver (interfaces: Pump)
//
// Generated by this command:
//
//	mockgen -package=archiver -destination=pump_mock.go github.com/uber/cadence/service/worker/archiver Pump
//

// Package archiver is a generated GoMock package.
package archiver

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPump is a mock of Pump interface.
type MockPump struct {
	ctrl     *gomock.Controller
	recorder *MockPumpMockRecorder
	isgomock struct{}
}

// MockPumpMockRecorder is the mock recorder for MockPump.
type MockPumpMockRecorder struct {
	mock *MockPump
}

// NewMockPump creates a new mock instance.
func NewMockPump(ctrl *gomock.Controller) *MockPump {
	mock := &MockPump{ctrl: ctrl}
	mock.recorder = &MockPumpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPump) EXPECT() *MockPumpMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockPump) Run() PumpResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(PumpResult)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockPumpMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPump)(nil).Run))
}
