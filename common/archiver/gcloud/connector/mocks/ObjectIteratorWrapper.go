// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"cloud.google.com/go/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewObjectIteratorWrapper creates a new instance of ObjectIteratorWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObjectIteratorWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObjectIteratorWrapper {
	mock := &ObjectIteratorWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ObjectIteratorWrapper is an autogenerated mock type for the ObjectIteratorWrapper type
type ObjectIteratorWrapper struct {
	mock.Mock
}

type ObjectIteratorWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *ObjectIteratorWrapper) EXPECT() *ObjectIteratorWrapper_Expecter {
	return &ObjectIteratorWrapper_Expecter{mock: &_m.Mock}
}

// Next provides a mock function for the type ObjectIteratorWrapper
func (_mock *ObjectIteratorWrapper) Next() (*storage.ObjectAttrs, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *storage.ObjectAttrs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*storage.ObjectAttrs, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *storage.ObjectAttrs); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectAttrs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ObjectIteratorWrapper_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type ObjectIteratorWrapper_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *ObjectIteratorWrapper_Expecter) Next() *ObjectIteratorWrapper_Next_Call {
	return &ObjectIteratorWrapper_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *ObjectIteratorWrapper_Next_Call) Run(run func()) *ObjectIteratorWrapper_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ObjectIteratorWrapper_Next_Call) Return(objectAttrs *storage.ObjectAttrs, err error) *ObjectIteratorWrapper_Next_Call {
	_c.Call.Return(objectAttrs, err)
	return _c
}

func (_c *ObjectIteratorWrapper_Next_Call) RunAndReturn(run func() (*storage.ObjectAttrs, error)) *ObjectIteratorWrapper_Next_Call {
	_c.Call.Return(run)
	return _c
}
