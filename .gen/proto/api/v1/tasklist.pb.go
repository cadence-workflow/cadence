// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/tasklist.proto

package apiv1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskListKind int32

const (
	TASK_LIST_KIND_INVALID TaskListKind = 0
	TASK_LIST_KIND_NORMAL  TaskListKind = 1
	TASK_LIST_KIND_STICKY  TaskListKind = 2
)

var TaskListKind_name = map[int32]string{
	0: "TASK_LIST_KIND_INVALID",
	1: "TASK_LIST_KIND_NORMAL",
	2: "TASK_LIST_KIND_STICKY",
}

var TaskListKind_value = map[string]int32{
	"TASK_LIST_KIND_INVALID": 0,
	"TASK_LIST_KIND_NORMAL":  1,
	"TASK_LIST_KIND_STICKY":  2,
}

func (TaskListKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{0}
}

type TaskListType int32

const (
	TASK_LIST_TYPE_INVALID  TaskListType = 0
	TASK_LIST_TYPE_DECISION TaskListType = 1
	TASK_LIST_TYPE_ACTIVITY TaskListType = 2
)

var TaskListType_name = map[int32]string{
	0: "TASK_LIST_TYPE_INVALID",
	1: "TASK_LIST_TYPE_DECISION",
	2: "TASK_LIST_TYPE_ACTIVITY",
}

var TaskListType_value = map[string]int32{
	"TASK_LIST_TYPE_INVALID":  0,
	"TASK_LIST_TYPE_DECISION": 1,
	"TASK_LIST_TYPE_ACTIVITY": 2,
}

func (TaskListType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{1}
}

type TaskList struct {
	Name string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind TaskListKind `protobuf:"varint,2,opt,name=kind,proto3,enum=uber.cadence.api.v1.TaskListKind" json:"kind,omitempty"`
}

func (m *TaskList) Reset()      { *m = TaskList{} }
func (*TaskList) ProtoMessage() {}
func (*TaskList) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{0}
}
func (m *TaskList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskList.Merge(m, src)
}
func (m *TaskList) XXX_Size() int {
	return m.Size()
}
func (m *TaskList) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskList.DiscardUnknown(m)
}

var xxx_messageInfo_TaskList proto.InternalMessageInfo

func (m *TaskList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskList) GetKind() TaskListKind {
	if m != nil {
		return m.Kind
	}
	return TASK_LIST_KIND_INVALID
}

type TaskListMetadata struct {
	MaxTasksPerSecond *types.DoubleValue `protobuf:"bytes,1,opt,name=max_tasks_per_second,json=maxTasksPerSecond,proto3" json:"max_tasks_per_second,omitempty"`
}

func (m *TaskListMetadata) Reset()      { *m = TaskListMetadata{} }
func (*TaskListMetadata) ProtoMessage() {}
func (*TaskListMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{1}
}
func (m *TaskListMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListMetadata.Merge(m, src)
}
func (m *TaskListMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TaskListMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListMetadata proto.InternalMessageInfo

func (m *TaskListMetadata) GetMaxTasksPerSecond() *types.DoubleValue {
	if m != nil {
		return m.MaxTasksPerSecond
	}
	return nil
}

type TaskListPartitionMetadata struct {
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	OwnerHostName string `protobuf:"bytes,2,opt,name=owner_host_name,json=ownerHostName,proto3" json:"owner_host_name,omitempty"`
}

func (m *TaskListPartitionMetadata) Reset()      { *m = TaskListPartitionMetadata{} }
func (*TaskListPartitionMetadata) ProtoMessage() {}
func (*TaskListPartitionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{2}
}
func (m *TaskListPartitionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListPartitionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListPartitionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListPartitionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListPartitionMetadata.Merge(m, src)
}
func (m *TaskListPartitionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TaskListPartitionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListPartitionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListPartitionMetadata proto.InternalMessageInfo

func (m *TaskListPartitionMetadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TaskListPartitionMetadata) GetOwnerHostName() string {
	if m != nil {
		return m.OwnerHostName
	}
	return ""
}

type TaskListStatus struct {
	BacklogCountHint int64        `protobuf:"varint,1,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	ReadLevel        int64        `protobuf:"varint,2,opt,name=read_level,json=readLevel,proto3" json:"read_level,omitempty"`
	AckLevel         int64        `protobuf:"varint,3,opt,name=ack_level,json=ackLevel,proto3" json:"ack_level,omitempty"`
	RatePerSecond    float64      `protobuf:"fixed64,4,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	TaskIdBlock      *TaskIDBlock `protobuf:"bytes,5,opt,name=task_id_block,json=taskIdBlock,proto3" json:"task_id_block,omitempty"`
}

func (m *TaskListStatus) Reset()      { *m = TaskListStatus{} }
func (*TaskListStatus) ProtoMessage() {}
func (*TaskListStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{3}
}
func (m *TaskListStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListStatus.Merge(m, src)
}
func (m *TaskListStatus) XXX_Size() int {
	return m.Size()
}
func (m *TaskListStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListStatus proto.InternalMessageInfo

func (m *TaskListStatus) GetBacklogCountHint() int64 {
	if m != nil {
		return m.BacklogCountHint
	}
	return 0
}

func (m *TaskListStatus) GetReadLevel() int64 {
	if m != nil {
		return m.ReadLevel
	}
	return 0
}

func (m *TaskListStatus) GetAckLevel() int64 {
	if m != nil {
		return m.AckLevel
	}
	return 0
}

func (m *TaskListStatus) GetRatePerSecond() float64 {
	if m != nil {
		return m.RatePerSecond
	}
	return 0
}

func (m *TaskListStatus) GetTaskIdBlock() *TaskIDBlock {
	if m != nil {
		return m.TaskIdBlock
	}
	return nil
}

type TaskIDBlock struct {
	StartId int64 `protobuf:"varint,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	EndId   int64 `protobuf:"varint,2,opt,name=end_id,json=endId,proto3" json:"end_id,omitempty"`
}

func (m *TaskIDBlock) Reset()      { *m = TaskIDBlock{} }
func (*TaskIDBlock) ProtoMessage() {}
func (*TaskIDBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{4}
}
func (m *TaskIDBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskIDBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskIDBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskIDBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskIDBlock.Merge(m, src)
}
func (m *TaskIDBlock) XXX_Size() int {
	return m.Size()
}
func (m *TaskIDBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskIDBlock.DiscardUnknown(m)
}

var xxx_messageInfo_TaskIDBlock proto.InternalMessageInfo

func (m *TaskIDBlock) GetStartId() int64 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *TaskIDBlock) GetEndId() int64 {
	if m != nil {
		return m.EndId
	}
	return 0
}

type PollerInfo struct {
	LastAccessTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=last_access_time,json=lastAccessTime,proto3" json:"last_access_time,omitempty"`
	Identity       string               `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RatePerSecond  float64              `protobuf:"fixed64,3,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
}

func (m *PollerInfo) Reset()      { *m = PollerInfo{} }
func (*PollerInfo) ProtoMessage() {}
func (*PollerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{5}
}
func (m *PollerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollerInfo.Merge(m, src)
}
func (m *PollerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PollerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PollerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PollerInfo proto.InternalMessageInfo

func (m *PollerInfo) GetLastAccessTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastAccessTime
	}
	return nil
}

func (m *PollerInfo) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PollerInfo) GetRatePerSecond() float64 {
	if m != nil {
		return m.RatePerSecond
	}
	return 0
}

type StickyExecutionAttributes struct {
	WorkerTaskList         *TaskList          `protobuf:"bytes,1,opt,name=worker_task_list,json=workerTaskList,proto3" json:"worker_task_list,omitempty"`
	ScheduleToStartTimeout *duration.Duration `protobuf:"bytes,2,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
}

func (m *StickyExecutionAttributes) Reset()      { *m = StickyExecutionAttributes{} }
func (*StickyExecutionAttributes) ProtoMessage() {}
func (*StickyExecutionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_216fa006947e00a0, []int{6}
}
func (m *StickyExecutionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickyExecutionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickyExecutionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickyExecutionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickyExecutionAttributes.Merge(m, src)
}
func (m *StickyExecutionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StickyExecutionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StickyExecutionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StickyExecutionAttributes proto.InternalMessageInfo

func (m *StickyExecutionAttributes) GetWorkerTaskList() *TaskList {
	if m != nil {
		return m.WorkerTaskList
	}
	return nil
}

func (m *StickyExecutionAttributes) GetScheduleToStartTimeout() *duration.Duration {
	if m != nil {
		return m.ScheduleToStartTimeout
	}
	return nil
}

func init() {
	proto.RegisterEnum("uber.cadence.api.v1.TaskListKind", TaskListKind_name, TaskListKind_value)
	proto.RegisterEnum("uber.cadence.api.v1.TaskListType", TaskListType_name, TaskListType_value)
	proto.RegisterType((*TaskList)(nil), "uber.cadence.api.v1.TaskList")
	proto.RegisterType((*TaskListMetadata)(nil), "uber.cadence.api.v1.TaskListMetadata")
	proto.RegisterType((*TaskListPartitionMetadata)(nil), "uber.cadence.api.v1.TaskListPartitionMetadata")
	proto.RegisterType((*TaskListStatus)(nil), "uber.cadence.api.v1.TaskListStatus")
	proto.RegisterType((*TaskIDBlock)(nil), "uber.cadence.api.v1.TaskIDBlock")
	proto.RegisterType((*PollerInfo)(nil), "uber.cadence.api.v1.PollerInfo")
	proto.RegisterType((*StickyExecutionAttributes)(nil), "uber.cadence.api.v1.StickyExecutionAttributes")
}

func init() {
	proto.RegisterFile("github.com/uber/cadence/.gen/proto/api/v1/tasklist.proto", fileDescriptor_216fa006947e00a0)
}

var fileDescriptor_216fa006947e00a0 = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x72, 0xdb, 0x36,
	0x10, 0x16, 0x2c, 0x3b, 0x95, 0xe1, 0xda, 0x61, 0xd1, 0x26, 0xb1, 0x94, 0x86, 0x75, 0x79, 0xc8,
	0x78, 0x32, 0x1d, 0x6a, 0xec, 0x4e, 0xcf, 0x1d, 0xd9, 0xf2, 0x34, 0x1c, 0xcb, 0x8a, 0x86, 0x64,
	0x3c, 0xe3, 0x5e, 0x10, 0x88, 0x40, 0x6c, 0x0c, 0x29, 0x82, 0x03, 0x80, 0xfe, 0xb9, 0xf5, 0x11,
	0x7a, 0xea, 0x33, 0xf4, 0x19, 0xfa, 0x04, 0x3d, 0xfa, 0x98, 0x63, 0x2d, 0x5f, 0x72, 0xcc, 0x23,
	0x74, 0x00, 0x52, 0xae, 0x6a, 0xab, 0xbd, 0x01, 0xfb, 0xed, 0xb7, 0x3f, 0xdf, 0xee, 0x42, 0xaf,
	0x1c, 0x33, 0xd9, 0x4d, 0x08, 0x65, 0x79, 0xc2, 0xba, 0xa4, 0xe0, 0xdd, 0xf3, 0x9d, 0xae, 0x26,
	0x2a, 0xcd, 0xb8, 0xd2, 0x7e, 0x21, 0x85, 0x16, 0xe8, 0x4b, 0xe3, 0xe3, 0xd7, 0x3e, 0x3e, 0x29,
	0xb8, 0x7f, 0xbe, 0xd3, 0x71, 0x4f, 0x85, 0x38, 0xcd, 0x58, 0xd7, 0xba, 0x8c, 0xcb, 0xf7, 0x5d,
	0x5a, 0x4a, 0xa2, 0xb9, 0xc8, 0x2b, 0x52, 0xe7, 0x9b, 0xfb, 0xb8, 0xe6, 0x13, 0xa6, 0x34, 0x99,
	0x14, 0xb5, 0xc3, 0x83, 0x00, 0x17, 0x92, 0x14, 0x05, 0x93, 0xaa, 0xc2, 0xbd, 0xb7, 0xb0, 0x15,
	0x13, 0x95, 0x0e, 0xb8, 0xd2, 0x08, 0xc1, 0xe5, 0x9c, 0x4c, 0xd8, 0x26, 0xd8, 0x02, 0xdb, 0xab,
	0xa1, 0x7d, 0xa3, 0x1f, 0xe0, 0x72, 0xca, 0x73, 0xba, 0xb9, 0xb4, 0x05, 0xb6, 0x37, 0x76, 0xbf,
	0xf5, 0x17, 0x14, 0xe9, 0xcf, 0x02, 0x1c, 0xf2, 0x9c, 0x86, 0xd6, 0xdd, 0x23, 0xd0, 0x99, 0x59,
	0x8f, 0x98, 0x26, 0x94, 0x68, 0x82, 0x8e, 0xe0, 0x57, 0x13, 0x72, 0x89, 0x4d, 0xdb, 0x0a, 0x17,
	0x4c, 0x62, 0xc5, 0x12, 0x91, 0x53, 0x9b, 0x6e, 0x6d, 0xf7, 0x6b, 0xbf, 0xaa, 0xd4, 0x9f, 0x55,
	0xea, 0xf7, 0x45, 0x39, 0xce, 0xd8, 0x31, 0xc9, 0x4a, 0x16, 0x7e, 0x31, 0x21, 0x97, 0x26, 0xa0,
	0x1a, 0x31, 0x19, 0x59, 0x9a, 0xf7, 0x16, 0xb6, 0x67, 0x29, 0x46, 0x44, 0x6a, 0x6e, 0x54, 0xb9,
	0xcb, 0xe5, 0xc0, 0x66, 0xca, 0xae, 0xea, 0x4e, 0xcc, 0x13, 0xbd, 0x84, 0x8f, 0xc5, 0x45, 0xce,
	0x24, 0x3e, 0x13, 0x4a, 0x63, 0xdb, 0xe7, 0x92, 0x45, 0xd7, 0xad, 0xf9, 0xb5, 0x50, 0x7a, 0x48,
	0x26, 0xcc, 0xfb, 0x08, 0xe0, 0xc6, 0x2c, 0x6e, 0xa4, 0x89, 0x2e, 0x15, 0xfa, 0x0e, 0xa2, 0x31,
	0x49, 0xd2, 0x4c, 0x9c, 0xe2, 0x44, 0x94, 0xb9, 0xc6, 0x67, 0x3c, 0xd7, 0x36, 0x76, 0x33, 0x74,
	0x6a, 0x64, 0xdf, 0x00, 0xaf, 0x79, 0xae, 0xd1, 0x0b, 0x08, 0x25, 0x23, 0x14, 0x67, 0xec, 0x9c,
	0x65, 0x36, 0x47, 0x33, 0x5c, 0x35, 0x96, 0x81, 0x31, 0xa0, 0xe7, 0x70, 0x95, 0x24, 0x69, 0x8d,
	0x36, 0x2d, 0xda, 0x22, 0x49, 0x5a, 0x81, 0x2f, 0xe1, 0x63, 0x49, 0x34, 0x9b, 0x57, 0x67, 0x79,
	0x0b, 0x6c, 0x83, 0x70, 0xdd, 0x98, 0xef, 0x7a, 0x47, 0x7d, 0xb8, 0x6e, 0x64, 0xc4, 0x9c, 0xe2,
	0x71, 0x26, 0x92, 0x74, 0x73, 0xc5, 0x6a, 0xb8, 0xf5, 0x9f, 0xe3, 0x09, 0xfa, 0x7b, 0xc6, 0x2f,
	0x5c, 0x33, 0xb4, 0x80, 0xda, 0x8f, 0xf7, 0x23, 0x5c, 0x9b, 0xc3, 0x50, 0x1b, 0xb6, 0x94, 0x26,
	0x52, 0x63, 0x4e, 0xeb, 0xe6, 0x3e, 0xb3, 0xff, 0x80, 0xa2, 0x27, 0xf0, 0x11, 0xcb, 0xa9, 0x01,
	0xaa, 0x7e, 0x56, 0x58, 0x4e, 0x03, 0xea, 0xfd, 0x06, 0x20, 0x1c, 0x89, 0x2c, 0x63, 0x32, 0xc8,
	0xdf, 0x0b, 0xd4, 0x87, 0x4e, 0x46, 0x94, 0xc6, 0x24, 0x49, 0x98, 0x52, 0xd8, 0xac, 0x62, 0x3d,
	0xdc, 0xce, 0x83, 0xe1, 0xc6, 0xb3, 0x3d, 0x0d, 0x37, 0x0c, 0xa7, 0x67, 0x29, 0xc6, 0x88, 0x3a,
	0xb0, 0xc5, 0x29, 0xcb, 0x35, 0xd7, 0x57, 0xf5, 0x84, 0xee, 0xfe, 0x8b, 0xf4, 0x69, 0x2e, 0xd0,
	0xc7, 0xfb, 0x03, 0xc0, 0x76, 0xa4, 0x79, 0x92, 0x5e, 0x1d, 0x5c, 0xb2, 0xa4, 0x34, 0xab, 0xd1,
	0xd3, 0x5a, 0xf2, 0x71, 0xa9, 0x99, 0x42, 0x3f, 0x41, 0xe7, 0x42, 0xc8, 0x94, 0x49, 0xbb, 0x8b,
	0xd8, 0xdc, 0x60, 0x5d, 0xe7, 0x8b, 0xff, 0xdd, 0xef, 0x70, 0xa3, 0xa2, 0xdd, 0x1d, 0x4c, 0x0c,
	0xdb, 0x2a, 0x39, 0x63, 0xb4, 0xcc, 0x18, 0xd6, 0x02, 0x57, 0xea, 0x99, 0xb6, 0x45, 0xa9, 0x6d,
	0xed, 0x6b, 0xbb, 0xed, 0x87, 0x6b, 0x5d, 0x5f, 0x70, 0xf8, 0x74, 0xc6, 0x8d, 0x45, 0x64, 0x98,
	0x71, 0x45, 0x7c, 0xf5, 0x0e, 0x7e, 0x3e, 0x7f, 0x51, 0xa8, 0x03, 0x9f, 0xc6, 0xbd, 0xe8, 0x10,
	0x0f, 0x82, 0x28, 0xc6, 0x87, 0xc1, 0xb0, 0x8f, 0x83, 0xe1, 0x71, 0x6f, 0x10, 0xf4, 0x9d, 0x06,
	0x6a, 0xc3, 0x27, 0xf7, 0xb0, 0xe1, 0x9b, 0xf0, 0xa8, 0x37, 0x70, 0xc0, 0x02, 0x28, 0x8a, 0x83,
	0xfd, 0xc3, 0x13, 0x67, 0xe9, 0x15, 0xfd, 0x27, 0x43, 0x7c, 0x55, 0xb0, 0x7f, 0x67, 0x88, 0x4f,
	0x46, 0x07, 0x73, 0x19, 0x9e, 0xc3, 0x67, 0xf7, 0xb0, 0xfe, 0xc1, 0x7e, 0x10, 0x05, 0x6f, 0x86,
	0x0e, 0x58, 0x00, 0xf6, 0xf6, 0xe3, 0xe0, 0x38, 0x88, 0x4f, 0x9c, 0xa5, 0xbd, 0x77, 0xd7, 0x37,
	0x6e, 0xe3, 0xc3, 0x8d, 0xdb, 0xf8, 0x74, 0xe3, 0x82, 0x5f, 0xa6, 0x2e, 0xf8, 0x7d, 0xea, 0x82,
	0x3f, 0xa7, 0x2e, 0xb8, 0x9e, 0xba, 0xe0, 0xaf, 0xa9, 0x0b, 0x3e, 0x4e, 0xdd, 0xc6, 0xa7, 0xa9,
	0x0b, 0x7e, 0xbd, 0x75, 0x1b, 0xd7, 0xb7, 0x6e, 0xe3, 0xc3, 0xad, 0xdb, 0x80, 0xcf, 0x12, 0x31,
	0x59, 0x34, 0x85, 0xbd, 0x56, 0xaf, 0xe0, 0x23, 0x23, 0xe2, 0x08, 0xfc, 0xbc, 0x42, 0x0a, 0x7e,
	0xbe, 0x33, 0x7e, 0x64, 0x45, 0xfd, 0xfe, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x63, 0x8e,
	0x16, 0x5f, 0x05, 0x00, 0x00,
}

func (x TaskListKind) String() string {
	s, ok := TaskListKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TaskListType) String() string {
	s, ok := TaskListType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TaskList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskList)
	if !ok {
		that2, ok := that.(TaskList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *TaskListMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskListMetadata)
	if !ok {
		that2, ok := that.(TaskListMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxTasksPerSecond.Equal(that1.MaxTasksPerSecond) {
		return false
	}
	return true
}
func (this *TaskListPartitionMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskListPartitionMetadata)
	if !ok {
		that2, ok := that.(TaskListPartitionMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.OwnerHostName != that1.OwnerHostName {
		return false
	}
	return true
}
func (this *TaskListStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskListStatus)
	if !ok {
		that2, ok := that.(TaskListStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BacklogCountHint != that1.BacklogCountHint {
		return false
	}
	if this.ReadLevel != that1.ReadLevel {
		return false
	}
	if this.AckLevel != that1.AckLevel {
		return false
	}
	if this.RatePerSecond != that1.RatePerSecond {
		return false
	}
	if !this.TaskIdBlock.Equal(that1.TaskIdBlock) {
		return false
	}
	return true
}
func (this *TaskIDBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskIDBlock)
	if !ok {
		that2, ok := that.(TaskIDBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartId != that1.StartId {
		return false
	}
	if this.EndId != that1.EndId {
		return false
	}
	return true
}
func (this *PollerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollerInfo)
	if !ok {
		that2, ok := that.(PollerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LastAccessTime.Equal(that1.LastAccessTime) {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.RatePerSecond != that1.RatePerSecond {
		return false
	}
	return true
}
func (this *StickyExecutionAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StickyExecutionAttributes)
	if !ok {
		that2, ok := that.(StickyExecutionAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkerTaskList.Equal(that1.WorkerTaskList) {
		return false
	}
	if !this.ScheduleToStartTimeout.Equal(that1.ScheduleToStartTimeout) {
		return false
	}
	return true
}
func (this *TaskList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.TaskList{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskListMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apiv1.TaskListMetadata{")
	if this.MaxTasksPerSecond != nil {
		s = append(s, "MaxTasksPerSecond: "+fmt.Sprintf("%#v", this.MaxTasksPerSecond)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskListPartitionMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.TaskListPartitionMetadata{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "OwnerHostName: "+fmt.Sprintf("%#v", this.OwnerHostName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskListStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&apiv1.TaskListStatus{")
	s = append(s, "BacklogCountHint: "+fmt.Sprintf("%#v", this.BacklogCountHint)+",\n")
	s = append(s, "ReadLevel: "+fmt.Sprintf("%#v", this.ReadLevel)+",\n")
	s = append(s, "AckLevel: "+fmt.Sprintf("%#v", this.AckLevel)+",\n")
	s = append(s, "RatePerSecond: "+fmt.Sprintf("%#v", this.RatePerSecond)+",\n")
	if this.TaskIdBlock != nil {
		s = append(s, "TaskIdBlock: "+fmt.Sprintf("%#v", this.TaskIdBlock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskIDBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.TaskIDBlock{")
	s = append(s, "StartId: "+fmt.Sprintf("%#v", this.StartId)+",\n")
	s = append(s, "EndId: "+fmt.Sprintf("%#v", this.EndId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollerInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apiv1.PollerInfo{")
	if this.LastAccessTime != nil {
		s = append(s, "LastAccessTime: "+fmt.Sprintf("%#v", this.LastAccessTime)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "RatePerSecond: "+fmt.Sprintf("%#v", this.RatePerSecond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StickyExecutionAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apiv1.StickyExecutionAttributes{")
	if this.WorkerTaskList != nil {
		s = append(s, "WorkerTaskList: "+fmt.Sprintf("%#v", this.WorkerTaskList)+",\n")
	}
	if this.ScheduleToStartTimeout != nil {
		s = append(s, "ScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTasklist(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTasklist(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskListMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTasksPerSecond != nil {
		{
			size, err := m.MaxTasksPerSecond.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskListPartitionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListPartitionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListPartitionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerHostName) > 0 {
		i -= len(m.OwnerHostName)
		copy(dAtA[i:], m.OwnerHostName)
		i = encodeVarintTasklist(dAtA, i, uint64(len(m.OwnerHostName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTasklist(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskListStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskIdBlock != nil {
		{
			size, err := m.TaskIdBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RatePerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RatePerSecond))))
		i--
		dAtA[i] = 0x21
	}
	if m.AckLevel != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.AckLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.ReadLevel != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.ReadLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.BacklogCountHint != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.BacklogCountHint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskIDBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskIDBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskIDBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndId != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.EndId))
		i--
		dAtA[i] = 0x10
	}
	if m.StartId != 0 {
		i = encodeVarintTasklist(dAtA, i, uint64(m.StartId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RatePerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RatePerSecond))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTasklist(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if m.LastAccessTime != nil {
		{
			size, err := m.LastAccessTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StickyExecutionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickyExecutionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickyExecutionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleToStartTimeout != nil {
		{
			size, err := m.ScheduleToStartTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkerTaskList != nil {
		{
			size, err := m.WorkerTaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTasklist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTasklist(dAtA []byte, offset int, v uint64) int {
	offset -= sovTasklist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovTasklist(uint64(m.Kind))
	}
	return n
}

func (m *TaskListMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTasksPerSecond != nil {
		l = m.MaxTasksPerSecond.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	return n
}

func (m *TaskListPartitionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTasklist(uint64(l))
	}
	l = len(m.OwnerHostName)
	if l > 0 {
		n += 1 + l + sovTasklist(uint64(l))
	}
	return n
}

func (m *TaskListStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BacklogCountHint != 0 {
		n += 1 + sovTasklist(uint64(m.BacklogCountHint))
	}
	if m.ReadLevel != 0 {
		n += 1 + sovTasklist(uint64(m.ReadLevel))
	}
	if m.AckLevel != 0 {
		n += 1 + sovTasklist(uint64(m.AckLevel))
	}
	if m.RatePerSecond != 0 {
		n += 9
	}
	if m.TaskIdBlock != nil {
		l = m.TaskIdBlock.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	return n
}

func (m *TaskIDBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartId != 0 {
		n += 1 + sovTasklist(uint64(m.StartId))
	}
	if m.EndId != 0 {
		n += 1 + sovTasklist(uint64(m.EndId))
	}
	return n
}

func (m *PollerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastAccessTime != nil {
		l = m.LastAccessTime.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.RatePerSecond != 0 {
		n += 9
	}
	return n
}

func (m *StickyExecutionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerTaskList != nil {
		l = m.WorkerTaskList.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	if m.ScheduleToStartTimeout != nil {
		l = m.ScheduleToStartTimeout.Size()
		n += 1 + l + sovTasklist(uint64(l))
	}
	return n
}

func sovTasklist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTasklist(x uint64) (n int) {
	return sovTasklist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TaskList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskList{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskListMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskListMetadata{`,
		`MaxTasksPerSecond:` + strings.Replace(fmt.Sprintf("%v", this.MaxTasksPerSecond), "DoubleValue", "types.DoubleValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskListPartitionMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskListPartitionMetadata{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`OwnerHostName:` + fmt.Sprintf("%v", this.OwnerHostName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskListStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskListStatus{`,
		`BacklogCountHint:` + fmt.Sprintf("%v", this.BacklogCountHint) + `,`,
		`ReadLevel:` + fmt.Sprintf("%v", this.ReadLevel) + `,`,
		`AckLevel:` + fmt.Sprintf("%v", this.AckLevel) + `,`,
		`RatePerSecond:` + fmt.Sprintf("%v", this.RatePerSecond) + `,`,
		`TaskIdBlock:` + strings.Replace(this.TaskIdBlock.String(), "TaskIDBlock", "TaskIDBlock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskIDBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskIDBlock{`,
		`StartId:` + fmt.Sprintf("%v", this.StartId) + `,`,
		`EndId:` + fmt.Sprintf("%v", this.EndId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollerInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollerInfo{`,
		`LastAccessTime:` + strings.Replace(fmt.Sprintf("%v", this.LastAccessTime), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`RatePerSecond:` + fmt.Sprintf("%v", this.RatePerSecond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StickyExecutionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StickyExecutionAttributes{`,
		`WorkerTaskList:` + strings.Replace(this.WorkerTaskList.String(), "TaskList", "TaskList", 1) + `,`,
		`ScheduleToStartTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToStartTimeout), "Duration", "duration.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTasklist(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= TaskListKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTasksPerSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTasksPerSecond == nil {
				m.MaxTasksPerSecond = &types.DoubleValue{}
			}
			if err := m.MaxTasksPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListPartitionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListPartitionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListPartitionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BacklogCountHint", wireType)
			}
			m.BacklogCountHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BacklogCountHint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadLevel", wireType)
			}
			m.ReadLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckLevel", wireType)
			}
			m.AckLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatePerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RatePerSecond = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIdBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskIdBlock == nil {
				m.TaskIdBlock = &TaskIDBlock{}
			}
			if err := m.TaskIdBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskIDBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskIDBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskIDBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndId", wireType)
			}
			m.EndId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccessTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastAccessTime == nil {
				m.LastAccessTime = &timestamp.Timestamp{}
			}
			if err := m.LastAccessTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatePerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RatePerSecond = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickyExecutionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickyExecutionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickyExecutionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerTaskList == nil {
				m.WorkerTaskList = &TaskList{}
			}
			if err := m.WorkerTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasklist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTasklist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToStartTimeout == nil {
				m.ScheduleToStartTimeout = &duration.Duration{}
			}
			if err := m.ScheduleToStartTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasklist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasklist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTasklist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTasklist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasklist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTasklist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTasklist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTasklist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTasklist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTasklist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTasklist = fmt.Errorf("proto: unexpected end of group")
)
