// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package matching

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cadence/.gen/go/shared"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
// Attributes:
//  - DomainUUID
//  - PollRequest
type PollForDecisionTaskRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  PollRequest *shared.PollForDecisionTaskRequest `thrift:"pollRequest,20" db:"pollRequest" json:"pollRequest,omitempty"`
}

func NewPollForDecisionTaskRequest() *PollForDecisionTaskRequest {
  return &PollForDecisionTaskRequest{}
}

var PollForDecisionTaskRequest_DomainUUID_DEFAULT string
func (p *PollForDecisionTaskRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return PollForDecisionTaskRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var PollForDecisionTaskRequest_PollRequest_DEFAULT *shared.PollForDecisionTaskRequest
func (p *PollForDecisionTaskRequest) GetPollRequest() *shared.PollForDecisionTaskRequest {
  if !p.IsSetPollRequest() {
    return PollForDecisionTaskRequest_PollRequest_DEFAULT
  }
return p.PollRequest
}
func (p *PollForDecisionTaskRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *PollForDecisionTaskRequest) IsSetPollRequest() bool {
  return p.PollRequest != nil
}

func (p *PollForDecisionTaskRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PollForDecisionTaskRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *PollForDecisionTaskRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.PollRequest = &shared.PollForDecisionTaskRequest{}
  if err := p.PollRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
  }
  return nil
}

func (p *PollForDecisionTaskRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForDecisionTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PollForDecisionTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetPollRequest() {
    if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:pollRequest: ", p), err) }
    if err := p.PollRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:pollRequest: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PollForDecisionTaskRequest(%+v)", *p)
}

// Attributes:
//  - TaskToken
//  - WorkflowExecution
//  - WorkflowType
//  - PreviousStartedEventId
//  - StartedEventId
type PollForDecisionTaskResponse struct {
  // unused fields # 1 to 9
  TaskToken []byte `thrift:"taskToken,10" db:"taskToken" json:"taskToken,omitempty"`
  // unused fields # 11 to 19
  WorkflowExecution *shared.WorkflowExecution `thrift:"workflowExecution,20" db:"workflowExecution" json:"workflowExecution,omitempty"`
  // unused fields # 21 to 29
  WorkflowType *shared.WorkflowType `thrift:"workflowType,30" db:"workflowType" json:"workflowType,omitempty"`
  // unused fields # 31 to 39
  PreviousStartedEventId *int64 `thrift:"previousStartedEventId,40" db:"previousStartedEventId" json:"previousStartedEventId,omitempty"`
  // unused fields # 41 to 49
  StartedEventId *int64 `thrift:"startedEventId,50" db:"startedEventId" json:"startedEventId,omitempty"`
}

func NewPollForDecisionTaskResponse() *PollForDecisionTaskResponse {
  return &PollForDecisionTaskResponse{}
}

var PollForDecisionTaskResponse_TaskToken_DEFAULT []byte

func (p *PollForDecisionTaskResponse) GetTaskToken() []byte {
  return p.TaskToken
}
var PollForDecisionTaskResponse_WorkflowExecution_DEFAULT *shared.WorkflowExecution
func (p *PollForDecisionTaskResponse) GetWorkflowExecution() *shared.WorkflowExecution {
  if !p.IsSetWorkflowExecution() {
    return PollForDecisionTaskResponse_WorkflowExecution_DEFAULT
  }
return p.WorkflowExecution
}
var PollForDecisionTaskResponse_WorkflowType_DEFAULT *shared.WorkflowType
func (p *PollForDecisionTaskResponse) GetWorkflowType() *shared.WorkflowType {
  if !p.IsSetWorkflowType() {
    return PollForDecisionTaskResponse_WorkflowType_DEFAULT
  }
return p.WorkflowType
}
var PollForDecisionTaskResponse_PreviousStartedEventId_DEFAULT int64
func (p *PollForDecisionTaskResponse) GetPreviousStartedEventId() int64 {
  if !p.IsSetPreviousStartedEventId() {
    return PollForDecisionTaskResponse_PreviousStartedEventId_DEFAULT
  }
return *p.PreviousStartedEventId
}
var PollForDecisionTaskResponse_StartedEventId_DEFAULT int64
func (p *PollForDecisionTaskResponse) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return PollForDecisionTaskResponse_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
func (p *PollForDecisionTaskResponse) IsSetTaskToken() bool {
  return p.TaskToken != nil
}

func (p *PollForDecisionTaskResponse) IsSetWorkflowExecution() bool {
  return p.WorkflowExecution != nil
}

func (p *PollForDecisionTaskResponse) IsSetWorkflowType() bool {
  return p.WorkflowType != nil
}

func (p *PollForDecisionTaskResponse) IsSetPreviousStartedEventId() bool {
  return p.PreviousStartedEventId != nil
}

func (p *PollForDecisionTaskResponse) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *PollForDecisionTaskResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TaskToken = v
}
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField20(iprot thrift.TProtocol) error {
  p.WorkflowExecution = &shared.WorkflowExecution{}
  if err := p.WorkflowExecution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecution), err)
  }
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField30(iprot thrift.TProtocol) error {
  p.WorkflowType = &shared.WorkflowType{}
  if err := p.WorkflowType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowType), err)
  }
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.PreviousStartedEventId = &v
}
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *PollForDecisionTaskResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForDecisionTaskResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PollForDecisionTaskResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskToken() {
    if err := oprot.WriteFieldBegin("taskToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskToken: ", p), err) }
    if err := oprot.WriteBinary(p.TaskToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskToken: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecution() {
    if err := oprot.WriteFieldBegin("workflowExecution", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:workflowExecution: ", p), err) }
    if err := p.WorkflowExecution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:workflowExecution: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowType() {
    if err := oprot.WriteFieldBegin("workflowType", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:workflowType: ", p), err) }
    if err := p.WorkflowType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:workflowType: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreviousStartedEventId() {
    if err := oprot.WriteFieldBegin("previousStartedEventId", thrift.I64, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:previousStartedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PreviousStartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.previousStartedEventId (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:previousStartedEventId: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:startedEventId: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PollForDecisionTaskResponse(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - PollRequest
type PollForActivityTaskRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  PollRequest *shared.PollForActivityTaskRequest `thrift:"pollRequest,20" db:"pollRequest" json:"pollRequest,omitempty"`
}

func NewPollForActivityTaskRequest() *PollForActivityTaskRequest {
  return &PollForActivityTaskRequest{}
}

var PollForActivityTaskRequest_DomainUUID_DEFAULT string
func (p *PollForActivityTaskRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return PollForActivityTaskRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var PollForActivityTaskRequest_PollRequest_DEFAULT *shared.PollForActivityTaskRequest
func (p *PollForActivityTaskRequest) GetPollRequest() *shared.PollForActivityTaskRequest {
  if !p.IsSetPollRequest() {
    return PollForActivityTaskRequest_PollRequest_DEFAULT
  }
return p.PollRequest
}
func (p *PollForActivityTaskRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *PollForActivityTaskRequest) IsSetPollRequest() bool {
  return p.PollRequest != nil
}

func (p *PollForActivityTaskRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PollForActivityTaskRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *PollForActivityTaskRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.PollRequest = &shared.PollForActivityTaskRequest{}
  if err := p.PollRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
  }
  return nil
}

func (p *PollForActivityTaskRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForActivityTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PollForActivityTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetPollRequest() {
    if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:pollRequest: ", p), err) }
    if err := p.PollRequest.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:pollRequest: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PollForActivityTaskRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - Execution
//  - TaskList
//  - ScheduleId
type AddDecisionTaskRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  Execution *shared.WorkflowExecution `thrift:"execution,20" db:"execution" json:"execution,omitempty"`
  // unused fields # 21 to 29
  TaskList *shared.TaskList `thrift:"taskList,30" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 31 to 39
  ScheduleId *int64 `thrift:"scheduleId,40" db:"scheduleId" json:"scheduleId,omitempty"`
}

func NewAddDecisionTaskRequest() *AddDecisionTaskRequest {
  return &AddDecisionTaskRequest{}
}

var AddDecisionTaskRequest_DomainUUID_DEFAULT string
func (p *AddDecisionTaskRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return AddDecisionTaskRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var AddDecisionTaskRequest_Execution_DEFAULT *shared.WorkflowExecution
func (p *AddDecisionTaskRequest) GetExecution() *shared.WorkflowExecution {
  if !p.IsSetExecution() {
    return AddDecisionTaskRequest_Execution_DEFAULT
  }
return p.Execution
}
var AddDecisionTaskRequest_TaskList_DEFAULT *shared.TaskList
func (p *AddDecisionTaskRequest) GetTaskList() *shared.TaskList {
  if !p.IsSetTaskList() {
    return AddDecisionTaskRequest_TaskList_DEFAULT
  }
return p.TaskList
}
var AddDecisionTaskRequest_ScheduleId_DEFAULT int64
func (p *AddDecisionTaskRequest) GetScheduleId() int64 {
  if !p.IsSetScheduleId() {
    return AddDecisionTaskRequest_ScheduleId_DEFAULT
  }
return *p.ScheduleId
}
func (p *AddDecisionTaskRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *AddDecisionTaskRequest) IsSetExecution() bool {
  return p.Execution != nil
}

func (p *AddDecisionTaskRequest) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *AddDecisionTaskRequest) IsSetScheduleId() bool {
  return p.ScheduleId != nil
}

func (p *AddDecisionTaskRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddDecisionTaskRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *AddDecisionTaskRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.Execution = &shared.WorkflowExecution{}
  if err := p.Execution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Execution), err)
  }
  return nil
}

func (p *AddDecisionTaskRequest)  ReadField30(iprot thrift.TProtocol) error {
  p.TaskList = &shared.TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *AddDecisionTaskRequest)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.ScheduleId = &v
}
  return nil
}

func (p *AddDecisionTaskRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddDecisionTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddDecisionTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *AddDecisionTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecution() {
    if err := oprot.WriteFieldBegin("execution", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:execution: ", p), err) }
    if err := p.Execution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Execution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:execution: ", p), err) }
  }
  return err
}

func (p *AddDecisionTaskRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:taskList: ", p), err) }
  }
  return err
}

func (p *AddDecisionTaskRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleId() {
    if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:scheduleId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduleId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleId (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:scheduleId: ", p), err) }
  }
  return err
}

func (p *AddDecisionTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddDecisionTaskRequest(%+v)", *p)
}

// Attributes:
//  - DomainUUID
//  - Execution
//  - SourceDomainUUID
//  - TaskList
//  - ScheduleId
//  - ScheduleToStartTimeoutSeconds
type AddActivityTaskRequest struct {
  // unused fields # 1 to 9
  DomainUUID *string `thrift:"domainUUID,10" db:"domainUUID" json:"domainUUID,omitempty"`
  // unused fields # 11 to 19
  Execution *shared.WorkflowExecution `thrift:"execution,20" db:"execution" json:"execution,omitempty"`
  // unused fields # 21 to 29
  SourceDomainUUID *string `thrift:"sourceDomainUUID,30" db:"sourceDomainUUID" json:"sourceDomainUUID,omitempty"`
  // unused fields # 31 to 39
  TaskList *shared.TaskList `thrift:"taskList,40" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 41 to 49
  ScheduleId *int64 `thrift:"scheduleId,50" db:"scheduleId" json:"scheduleId,omitempty"`
  // unused fields # 51 to 59
  ScheduleToStartTimeoutSeconds *int32 `thrift:"scheduleToStartTimeoutSeconds,60" db:"scheduleToStartTimeoutSeconds" json:"scheduleToStartTimeoutSeconds,omitempty"`
}

func NewAddActivityTaskRequest() *AddActivityTaskRequest {
  return &AddActivityTaskRequest{}
}

var AddActivityTaskRequest_DomainUUID_DEFAULT string
func (p *AddActivityTaskRequest) GetDomainUUID() string {
  if !p.IsSetDomainUUID() {
    return AddActivityTaskRequest_DomainUUID_DEFAULT
  }
return *p.DomainUUID
}
var AddActivityTaskRequest_Execution_DEFAULT *shared.WorkflowExecution
func (p *AddActivityTaskRequest) GetExecution() *shared.WorkflowExecution {
  if !p.IsSetExecution() {
    return AddActivityTaskRequest_Execution_DEFAULT
  }
return p.Execution
}
var AddActivityTaskRequest_SourceDomainUUID_DEFAULT string
func (p *AddActivityTaskRequest) GetSourceDomainUUID() string {
  if !p.IsSetSourceDomainUUID() {
    return AddActivityTaskRequest_SourceDomainUUID_DEFAULT
  }
return *p.SourceDomainUUID
}
var AddActivityTaskRequest_TaskList_DEFAULT *shared.TaskList
func (p *AddActivityTaskRequest) GetTaskList() *shared.TaskList {
  if !p.IsSetTaskList() {
    return AddActivityTaskRequest_TaskList_DEFAULT
  }
return p.TaskList
}
var AddActivityTaskRequest_ScheduleId_DEFAULT int64
func (p *AddActivityTaskRequest) GetScheduleId() int64 {
  if !p.IsSetScheduleId() {
    return AddActivityTaskRequest_ScheduleId_DEFAULT
  }
return *p.ScheduleId
}
var AddActivityTaskRequest_ScheduleToStartTimeoutSeconds_DEFAULT int32
func (p *AddActivityTaskRequest) GetScheduleToStartTimeoutSeconds() int32 {
  if !p.IsSetScheduleToStartTimeoutSeconds() {
    return AddActivityTaskRequest_ScheduleToStartTimeoutSeconds_DEFAULT
  }
return *p.ScheduleToStartTimeoutSeconds
}
func (p *AddActivityTaskRequest) IsSetDomainUUID() bool {
  return p.DomainUUID != nil
}

func (p *AddActivityTaskRequest) IsSetExecution() bool {
  return p.Execution != nil
}

func (p *AddActivityTaskRequest) IsSetSourceDomainUUID() bool {
  return p.SourceDomainUUID != nil
}

func (p *AddActivityTaskRequest) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *AddActivityTaskRequest) IsSetScheduleId() bool {
  return p.ScheduleId != nil
}

func (p *AddActivityTaskRequest) IsSetScheduleToStartTimeoutSeconds() bool {
  return p.ScheduleToStartTimeoutSeconds != nil
}

func (p *AddActivityTaskRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddActivityTaskRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DomainUUID = &v
}
  return nil
}

func (p *AddActivityTaskRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.Execution = &shared.WorkflowExecution{}
  if err := p.Execution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Execution), err)
  }
  return nil
}

func (p *AddActivityTaskRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.SourceDomainUUID = &v
}
  return nil
}

func (p *AddActivityTaskRequest)  ReadField40(iprot thrift.TProtocol) error {
  p.TaskList = &shared.TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *AddActivityTaskRequest)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.ScheduleId = &v
}
  return nil
}

func (p *AddActivityTaskRequest)  ReadField60(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.ScheduleToStartTimeoutSeconds = &v
}
  return nil
}

func (p *AddActivityTaskRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddActivityTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddActivityTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainUUID() {
    if err := oprot.WriteFieldBegin("domainUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainUUID: ", p), err) }
  }
  return err
}

func (p *AddActivityTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecution() {
    if err := oprot.WriteFieldBegin("execution", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:execution: ", p), err) }
    if err := p.Execution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Execution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:execution: ", p), err) }
  }
  return err
}

func (p *AddActivityTaskRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetSourceDomainUUID() {
    if err := oprot.WriteFieldBegin("sourceDomainUUID", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:sourceDomainUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.SourceDomainUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sourceDomainUUID (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:sourceDomainUUID: ", p), err) }
  }
  return err
}

func (p *AddActivityTaskRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:taskList: ", p), err) }
  }
  return err
}

func (p *AddActivityTaskRequest) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleId() {
    if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:scheduleId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduleId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleId (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:scheduleId: ", p), err) }
  }
  return err
}

func (p *AddActivityTaskRequest) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleToStartTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("scheduleToStartTimeoutSeconds", thrift.I32, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:scheduleToStartTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ScheduleToStartTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleToStartTimeoutSeconds (60) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:scheduleToStartTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *AddActivityTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddActivityTaskRequest(%+v)", *p)
}

type MatchingService interface {  //MatchingService API is exposed to provide support for polling from long running applications.
  //Such applications are expected to have a worker which regularly polls for DecisionTask and ActivityTask.  For each
  //DecisionTask, application is expected to process the history of events for that session and respond back with next
  //decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
  //with completion or failure.
  //

  // PollForDecisionTask is called by frontend to process DecisionTask from a specific taskList.  A
  // DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
  // 
  // 
  // Parameters:
  //  - PollRequest
  PollForDecisionTask(pollRequest *PollForDecisionTaskRequest) (r *PollForDecisionTaskResponse, err error)
  // PollForActivityTask is called by frontend to process ActivityTask from a specific taskList.  ActivityTask
  // is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
  // 
  // 
  // Parameters:
  //  - PollRequest
  PollForActivityTask(pollRequest *PollForActivityTaskRequest) (r *shared.PollForActivityTaskResponse, err error)
  // AddDecisionTask is called by the history service when a decision task is scheduled, so that it can be dispatched
  // by the MatchingEngine.
  // 
  // 
  // Parameters:
  //  - AddRequest
  AddDecisionTask(addRequest *AddDecisionTaskRequest) (err error)
  // AddActivityTask is called by the history service when a decision task is scheduled, so that it can be dispatched
  // by the MatchingEngine.
  // 
  // 
  // Parameters:
  //  - AddRequest
  AddActivityTask(addRequest *AddActivityTaskRequest) (err error)
}

//MatchingService API is exposed to provide support for polling from long running applications.
//Such applications are expected to have a worker which regularly polls for DecisionTask and ActivityTask.  For each
//DecisionTask, application is expected to process the history of events for that session and respond back with next
//decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
//with completion or failure.
//
type MatchingServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewMatchingServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MatchingServiceClient {
  return &MatchingServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMatchingServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MatchingServiceClient {
  return &MatchingServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// PollForDecisionTask is called by frontend to process DecisionTask from a specific taskList.  A
// DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
// 
// 
// Parameters:
//  - PollRequest
func (p *MatchingServiceClient) PollForDecisionTask(pollRequest *PollForDecisionTaskRequest) (r *PollForDecisionTaskResponse, err error) {
  if err = p.sendPollForDecisionTask(pollRequest); err != nil { return }
  return p.recvPollForDecisionTask()
}

func (p *MatchingServiceClient) sendPollForDecisionTask(pollRequest *PollForDecisionTaskRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("PollForDecisionTask", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MatchingServicePollForDecisionTaskArgs{
  PollRequest : pollRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MatchingServiceClient) recvPollForDecisionTask() (value *PollForDecisionTaskResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "PollForDecisionTask" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "PollForDecisionTask failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "PollForDecisionTask failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "PollForDecisionTask failed: invalid message type")
    return
  }
  result := MatchingServicePollForDecisionTaskResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// PollForActivityTask is called by frontend to process ActivityTask from a specific taskList.  ActivityTask
// is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
// 
// 
// Parameters:
//  - PollRequest
func (p *MatchingServiceClient) PollForActivityTask(pollRequest *PollForActivityTaskRequest) (r *shared.PollForActivityTaskResponse, err error) {
  if err = p.sendPollForActivityTask(pollRequest); err != nil { return }
  return p.recvPollForActivityTask()
}

func (p *MatchingServiceClient) sendPollForActivityTask(pollRequest *PollForActivityTaskRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("PollForActivityTask", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MatchingServicePollForActivityTaskArgs{
  PollRequest : pollRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MatchingServiceClient) recvPollForActivityTask() (value *shared.PollForActivityTaskResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "PollForActivityTask" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "PollForActivityTask failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "PollForActivityTask failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "PollForActivityTask failed: invalid message type")
    return
  }
  result := MatchingServicePollForActivityTaskResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// AddDecisionTask is called by the history service when a decision task is scheduled, so that it can be dispatched
// by the MatchingEngine.
// 
// 
// Parameters:
//  - AddRequest
func (p *MatchingServiceClient) AddDecisionTask(addRequest *AddDecisionTaskRequest) (err error) {
  if err = p.sendAddDecisionTask(addRequest); err != nil { return }
  return p.recvAddDecisionTask()
}

func (p *MatchingServiceClient) sendAddDecisionTask(addRequest *AddDecisionTaskRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("AddDecisionTask", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MatchingServiceAddDecisionTaskArgs{
  AddRequest : addRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MatchingServiceClient) recvAddDecisionTask() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "AddDecisionTask" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddDecisionTask failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddDecisionTask failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddDecisionTask failed: invalid message type")
    return
  }
  result := MatchingServiceAddDecisionTaskResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.ServiceBusyError != nil {
    err = result.ServiceBusyError
    return 
  }
  return
}

// AddActivityTask is called by the history service when a decision task is scheduled, so that it can be dispatched
// by the MatchingEngine.
// 
// 
// Parameters:
//  - AddRequest
func (p *MatchingServiceClient) AddActivityTask(addRequest *AddActivityTaskRequest) (err error) {
  if err = p.sendAddActivityTask(addRequest); err != nil { return }
  return p.recvAddActivityTask()
}

func (p *MatchingServiceClient) sendAddActivityTask(addRequest *AddActivityTaskRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("AddActivityTask", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MatchingServiceAddActivityTaskArgs{
  AddRequest : addRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MatchingServiceClient) recvAddActivityTask() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "AddActivityTask" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddActivityTask failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddActivityTask failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddActivityTask failed: invalid message type")
    return
  }
  result := MatchingServiceAddActivityTaskResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.BadRequestError != nil {
    err = result.BadRequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.ServiceBusyError != nil {
    err = result.ServiceBusyError
    return 
  }
  return
}


type MatchingServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MatchingService
}

func (p *MatchingServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MatchingServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MatchingServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMatchingServiceProcessor(handler MatchingService) *MatchingServiceProcessor {

  self8 := &MatchingServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["PollForDecisionTask"] = &matchingServiceProcessorPollForDecisionTask{handler:handler}
  self8.processorMap["PollForActivityTask"] = &matchingServiceProcessorPollForActivityTask{handler:handler}
  self8.processorMap["AddDecisionTask"] = &matchingServiceProcessorAddDecisionTask{handler:handler}
  self8.processorMap["AddActivityTask"] = &matchingServiceProcessorAddActivityTask{handler:handler}
return self8
}

func (p *MatchingServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x9

}

type matchingServiceProcessorPollForDecisionTask struct {
  handler MatchingService
}

func (p *matchingServiceProcessorPollForDecisionTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MatchingServicePollForDecisionTaskArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PollForDecisionTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MatchingServicePollForDecisionTaskResult{}
var retval *PollForDecisionTaskResponse
  var err2 error
  if retval, err2 = p.handler.PollForDecisionTask(args.PollRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PollForDecisionTask: " + err2.Error())
    oprot.WriteMessageBegin("PollForDecisionTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("PollForDecisionTask", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type matchingServiceProcessorPollForActivityTask struct {
  handler MatchingService
}

func (p *matchingServiceProcessorPollForActivityTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MatchingServicePollForActivityTaskArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PollForActivityTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MatchingServicePollForActivityTaskResult{}
var retval *shared.PollForActivityTaskResponse
  var err2 error
  if retval, err2 = p.handler.PollForActivityTask(args.PollRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PollForActivityTask: " + err2.Error())
    oprot.WriteMessageBegin("PollForActivityTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("PollForActivityTask", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type matchingServiceProcessorAddDecisionTask struct {
  handler MatchingService
}

func (p *matchingServiceProcessorAddDecisionTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MatchingServiceAddDecisionTaskArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AddDecisionTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MatchingServiceAddDecisionTaskResult{}
  var err2 error
  if err2 = p.handler.AddDecisionTask(args.AddRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.ServiceBusyError:
  result.ServiceBusyError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddDecisionTask: " + err2.Error())
    oprot.WriteMessageBegin("AddDecisionTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("AddDecisionTask", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type matchingServiceProcessorAddActivityTask struct {
  handler MatchingService
}

func (p *matchingServiceProcessorAddActivityTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MatchingServiceAddActivityTaskArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AddActivityTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MatchingServiceAddActivityTaskResult{}
  var err2 error
  if err2 = p.handler.AddActivityTask(args.AddRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.BadRequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.ServiceBusyError:
  result.ServiceBusyError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddActivityTask: " + err2.Error())
    oprot.WriteMessageBegin("AddActivityTask", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("AddActivityTask", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - PollRequest
type MatchingServicePollForDecisionTaskArgs struct {
  PollRequest *PollForDecisionTaskRequest `thrift:"pollRequest,1" db:"pollRequest" json:"pollRequest"`
}

func NewMatchingServicePollForDecisionTaskArgs() *MatchingServicePollForDecisionTaskArgs {
  return &MatchingServicePollForDecisionTaskArgs{}
}

var MatchingServicePollForDecisionTaskArgs_PollRequest_DEFAULT *PollForDecisionTaskRequest
func (p *MatchingServicePollForDecisionTaskArgs) GetPollRequest() *PollForDecisionTaskRequest {
  if !p.IsSetPollRequest() {
    return MatchingServicePollForDecisionTaskArgs_PollRequest_DEFAULT
  }
return p.PollRequest
}
func (p *MatchingServicePollForDecisionTaskArgs) IsSetPollRequest() bool {
  return p.PollRequest != nil
}

func (p *MatchingServicePollForDecisionTaskArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchingServicePollForDecisionTaskArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PollRequest = &PollForDecisionTaskRequest{}
  if err := p.PollRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
  }
  return nil
}

func (p *MatchingServicePollForDecisionTaskArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForDecisionTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchingServicePollForDecisionTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pollRequest: ", p), err) }
  if err := p.PollRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pollRequest: ", p), err) }
  return err
}

func (p *MatchingServicePollForDecisionTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchingServicePollForDecisionTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
type MatchingServicePollForDecisionTaskResult struct {
  Success *PollForDecisionTaskResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMatchingServicePollForDecisionTaskResult() *MatchingServicePollForDecisionTaskResult {
  return &MatchingServicePollForDecisionTaskResult{}
}

var MatchingServicePollForDecisionTaskResult_Success_DEFAULT *PollForDecisionTaskResponse
func (p *MatchingServicePollForDecisionTaskResult) GetSuccess() *PollForDecisionTaskResponse {
  if !p.IsSetSuccess() {
    return MatchingServicePollForDecisionTaskResult_Success_DEFAULT
  }
return p.Success
}
var MatchingServicePollForDecisionTaskResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *MatchingServicePollForDecisionTaskResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return MatchingServicePollForDecisionTaskResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var MatchingServicePollForDecisionTaskResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MatchingServicePollForDecisionTaskResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MatchingServicePollForDecisionTaskResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MatchingServicePollForDecisionTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MatchingServicePollForDecisionTaskResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *MatchingServicePollForDecisionTaskResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MatchingServicePollForDecisionTaskResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchingServicePollForDecisionTaskResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PollForDecisionTaskResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MatchingServicePollForDecisionTaskResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *MatchingServicePollForDecisionTaskResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MatchingServicePollForDecisionTaskResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForDecisionTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchingServicePollForDecisionTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MatchingServicePollForDecisionTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *MatchingServicePollForDecisionTaskResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MatchingServicePollForDecisionTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchingServicePollForDecisionTaskResult(%+v)", *p)
}

// Attributes:
//  - PollRequest
type MatchingServicePollForActivityTaskArgs struct {
  PollRequest *PollForActivityTaskRequest `thrift:"pollRequest,1" db:"pollRequest" json:"pollRequest"`
}

func NewMatchingServicePollForActivityTaskArgs() *MatchingServicePollForActivityTaskArgs {
  return &MatchingServicePollForActivityTaskArgs{}
}

var MatchingServicePollForActivityTaskArgs_PollRequest_DEFAULT *PollForActivityTaskRequest
func (p *MatchingServicePollForActivityTaskArgs) GetPollRequest() *PollForActivityTaskRequest {
  if !p.IsSetPollRequest() {
    return MatchingServicePollForActivityTaskArgs_PollRequest_DEFAULT
  }
return p.PollRequest
}
func (p *MatchingServicePollForActivityTaskArgs) IsSetPollRequest() bool {
  return p.PollRequest != nil
}

func (p *MatchingServicePollForActivityTaskArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchingServicePollForActivityTaskArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PollRequest = &PollForActivityTaskRequest{}
  if err := p.PollRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
  }
  return nil
}

func (p *MatchingServicePollForActivityTaskArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForActivityTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchingServicePollForActivityTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pollRequest: ", p), err) }
  if err := p.PollRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pollRequest: ", p), err) }
  return err
}

func (p *MatchingServicePollForActivityTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchingServicePollForActivityTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
type MatchingServicePollForActivityTaskResult struct {
  Success *shared.PollForActivityTaskResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMatchingServicePollForActivityTaskResult() *MatchingServicePollForActivityTaskResult {
  return &MatchingServicePollForActivityTaskResult{}
}

var MatchingServicePollForActivityTaskResult_Success_DEFAULT *shared.PollForActivityTaskResponse
func (p *MatchingServicePollForActivityTaskResult) GetSuccess() *shared.PollForActivityTaskResponse {
  if !p.IsSetSuccess() {
    return MatchingServicePollForActivityTaskResult_Success_DEFAULT
  }
return p.Success
}
var MatchingServicePollForActivityTaskResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *MatchingServicePollForActivityTaskResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return MatchingServicePollForActivityTaskResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var MatchingServicePollForActivityTaskResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MatchingServicePollForActivityTaskResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MatchingServicePollForActivityTaskResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MatchingServicePollForActivityTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MatchingServicePollForActivityTaskResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *MatchingServicePollForActivityTaskResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MatchingServicePollForActivityTaskResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchingServicePollForActivityTaskResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.PollForActivityTaskResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MatchingServicePollForActivityTaskResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *MatchingServicePollForActivityTaskResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MatchingServicePollForActivityTaskResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForActivityTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchingServicePollForActivityTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MatchingServicePollForActivityTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *MatchingServicePollForActivityTaskResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MatchingServicePollForActivityTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchingServicePollForActivityTaskResult(%+v)", *p)
}

// Attributes:
//  - AddRequest
type MatchingServiceAddDecisionTaskArgs struct {
  AddRequest *AddDecisionTaskRequest `thrift:"addRequest,1" db:"addRequest" json:"addRequest"`
}

func NewMatchingServiceAddDecisionTaskArgs() *MatchingServiceAddDecisionTaskArgs {
  return &MatchingServiceAddDecisionTaskArgs{}
}

var MatchingServiceAddDecisionTaskArgs_AddRequest_DEFAULT *AddDecisionTaskRequest
func (p *MatchingServiceAddDecisionTaskArgs) GetAddRequest() *AddDecisionTaskRequest {
  if !p.IsSetAddRequest() {
    return MatchingServiceAddDecisionTaskArgs_AddRequest_DEFAULT
  }
return p.AddRequest
}
func (p *MatchingServiceAddDecisionTaskArgs) IsSetAddRequest() bool {
  return p.AddRequest != nil
}

func (p *MatchingServiceAddDecisionTaskArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchingServiceAddDecisionTaskArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AddRequest = &AddDecisionTaskRequest{}
  if err := p.AddRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddRequest), err)
  }
  return nil
}

func (p *MatchingServiceAddDecisionTaskArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddDecisionTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchingServiceAddDecisionTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addRequest: ", p), err) }
  if err := p.AddRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addRequest: ", p), err) }
  return err
}

func (p *MatchingServiceAddDecisionTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchingServiceAddDecisionTaskArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - ServiceBusyError
type MatchingServiceAddDecisionTaskResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  ServiceBusyError *shared.ServiceBusyError `thrift:"serviceBusyError,3" db:"serviceBusyError" json:"serviceBusyError,omitempty"`
}

func NewMatchingServiceAddDecisionTaskResult() *MatchingServiceAddDecisionTaskResult {
  return &MatchingServiceAddDecisionTaskResult{}
}

var MatchingServiceAddDecisionTaskResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *MatchingServiceAddDecisionTaskResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return MatchingServiceAddDecisionTaskResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var MatchingServiceAddDecisionTaskResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MatchingServiceAddDecisionTaskResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MatchingServiceAddDecisionTaskResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var MatchingServiceAddDecisionTaskResult_ServiceBusyError_DEFAULT *shared.ServiceBusyError
func (p *MatchingServiceAddDecisionTaskResult) GetServiceBusyError() *shared.ServiceBusyError {
  if !p.IsSetServiceBusyError() {
    return MatchingServiceAddDecisionTaskResult_ServiceBusyError_DEFAULT
  }
return p.ServiceBusyError
}
func (p *MatchingServiceAddDecisionTaskResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *MatchingServiceAddDecisionTaskResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MatchingServiceAddDecisionTaskResult) IsSetServiceBusyError() bool {
  return p.ServiceBusyError != nil
}

func (p *MatchingServiceAddDecisionTaskResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchingServiceAddDecisionTaskResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *MatchingServiceAddDecisionTaskResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MatchingServiceAddDecisionTaskResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServiceBusyError = &shared.ServiceBusyError{}
  if err := p.ServiceBusyError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceBusyError), err)
  }
  return nil
}

func (p *MatchingServiceAddDecisionTaskResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddDecisionTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchingServiceAddDecisionTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *MatchingServiceAddDecisionTaskResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MatchingServiceAddDecisionTaskResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceBusyError() {
    if err := oprot.WriteFieldBegin("serviceBusyError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceBusyError: ", p), err) }
    if err := p.ServiceBusyError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceBusyError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceBusyError: ", p), err) }
  }
  return err
}

func (p *MatchingServiceAddDecisionTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchingServiceAddDecisionTaskResult(%+v)", *p)
}

// Attributes:
//  - AddRequest
type MatchingServiceAddActivityTaskArgs struct {
  AddRequest *AddActivityTaskRequest `thrift:"addRequest,1" db:"addRequest" json:"addRequest"`
}

func NewMatchingServiceAddActivityTaskArgs() *MatchingServiceAddActivityTaskArgs {
  return &MatchingServiceAddActivityTaskArgs{}
}

var MatchingServiceAddActivityTaskArgs_AddRequest_DEFAULT *AddActivityTaskRequest
func (p *MatchingServiceAddActivityTaskArgs) GetAddRequest() *AddActivityTaskRequest {
  if !p.IsSetAddRequest() {
    return MatchingServiceAddActivityTaskArgs_AddRequest_DEFAULT
  }
return p.AddRequest
}
func (p *MatchingServiceAddActivityTaskArgs) IsSetAddRequest() bool {
  return p.AddRequest != nil
}

func (p *MatchingServiceAddActivityTaskArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchingServiceAddActivityTaskArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AddRequest = &AddActivityTaskRequest{}
  if err := p.AddRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddRequest), err)
  }
  return nil
}

func (p *MatchingServiceAddActivityTaskArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddActivityTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchingServiceAddActivityTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addRequest: ", p), err) }
  if err := p.AddRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addRequest: ", p), err) }
  return err
}

func (p *MatchingServiceAddActivityTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchingServiceAddActivityTaskArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - ServiceBusyError
type MatchingServiceAddActivityTaskResult struct {
  BadRequestError *shared.BadRequestError `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  ServiceBusyError *shared.ServiceBusyError `thrift:"serviceBusyError,3" db:"serviceBusyError" json:"serviceBusyError,omitempty"`
}

func NewMatchingServiceAddActivityTaskResult() *MatchingServiceAddActivityTaskResult {
  return &MatchingServiceAddActivityTaskResult{}
}

var MatchingServiceAddActivityTaskResult_BadRequestError_DEFAULT *shared.BadRequestError
func (p *MatchingServiceAddActivityTaskResult) GetBadRequestError() *shared.BadRequestError {
  if !p.IsSetBadRequestError() {
    return MatchingServiceAddActivityTaskResult_BadRequestError_DEFAULT
  }
return p.BadRequestError
}
var MatchingServiceAddActivityTaskResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MatchingServiceAddActivityTaskResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MatchingServiceAddActivityTaskResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var MatchingServiceAddActivityTaskResult_ServiceBusyError_DEFAULT *shared.ServiceBusyError
func (p *MatchingServiceAddActivityTaskResult) GetServiceBusyError() *shared.ServiceBusyError {
  if !p.IsSetServiceBusyError() {
    return MatchingServiceAddActivityTaskResult_ServiceBusyError_DEFAULT
  }
return p.ServiceBusyError
}
func (p *MatchingServiceAddActivityTaskResult) IsSetBadRequestError() bool {
  return p.BadRequestError != nil
}

func (p *MatchingServiceAddActivityTaskResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MatchingServiceAddActivityTaskResult) IsSetServiceBusyError() bool {
  return p.ServiceBusyError != nil
}

func (p *MatchingServiceAddActivityTaskResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MatchingServiceAddActivityTaskResult)  ReadField1(iprot thrift.TProtocol) error {
  p.BadRequestError = &shared.BadRequestError{}
  if err := p.BadRequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
  }
  return nil
}

func (p *MatchingServiceAddActivityTaskResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MatchingServiceAddActivityTaskResult)  ReadField3(iprot thrift.TProtocol) error {
  p.ServiceBusyError = &shared.ServiceBusyError{}
  if err := p.ServiceBusyError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceBusyError), err)
  }
  return nil
}

func (p *MatchingServiceAddActivityTaskResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddActivityTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MatchingServiceAddActivityTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBadRequestError() {
    if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err) }
    if err := p.BadRequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err) }
  }
  return err
}

func (p *MatchingServiceAddActivityTaskResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MatchingServiceAddActivityTaskResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceBusyError() {
    if err := oprot.WriteFieldBegin("serviceBusyError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceBusyError: ", p), err) }
    if err := p.ServiceBusyError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceBusyError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceBusyError: ", p), err) }
  }
  return err
}

func (p *MatchingServiceAddActivityTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MatchingServiceAddActivityTaskResult(%+v)", *p)
}


